
ProjetoTetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006178  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08006284  08006284  00007284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b8  080064b8  000082b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080064b8  080064b8  000082b8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080064b8  080064b8  000082b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064b8  080064b8  000074b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064bc  080064bc  000074bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  080064c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  200002b8  08006778  000082b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000804  200006e4  08006778  000086e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000082b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1a7  00000000  00000000  000082e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e42  00000000  00000000  00015488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  000182d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bac  00000000  00000000  00019220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa3c  00000000  00000000  00019dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e6a  00000000  00000000  00034808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009018f  00000000  00000000  00046672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049dc  00000000  00000000  000d6844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000db220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002b8 	.word	0x200002b8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800626c 	.word	0x0800626c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002bc 	.word	0x200002bc
 8000148:	0800626c 	.word	0x0800626c

0800014c <salvar_na_flash>:
// Prototipos
void ler_da_flash(SaveData *data);
void salvar_na_flash(const SaveData *data);

void salvar_na_flash(const SaveData *data)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b08a      	sub	sp, #40	@ 0x28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8000154:	f003 f8fc 	bl	8003350 <HAL_FLASH_Unlock>

    // Apaga a página onde os dados estão
    FLASH_EraseInitTypeDef erase;
    uint32_t PageError;

    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000158:	2300      	movs	r3, #0
 800015a:	613b      	str	r3, [r7, #16]
    erase.PageAddress = FLASH_SAVE_ADDR;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <salvar_na_flash+0x74>)
 800015e:	61bb      	str	r3, [r7, #24]
    erase.NbPages = 1;
 8000160:	2301      	movs	r3, #1
 8000162:	61fb      	str	r3, [r7, #28]

    HAL_FLASHEx_Erase(&erase, &PageError);
 8000164:	f107 020c 	add.w	r2, r7, #12
 8000168:	f107 0310 	add.w	r3, r7, #16
 800016c:	4611      	mov	r1, r2
 800016e:	4618      	mov	r0, r3
 8000170:	f003 f9d6 	bl	8003520 <HAL_FLASHEx_Erase>

    // Grava os dados (palavra por palavra)
    const uint16_t *p = (const uint16_t *)data;
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < (sizeof(SaveData) + 1) / 2; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	627b      	str	r3, [r7, #36]	@ 0x24
 800017c:	e016      	b.n	80001ac <salvar_na_flash+0x60>
    {
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_SAVE_ADDR + (i * 2), p[i]);
 800017e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000180:	f103 6380 	add.w	r3, r3, #67108864	@ 0x4000000
 8000184:	f503 43fc 	add.w	r3, r3, #32256	@ 0x7e00
 8000188:	0059      	lsls	r1, r3, #1
 800018a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800018c:	005b      	lsls	r3, r3, #1
 800018e:	6a3a      	ldr	r2, [r7, #32]
 8000190:	4413      	add	r3, r2
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	b29b      	uxth	r3, r3
 8000196:	2200      	movs	r2, #0
 8000198:	461c      	mov	r4, r3
 800019a:	4615      	mov	r5, r2
 800019c:	4622      	mov	r2, r4
 800019e:	462b      	mov	r3, r5
 80001a0:	2001      	movs	r0, #1
 80001a2:	f003 f865 	bl	8003270 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < (sizeof(SaveData) + 1) / 2; i++)
 80001a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80001a8:	3301      	adds	r3, #1
 80001aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80001ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80001ae:	2b03      	cmp	r3, #3
 80001b0:	d9e5      	bls.n	800017e <salvar_na_flash+0x32>
    }

    HAL_FLASH_Lock();
 80001b2:	f003 f8f3 	bl	800339c <HAL_FLASH_Lock>
}
 80001b6:	bf00      	nop
 80001b8:	3728      	adds	r7, #40	@ 0x28
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	0800fc00 	.word	0x0800fc00

080001c4 <ler_da_flash>:

void ler_da_flash(SaveData *data)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
    memcpy(data, (void *)FLASH_SAVE_ADDR, sizeof(SaveData));
 80001cc:	2208      	movs	r2, #8
 80001ce:	4904      	ldr	r1, [pc, #16]	@ (80001e0 <ler_da_flash+0x1c>)
 80001d0:	6878      	ldr	r0, [r7, #4]
 80001d2:	f005 f8cc 	bl	800536e <memcpy>
}
 80001d6:	bf00      	nop
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	0800fc00 	.word	0x0800fc00

080001e4 <inicializarEEPROM>:

void inicializarEEPROM(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
    ler_da_flash(&dados);
 80001e8:	480d      	ldr	r0, [pc, #52]	@ (8000220 <inicializarEEPROM+0x3c>)
 80001ea:	f7ff ffeb 	bl	80001c4 <ler_da_flash>

    // Se memória não inicializada, setar valores padrão
    if (dados.nomeRecorde[0] == 0xFF || dados.pontuacaoRecorde == 0xFFFF)
 80001ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000220 <inicializarEEPROM+0x3c>)
 80001f0:	78db      	ldrb	r3, [r3, #3]
 80001f2:	2bff      	cmp	r3, #255	@ 0xff
 80001f4:	d005      	beq.n	8000202 <inicializarEEPROM+0x1e>
 80001f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000220 <inicializarEEPROM+0x3c>)
 80001f8:	88db      	ldrh	r3, [r3, #6]
 80001fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80001fe:	4293      	cmp	r3, r2
 8000200:	d10c      	bne.n	800021c <inicializarEEPROM+0x38>
    {
        strcpy(dados.nomeAtual, "___");
 8000202:	4b07      	ldr	r3, [pc, #28]	@ (8000220 <inicializarEEPROM+0x3c>)
 8000204:	4a07      	ldr	r2, [pc, #28]	@ (8000224 <inicializarEEPROM+0x40>)
 8000206:	601a      	str	r2, [r3, #0]
        strcpy(dados.nomeRecorde, "___");
 8000208:	4b07      	ldr	r3, [pc, #28]	@ (8000228 <inicializarEEPROM+0x44>)
 800020a:	4a08      	ldr	r2, [pc, #32]	@ (800022c <inicializarEEPROM+0x48>)
 800020c:	6810      	ldr	r0, [r2, #0]
 800020e:	6018      	str	r0, [r3, #0]
        dados.pontuacaoRecorde = 0;
 8000210:	4b03      	ldr	r3, [pc, #12]	@ (8000220 <inicializarEEPROM+0x3c>)
 8000212:	2200      	movs	r2, #0
 8000214:	80da      	strh	r2, [r3, #6]
        salvar_na_flash(&dados);
 8000216:	4802      	ldr	r0, [pc, #8]	@ (8000220 <inicializarEEPROM+0x3c>)
 8000218:	f7ff ff98 	bl	800014c <salvar_na_flash>
    }
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	200002d4 	.word	0x200002d4
 8000224:	005f5f5f 	.word	0x005f5f5f
 8000228:	200002d7 	.word	0x200002d7
 800022c:	08006284 	.word	0x08006284

08000230 <tentarSalvarRecorde>:
    memcpy(dados.nomeAtual, novoNome, 3);
    salvar_na_flash(&dados);
}

void tentarSalvarRecorde(uint16_t novaPontuacao)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	80fb      	strh	r3, [r7, #6]
    ler_da_flash(&dados);
 800023a:	480c      	ldr	r0, [pc, #48]	@ (800026c <tentarSalvarRecorde+0x3c>)
 800023c:	f7ff ffc2 	bl	80001c4 <ler_da_flash>
    if (novaPontuacao > dados.pontuacaoRecorde)
 8000240:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <tentarSalvarRecorde+0x3c>)
 8000242:	88db      	ldrh	r3, [r3, #6]
 8000244:	88fa      	ldrh	r2, [r7, #6]
 8000246:	429a      	cmp	r2, r3
 8000248:	d90c      	bls.n	8000264 <tentarSalvarRecorde+0x34>
    {
        dados.pontuacaoRecorde = novaPontuacao;
 800024a:	4a08      	ldr	r2, [pc, #32]	@ (800026c <tentarSalvarRecorde+0x3c>)
 800024c:	88fb      	ldrh	r3, [r7, #6]
 800024e:	80d3      	strh	r3, [r2, #6]
        memcpy(dados.nomeRecorde, dados.nomeAtual, 3);
 8000250:	4b06      	ldr	r3, [pc, #24]	@ (800026c <tentarSalvarRecorde+0x3c>)
 8000252:	4a06      	ldr	r2, [pc, #24]	@ (800026c <tentarSalvarRecorde+0x3c>)
 8000254:	3303      	adds	r3, #3
 8000256:	8811      	ldrh	r1, [r2, #0]
 8000258:	7892      	ldrb	r2, [r2, #2]
 800025a:	8019      	strh	r1, [r3, #0]
 800025c:	709a      	strb	r2, [r3, #2]
        salvar_na_flash(&dados);
 800025e:	4803      	ldr	r0, [pc, #12]	@ (800026c <tentarSalvarRecorde+0x3c>)
 8000260:	f7ff ff74 	bl	800014c <salvar_na_flash>
    }
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200002d4 	.word	0x200002d4

08000270 <get_pontuacao_EEPROM>:

uint16_t get_pontuacao_EEPROM(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
    ler_da_flash(&dados);
 8000274:	4803      	ldr	r0, [pc, #12]	@ (8000284 <get_pontuacao_EEPROM+0x14>)
 8000276:	f7ff ffa5 	bl	80001c4 <ler_da_flash>
    return dados.pontuacaoRecorde;
 800027a:	4b02      	ldr	r3, [pc, #8]	@ (8000284 <get_pontuacao_EEPROM+0x14>)
 800027c:	88db      	ldrh	r3, [r3, #6]
}
 800027e:	4618      	mov	r0, r3
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	200002d4 	.word	0x200002d4

08000288 <get_nome_recorde>:

void get_nome_recorde(char *nome)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
    ler_da_flash(&dados);
 8000290:	4806      	ldr	r0, [pc, #24]	@ (80002ac <get_nome_recorde+0x24>)
 8000292:	f7ff ff97 	bl	80001c4 <ler_da_flash>
    memcpy(nome, dados.nomeRecorde, 3);
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	4b04      	ldr	r3, [pc, #16]	@ (80002ac <get_nome_recorde+0x24>)
 800029a:	3303      	adds	r3, #3
 800029c:	8819      	ldrh	r1, [r3, #0]
 800029e:	789b      	ldrb	r3, [r3, #2]
 80002a0:	8011      	strh	r1, [r2, #0]
 80002a2:	7093      	strb	r3, [r2, #2]
 80002a4:	bf00      	nop
 80002a6:	3708      	adds	r7, #8
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	200002d4 	.word	0x200002d4

080002b0 <lcd_Task>:
char nomeDigitado[4] = {'_', '_', '_', '\0'};
uint8_t positionYSubMenu3 = 0;
uint8_t positionXSubMenu3 = 0;

void lcd_Task(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    // 4 estados na máquina de estados

    switch (MenuLCD)
 80002b4:	4b3d      	ldr	r3, [pc, #244]	@ (80003ac <lcd_Task+0xfc>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b08      	cmp	r3, #8
 80002ba:	d815      	bhi.n	80002e8 <lcd_Task+0x38>
 80002bc:	a201      	add	r2, pc, #4	@ (adr r2, 80002c4 <lcd_Task+0x14>)
 80002be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c2:	bf00      	nop
 80002c4:	080002ef 	.word	0x080002ef
 80002c8:	08000301 	.word	0x08000301
 80002cc:	08000313 	.word	0x08000313
 80002d0:	08000325 	.word	0x08000325
 80002d4:	080003a7 	.word	0x080003a7
 80002d8:	08000337 	.word	0x08000337
 80002dc:	08000371 	.word	0x08000371
 80002e0:	08000383 	.word	0x08000383
 80002e4:	08000395 	.word	0x08000395
    {
    default:
        MenuLCD = MENU_TELA1;
 80002e8:	4b30      	ldr	r3, [pc, #192]	@ (80003ac <lcd_Task+0xfc>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]
    case MENU_TELA1:
        change_Message(0, ">>Start Game");
 80002ee:	4930      	ldr	r1, [pc, #192]	@ (80003b0 <lcd_Task+0x100>)
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 fd3f 	bl	8000d74 <change_Message>
        change_Message(1, "Recorde Atual");
 80002f6:	492f      	ldr	r1, [pc, #188]	@ (80003b4 <lcd_Task+0x104>)
 80002f8:	2001      	movs	r0, #1
 80002fa:	f000 fd3b 	bl	8000d74 <change_Message>
        break;
 80002fe:	e053      	b.n	80003a8 <lcd_Task+0xf8>
    case MENU_TELA2:
        change_Message(0, ">>Recorde Atual");
 8000300:	492d      	ldr	r1, [pc, #180]	@ (80003b8 <lcd_Task+0x108>)
 8000302:	2000      	movs	r0, #0
 8000304:	f000 fd36 	bl	8000d74 <change_Message>
        change_Message(1, "Gravar Nome");
 8000308:	492c      	ldr	r1, [pc, #176]	@ (80003bc <lcd_Task+0x10c>)
 800030a:	2001      	movs	r0, #1
 800030c:	f000 fd32 	bl	8000d74 <change_Message>
        break;
 8000310:	e04a      	b.n	80003a8 <lcd_Task+0xf8>
    case MENU_TELA3:
        change_Message(0, ">>Gravar Nome");
 8000312:	492b      	ldr	r1, [pc, #172]	@ (80003c0 <lcd_Task+0x110>)
 8000314:	2000      	movs	r0, #0
 8000316:	f000 fd2d 	bl	8000d74 <change_Message>
        change_Message(1, "Limpar Recorde");
 800031a:	492a      	ldr	r1, [pc, #168]	@ (80003c4 <lcd_Task+0x114>)
 800031c:	2001      	movs	r0, #1
 800031e:	f000 fd29 	bl	8000d74 <change_Message>
        break;
 8000322:	e041      	b.n	80003a8 <lcd_Task+0xf8>
    case MENU_TELA4:
        change_Message(0, ">>Limpar Recorde");
 8000324:	4928      	ldr	r1, [pc, #160]	@ (80003c8 <lcd_Task+0x118>)
 8000326:	2000      	movs	r0, #0
 8000328:	f000 fd24 	bl	8000d74 <change_Message>
        change_Message(1, "Start Game");
 800032c:	4927      	ldr	r1, [pc, #156]	@ (80003cc <lcd_Task+0x11c>)
 800032e:	2001      	movs	r0, #1
 8000330:	f000 fd20 	bl	8000d74 <change_Message>
        break;
 8000334:	e038      	b.n	80003a8 <lcd_Task+0xf8>
        //        change_Message(0, linhaTeste);
        //        snprintf(linhaTestes2, sizeof(linhaTestes2), "Cima:%u Baixo:%u ", getCima(), getBaixo());   // %4u → valor sem sinal com 4 dígitos (ajustável)
        //        change_Message(1, linhaTestes2);
        break;
    case SUB_MENU1:
        snprintf(linha, sizeof(linha), "Proxima Peca:  ");
 8000336:	4a26      	ldr	r2, [pc, #152]	@ (80003d0 <lcd_Task+0x120>)
 8000338:	2110      	movs	r1, #16
 800033a:	4826      	ldr	r0, [pc, #152]	@ (80003d4 <lcd_Task+0x124>)
 800033c:	f004 fe64 	bl	8005008 <sniprintf>
        linha[15] = PecasLCD[get_next_piece()];
 8000340:	f001 ff96 	bl	8002270 <get_next_piece>
 8000344:	4603      	mov	r3, r0
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <lcd_Task+0x128>)
 8000348:	5cd2      	ldrb	r2, [r2, r3]
 800034a:	4b22      	ldr	r3, [pc, #136]	@ (80003d4 <lcd_Task+0x124>)
 800034c:	73da      	strb	r2, [r3, #15]
        change_Message(0, linha);
 800034e:	4921      	ldr	r1, [pc, #132]	@ (80003d4 <lcd_Task+0x124>)
 8000350:	2000      	movs	r0, #0
 8000352:	f000 fd0f 	bl	8000d74 <change_Message>
        sprintf(linha2, "Pont:%5u ", get_pontuacao()); // %4u → valor sem sinal com 4 dígitos (ajustável)
 8000356:	f002 f979 	bl	800264c <get_pontuacao>
 800035a:	4603      	mov	r3, r0
 800035c:	461a      	mov	r2, r3
 800035e:	491f      	ldr	r1, [pc, #124]	@ (80003dc <lcd_Task+0x12c>)
 8000360:	481f      	ldr	r0, [pc, #124]	@ (80003e0 <lcd_Task+0x130>)
 8000362:	f004 fe87 	bl	8005074 <siprintf>
        change_Message(1, linha2);
 8000366:	491e      	ldr	r1, [pc, #120]	@ (80003e0 <lcd_Task+0x130>)
 8000368:	2001      	movs	r0, #1
 800036a:	f000 fd03 	bl	8000d74 <change_Message>
        break;
 800036e:	e01b      	b.n	80003a8 <lcd_Task+0xf8>

    case SUB_MENU2:
        change_Message(0, linha);
 8000370:	4918      	ldr	r1, [pc, #96]	@ (80003d4 <lcd_Task+0x124>)
 8000372:	2000      	movs	r0, #0
 8000374:	f000 fcfe 	bl	8000d74 <change_Message>
        change_Message(1, linha2);
 8000378:	4919      	ldr	r1, [pc, #100]	@ (80003e0 <lcd_Task+0x130>)
 800037a:	2001      	movs	r0, #1
 800037c:	f000 fcfa 	bl	8000d74 <change_Message>
        break;
 8000380:	e012      	b.n	80003a8 <lcd_Task+0xf8>
    case SUB_MENU3:
        change_Message(0, linha);
 8000382:	4914      	ldr	r1, [pc, #80]	@ (80003d4 <lcd_Task+0x124>)
 8000384:	2000      	movs	r0, #0
 8000386:	f000 fcf5 	bl	8000d74 <change_Message>
        change_Message(1, linha2);
 800038a:	4915      	ldr	r1, [pc, #84]	@ (80003e0 <lcd_Task+0x130>)
 800038c:	2001      	movs	r0, #1
 800038e:	f000 fcf1 	bl	8000d74 <change_Message>
        break;
 8000392:	e009      	b.n	80003a8 <lcd_Task+0xf8>
    case SUB_MENU4:
        change_Message(0, linha);
 8000394:	490f      	ldr	r1, [pc, #60]	@ (80003d4 <lcd_Task+0x124>)
 8000396:	2000      	movs	r0, #0
 8000398:	f000 fcec 	bl	8000d74 <change_Message>
        change_Message(1, linha2);
 800039c:	4910      	ldr	r1, [pc, #64]	@ (80003e0 <lcd_Task+0x130>)
 800039e:	2001      	movs	r0, #1
 80003a0:	f000 fce8 	bl	8000d74 <change_Message>
        break;
 80003a4:	e000      	b.n	80003a8 <lcd_Task+0xf8>
        break;
 80003a6:	bf00      	nop
    }
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	200002dc 	.word	0x200002dc
 80003b0:	08006288 	.word	0x08006288
 80003b4:	08006298 	.word	0x08006298
 80003b8:	080062a8 	.word	0x080062a8
 80003bc:	080062b8 	.word	0x080062b8
 80003c0:	080062c4 	.word	0x080062c4
 80003c4:	080062d4 	.word	0x080062d4
 80003c8:	080062e4 	.word	0x080062e4
 80003cc:	080062f8 	.word	0x080062f8
 80003d0:	08006304 	.word	0x08006304
 80003d4:	200002e0 	.word	0x200002e0
 80003d8:	20000030 	.word	0x20000030
 80003dc:	08006314 	.word	0x08006314
 80003e0:	200002f0 	.word	0x200002f0

080003e4 <changeLCDScreen>:

void changeLCDScreen(EstadoMenu novaTela)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
    // valide que novaTela é um estado valido antes de mudar
    if (novaTela >= MENU_TELA1 && novaTela < MENU_MAX)
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	2b08      	cmp	r3, #8
 80003f2:	d806      	bhi.n	8000402 <changeLCDScreen+0x1e>
    {
        MenuLCD = novaTela;
 80003f4:	4a08      	ldr	r2, [pc, #32]	@ (8000418 <changeLCDScreen+0x34>)
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	7013      	strb	r3, [r2, #0]
        estadoMenu = novaTela;
 80003fa:	4a08      	ldr	r2, [pc, #32]	@ (800041c <changeLCDScreen+0x38>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	7013      	strb	r3, [r2, #0]
    else
    {
        MenuLCD = MENU_TELA1; // Reset to default state if invalid
        estadoMenu = MENU_TELA1;
    }
}
 8000400:	e005      	b.n	800040e <changeLCDScreen+0x2a>
        MenuLCD = MENU_TELA1; // Reset to default state if invalid
 8000402:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <changeLCDScreen+0x34>)
 8000404:	2200      	movs	r2, #0
 8000406:	701a      	strb	r2, [r3, #0]
        estadoMenu = MENU_TELA1;
 8000408:	4b04      	ldr	r3, [pc, #16]	@ (800041c <changeLCDScreen+0x38>)
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	200002dc 	.word	0x200002dc
 800041c:	2000049a 	.word	0x2000049a

08000420 <initLCD>:

void initLCD(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
    initialize_LCD(); // Initialize the LCD
 8000424:	f000 fd86 	bl	8000f34 <initialize_LCD>
    lcd_create_char(1, pieceO);
 8000428:	490c      	ldr	r1, [pc, #48]	@ (800045c <initLCD+0x3c>)
 800042a:	2001      	movs	r0, #1
 800042c:	f000 fdb3 	bl	8000f96 <lcd_create_char>
    lcd_create_char(2, pieceL);
 8000430:	490b      	ldr	r1, [pc, #44]	@ (8000460 <initLCD+0x40>)
 8000432:	2002      	movs	r0, #2
 8000434:	f000 fdaf 	bl	8000f96 <lcd_create_char>
    lcd_create_char(3, pieceS);
 8000438:	490a      	ldr	r1, [pc, #40]	@ (8000464 <initLCD+0x44>)
 800043a:	2003      	movs	r0, #3
 800043c:	f000 fdab 	bl	8000f96 <lcd_create_char>
    lcd_create_char(4, pieceZ);
 8000440:	4909      	ldr	r1, [pc, #36]	@ (8000468 <initLCD+0x48>)
 8000442:	2004      	movs	r0, #4
 8000444:	f000 fda7 	bl	8000f96 <lcd_create_char>
    lcd_create_char(5, pieceT);
 8000448:	4908      	ldr	r1, [pc, #32]	@ (800046c <initLCD+0x4c>)
 800044a:	2005      	movs	r0, #5
 800044c:	f000 fda3 	bl	8000f96 <lcd_create_char>
    lcd_create_char(6, pieceJ);
 8000450:	4907      	ldr	r1, [pc, #28]	@ (8000470 <initLCD+0x50>)
 8000452:	2006      	movs	r0, #6
 8000454:	f000 fd9f 	bl	8000f96 <lcd_create_char>
}
 8000458:	bf00      	nop
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000028 	.word	0x20000028
 8000460:	20000000 	.word	0x20000000
 8000464:	20000018 	.word	0x20000018
 8000468:	20000010 	.word	0x20000010
 800046c:	20000020 	.word	0x20000020
 8000470:	20000008 	.word	0x20000008

08000474 <updateDataEEPROMLCDMenu2>:

void updateDataEEPROMLCDMenu2(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
    get_nome_recorde(nomeRecorde);              // Get the record name from EEPROM
 8000478:	480b      	ldr	r0, [pc, #44]	@ (80004a8 <updateDataEEPROMLCDMenu2+0x34>)
 800047a:	f7ff ff05 	bl	8000288 <get_nome_recorde>
    recordeAtual = get_pontuacao_EEPROM();      // Get the current record score
 800047e:	f7ff fef7 	bl	8000270 <get_pontuacao_EEPROM>
 8000482:	4603      	mov	r3, r0
 8000484:	461a      	mov	r2, r3
 8000486:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <updateDataEEPROMLCDMenu2+0x38>)
 8000488:	801a      	strh	r2, [r3, #0]
    sprintf(linha, "Nome: %s", nomeRecorde);    // %3s → string com 3 caracteres
 800048a:	4a07      	ldr	r2, [pc, #28]	@ (80004a8 <updateDataEEPROMLCDMenu2+0x34>)
 800048c:	4908      	ldr	r1, [pc, #32]	@ (80004b0 <updateDataEEPROMLCDMenu2+0x3c>)
 800048e:	4809      	ldr	r0, [pc, #36]	@ (80004b4 <updateDataEEPROMLCDMenu2+0x40>)
 8000490:	f004 fdf0 	bl	8005074 <siprintf>
    sprintf(linha2, "Pont:%5u ", recordeAtual); // %4u → valor sem sinal com 4 dígitos (ajustável)
 8000494:	4b05      	ldr	r3, [pc, #20]	@ (80004ac <updateDataEEPROMLCDMenu2+0x38>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	461a      	mov	r2, r3
 800049a:	4907      	ldr	r1, [pc, #28]	@ (80004b8 <updateDataEEPROMLCDMenu2+0x44>)
 800049c:	4807      	ldr	r0, [pc, #28]	@ (80004bc <updateDataEEPROMLCDMenu2+0x48>)
 800049e:	f004 fde9 	bl	8005074 <siprintf>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000300 	.word	0x20000300
 80004ac:	20000304 	.word	0x20000304
 80004b0:	08006320 	.word	0x08006320
 80004b4:	200002e0 	.word	0x200002e0
 80004b8:	08006314 	.word	0x08006314
 80004bc:	200002f0 	.word	0x200002f0

080004c0 <updateDataEEPROMLCDMenu3>:

void updateDataEEPROMLCDMenu3(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
    // char nomeTeste[4] = "ARH";
    // memcpy(dados.nomeAtual, nomeTeste, 3);
    // salvar_na_flash(&dados);

    nomeDigitado[0] = '_';
 80004c4:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <updateDataEEPROMLCDMenu3+0x30>)
 80004c6:	225f      	movs	r2, #95	@ 0x5f
 80004c8:	701a      	strb	r2, [r3, #0]
    nomeDigitado[1] = '_';
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <updateDataEEPROMLCDMenu3+0x30>)
 80004cc:	225f      	movs	r2, #95	@ 0x5f
 80004ce:	705a      	strb	r2, [r3, #1]
    nomeDigitado[2] = '_';
 80004d0:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <updateDataEEPROMLCDMenu3+0x30>)
 80004d2:	225f      	movs	r2, #95	@ 0x5f
 80004d4:	709a      	strb	r2, [r3, #2]

    strcpy(linha, letrasLinha1);
 80004d6:	4907      	ldr	r1, [pc, #28]	@ (80004f4 <updateDataEEPROMLCDMenu3+0x34>)
 80004d8:	4807      	ldr	r0, [pc, #28]	@ (80004f8 <updateDataEEPROMLCDMenu3+0x38>)
 80004da:	f004 ff40 	bl	800535e <strcpy>
    strcpy(linha2, letrasLinha2);
 80004de:	4907      	ldr	r1, [pc, #28]	@ (80004fc <updateDataEEPROMLCDMenu3+0x3c>)
 80004e0:	4807      	ldr	r0, [pc, #28]	@ (8000500 <updateDataEEPROMLCDMenu3+0x40>)
 80004e2:	f004 ff3c 	bl	800535e <strcpy>
    lcd_cursor_on();
 80004e6:	f000 fd7c 	bl	8000fe2 <lcd_cursor_on>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000060 	.word	0x20000060
 80004f4:	20000038 	.word	0x20000038
 80004f8:	200002e0 	.word	0x200002e0
 80004fc:	2000004c 	.word	0x2000004c
 8000500:	200002f0 	.word	0x200002f0

08000504 <updateDataEEPROMLCDMenu4>:

void updateDataEEPROMLCDMenu4(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
    strcpy(dados.nomeRecorde, "___");
 8000508:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <updateDataEEPROMLCDMenu4+0x34>)
 800050a:	4a0c      	ldr	r2, [pc, #48]	@ (800053c <updateDataEEPROMLCDMenu4+0x38>)
 800050c:	6810      	ldr	r0, [r2, #0]
 800050e:	6018      	str	r0, [r3, #0]
    dados.pontuacaoRecorde = 0;
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <updateDataEEPROMLCDMenu4+0x3c>)
 8000512:	2200      	movs	r2, #0
 8000514:	80da      	strh	r2, [r3, #6]
    salvar_na_flash(&dados);
 8000516:	480a      	ldr	r0, [pc, #40]	@ (8000540 <updateDataEEPROMLCDMenu4+0x3c>)
 8000518:	f7ff fe18 	bl	800014c <salvar_na_flash>
    sprintf(linha, "Nome: %s", dados.nomeRecorde);        // %3s → string com 3 caracteres
 800051c:	4a06      	ldr	r2, [pc, #24]	@ (8000538 <updateDataEEPROMLCDMenu4+0x34>)
 800051e:	4909      	ldr	r1, [pc, #36]	@ (8000544 <updateDataEEPROMLCDMenu4+0x40>)
 8000520:	4809      	ldr	r0, [pc, #36]	@ (8000548 <updateDataEEPROMLCDMenu4+0x44>)
 8000522:	f004 fda7 	bl	8005074 <siprintf>
    sprintf(linha2, "Pont:%5u ", dados.pontuacaoRecorde); // %4u → valor sem sinal com 4 dígitos (ajustável)
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <updateDataEEPROMLCDMenu4+0x3c>)
 8000528:	88db      	ldrh	r3, [r3, #6]
 800052a:	461a      	mov	r2, r3
 800052c:	4907      	ldr	r1, [pc, #28]	@ (800054c <updateDataEEPROMLCDMenu4+0x48>)
 800052e:	4808      	ldr	r0, [pc, #32]	@ (8000550 <updateDataEEPROMLCDMenu4+0x4c>)
 8000530:	f004 fda0 	bl	8005074 <siprintf>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200002d7 	.word	0x200002d7
 800053c:	0800632c 	.word	0x0800632c
 8000540:	200002d4 	.word	0x200002d4
 8000544:	08006320 	.word	0x08006320
 8000548:	200002e0 	.word	0x200002e0
 800054c:	08006314 	.word	0x08006314
 8000550:	200002f0 	.word	0x200002f0

08000554 <changeName>:

void changeName(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
    if (getCima() && positionYSubMenu3 > 0)
 8000558:	f000 fb44 	bl	8000be4 <getCima>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d00b      	beq.n	800057a <changeName+0x26>
 8000562:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <changeName+0x8c>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d007      	beq.n	800057a <changeName+0x26>
    {
        positionYSubMenu3--;
 800056a:	4b1d      	ldr	r3, [pc, #116]	@ (80005e0 <changeName+0x8c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	3b01      	subs	r3, #1
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b1b      	ldr	r3, [pc, #108]	@ (80005e0 <changeName+0x8c>)
 8000574:	701a      	strb	r2, [r3, #0]
        resetCimaBaixo();
 8000576:	f000 fb49 	bl	8000c0c <resetCimaBaixo>
    }
    if (getBaixo() && positionYSubMenu3 < 1)
 800057a:	f000 fb3d 	bl	8000bf8 <getBaixo>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d00b      	beq.n	800059c <changeName+0x48>
 8000584:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <changeName+0x8c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d107      	bne.n	800059c <changeName+0x48>
    {
        positionYSubMenu3++;
 800058c:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <changeName+0x8c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	3301      	adds	r3, #1
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <changeName+0x8c>)
 8000596:	701a      	strb	r2, [r3, #0]
        resetCimaBaixo();
 8000598:	f000 fb38 	bl	8000c0c <resetCimaBaixo>
    }
    if (getEsquerda() && positionXSubMenu3 > 0)
 800059c:	f000 fb50 	bl	8000c40 <getEsquerda>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d009      	beq.n	80005ba <changeName+0x66>
 80005a6:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <changeName+0x90>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d005      	beq.n	80005ba <changeName+0x66>
    {
        positionXSubMenu3--;
 80005ae:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <changeName+0x90>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <changeName+0x90>)
 80005b8:	701a      	strb	r2, [r3, #0]
    }
    if (getDireita() && positionXSubMenu3 < 15)
 80005ba:	f000 fb37 	bl	8000c2c <getDireita>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d009      	beq.n	80005d8 <changeName+0x84>
 80005c4:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <changeName+0x90>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b0e      	cmp	r3, #14
 80005ca:	d805      	bhi.n	80005d8 <changeName+0x84>
    {
        positionXSubMenu3++;
 80005cc:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <changeName+0x90>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b03      	ldr	r3, [pc, #12]	@ (80005e4 <changeName+0x90>)
 80005d6:	701a      	strb	r2, [r3, #0]
    }

    lcd_cursor_on();
 80005d8:	f000 fd03 	bl	8000fe2 <lcd_cursor_on>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000306 	.word	0x20000306
 80005e4:	20000307 	.word	0x20000307

080005e8 <inserir_letra_nome>:

void inserir_letra_nome(char nova_letra)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
    // Desloca os caracteres à esquerda
    nomeDigitado[0] = nomeDigitado[1];
 80005f2:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <inserir_letra_nome+0x2c>)
 80005f4:	785a      	ldrb	r2, [r3, #1]
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <inserir_letra_nome+0x2c>)
 80005f8:	701a      	strb	r2, [r3, #0]
    nomeDigitado[1] = nomeDigitado[2];
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <inserir_letra_nome+0x2c>)
 80005fc:	789a      	ldrb	r2, [r3, #2]
 80005fe:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <inserir_letra_nome+0x2c>)
 8000600:	705a      	strb	r2, [r3, #1]
    nomeDigitado[2] = nova_letra; // Insere na última posição
 8000602:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <inserir_letra_nome+0x2c>)
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	7093      	strb	r3, [r2, #2]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000060 	.word	0x20000060

08000618 <atualizar_nome_em_letrasLinha2>:

void atualizar_nome_em_letrasLinha2(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
    linha2[13] = nomeDigitado[0];
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <atualizar_nome_em_letrasLinha2+0x24>)
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <atualizar_nome_em_letrasLinha2+0x28>)
 8000622:	735a      	strb	r2, [r3, #13]
    linha2[14] = nomeDigitado[1];
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <atualizar_nome_em_letrasLinha2+0x24>)
 8000626:	785a      	ldrb	r2, [r3, #1]
 8000628:	4b05      	ldr	r3, [pc, #20]	@ (8000640 <atualizar_nome_em_letrasLinha2+0x28>)
 800062a:	739a      	strb	r2, [r3, #14]
    linha2[15] = nomeDigitado[2];
 800062c:	4b03      	ldr	r3, [pc, #12]	@ (800063c <atualizar_nome_em_letrasLinha2+0x24>)
 800062e:	789a      	ldrb	r2, [r3, #2]
 8000630:	4b03      	ldr	r3, [pc, #12]	@ (8000640 <atualizar_nome_em_letrasLinha2+0x28>)
 8000632:	73da      	strb	r2, [r3, #15]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	20000060 	.word	0x20000060
 8000640:	200002f0 	.word	0x200002f0

08000644 <initGame>:
PecaTetris peca;

// Funções

void initGame(void)
{
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	b091      	sub	sp, #68	@ 0x44
 8000648:	af0e      	add	r7, sp, #56	@ 0x38
	srand(HAL_GetTick());
 800064a:	f002 f8a9 	bl	80027a0 <HAL_GetTick>
 800064e:	4603      	mov	r3, r0
 8000650:	4618      	mov	r0, r3
 8000652:	f004 fb33 	bl	8004cbc <srand>
    peca_atual = number_aleatory_peace(); // Gera a primeira peça aleatória
 8000656:	f001 fd69 	bl	800212c <number_aleatory_peace>
 800065a:	4603      	mov	r3, r0
 800065c:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <initGame+0x98>)
 800065e:	6013      	str	r3, [r2, #0]
    peca = pecas[peca_atual];
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <initGame+0x98>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	491e      	ldr	r1, [pc, #120]	@ (80006e0 <initGame+0x9c>)
 8000666:	4a1f      	ldr	r2, [pc, #124]	@ (80006e4 <initGame+0xa0>)
 8000668:	019b      	lsls	r3, r3, #6
 800066a:	4413      	add	r3, r2
 800066c:	460c      	mov	r4, r1
 800066e:	461d      	mov	r5, r3
 8000670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    linha = 0;
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <initGame+0xa4>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
    coluna = 3;
 800068a:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <initGame+0xa8>)
 800068c:	2203      	movs	r2, #3
 800068e:	601a      	str	r2, [r3, #0]
    init_game();
 8000690:	f001 f9b0 	bl	80019f4 <init_game>
    running = TRUE; // Inicia o jogo
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <initGame+0xac>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
    place_piece(linha, coluna, peca);
 800069a:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <initGame+0xa4>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <initGame+0xa8>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	603a      	str	r2, [r7, #0]
 80006a6:	4e0e      	ldr	r6, [pc, #56]	@ (80006e0 <initGame+0x9c>)
 80006a8:	466d      	mov	r5, sp
 80006aa:	f106 0408 	add.w	r4, r6, #8
 80006ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80006be:	e885 0003 	stmia.w	r5, {r0, r1}
 80006c2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80006c6:	6839      	ldr	r1, [r7, #0]
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f001 fa2f 	bl	8001b2c <place_piece>
    clear_pontuacao();
 80006ce:	f001 ffc9 	bl	8002664 <clear_pontuacao>
    // limpaTela();
    // draw_board();
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000310 	.word	0x20000310
 80006e0:	20000318 	.word	0x20000318
 80006e4:	20000090 	.word	0x20000090
 80006e8:	20000308 	.word	0x20000308
 80006ec:	2000030c 	.word	0x2000030c
 80006f0:	20000314 	.word	0x20000314

080006f4 <taskTetris>:

void taskTetris(void)
{
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	b08f      	sub	sp, #60	@ 0x3c
 80006f8:	af0e      	add	r7, sp, #56	@ 0x38
    if (game_over()) // Verifica se o jogo acabou
 80006fa:	f001 fee1 	bl	80024c0 <game_over>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00b      	beq.n	800071c <taskTetris+0x28>
    {
        running = FALSE; // Para o jogo
 8000704:	4b37      	ldr	r3, [pc, #220]	@ (80007e4 <taskTetris+0xf0>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
        resetBotaoEvento();
 800070a:	f000 fabd 	bl	8000c88 <resetBotaoEvento>

        tentarSalvarRecorde(get_pontuacao());
 800070e:	f001 ff9d 	bl	800264c <get_pontuacao>
 8000712:	4603      	mov	r3, r0
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd8b 	bl	8000230 <tentarSalvarRecorde>

        return;
 800071a:	e05f      	b.n	80007dc <taskTetris+0xe8>
    }
    if(getDireita())
 800071c:	f000 fa86 	bl	8000c2c <getDireita>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d017      	beq.n	8000756 <taskTetris+0x62>
    {
        resetDireitaEsquerda();
 8000726:	f000 fa9f 	bl	8000c68 <resetDireitaEsquerda>
        move_piece_right(&linha, &coluna, peca);
 800072a:	4e2f      	ldr	r6, [pc, #188]	@ (80007e8 <taskTetris+0xf4>)
 800072c:	466d      	mov	r5, sp
 800072e:	f106 0408 	add.w	r4, r6, #8
 8000732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800073a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800073e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000742:	e885 0003 	stmia.w	r5, {r0, r1}
 8000746:	e896 000c 	ldmia.w	r6, {r2, r3}
 800074a:	4928      	ldr	r1, [pc, #160]	@ (80007ec <taskTetris+0xf8>)
 800074c:	4828      	ldr	r0, [pc, #160]	@ (80007f0 <taskTetris+0xfc>)
 800074e:	f001 fadf 	bl	8001d10 <move_piece_right>
        draw_board();
 8000752:	f001 f98f 	bl	8001a74 <draw_board>
    }
    if (getEsquerda())
 8000756:	f000 fa73 	bl	8000c40 <getEsquerda>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d017      	beq.n	8000790 <taskTetris+0x9c>
    {
        resetDireitaEsquerda();
 8000760:	f000 fa82 	bl	8000c68 <resetDireitaEsquerda>
        move_piece_left(&linha, &coluna, peca);
 8000764:	4e20      	ldr	r6, [pc, #128]	@ (80007e8 <taskTetris+0xf4>)
 8000766:	466d      	mov	r5, sp
 8000768:	f106 0408 	add.w	r4, r6, #8
 800076c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000778:	e894 0003 	ldmia.w	r4, {r0, r1}
 800077c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000780:	e896 000c 	ldmia.w	r6, {r2, r3}
 8000784:	4919      	ldr	r1, [pc, #100]	@ (80007ec <taskTetris+0xf8>)
 8000786:	481a      	ldr	r0, [pc, #104]	@ (80007f0 <taskTetris+0xfc>)
 8000788:	f001 fb29 	bl	8001dde <move_piece_left>
        draw_board();
 800078c:	f001 f972 	bl	8001a74 <draw_board>
    //     resetCimaBaixo();
    //     rotate_piece_right(linha, coluna, &peca);
    //     draw_board();
    // }

    if (getBaixo())
 8000790:	f000 fa32 	bl	8000bf8 <getBaixo>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d009      	beq.n	80007ae <taskTetris+0xba>
    {
        resetCimaBaixo();
 800079a:	f000 fa37 	bl	8000c0c <resetCimaBaixo>
        move_piece_down(&linha, &coluna, &peca, &peca_atual);
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <taskTetris+0x100>)
 80007a0:	4a11      	ldr	r2, [pc, #68]	@ (80007e8 <taskTetris+0xf4>)
 80007a2:	4912      	ldr	r1, [pc, #72]	@ (80007ec <taskTetris+0xf8>)
 80007a4:	4812      	ldr	r0, [pc, #72]	@ (80007f0 <taskTetris+0xfc>)
 80007a6:	f001 fc42 	bl	800202e <move_piece_down>
        draw_board();
 80007aa:	f001 f963 	bl	8001a74 <draw_board>
    }
    if (getBotaoEvento())
 80007ae:	f000 fa51 	bl	8000c54 <getBotaoEvento>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00b      	beq.n	80007d0 <taskTetris+0xdc>
    {
        resetBotaoEvento();
 80007b8:	f000 fa66 	bl	8000c88 <resetBotaoEvento>
        rotate_piece_right(linha, coluna, &peca);
 80007bc:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <taskTetris+0xfc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0a      	ldr	r2, [pc, #40]	@ (80007ec <taskTetris+0xf8>)
 80007c2:	6811      	ldr	r1, [r2, #0]
 80007c4:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <taskTetris+0xf4>)
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fb70 	bl	8001eac <rotate_piece_right>
        draw_board();
 80007cc:	f001 f952 	bl	8001a74 <draw_board>
    }

    update_game(&linha, &coluna, &peca, &peca_atual);
 80007d0:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <taskTetris+0x100>)
 80007d2:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <taskTetris+0xf4>)
 80007d4:	4905      	ldr	r1, [pc, #20]	@ (80007ec <taskTetris+0xf8>)
 80007d6:	4806      	ldr	r0, [pc, #24]	@ (80007f0 <taskTetris+0xfc>)
 80007d8:	f001 fe0a 	bl	80023f0 <update_game>
}
 80007dc:	3704      	adds	r7, #4
 80007de:	46bd      	mov	sp, r7
 80007e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000314 	.word	0x20000314
 80007e8:	20000318 	.word	0x20000318
 80007ec:	2000030c 	.word	0x2000030c
 80007f0:	20000308 	.word	0x20000308
 80007f4:	20000310 	.word	0x20000310

080007f8 <gameRunning>:

int gameRunning(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
    return running; // Retorna o estado do jogo
 80007fc:	4b02      	ldr	r3, [pc, #8]	@ (8000808 <gameRunning+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	20000314 	.word	0x20000314

0800080c <taskMatrizLed>:
#include "main.h"

volatile MatrizLED_t MatrizLed = {0};

void taskMatrizLed(void) //150us de execucao
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
    static volatile uint8_t line = 0;
    static volatile uint16_t line_m = 0b1000000000000000;

    volatile uint16_t aux_line = 0x00;
 8000812:	2300      	movs	r3, #0
 8000814:	80fb      	strh	r3, [r7, #6]
    volatile uint8_t aux_line2 = 0x00;
 8000816:	2300      	movs	r3, #0
 8000818:	717b      	strb	r3, [r7, #5]

    line++;
 800081a:	4b53      	ldr	r3, [pc, #332]	@ (8000968 <taskMatrizLed+0x15c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	3301      	adds	r3, #1
 8000822:	b2da      	uxtb	r2, r3
 8000824:	4b50      	ldr	r3, [pc, #320]	@ (8000968 <taskMatrizLed+0x15c>)
 8000826:	701a      	strb	r2, [r3, #0]
    if (line == 16)
 8000828:	4b4f      	ldr	r3, [pc, #316]	@ (8000968 <taskMatrizLed+0x15c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b10      	cmp	r3, #16
 8000830:	d102      	bne.n	8000838 <taskMatrizLed+0x2c>
        line = 0;
 8000832:	4b4d      	ldr	r3, [pc, #308]	@ (8000968 <taskMatrizLed+0x15c>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
    aux_line = (line_m >> line) | (line_m << (15 - line));
 8000838:	4b4c      	ldr	r3, [pc, #304]	@ (800096c <taskMatrizLed+0x160>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	b29b      	uxth	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	4b49      	ldr	r3, [pc, #292]	@ (8000968 <taskMatrizLed+0x15c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	fa42 f303 	asr.w	r3, r2, r3
 800084a:	b21a      	sxth	r2, r3
 800084c:	4b47      	ldr	r3, [pc, #284]	@ (800096c <taskMatrizLed+0x160>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	b29b      	uxth	r3, r3
 8000852:	4619      	mov	r1, r3
 8000854:	4b44      	ldr	r3, [pc, #272]	@ (8000968 <taskMatrizLed+0x15c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	f1c3 030f 	rsb	r3, r3, #15
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29b      	uxth	r3, r3
 800086a:	80fb      	strh	r3, [r7, #6]

    for (int i = 0; i < 8; i++)
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	e02e      	b.n	80008d0 <taskMatrizLed+0xc4>
    {
        if (MatrizLed[line][7 - i] == 0)
 8000872:	4b3d      	ldr	r3, [pc, #244]	@ (8000968 <taskMatrizLed+0x15c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	461a      	mov	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f1c3 0307 	rsb	r3, r3, #7
 8000880:	493b      	ldr	r1, [pc, #236]	@ (8000970 <taskMatrizLed+0x164>)
 8000882:	00d2      	lsls	r2, r2, #3
 8000884:	440a      	add	r2, r1
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d106      	bne.n	800089e <taskMatrizLed+0x92>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000896:	4837      	ldr	r0, [pc, #220]	@ (8000974 <taskMatrizLed+0x168>)
 8000898:	f003 f885 	bl	80039a6 <HAL_GPIO_WritePin>
 800089c:	e005      	b.n	80008aa <taskMatrizLed+0x9e>
        else
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008a4:	4833      	ldr	r0, [pc, #204]	@ (8000974 <taskMatrizLed+0x168>)
 80008a6:	f003 f87e 	bl	80039a6 <HAL_GPIO_WritePin>

        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 80008aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ae:	4831      	ldr	r0, [pc, #196]	@ (8000974 <taskMatrizLed+0x168>)
 80008b0:	f003 f891 	bl	80039d6 <HAL_GPIO_TogglePin>
        DWT_Delay_us(1);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f000 fbd9 	bl	800106c <DWT_Delay_us>
        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 80008ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008be:	482d      	ldr	r0, [pc, #180]	@ (8000974 <taskMatrizLed+0x168>)
 80008c0:	f003 f889 	bl	80039d6 <HAL_GPIO_TogglePin>
        DWT_Delay_us(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f000 fbd1 	bl	800106c <DWT_Delay_us>
    for (int i = 0; i < 8; i++)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	3301      	adds	r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b07      	cmp	r3, #7
 80008d4:	ddcd      	ble.n	8000872 <taskMatrizLed+0x66>
    }
    for (int i = 0; i < 16; i++)
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	e02e      	b.n	800093a <taskMatrizLed+0x12e>
    {
        aux_line2 = (aux_line >> i) & 0x0001;
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	461a      	mov	r2, r3
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	fa42 f303 	asr.w	r3, r2, r3
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	717b      	strb	r3, [r7, #5]
        if (aux_line2 == 0)
 80008f2:	797b      	ldrb	r3, [r7, #5]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d106      	bne.n	8000908 <taskMatrizLed+0xfc>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000900:	481c      	ldr	r0, [pc, #112]	@ (8000974 <taskMatrizLed+0x168>)
 8000902:	f003 f850 	bl	80039a6 <HAL_GPIO_WritePin>
 8000906:	e005      	b.n	8000914 <taskMatrizLed+0x108>
        else
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800090e:	4819      	ldr	r0, [pc, #100]	@ (8000974 <taskMatrizLed+0x168>)
 8000910:	f003 f849 	bl	80039a6 <HAL_GPIO_WritePin>

        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 8000914:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000918:	4816      	ldr	r0, [pc, #88]	@ (8000974 <taskMatrizLed+0x168>)
 800091a:	f003 f85c 	bl	80039d6 <HAL_GPIO_TogglePin>

        DWT_Delay_us(1);
 800091e:	2001      	movs	r0, #1
 8000920:	f000 fba4 	bl	800106c <DWT_Delay_us>
        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 8000924:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000928:	4812      	ldr	r0, [pc, #72]	@ (8000974 <taskMatrizLed+0x168>)
 800092a:	f003 f854 	bl	80039d6 <HAL_GPIO_TogglePin>

        DWT_Delay_us(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f000 fb9c 	bl	800106c <DWT_Delay_us>
    for (int i = 0; i < 16; i++)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	3301      	adds	r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	ddcd      	ble.n	80008dc <taskMatrizLed+0xd0>
    }
    HAL_GPIO_TogglePin(CLK2_GPIO_Port, CLK2_Pin);
 8000940:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000944:	480b      	ldr	r0, [pc, #44]	@ (8000974 <taskMatrizLed+0x168>)
 8000946:	f003 f846 	bl	80039d6 <HAL_GPIO_TogglePin>
    DWT_Delay_us(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f000 fb8e 	bl	800106c <DWT_Delay_us>
    HAL_GPIO_TogglePin(CLK2_GPIO_Port, CLK2_Pin);
 8000950:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000954:	4807      	ldr	r0, [pc, #28]	@ (8000974 <taskMatrizLed+0x168>)
 8000956:	f003 f83e 	bl	80039d6 <HAL_GPIO_TogglePin>
    DWT_Delay_us(1);
 800095a:	2001      	movs	r0, #1
 800095c:	f000 fb86 	bl	800106c <DWT_Delay_us>
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200003d8 	.word	0x200003d8
 800096c:	20000064 	.word	0x20000064
 8000970:	20000358 	.word	0x20000358
 8000974:	40010c00 	.word	0x40010c00

08000978 <changeMatriz>:

void changeMatriz(MatrizLED_t newMatriz)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < LinhasMatriz; i++)
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	e01a      	b.n	80009bc <changeMatriz+0x44>
    {
        for (int j = 0; j < ColunasMatriz; j++)
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	e011      	b.n	80009b0 <changeMatriz+0x38>
        {
            MatrizLed[i][j] = newMatriz[i][j];
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	441a      	add	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	4413      	add	r3, r2
 8000998:	7819      	ldrb	r1, [r3, #0]
 800099a:	4a0d      	ldr	r2, [pc, #52]	@ (80009d0 <changeMatriz+0x58>)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	441a      	add	r2, r3
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	4413      	add	r3, r2
 80009a6:	460a      	mov	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < ColunasMatriz; j++)
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	3301      	adds	r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2b07      	cmp	r3, #7
 80009b4:	ddea      	ble.n	800098c <changeMatriz+0x14>
    for (int i = 0; i < LinhasMatriz; i++)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	3301      	adds	r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b0f      	cmp	r3, #15
 80009c0:	dde1      	ble.n	8000986 <changeMatriz+0xe>
        }
    }
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000358 	.word	0x20000358

080009d4 <initInput>:
void resetCimaBaixo(void);
void atualizaNavegacaoEsquerdaDireita(void);
void atualizaBotao(void);

void initInput(ADC_HandleTypeDef *hadc)
{
 80009d4:	b4b0      	push	{r4, r5, r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    hadc1 = *hadc; // Copia o handle do ADC
 80009dc:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <initInput+0x2c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4614      	mov	r4, r2
 80009e2:	461d      	mov	r5, r3
 80009e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bcb0      	pop	{r4, r5, r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	200003e0 	.word	0x200003e0

08000a04 <ler_ADC_canal>:

uint16_t ler_ADC_canal(uint8_t canal)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]

    sConfig.Channel = (canal == 0 ? (uint32_t)0 : (uint32_t)1);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bf14      	ite	ne
 8000a20:	2301      	movne	r3, #1
 8000a22:	2300      	moveq	r3, #0
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	613b      	str	r3, [r7, #16]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig); // Aponta o canal
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	4619      	mov	r1, r3
 8000a36:	480a      	ldr	r0, [pc, #40]	@ (8000a60 <ler_ADC_canal+0x5c>)
 8000a38:	f002 f978 	bl	8002d2c <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);                            // Inicia conversão
 8000a3c:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <ler_ADC_canal+0x5c>)
 8000a3e:	f001 ffb5 	bl	80029ac <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Espera terminar
 8000a42:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a46:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <ler_ADC_canal+0x5c>)
 8000a48:	f002 f85e 	bl	8002b08 <HAL_ADC_PollForConversion>
    uint16_t valor = HAL_ADC_GetValue(&hadc1);        // Lê resultado
 8000a4c:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <ler_ADC_canal+0x5c>)
 8000a4e:	f002 f961 	bl	8002d14 <HAL_ADC_GetValue>
 8000a52:	4603      	mov	r3, r0
 8000a54:	82fb      	strh	r3, [r7, #22]

    return valor;
 8000a56:	8afb      	ldrh	r3, [r7, #22]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200003e0 	.word	0x200003e0

08000a64 <taskLeituraAD>:

void taskLeituraAD(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    AD1 = ler_ADC_canal(0); // Lê ADC canal 0
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff ffcb 	bl	8000a04 <ler_ADC_canal>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <taskLeituraAD+0x44>)
 8000a74:	801a      	strh	r2, [r3, #0]
    AD2 = ler_ADC_canal(1); // Lê ADC canal 1
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff ffc4 	bl	8000a04 <ler_ADC_canal>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <taskLeituraAD+0x48>)
 8000a82:	801a      	strh	r2, [r3, #0]

    BotaoStatus = HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin); // Lê estado do botão
 8000a84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a88:	4809      	ldr	r0, [pc, #36]	@ (8000ab0 <taskLeituraAD+0x4c>)
 8000a8a:	f002 ff75 	bl	8003978 <HAL_GPIO_ReadPin>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <taskLeituraAD+0x50>)
 8000a94:	801a      	strh	r2, [r3, #0]

    atualizaNavegacaoUpandDown();
 8000a96:	f000 f80f 	bl	8000ab8 <atualizaNavegacaoUpandDown>
    atualizaBotao();
 8000a9a:	f000 f87d 	bl	8000b98 <atualizaBotao>
    atualizaNavegacaoEsquerdaDireita();
 8000a9e:	f000 f843 	bl	8000b28 <atualizaNavegacaoEsquerdaDireita>
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200003da 	.word	0x200003da
 8000aac:	200003dc 	.word	0x200003dc
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	200003de 	.word	0x200003de

08000ab8 <atualizaNavegacaoUpandDown>:

void atualizaNavegacaoUpandDown(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    if (!upAndDown_locked)
 8000abc:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <atualizaNavegacaoUpandDown+0x60>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d117      	bne.n	8000af4 <atualizaNavegacaoUpandDown+0x3c>
    {
        if (AD2 < AD2_THRESHOLD_LOW)
 8000ac4:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <atualizaNavegacaoUpandDown+0x64>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	2bc7      	cmp	r3, #199	@ 0xc7
 8000aca:	d806      	bhi.n	8000ada <atualizaNavegacaoUpandDown+0x22>
        {
            // Desce no menu
            baixo = TRUE;
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <atualizaNavegacaoUpandDown+0x68>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
            upAndDown_locked = 1;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <atualizaNavegacaoUpandDown+0x60>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
        {
            upAndDown_locked = 0;
            resetCimaBaixo();
        }
    }
}
 8000ad8:	e01b      	b.n	8000b12 <atualizaNavegacaoUpandDown+0x5a>
        else if (AD2 > AD2_THRESHOLD_HIGH)
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <atualizaNavegacaoUpandDown+0x64>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d915      	bls.n	8000b12 <atualizaNavegacaoUpandDown+0x5a>
            cima = TRUE;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <atualizaNavegacaoUpandDown+0x6c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
            upAndDown_locked = 1;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <atualizaNavegacaoUpandDown+0x60>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
}
 8000af2:	e00e      	b.n	8000b12 <atualizaNavegacaoUpandDown+0x5a>
        if (AD2 > AD2_DEADZONE_MIN && AD2 < AD2_DEADZONE_MAX)
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <atualizaNavegacaoUpandDown+0x64>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000afc:	d909      	bls.n	8000b12 <atualizaNavegacaoUpandDown+0x5a>
 8000afe:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <atualizaNavegacaoUpandDown+0x64>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8000b06:	d204      	bcs.n	8000b12 <atualizaNavegacaoUpandDown+0x5a>
            upAndDown_locked = 0;
 8000b08:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <atualizaNavegacaoUpandDown+0x60>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
            resetCimaBaixo();
 8000b0e:	f000 f87d 	bl	8000c0c <resetCimaBaixo>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000410 	.word	0x20000410
 8000b1c:	200003dc 	.word	0x200003dc
 8000b20:	20000414 	.word	0x20000414
 8000b24:	20000412 	.word	0x20000412

08000b28 <atualizaNavegacaoEsquerdaDireita>:
void atualizaNavegacaoEsquerdaDireita(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    if (!rightAndLeft_locked)
 8000b2c:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <atualizaNavegacaoEsquerdaDireita+0x60>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d117      	bne.n	8000b64 <atualizaNavegacaoEsquerdaDireita+0x3c>
    {
        if (AD1 < AD2_THRESHOLD_LOW)
 8000b34:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <atualizaNavegacaoEsquerdaDireita+0x64>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	2bc7      	cmp	r3, #199	@ 0xc7
 8000b3a:	d806      	bhi.n	8000b4a <atualizaNavegacaoEsquerdaDireita+0x22>
        {
            esquerda = TRUE; // Movimento para a esquerda
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <atualizaNavegacaoEsquerdaDireita+0x68>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	701a      	strb	r2, [r3, #0]
            rightAndLeft_locked = 1;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <atualizaNavegacaoEsquerdaDireita+0x60>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
        {
            rightAndLeft_locked = 0;
            resetDireitaEsquerda();
        }
    }
}
 8000b48:	e01b      	b.n	8000b82 <atualizaNavegacaoEsquerdaDireita+0x5a>
        else if (AD1 > AD2_THRESHOLD_HIGH)
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <atualizaNavegacaoEsquerdaDireita+0x64>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d915      	bls.n	8000b82 <atualizaNavegacaoEsquerdaDireita+0x5a>
            direita = TRUE; // Movimento para a direita
 8000b56:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <atualizaNavegacaoEsquerdaDireita+0x6c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
            rightAndLeft_locked = 1;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <atualizaNavegacaoEsquerdaDireita+0x60>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
}
 8000b62:	e00e      	b.n	8000b82 <atualizaNavegacaoEsquerdaDireita+0x5a>
        if (AD1 > AD2_DEADZONE_MIN && AD1 < AD2_DEADZONE_MAX)
 8000b64:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <atualizaNavegacaoEsquerdaDireita+0x64>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000b6c:	d909      	bls.n	8000b82 <atualizaNavegacaoEsquerdaDireita+0x5a>
 8000b6e:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <atualizaNavegacaoEsquerdaDireita+0x64>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 8000b76:	d204      	bcs.n	8000b82 <atualizaNavegacaoEsquerdaDireita+0x5a>
            rightAndLeft_locked = 0;
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <atualizaNavegacaoEsquerdaDireita+0x60>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
            resetDireitaEsquerda();
 8000b7e:	f000 f873 	bl	8000c68 <resetDireitaEsquerda>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000411 	.word	0x20000411
 8000b8c:	200003da 	.word	0x200003da
 8000b90:	20000415 	.word	0x20000415
 8000b94:	20000413 	.word	0x20000413

08000b98 <atualizaBotao>:

void atualizaBotao(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
    static uint8_t uinflagBotaoApertado = 0;
    if (BotaoStatus == GPIO_PIN_RESET && botaoEvento == 0)
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <atualizaBotao+0x40>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d106      	bne.n	8000bb2 <atualizaBotao+0x1a>
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <atualizaBotao+0x44>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <atualizaBotao+0x1a>
    {
        uinflagBotaoApertado = 1; // Marca que o evento já ocorreu
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <atualizaBotao+0x48>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
    }
    if(uinflagBotaoApertado && BotaoStatus == GPIO_PIN_SET)
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <atualizaBotao+0x48>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d009      	beq.n	8000bce <atualizaBotao+0x36>
 8000bba:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <atualizaBotao+0x40>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d105      	bne.n	8000bce <atualizaBotao+0x36>
    {
        botaoEvento = 1; // Marca o evento do botão
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <atualizaBotao+0x44>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
        uinflagBotaoApertado = 0; // Reseta a flag
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <atualizaBotao+0x48>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
    }
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200003de 	.word	0x200003de
 8000bdc:	20000416 	.word	0x20000416
 8000be0:	20000417 	.word	0x20000417

08000be4 <getCima>:

uint8_t getCima(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
    return cima;
 8000be8:	4b02      	ldr	r3, [pc, #8]	@ (8000bf4 <getCima+0x10>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	20000412 	.word	0x20000412

08000bf8 <getBaixo>:
uint8_t getBaixo(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
    return baixo;
 8000bfc:	4b02      	ldr	r3, [pc, #8]	@ (8000c08 <getBaixo+0x10>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	20000414 	.word	0x20000414

08000c0c <resetCimaBaixo>:
void resetCimaBaixo(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
    cima = 0;
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <resetCimaBaixo+0x18>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
    baixo = 0;
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <resetCimaBaixo+0x1c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	20000412 	.word	0x20000412
 8000c28:	20000414 	.word	0x20000414

08000c2c <getDireita>:
uint8_t getDireita(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
    return direita;
 8000c30:	4b02      	ldr	r3, [pc, #8]	@ (8000c3c <getDireita+0x10>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000413 	.word	0x20000413

08000c40 <getEsquerda>:
uint8_t getEsquerda(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
    return esquerda;
 8000c44:	4b02      	ldr	r3, [pc, #8]	@ (8000c50 <getEsquerda+0x10>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000415 	.word	0x20000415

08000c54 <getBotaoEvento>:
uint8_t getBotaoEvento(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
    return botaoEvento;
 8000c58:	4b02      	ldr	r3, [pc, #8]	@ (8000c64 <getBotaoEvento+0x10>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	20000416 	.word	0x20000416

08000c68 <resetDireitaEsquerda>:

void resetDireitaEsquerda(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
    direita = 0;
 8000c6c:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <resetDireitaEsquerda+0x18>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
    esquerda = 0;
 8000c72:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <resetDireitaEsquerda+0x1c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000413 	.word	0x20000413
 8000c84:	20000415 	.word	0x20000415

08000c88 <resetBotaoEvento>:

void resetBotaoEvento(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
    botaoEvento = 0; // Reseta o evento do botão
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <resetBotaoEvento+0x14>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000416 	.word	0x20000416

08000ca0 <register_EN>:
uint8_t linha_LCD = 0;
uint8_t changed = FALSE;

void lcd_send_data(uint8_t data);

void register_EN(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
    EN_HIGH;
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000caa:	4808      	ldr	r0, [pc, #32]	@ (8000ccc <register_EN+0x2c>)
 8000cac:	f002 fe7b 	bl	80039a6 <HAL_GPIO_WritePin>
    LCD_delay_us(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 f9db 	bl	800106c <DWT_Delay_us>
    EN_LOW;
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cbc:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <register_EN+0x2c>)
 8000cbe:	f002 fe72 	bl	80039a6 <HAL_GPIO_WritePin>
    LCD_delay_us(40);
 8000cc2:	2028      	movs	r0, #40	@ 0x28
 8000cc4:	f000 f9d2 	bl	800106c <DWT_Delay_us>
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40011000 	.word	0x40011000

08000cd0 <Write_Display>:
//    DB1_HIGH;
//    DB0_LOW;
//    register_EN();
//}

void Write_Display() {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
    if(changed){
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <Write_Display+0x78>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d032      	beq.n	8000d42 <Write_Display+0x72>

        lcd_set_cursor(position_String, position_line);
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <Write_Display+0x7c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <Write_Display+0x80>)
 8000ce2:	7812      	ldrb	r2, [r2, #0]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f989 	bl	8000ffe <lcd_set_cursor>
        Write_caracter(message[position_line][position_String]);
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <Write_Display+0x80>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <Write_Display+0x7c>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	4a16      	ldr	r2, [pc, #88]	@ (8000d54 <Write_Display+0x84>)
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	440b      	add	r3, r1
 8000d00:	4413      	add	r3, r2
 8000d02:	4403      	add	r3, r0
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f826 	bl	8000d58 <Write_caracter>
        position_String++;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <Write_Display+0x7c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <Write_Display+0x7c>)
 8000d16:	701a      	strb	r2, [r3, #0]

        if(position_String >= 16){
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <Write_Display+0x7c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d910      	bls.n	8000d42 <Write_Display+0x72>
            position_String = 0;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <Write_Display+0x7c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
            
            if(position_line == 0){
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <Write_Display+0x80>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d103      	bne.n	8000d36 <Write_Display+0x66>

                position_line = 1;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <Write_Display+0x80>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
            }

        
        }
    }
}
 8000d34:	e005      	b.n	8000d42 <Write_Display+0x72>
                position_line = 0;
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <Write_Display+0x80>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
                changed = FALSE;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	@ (8000d48 <Write_Display+0x78>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2000041a 	.word	0x2000041a
 8000d4c:	20000418 	.word	0x20000418
 8000d50:	20000419 	.word	0x20000419
 8000d54:	20000068 	.word	0x20000068

08000d58 <Write_caracter>:

void Write_caracter(uint8_t c) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	lcd_send_data(c);
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 f8c1 	bl	8000eec <lcd_send_data>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <change_Message>:
	        lcd_send_command(0x80);  // linha 1
	    else
	        lcd_send_command(0xC0);  // linha 2
}

void change_Message(uint8_t line, char *new_Text) {
 8000d74:	b490      	push	{r4, r7}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]
    //Verifica onde acaba a string enviada
    while (new_Text[i] != '\0' && i < 16) {
 8000d84:	e022      	b.n	8000dcc <change_Message+0x58>

        if (message[line][i] != new_Text[i]) {
 8000d86:	79fa      	ldrb	r2, [r7, #7]
 8000d88:	7bf9      	ldrb	r1, [r7, #15]
 8000d8a:	4820      	ldr	r0, [pc, #128]	@ (8000e0c <change_Message+0x98>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	4413      	add	r3, r2
 8000d92:	4403      	add	r3, r0
 8000d94:	440b      	add	r3, r1
 8000d96:	781a      	ldrb	r2, [r3, #0]
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	6839      	ldr	r1, [r7, #0]
 8000d9c:	440b      	add	r3, r1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d010      	beq.n	8000dc6 <change_Message+0x52>
                message[line][i] = new_Text[i];
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	7bf9      	ldrb	r1, [r7, #15]
 8000dae:	781c      	ldrb	r4, [r3, #0]
 8000db0:	4816      	ldr	r0, [pc, #88]	@ (8000e0c <change_Message+0x98>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	011b      	lsls	r3, r3, #4
 8000db6:	4413      	add	r3, r2
 8000db8:	4403      	add	r3, r0
 8000dba:	440b      	add	r3, r1
 8000dbc:	4622      	mov	r2, r4
 8000dbe:	701a      	strb	r2, [r3, #0]
                changed = TRUE;
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <change_Message+0x9c>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
            }
        i++;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
    while (new_Text[i] != '\0' && i < 16) {
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d010      	beq.n	8000dfa <change_Message+0x86>
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	d9d3      	bls.n	8000d86 <change_Message+0x12>
    }
    for (i = i; i < 16; i++) {
 8000dde:	e00c      	b.n	8000dfa <change_Message+0x86>
        message[line][i] = ' ';
 8000de0:	79fa      	ldrb	r2, [r7, #7]
 8000de2:	7bf9      	ldrb	r1, [r7, #15]
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <change_Message+0x98>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	4413      	add	r3, r2
 8000dec:	4403      	add	r3, r0
 8000dee:	440b      	add	r3, r1
 8000df0:	2220      	movs	r2, #32
 8000df2:	701a      	strb	r2, [r3, #0]
    for (i = i; i < 16; i++) {
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	3301      	adds	r3, #1
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	2b0f      	cmp	r3, #15
 8000dfe:	d9ef      	bls.n	8000de0 <change_Message+0x6c>
    }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc90      	pop	{r4, r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	20000068 	.word	0x20000068
 8000e10:	2000041a 	.word	0x2000041a

08000e14 <send_nibble>:

void send_nibble(uint8_t nibble) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
    (nibble & 0x08) ? DB7_HIGH : DB7_LOW;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <send_nibble+0x20>
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2140      	movs	r1, #64	@ 0x40
 8000e2c:	481f      	ldr	r0, [pc, #124]	@ (8000eac <send_nibble+0x98>)
 8000e2e:	f002 fdba 	bl	80039a6 <HAL_GPIO_WritePin>
 8000e32:	e004      	b.n	8000e3e <send_nibble+0x2a>
 8000e34:	2200      	movs	r2, #0
 8000e36:	2140      	movs	r1, #64	@ 0x40
 8000e38:	481c      	ldr	r0, [pc, #112]	@ (8000eac <send_nibble+0x98>)
 8000e3a:	f002 fdb4 	bl	80039a6 <HAL_GPIO_WritePin>
    (nibble & 0x04) ? DB6_HIGH : DB6_LOW;
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d005      	beq.n	8000e54 <send_nibble+0x40>
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	4817      	ldr	r0, [pc, #92]	@ (8000eac <send_nibble+0x98>)
 8000e4e:	f002 fdaa 	bl	80039a6 <HAL_GPIO_WritePin>
 8000e52:	e004      	b.n	8000e5e <send_nibble+0x4a>
 8000e54:	2200      	movs	r2, #0
 8000e56:	2120      	movs	r1, #32
 8000e58:	4814      	ldr	r0, [pc, #80]	@ (8000eac <send_nibble+0x98>)
 8000e5a:	f002 fda4 	bl	80039a6 <HAL_GPIO_WritePin>
    (nibble & 0x02) ? DB5_HIGH : DB5_LOW;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d005      	beq.n	8000e74 <send_nibble+0x60>
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	480f      	ldr	r0, [pc, #60]	@ (8000eac <send_nibble+0x98>)
 8000e6e:	f002 fd9a 	bl	80039a6 <HAL_GPIO_WritePin>
 8000e72:	e004      	b.n	8000e7e <send_nibble+0x6a>
 8000e74:	2200      	movs	r2, #0
 8000e76:	2110      	movs	r1, #16
 8000e78:	480c      	ldr	r0, [pc, #48]	@ (8000eac <send_nibble+0x98>)
 8000e7a:	f002 fd94 	bl	80039a6 <HAL_GPIO_WritePin>
    (nibble & 0x01) ? DB4_HIGH : DB4_LOW;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <send_nibble+0x80>
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2108      	movs	r1, #8
 8000e8c:	4807      	ldr	r0, [pc, #28]	@ (8000eac <send_nibble+0x98>)
 8000e8e:	f002 fd8a 	bl	80039a6 <HAL_GPIO_WritePin>
 8000e92:	e004      	b.n	8000e9e <send_nibble+0x8a>
 8000e94:	2200      	movs	r2, #0
 8000e96:	2108      	movs	r1, #8
 8000e98:	4804      	ldr	r0, [pc, #16]	@ (8000eac <send_nibble+0x98>)
 8000e9a:	f002 fd84 	bl	80039a6 <HAL_GPIO_WritePin>

    register_EN();
 8000e9e:	f7ff feff 	bl	8000ca0 <register_EN>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40010800 	.word	0x40010800

08000eb0 <lcd_send_command>:

void lcd_send_command(uint8_t cmd) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
    RS_LOW;
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec0:	4809      	ldr	r0, [pc, #36]	@ (8000ee8 <lcd_send_command+0x38>)
 8000ec2:	f002 fd70 	bl	80039a6 <HAL_GPIO_WritePin>
    send_nibble(cmd >> 4);  // parte alta
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ffa1 	bl	8000e14 <send_nibble>
    send_nibble(cmd & 0x0F); // parte baixa
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 030f 	and.w	r3, r3, #15
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff9a 	bl	8000e14 <send_nibble>
    //LCD_delay_us(40);
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40011000 	.word	0x40011000

08000eec <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
    RS_HIGH;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000efc:	480c      	ldr	r0, [pc, #48]	@ (8000f30 <lcd_send_data+0x44>)
 8000efe:	f002 fd52 	bl	80039a6 <HAL_GPIO_WritePin>
    //LCD_delay_us(1);
    send_nibble(data >> 4);
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff83 	bl	8000e14 <send_nibble>
    send_nibble(data & 0x0F);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff7c 	bl	8000e14 <send_nibble>
    //LCD_delay_us(40);
    RS_LOW;
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f22:	4803      	ldr	r0, [pc, #12]	@ (8000f30 <lcd_send_data+0x44>)
 8000f24:	f002 fd3f 	bl	80039a6 <HAL_GPIO_WritePin>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40011000 	.word	0x40011000

08000f34 <initialize_LCD>:

void initialize_LCD(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    LCD_delay_ms(15); // tempo mínimo de boot
 8000f38:	200f      	movs	r0, #15
 8000f3a:	f001 fc3b 	bl	80027b4 <HAL_Delay>

    // Inicialização especial para 4 bits
    send_nibble(0x03);  // função set 8 bits (3)
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f7ff ff68 	bl	8000e14 <send_nibble>
    LCD_delay_ms(5);
 8000f44:	2005      	movs	r0, #5
 8000f46:	f001 fc35 	bl	80027b4 <HAL_Delay>
    send_nibble(0x03);
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	f7ff ff62 	bl	8000e14 <send_nibble>
    LCD_delay_us(150);
 8000f50:	2096      	movs	r0, #150	@ 0x96
 8000f52:	f000 f88b 	bl	800106c <DWT_Delay_us>
    send_nibble(0x03);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f7ff ff5c 	bl	8000e14 <send_nibble>
    LCD_delay_us(150);
 8000f5c:	2096      	movs	r0, #150	@ 0x96
 8000f5e:	f000 f885 	bl	800106c <DWT_Delay_us>
    send_nibble(0x02);  // função set para 4 bits
 8000f62:	2002      	movs	r0, #2
 8000f64:	f7ff ff56 	bl	8000e14 <send_nibble>
    LCD_delay_us(150);
 8000f68:	2096      	movs	r0, #150	@ 0x96
 8000f6a:	f000 f87f 	bl	800106c <DWT_Delay_us>

    lcd_send_command(0x28); // function set: 4 bits, 2 linhas, 5x8
 8000f6e:	2028      	movs	r0, #40	@ 0x28
 8000f70:	f7ff ff9e 	bl	8000eb0 <lcd_send_command>
    lcd_send_command(0x08); // display OFF
 8000f74:	2008      	movs	r0, #8
 8000f76:	f7ff ff9b 	bl	8000eb0 <lcd_send_command>
    lcd_send_command(0x01); // clear display
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff ff98 	bl	8000eb0 <lcd_send_command>
    LCD_delay_ms(2);
 8000f80:	2002      	movs	r0, #2
 8000f82:	f001 fc17 	bl	80027b4 <HAL_Delay>
    lcd_send_command(0x06); // entry mode set
 8000f86:	2006      	movs	r0, #6
 8000f88:	f7ff ff92 	bl	8000eb0 <lcd_send_command>
    lcd_send_command(0x0C); // display ON, cursor OFF
 8000f8c:	200c      	movs	r0, #12
 8000f8e:	f7ff ff8f 	bl	8000eb0 <lcd_send_command>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <lcd_create_char>:

void lcd_create_char(uint8_t pos, uint8_t *pattern) {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	6039      	str	r1, [r7, #0]
 8000fa0:	71fb      	strb	r3, [r7, #7]
    // CGRAM começa em 0x40, cada caractere ocupa 8 bytes
    lcd_send_command(0x40 | (pos << 3));  // endereço CGRAM para caractere N
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff7c 	bl	8000eb0 <lcd_send_command>
    for (int i = 0; i < 8; i++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	e009      	b.n	8000fd2 <lcd_create_char+0x3c>
        lcd_send_data(pattern[i]);   // envia cada linha do caractere
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff90 	bl	8000eec <lcd_send_data>
    for (int i = 0; i < 8; i++) {
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b07      	cmp	r3, #7
 8000fd6:	ddf2      	ble.n	8000fbe <lcd_create_char+0x28>
    }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <lcd_cursor_on>:

void lcd_cursor_on(void) {
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
    lcd_send_command(0x0F); // display ON, cursor ON
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f7ff ff62 	bl	8000eb0 <lcd_send_command>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <lcd_cursor_off>:
void lcd_cursor_off(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
    lcd_send_command(0x0C); // display ON, cursor OFF
 8000ff4:	200c      	movs	r0, #12
 8000ff6:	f7ff ff5b 	bl	8000eb0 <lcd_send_command>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <lcd_set_cursor>:

void lcd_set_cursor(uint8_t col, uint8_t row) {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	460a      	mov	r2, r1
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	4613      	mov	r3, r2
 800100c:	71bb      	strb	r3, [r7, #6]
    if (row == 0) {
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <lcd_set_cursor+0x24>
        lcd_send_command(0x80 + col); // linha 1
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	3b80      	subs	r3, #128	@ 0x80
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff48 	bl	8000eb0 <lcd_send_command>
    } else {
        lcd_send_command(0xC0 + col); // linha 2
    }
 8001020:	e005      	b.n	800102e <lcd_set_cursor+0x30>
        lcd_send_command(0xC0 + col); // linha 2
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	3b40      	subs	r3, #64	@ 0x40
 8001026:	b2db      	uxtb	r3, r3
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff41 	bl	8000eb0 <lcd_send_command>
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <DWT_Delay_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void DWT_Delay_Init(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <DWT_Delay_Init+0x2c>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <DWT_Delay_Init+0x2c>)
 8001042:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001046:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8001048:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <DWT_Delay_Init+0x30>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <DWT_Delay_Init+0x30>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <DWT_Delay_Init+0x30>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6013      	str	r3, [r2, #0]
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000edf0 	.word	0xe000edf0
 8001068:	e0001000 	.word	0xe0001000

0800106c <DWT_Delay_us>:

void DWT_Delay_us(uint32_t us)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <DWT_Delay_us+0x40>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000);
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <DWT_Delay_us+0x44>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <DWT_Delay_us+0x48>)
 8001080:	fba2 2303 	umull	r2, r3, r2, r3
 8001084:	0c9a      	lsrs	r2, r3, #18
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	fb02 f303 	mul.w	r3, r2, r3
 800108c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks)
 800108e:	bf00      	nop
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <DWT_Delay_us+0x40>)
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	429a      	cmp	r2, r3
 800109c:	d8f8      	bhi.n	8001090 <DWT_Delay_us+0x24>
        ;
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e0001000 	.word	0xe0001000
 80010b0:	2000008c 	.word	0x2000008c
 80010b4:	431bde83 	.word	0x431bde83

080010b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010c8:	d10e      	bne.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x30>
    {
        flag1ms = TRUE;
 80010ca:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
        count100ms++;
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010da:	701a      	strb	r2, [r3, #0]
        count1000ms++;
 80010dc:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010e6:	801a      	strh	r2, [r3, #0]
    }
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000494 	.word	0x20000494
 80010f8:	20000495 	.word	0x20000495
 80010fc:	20000498 	.word	0x20000498

08001100 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001106:	f001 faf3 	bl	80026f0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800110a:	f000 f959 	bl	80013c0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800110e:	f000 fa3d 	bl	800158c <MX_GPIO_Init>
    MX_TIM2_Init();
 8001112:	f000 f9ef 	bl	80014f4 <MX_TIM2_Init>
    MX_ADC1_Init();
 8001116:	f000 f9af 	bl	8001478 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim2);
 800111a:	4899      	ldr	r0, [pc, #612]	@ (8001380 <main+0x280>)
 800111c:	f003 fa2c 	bl	8004578 <HAL_TIM_Base_Start_IT>
    HAL_ADC_Start(&hadc1);
 8001120:	4898      	ldr	r0, [pc, #608]	@ (8001384 <main+0x284>)
 8001122:	f001 fc43 	bl	80029ac <HAL_ADC_Start>

    initInput(&hadc1);
 8001126:	4897      	ldr	r0, [pc, #604]	@ (8001384 <main+0x284>)
 8001128:	f7ff fc54 	bl	80009d4 <initInput>
    DWT_Delay_Init();
 800112c:	f7ff ff84 	bl	8001038 <DWT_Delay_Init>
    initLCD();
 8001130:	f7ff f976 	bl	8000420 <initLCD>

    inicializarEEPROM();
 8001134:	f7ff f856 	bl	80001e4 <inicializarEEPROM>

    editPosition = 1;
 8001138:	4b93      	ldr	r3, [pc, #588]	@ (8001388 <main+0x288>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]

    changeLCDScreen(TELA1);
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff f950 	bl	80003e4 <changeLCDScreen>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (flag1ms)
 8001144:	4b91      	ldr	r3, [pc, #580]	@ (800138c <main+0x28c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d022      	beq.n	8001192 <main+0x92>
        {
            HAL_GPIO_TogglePin(TestePin_GPIO_Port, TestePin_Pin);
 800114c:	2110      	movs	r1, #16
 800114e:	4890      	ldr	r0, [pc, #576]	@ (8001390 <main+0x290>)
 8001150:	f002 fc41 	bl	80039d6 <HAL_GPIO_TogglePin>
            flag1ms = FALSE;
 8001154:	4b8d      	ldr	r3, [pc, #564]	@ (800138c <main+0x28c>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
            taskLeituraAD();
 800115a:	f7ff fc83 	bl	8000a64 <taskLeituraAD>

            Write_Display();
 800115e:	f7ff fdb7 	bl	8000cd0 <Write_Display>
            lcd_set_cursor(positionXSubMenu3, positionYSubMenu3);
 8001162:	4b8c      	ldr	r3, [pc, #560]	@ (8001394 <main+0x294>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	4a8c      	ldr	r2, [pc, #560]	@ (8001398 <main+0x298>)
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff46 	bl	8000ffe <lcd_set_cursor>
            taskMatrizLed();
 8001172:	f7ff fb4b 	bl	800080c <taskMatrizLed>
            if (gameRunning())
 8001176:	f7ff fb3f 	bl	80007f8 <gameRunning>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <main+0x84>
            {
                taskTetris();
 8001180:	f7ff fab8 	bl	80006f4 <taskTetris>
            }

            changeMatriz(board);
 8001184:	4885      	ldr	r0, [pc, #532]	@ (800139c <main+0x29c>)
 8001186:	f7ff fbf7 	bl	8000978 <changeMatriz>
            HAL_GPIO_TogglePin(TestePin_GPIO_Port, TestePin_Pin);
 800118a:	2110      	movs	r1, #16
 800118c:	4880      	ldr	r0, [pc, #512]	@ (8001390 <main+0x290>)
 800118e:	f002 fc22 	bl	80039d6 <HAL_GPIO_TogglePin>
        }

        if (count100ms >= 100)
 8001192:	4b83      	ldr	r3, [pc, #524]	@ (80013a0 <main+0x2a0>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b63      	cmp	r3, #99	@ 0x63
 8001198:	f240 80e8 	bls.w	800136c <main+0x26c>
        {

            switch (modoMenu)
 800119c:	4b81      	ldr	r3, [pc, #516]	@ (80013a4 <main+0x2a4>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <main+0xaa>
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d05e      	beq.n	8001266 <main+0x166>
 80011a8:	e0db      	b.n	8001362 <main+0x262>
            {
            case MODO_NAVEGANDO:
                if (getCima())
 80011aa:	f7ff fd1b 	bl	8000be4 <getCima>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d012      	beq.n	80011da <main+0xda>
                {
                    estadoMenu = estadoMenu == MENU_TELA1 ? MENU_TELA4 : estadoMenu - 1;
 80011b4:	4b7c      	ldr	r3, [pc, #496]	@ (80013a8 <main+0x2a8>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <main+0xc6>
 80011bc:	4b7a      	ldr	r3, [pc, #488]	@ (80013a8 <main+0x2a8>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	e000      	b.n	80011c8 <main+0xc8>
 80011c6:	2303      	movs	r3, #3
 80011c8:	4a77      	ldr	r2, [pc, #476]	@ (80013a8 <main+0x2a8>)
 80011ca:	7013      	strb	r3, [r2, #0]
                    changeLCDScreen(estadoMenu);
 80011cc:	4b76      	ldr	r3, [pc, #472]	@ (80013a8 <main+0x2a8>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f907 	bl	80003e4 <changeLCDScreen>
                    resetCimaBaixo();
 80011d6:	f7ff fd19 	bl	8000c0c <resetCimaBaixo>
                }
                if (getBaixo())
 80011da:	f7ff fd0d 	bl	8000bf8 <getBaixo>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d012      	beq.n	800120a <main+0x10a>
                {
                    estadoMenu = estadoMenu == MENU_TELA4 ? MENU_TELA1 : estadoMenu + 1;
 80011e4:	4b70      	ldr	r3, [pc, #448]	@ (80013a8 <main+0x2a8>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d004      	beq.n	80011f6 <main+0xf6>
 80011ec:	4b6e      	ldr	r3, [pc, #440]	@ (80013a8 <main+0x2a8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	e000      	b.n	80011f8 <main+0xf8>
 80011f6:	2300      	movs	r3, #0
 80011f8:	4a6b      	ldr	r2, [pc, #428]	@ (80013a8 <main+0x2a8>)
 80011fa:	7013      	strb	r3, [r2, #0]
                    changeLCDScreen(estadoMenu);
 80011fc:	4b6a      	ldr	r3, [pc, #424]	@ (80013a8 <main+0x2a8>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f8ef 	bl	80003e4 <changeLCDScreen>
                    resetCimaBaixo();
 8001206:	f7ff fd01 	bl	8000c0c <resetCimaBaixo>
                }

                if (getBotaoEvento())
 800120a:	f7ff fd23 	bl	8000c54 <getBotaoEvento>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80a5 	beq.w	8001360 <main+0x260>
                {
                    modoMenu = MODO_EXECUTANDO;
 8001216:	4b63      	ldr	r3, [pc, #396]	@ (80013a4 <main+0x2a4>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
                    resetBotaoEvento();
 800121c:	f7ff fd34 	bl	8000c88 <resetBotaoEvento>

                    switch (estadoMenu)
 8001220:	4b61      	ldr	r3, [pc, #388]	@ (80013a8 <main+0x2a8>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <main+0x158>
 8001228:	2b03      	cmp	r3, #3
 800122a:	dc03      	bgt.n	8001234 <main+0x134>
 800122c:	2b01      	cmp	r3, #1
 800122e:	d007      	beq.n	8001240 <main+0x140>
 8001230:	2b02      	cmp	r3, #2
 8001232:	d00b      	beq.n	800124c <main+0x14c>
                    {
                    default:
                    case MENU_TELA1:
                        initGame();
 8001234:	f7ff fa06 	bl	8000644 <initGame>
                        changeLCDScreen(SUB_MENU1);
 8001238:	2005      	movs	r0, #5
 800123a:	f7ff f8d3 	bl	80003e4 <changeLCDScreen>
                        break;
 800123e:	e011      	b.n	8001264 <main+0x164>
                    case MENU_TELA2:
                        updateDataEEPROMLCDMenu2();
 8001240:	f7ff f918 	bl	8000474 <updateDataEEPROMLCDMenu2>
                        changeLCDScreen(SUB_MENU2);
 8001244:	2006      	movs	r0, #6
 8001246:	f7ff f8cd 	bl	80003e4 <changeLCDScreen>
                        break;
 800124a:	e00b      	b.n	8001264 <main+0x164>
                    case MENU_TELA3:
                        updateDataEEPROMLCDMenu3();
 800124c:	f7ff f938 	bl	80004c0 <updateDataEEPROMLCDMenu3>
                        changeLCDScreen(SUB_MENU3);
 8001250:	2007      	movs	r0, #7
 8001252:	f7ff f8c7 	bl	80003e4 <changeLCDScreen>
                        break;
 8001256:	e005      	b.n	8001264 <main+0x164>
                    case MENU_TELA4:
                        updateDataEEPROMLCDMenu4();
 8001258:	f7ff f954 	bl	8000504 <updateDataEEPROMLCDMenu4>
                        changeLCDScreen(SUB_MENU4);
 800125c:	2008      	movs	r0, #8
 800125e:	f7ff f8c1 	bl	80003e4 <changeLCDScreen>
                        break;
 8001262:	bf00      	nop
                    }
                }
                break;
 8001264:	e07c      	b.n	8001360 <main+0x260>

            case MODO_EXECUTANDO:

                switch (estadoMenu)
 8001266:	4b50      	ldr	r3, [pc, #320]	@ (80013a8 <main+0x2a8>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b08      	cmp	r3, #8
 800126c:	d062      	beq.n	8001334 <main+0x234>
 800126e:	2b08      	cmp	r3, #8
 8001270:	dc03      	bgt.n	800127a <main+0x17a>
 8001272:	2b06      	cmp	r3, #6
 8001274:	d014      	beq.n	80012a0 <main+0x1a0>
 8001276:	2b07      	cmp	r3, #7
 8001278:	d020      	beq.n	80012bc <main+0x1bc>
                {
                default:
                case SUB_MENU1:
                    if (!gameRunning())
 800127a:	f7ff fabd 	bl	80007f8 <gameRunning>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d165      	bne.n	8001350 <main+0x250>
                    {
                        if (getBotaoEvento())
 8001284:	f7ff fce6 	bl	8000c54 <getBotaoEvento>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d060      	beq.n	8001350 <main+0x250>
                        {
                            resetBotaoEvento();
 800128e:	f7ff fcfb 	bl	8000c88 <resetBotaoEvento>
                            modoMenu = MODO_NAVEGANDO;
 8001292:	4b44      	ldr	r3, [pc, #272]	@ (80013a4 <main+0x2a4>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
                            changeLCDScreen(MENU_TELA1);
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff f8a3 	bl	80003e4 <changeLCDScreen>
                        }
                    }
                    break;
 800129e:	e057      	b.n	8001350 <main+0x250>
                case SUB_MENU2:
                    if (getBotaoEvento())
 80012a0:	f7ff fcd8 	bl	8000c54 <getBotaoEvento>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d054      	beq.n	8001354 <main+0x254>
                    {
                        // Sai da subtela e volta para navegação
                        modoMenu = MODO_NAVEGANDO;
 80012aa:	4b3e      	ldr	r3, [pc, #248]	@ (80013a4 <main+0x2a4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]

                        changeLCDScreen(MENU_TELA2); // volta para o menu atual
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff f897 	bl	80003e4 <changeLCDScreen>
                        resetBotaoEvento();
 80012b6:	f7ff fce7 	bl	8000c88 <resetBotaoEvento>
                    }
                    break;
 80012ba:	e04b      	b.n	8001354 <main+0x254>
                case SUB_MENU3:
                    changeName();
 80012bc:	f7ff f94a 	bl	8000554 <changeName>
                    if (getBotaoEvento())
 80012c0:	f7ff fcc8 	bl	8000c54 <getBotaoEvento>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d046      	beq.n	8001358 <main+0x258>
                    {
                        char letraSelecionada;
                        resetBotaoEvento();
 80012ca:	f7ff fcdd 	bl	8000c88 <resetBotaoEvento>

                        if (positionYSubMenu3 == 0)
 80012ce:	4b32      	ldr	r3, [pc, #200]	@ (8001398 <main+0x298>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d106      	bne.n	80012e4 <main+0x1e4>
                            letraSelecionada = letrasLinha1[positionXSubMenu3];
 80012d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001394 <main+0x294>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <main+0x2ac>)
 80012de:	5c9b      	ldrb	r3, [r3, r2]
 80012e0:	71fb      	strb	r3, [r7, #7]
 80012e2:	e005      	b.n	80012f0 <main+0x1f0>
                        else
                            letraSelecionada = letrasLinha2[positionXSubMenu3];
 80012e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001394 <main+0x294>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b31      	ldr	r3, [pc, #196]	@ (80013b0 <main+0x2b0>)
 80012ec:	5c9b      	ldrb	r3, [r3, r2]
 80012ee:	71fb      	strb	r3, [r7, #7]

                        if (letraSelecionada == '0')
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b30      	cmp	r3, #48	@ 0x30
 80012f4:	d111      	bne.n	800131a <main+0x21a>
                        {
                            // Sai da subtela e volta para navegação
                            modoMenu = MODO_NAVEGANDO;
 80012f6:	4b2b      	ldr	r3, [pc, #172]	@ (80013a4 <main+0x2a4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
                            lcd_cursor_off();
 80012fc:	f7ff fe78 	bl	8000ff0 <lcd_cursor_off>
                            changeLCDScreen(MENU_TELA3); // volta para o menu atual
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff f86f 	bl	80003e4 <changeLCDScreen>
                            
                            memcpy(dados.nomeAtual, nomeDigitado, 3);
 8001306:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <main+0x2b4>)
 8001308:	4a2b      	ldr	r2, [pc, #172]	@ (80013b8 <main+0x2b8>)
 800130a:	8811      	ldrh	r1, [r2, #0]
 800130c:	7892      	ldrb	r2, [r2, #2]
 800130e:	8019      	strh	r1, [r3, #0]
 8001310:	709a      	strb	r2, [r3, #2]
                            salvar_na_flash(&dados);
 8001312:	4828      	ldr	r0, [pc, #160]	@ (80013b4 <main+0x2b4>)
 8001314:	f7fe ff1a 	bl	800014c <salvar_na_flash>
                        {
                            inserir_letra_nome(letraSelecionada);
                            atualizar_nome_em_letrasLinha2();
                        }
                    }
                    break;
 8001318:	e01e      	b.n	8001358 <main+0x258>
                        else if (letraSelecionada >= 'A' && letraSelecionada <= 'Z')
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2b40      	cmp	r3, #64	@ 0x40
 800131e:	d91b      	bls.n	8001358 <main+0x258>
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	2b5a      	cmp	r3, #90	@ 0x5a
 8001324:	d818      	bhi.n	8001358 <main+0x258>
                            inserir_letra_nome(letraSelecionada);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f95d 	bl	80005e8 <inserir_letra_nome>
                            atualizar_nome_em_letrasLinha2();
 800132e:	f7ff f973 	bl	8000618 <atualizar_nome_em_letrasLinha2>
                    break;
 8001332:	e011      	b.n	8001358 <main+0x258>
                case SUB_MENU4:
                    if (getBotaoEvento())
 8001334:	f7ff fc8e 	bl	8000c54 <getBotaoEvento>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00e      	beq.n	800135c <main+0x25c>
                    {
                        // Sai da subtela e volta para navegação
                        modoMenu = MODO_NAVEGANDO;
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <main+0x2a4>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]

                        changeLCDScreen(MENU_TELA4); // volta para o menu atual
 8001344:	2003      	movs	r0, #3
 8001346:	f7ff f84d 	bl	80003e4 <changeLCDScreen>
                        resetBotaoEvento();
 800134a:	f7ff fc9d 	bl	8000c88 <resetBotaoEvento>
                    }
                    break;
 800134e:	e005      	b.n	800135c <main+0x25c>
                    break;
 8001350:	bf00      	nop
 8001352:	e006      	b.n	8001362 <main+0x262>
                    break;
 8001354:	bf00      	nop
 8001356:	e004      	b.n	8001362 <main+0x262>
                    break;
 8001358:	bf00      	nop
 800135a:	e002      	b.n	8001362 <main+0x262>
                    break;
 800135c:	bf00      	nop
                }
                break;
 800135e:	e000      	b.n	8001362 <main+0x262>
                break;
 8001360:	bf00      	nop
            }

            count100ms = 0;
 8001362:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <main+0x2a0>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
            lcd_Task();
 8001368:	f7fe ffa2 	bl	80002b0 <lcd_Task>
        }

        if (count1000ms >= 1000)
 800136c:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <main+0x2bc>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001374:	f4ff aee6 	bcc.w	8001144 <main+0x44>
        {
            count1000ms = 0;
 8001378:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <main+0x2bc>)
 800137a:	2200      	movs	r2, #0
 800137c:	801a      	strh	r2, [r3, #0]
        if (flag1ms)
 800137e:	e6e1      	b.n	8001144 <main+0x44>
 8001380:	2000044c 	.word	0x2000044c
 8001384:	2000041c 	.word	0x2000041c
 8001388:	20000496 	.word	0x20000496
 800138c:	20000494 	.word	0x20000494
 8001390:	40010c00 	.word	0x40010c00
 8001394:	20000307 	.word	0x20000307
 8001398:	20000306 	.word	0x20000306
 800139c:	200004a0 	.word	0x200004a0
 80013a0:	20000495 	.word	0x20000495
 80013a4:	2000049b 	.word	0x2000049b
 80013a8:	2000049a 	.word	0x2000049a
 80013ac:	20000038 	.word	0x20000038
 80013b0:	2000004c 	.word	0x2000004c
 80013b4:	200002d4 	.word	0x200002d4
 80013b8:	20000060 	.word	0x20000060
 80013bc:	20000498 	.word	0x20000498

080013c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b094      	sub	sp, #80	@ 0x50
 80013c4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ca:	2228      	movs	r2, #40	@ 0x28
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 ff4a 	bl	8005268 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013f0:	2301      	movs	r3, #1
 80013f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fe:	2301      	movs	r3, #1
 8001400:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001402:	2302      	movs	r3, #2
 8001404:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001406:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800140a:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800140c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001410:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001412:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001416:	4618      	mov	r0, r3
 8001418:	f002 faf6 	bl	8003a08 <HAL_RCC_OscConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0x66>
    {
        Error_Handler();
 8001422:	f000 f951 	bl	80016c8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001426:	230f      	movs	r3, #15
 8001428:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001436:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2102      	movs	r1, #2
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fd62 	bl	8003f0c <HAL_RCC_ClockConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x92>
    {
        Error_Handler();
 800144e:	f000 f93b 	bl	80016c8 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001452:	2302      	movs	r3, #2
 8001454:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800145a:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fece 	bl	8004200 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0xae>
    {
        Error_Handler();
 800146a:	f000 f92d 	bl	80016c8 <Error_Handler>
    }
}
 800146e:	bf00      	nop
 8001470:	3750      	adds	r7, #80	@ 0x50
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8001488:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <MX_ADC1_Init+0x74>)
 800148a:	4a19      	ldr	r2, [pc, #100]	@ (80014f0 <MX_ADC1_Init+0x78>)
 800148c:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800148e:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <MX_ADC1_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001494:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <MX_ADC1_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800149a:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <MX_ADC1_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <MX_ADC1_Init+0x74>)
 80014a2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80014a6:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a8:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <MX_ADC1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 1;
 80014ae:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <MX_ADC1_Init+0x74>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	611a      	str	r2, [r3, #16]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b4:	480d      	ldr	r0, [pc, #52]	@ (80014ec <MX_ADC1_Init+0x74>)
 80014b6:	f001 f9a1 	bl	80027fc <HAL_ADC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC1_Init+0x4c>
    {
        Error_Handler();
 80014c0:	f000 f902 	bl	80016c8 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80014c8:	2301      	movs	r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80014cc:	2302      	movs	r3, #2
 80014ce:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	@ (80014ec <MX_ADC1_Init+0x74>)
 80014d6:	f001 fc29 	bl	8002d2c <HAL_ADC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC1_Init+0x6c>
    {
        Error_Handler();
 80014e0:	f000 f8f2 	bl	80016c8 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000041c 	.word	0x2000041c
 80014f0:	40012400 	.word	0x40012400

080014f4 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001510:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <MX_TIM2_Init+0x94>)
 8001512:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001516:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 7199;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <MX_TIM2_Init+0x94>)
 800151a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800151e:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <MX_TIM2_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 9;
 8001526:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <MX_TIM2_Init+0x94>)
 8001528:	2209      	movs	r2, #9
 800152a:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <MX_TIM2_Init+0x94>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <MX_TIM2_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001538:	4813      	ldr	r0, [pc, #76]	@ (8001588 <MX_TIM2_Init+0x94>)
 800153a:	f002 ffcd 	bl	80044d8 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x54>
    {
        Error_Handler();
 8001544:	f000 f8c0 	bl	80016c8 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154c:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <MX_TIM2_Init+0x94>)
 8001556:	f003 f951 	bl	80047fc <HAL_TIM_ConfigClockSource>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0x70>
    {
        Error_Handler();
 8001560:	f000 f8b2 	bl	80016c8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	@ (8001588 <MX_TIM2_Init+0x94>)
 8001572:	f003 fb33 	bl	8004bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM2_Init+0x8c>
    {
        Error_Handler();
 800157c:	f000 f8a4 	bl	80016c8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 8001580:	bf00      	nop
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000044c 	.word	0x2000044c

0800158c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a0:	4b45      	ldr	r3, [pc, #276]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a44      	ldr	r2, [pc, #272]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 80015a6:	f043 0310 	orr.w	r3, r3, #16
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b42      	ldr	r3, [pc, #264]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b8:	4b3f      	ldr	r3, [pc, #252]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a3e      	ldr	r2, [pc, #248]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 80015be:	f043 0320 	orr.w	r3, r3, #32
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b3c      	ldr	r3, [pc, #240]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b39      	ldr	r3, [pc, #228]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a38      	ldr	r2, [pc, #224]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b36      	ldr	r3, [pc, #216]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b33      	ldr	r3, [pc, #204]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a32      	ldr	r2, [pc, #200]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 80015ee:	f043 0308 	orr.w	r3, r3, #8
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b30      	ldr	r3, [pc, #192]	@ (80016b8 <MX_GPIO_Init+0x12c>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin | LCD_E_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001606:	482d      	ldr	r0, [pc, #180]	@ (80016bc <MX_GPIO_Init+0x130>)
 8001608:	f002 f9cd 	bl	80039a6 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2178      	movs	r1, #120	@ 0x78
 8001610:	482b      	ldr	r0, [pc, #172]	@ (80016c0 <MX_GPIO_Init+0x134>)
 8001612:	f002 f9c8 	bl	80039a6 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, D_Pin | CLK1_Pin | CLK2_Pin | TestePin_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f247 0110 	movw	r1, #28688	@ 0x7010
 800161c:	4829      	ldr	r0, [pc, #164]	@ (80016c4 <MX_GPIO_Init+0x138>)
 800161e:	f002 f9c2 	bl	80039a6 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin */
    GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_E_Pin;
 8001622:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	4820      	ldr	r0, [pc, #128]	@ (80016bc <MX_GPIO_Init+0x130>)
 800163c:	f002 f818 	bl	8003670 <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
    GPIO_InitStruct.Pin = LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 8001640:	2378      	movs	r3, #120	@ 0x78
 8001642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	481a      	ldr	r0, [pc, #104]	@ (80016c0 <MX_GPIO_Init+0x134>)
 8001658:	f002 f80a 	bl	8003670 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOTAO_Pin */
    GPIO_InitStruct.Pin = BOTAO_Pin;
 800165c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001660:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	4619      	mov	r1, r3
 8001670:	4814      	ldr	r0, [pc, #80]	@ (80016c4 <MX_GPIO_Init+0x138>)
 8001672:	f001 fffd 	bl	8003670 <HAL_GPIO_Init>

    /*Configure GPIO pins : D_Pin CLK1_Pin CLK2_Pin */
    GPIO_InitStruct.Pin = D_Pin | CLK1_Pin | CLK2_Pin;
 8001676:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800167a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2302      	movs	r3, #2
 8001686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4619      	mov	r1, r3
 800168e:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <MX_GPIO_Init+0x138>)
 8001690:	f001 ffee 	bl	8003670 <HAL_GPIO_Init>

    /*Configure GPIO pin : TestePin_Pin */
    GPIO_InitStruct.Pin = TestePin_Pin;
 8001694:	2310      	movs	r3, #16
 8001696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TestePin_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4619      	mov	r1, r3
 80016aa:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <MX_GPIO_Init+0x138>)
 80016ac:	f001 ffe0 	bl	8003670 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40010800 	.word	0x40010800
 80016c4:	40010c00 	.word	0x40010c00

080016c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <Error_Handler+0x8>

080016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_MspInit+0x5c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <HAL_MspInit+0x5c>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6193      	str	r3, [r2, #24]
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_MspInit+0x5c>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <HAL_MspInit+0x5c>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <HAL_MspInit+0x5c>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <HAL_MspInit+0x5c>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_MspInit+0x60>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <HAL_MspInit+0x60>)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000

08001738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <HAL_ADC_MspInit+0x6c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d121      	bne.n	800179c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001758:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <HAL_ADC_MspInit+0x70>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <HAL_ADC_MspInit+0x70>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_ADC_MspInit+0x70>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_ADC_MspInit+0x70>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a0c      	ldr	r2, [pc, #48]	@ (80017a8 <HAL_ADC_MspInit+0x70>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <HAL_ADC_MspInit+0x70>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001788:	2303      	movs	r3, #3
 800178a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178c:	2303      	movs	r3, #3
 800178e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <HAL_ADC_MspInit+0x74>)
 8001798:	f001 ff6a 	bl	8003670 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40012400 	.word	0x40012400
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010800 	.word	0x40010800

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017c0:	d113      	bne.n	80017ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c2:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <HAL_TIM_Base_MspInit+0x44>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a0b      	ldr	r2, [pc, #44]	@ (80017f4 <HAL_TIM_Base_MspInit+0x44>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <HAL_TIM_Base_MspInit+0x44>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	201c      	movs	r0, #28
 80017e0:	f001 fd0f 	bl	8003202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017e4:	201c      	movs	r0, #28
 80017e6:	f001 fd28 	bl	800323a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <NMI_Handler+0x4>

08001800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <MemManage_Handler+0x4>

08001810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <UsageFault_Handler+0x4>

08001820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001848:	f000 ff98 	bl	800277c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <TIM2_IRQHandler+0x10>)
 8001856:	f002 fee1 	bl	800461c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000044c 	.word	0x2000044c

08001864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return 1;
 8001868:	2301      	movs	r3, #1
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <_kill>:

int _kill(int pid, int sig)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800187c:	f003 fd42 	bl	8005304 <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	2216      	movs	r2, #22
 8001884:	601a      	str	r2, [r3, #0]
  return -1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <_exit>:

void _exit (int status)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800189a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffe7 	bl	8001872 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <_exit+0x12>

080018a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e00a      	b.n	80018d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ba:	f3af 8000 	nop.w
 80018be:	4601      	mov	r1, r0
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	60ba      	str	r2, [r7, #8]
 80018c6:	b2ca      	uxtb	r2, r1
 80018c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbf0      	blt.n	80018ba <_read+0x12>
  }

  return len;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	e009      	b.n	8001908 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	60ba      	str	r2, [r7, #8]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	dbf1      	blt.n	80018f4 <_write+0x12>
  }
  return len;
 8001910:	687b      	ldr	r3, [r7, #4]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_close>:

int _close(int file)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001922:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001940:	605a      	str	r2, [r3, #4]
  return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <_isatty>:

int _isatty(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
	...

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f003 fcaa 	bl	8005304 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20005000 	.word	0x20005000
 80019dc:	00000500 	.word	0x00000500
 80019e0:	2000049c 	.word	0x2000049c
 80019e4:	200006e8 	.word	0x200006e8

080019e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <init_game>:
 * Esta função preenche o tabuleiro com zeros, garantindo que todas as
 * posições estejam vazias no início do jogo. Também inicializa a próxima peça
 * a partir de um número aleatório.
 */
void init_game()
{
 80019f4:	b5b0      	push	{r4, r5, r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
    //printf("Iniciando Tetris...\n");

    for (int i = 0; i < ROWS; i++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	e013      	b.n	8001a28 <init_game+0x34>
    {
        for (int j = 0; j < COLS; j++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	e00a      	b.n	8001a1c <init_game+0x28>
        {
            board[i][j] = 0;
 8001a06:	4a17      	ldr	r2, [pc, #92]	@ (8001a64 <init_game+0x70>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	441a      	add	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < COLS; j++)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b07      	cmp	r3, #7
 8001a20:	ddf1      	ble.n	8001a06 <init_game+0x12>
    for (int i = 0; i < ROWS; i++)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3301      	adds	r3, #1
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	dde8      	ble.n	8001a00 <init_game+0xc>
        }
    }
    next_number = number_aleatory_peace();
 8001a2e:	f000 fb7d 	bl	800212c <number_aleatory_peace>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a0c      	ldr	r2, [pc, #48]	@ (8001a68 <init_game+0x74>)
 8001a36:	6013      	str	r3, [r2, #0]
    next_peace = pecas[next_number];
 8001a38:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <init_game+0x74>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	490b      	ldr	r1, [pc, #44]	@ (8001a6c <init_game+0x78>)
 8001a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <init_game+0x7c>)
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	4413      	add	r3, r2
 8001a44:	460c      	mov	r4, r1
 8001a46:	461d      	mov	r5, r3
 8001a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bdb0      	pop	{r4, r5, r7, pc}
 8001a64:	200004a0 	.word	0x200004a0
 8001a68:	20000530 	.word	0x20000530
 8001a6c:	20000534 	.word	0x20000534
 8001a70:	20000090 	.word	0x20000090

08001a74 <draw_board>:
 * ativos, espaços vazios e blocos fixos de maneira visual para o jogador.
 * Também exibe a próxima peça a ser enviada.
 */

void draw_board()
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
    //printf("Tabuleiro:\n    0 1 2 3 4 5 6 7   Pontuacao: %d \n", pontuacao);
    for (int i = 0; i < ROWS; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	e040      	b.n	8001b02 <draw_board+0x8e>
    {
        if (i < 10)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b09      	cmp	r3, #9
 8001a84:	dc04      	bgt.n	8001a90 <draw_board+0x1c>
        {
            printf("%d - ", i);
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4822      	ldr	r0, [pc, #136]	@ (8001b14 <draw_board+0xa0>)
 8001a8a:	f003 fa45 	bl	8004f18 <iprintf>
 8001a8e:	e003      	b.n	8001a98 <draw_board+0x24>
        }
        else
        {
            printf("%d -", i);
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4821      	ldr	r0, [pc, #132]	@ (8001b18 <draw_board+0xa4>)
 8001a94:	f003 fa40 	bl	8004f18 <iprintf>
        }

        for (int j = 0; j < COLS; j++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	e028      	b.n	8001af0 <draw_board+0x7c>
        {
            if (board[i][j] == 1)
 8001a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b1c <draw_board+0xa8>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	441a      	add	r2, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d103      	bne.n	8001ab8 <draw_board+0x44>
            {
                printf("█ "); // Bloco preenchido
 8001ab0:	481b      	ldr	r0, [pc, #108]	@ (8001b20 <draw_board+0xac>)
 8001ab2:	f003 fa31 	bl	8004f18 <iprintf>
 8001ab6:	e018      	b.n	8001aea <draw_board+0x76>
            }
            else if (board[i][j] == 0)
 8001ab8:	4a18      	ldr	r2, [pc, #96]	@ (8001b1c <draw_board+0xa8>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	441a      	add	r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <draw_board+0x5e>
            {
                printf(". "); // Espaço vazio
 8001aca:	4816      	ldr	r0, [pc, #88]	@ (8001b24 <draw_board+0xb0>)
 8001acc:	f003 fa24 	bl	8004f18 <iprintf>
 8001ad0:	e00b      	b.n	8001aea <draw_board+0x76>
            }
            else if (board[i][j] == 2)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <draw_board+0xa8>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	441a      	add	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d102      	bne.n	8001aea <draw_board+0x76>
            {
                printf("[]"); // Espaço Ja preenchido e fixo
 8001ae4:	4810      	ldr	r0, [pc, #64]	@ (8001b28 <draw_board+0xb4>)
 8001ae6:	f003 fa17 	bl	8004f18 <iprintf>
        for (int j = 0; j < COLS; j++)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b07      	cmp	r3, #7
 8001af4:	ddd3      	ble.n	8001a9e <draw_board+0x2a>
            }
        }
        printf("\n");
 8001af6:	200a      	movs	r0, #10
 8001af8:	f003 fa20 	bl	8004f3c <putchar>
    for (int i = 0; i < ROWS; i++)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b0f      	cmp	r3, #15
 8001b06:	ddbb      	ble.n	8001a80 <draw_board+0xc>
    }
    show_next_peace();
 8001b08:	f000 fd5c 	bl	80025c4 <show_next_peace>
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	08006330 	.word	0x08006330
 8001b18:	08006338 	.word	0x08006338
 8001b1c:	200004a0 	.word	0x200004a0
 8001b20:	08006340 	.word	0x08006340
 8001b24:	08006348 	.word	0x08006348
 8001b28:	0800634c 	.word	0x0800634c

08001b2c <place_piece>:
 * @param coluna  Posição inicial da peça no eixo horizontal.
 * @param peca    Estrutura contendo o formato da peça.
 */

void place_piece(int linha, int coluna, PecaTetris peca)
{
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	b480      	push	{r7}
 8001b30:	b087      	sub	sp, #28
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
 8001b38:	f107 0120 	add.w	r1, r7, #32
 8001b3c:	e881 000c 	stmia.w	r1, {r2, r3}

    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	e031      	b.n	8001baa <place_piece+0x7e>
    {
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	e028      	b.n	8001b9e <place_piece+0x72>
        {
            if (peca.shape[i][j] == 1)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	009a      	lsls	r2, r3, #2
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4413      	add	r3, r2
 8001b54:	f107 0220 	add.w	r2, r7, #32
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d11b      	bne.n	8001b98 <place_piece+0x6c>
            {
                int board_linha = linha + i;
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	4413      	add	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha >= 0 && board_linha < ROWS && board_coluna >= 0 && board_coluna < COLS)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db10      	blt.n	8001b98 <place_piece+0x6c>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	dc0d      	bgt.n	8001b98 <place_piece+0x6c>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db0a      	blt.n	8001b98 <place_piece+0x6c>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b07      	cmp	r3, #7
 8001b86:	dc07      	bgt.n	8001b98 <place_piece+0x6c>
                {
                    board[board_linha][board_coluna] = 1;
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <place_piece+0x94>)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	441a      	add	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4413      	add	r3, r2
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	ddd3      	ble.n	8001b4c <place_piece+0x20>
    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	ddca      	ble.n	8001b46 <place_piece+0x1a>
                }
            }
        }
    }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	b002      	add	sp, #8
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	200004a0 	.word	0x200004a0

08001bc4 <remove_piece>:
 * @param coluna  Posição inicial da peça no eixo horizontal.
 * @param peca    Estrutura contendo o formato da peça.
 */

void remove_piece(int linha, int coluna, PecaTetris peca)
{
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	b480      	push	{r7}
 8001bc8:	b087      	sub	sp, #28
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
 8001bd0:	f107 0120 	add.w	r1, r7, #32
 8001bd4:	e881 000c 	stmia.w	r1, {r2, r3}
    for (int i = 0; i < 4; i++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e031      	b.n	8001c42 <remove_piece+0x7e>
    {
        for (int j = 0; j < 4; j++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e028      	b.n	8001c36 <remove_piece+0x72>
        {
            if (peca.shape[i][j] == 1)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	009a      	lsls	r2, r3, #2
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4413      	add	r3, r2
 8001bec:	f107 0220 	add.w	r2, r7, #32
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d11b      	bne.n	8001c30 <remove_piece+0x6c>
            {
                int board_linha = linha + i;
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha >= 0 && board_linha < ROWS && board_coluna >= 0 && board_coluna < COLS)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db10      	blt.n	8001c30 <remove_piece+0x6c>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	dc0d      	bgt.n	8001c30 <remove_piece+0x6c>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	db0a      	blt.n	8001c30 <remove_piece+0x6c>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b07      	cmp	r3, #7
 8001c1e:	dc07      	bgt.n	8001c30 <remove_piece+0x6c>
                {
                    board[board_linha][board_coluna] = 0;
 8001c20:	4a0d      	ldr	r2, [pc, #52]	@ (8001c58 <remove_piece+0x94>)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	441a      	add	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	3301      	adds	r3, #1
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	ddd3      	ble.n	8001be4 <remove_piece+0x20>
    for (int i = 0; i < 4; i++)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	ddca      	ble.n	8001bde <remove_piece+0x1a>
                }
            }
        }
    }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	b002      	add	sp, #8
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	200004a0 	.word	0x200004a0

08001c5c <can_move>:
 * @param peca    Estrutura contendo o formato da peça.
 * @return        1 se o movimento for válido, 0 caso contrário.
 */

int can_move(int linha, int coluna, PecaTetris peca)
{
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
 8001c68:	f107 0120 	add.w	r1, r7, #32
 8001c6c:	e881 000c 	stmia.w	r1, {r2, r3}

    for (int i = 0; i < 4; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e03c      	b.n	8001cf0 <can_move+0x94>
    {
        for (int j = 0; j < 4; j++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
 8001c7a:	e033      	b.n	8001ce4 <can_move+0x88>
        {
            if (peca.shape[i][j] == 1)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	009a      	lsls	r2, r3, #2
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4413      	add	r3, r2
 8001c84:	f107 0220 	add.w	r2, r7, #32
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d126      	bne.n	8001cde <can_move+0x82>
            {
                int board_linha = linha + i;
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	4413      	add	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha < 0 || board_linha >= ROWS || board_coluna < 0 || board_coluna >= COLS)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db08      	blt.n	8001cb8 <can_move+0x5c>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	dc05      	bgt.n	8001cb8 <can_move+0x5c>
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db02      	blt.n	8001cb8 <can_move+0x5c>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b07      	cmp	r3, #7
 8001cb6:	dd04      	ble.n	8001cc2 <can_move+0x66>
                {
#ifdef DEBUG
                    printf("\nMovimento Invalido\n");
 8001cb8:	4813      	ldr	r0, [pc, #76]	@ (8001d08 <can_move+0xac>)
 8001cba:	f003 f99d 	bl	8004ff8 <puts>
#endif
                    return 0; // Movimento inválido
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e01a      	b.n	8001cf8 <can_move+0x9c>
                }

                // Verifica se a posição está ocupada
                if (board[board_linha][board_coluna] == 2)
 8001cc2:	4a12      	ldr	r2, [pc, #72]	@ (8001d0c <can_move+0xb0>)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	441a      	add	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	4413      	add	r3, r2
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d104      	bne.n	8001cde <can_move+0x82>
                {
#ifdef DEBUG
                    printf("\nMovimento Invalido\n");
 8001cd4:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <can_move+0xac>)
 8001cd6:	f003 f98f 	bl	8004ff8 <puts>
#endif
                    return 0; // Movimento inválido
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e00c      	b.n	8001cf8 <can_move+0x9c>
        for (int j = 0; j < 4; j++)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	ddc8      	ble.n	8001c7c <can_move+0x20>
    for (int i = 0; i < 4; i++)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	ddbf      	ble.n	8001c76 <can_move+0x1a>
                }
            }
        }
    }

    return 1; // Movimento válido
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d02:	b002      	add	sp, #8
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	08006350 	.word	0x08006350
 8001d0c:	200004a0 	.word	0x200004a0

08001d10 <move_piece_right>:
 * @param coluna  Ponteiro para a posição horizontal da peça.
 * @param peca    Estrutura contendo o formato da peça.
 */

void move_piece_right(int *linha, int *coluna, PecaTetris peca)
{
 8001d10:	b082      	sub	sp, #8
 8001d12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d14:	b095      	sub	sp, #84	@ 0x54
 8001d16:	af0e      	add	r7, sp, #56	@ 0x38
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001d20:	e881 000c 	stmia.w	r1, {r2, r3}
    int new_linha = *linha + 0;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	617b      	str	r3, [r7, #20]
    int new_coluna = *coluna + 1;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	613b      	str	r3, [r7, #16]

    if (can_move(new_linha, new_coluna, peca))
 8001d32:	466d      	mov	r5, sp
 8001d34:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d48:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d50:	cb0c      	ldmia	r3, {r2, r3}
 8001d52:	6939      	ldr	r1, [r7, #16]
 8001d54:	6978      	ldr	r0, [r7, #20]
 8001d56:	f7ff ff81 	bl	8001c5c <can_move>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d037      	beq.n	8001dd0 <move_piece_right+0xc0>
    {
        // Apaga a peça da posição atual
        remove_piece(*linha, *coluna, peca);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681e      	ldr	r6, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	466d      	mov	r5, sp
 8001d6c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d80:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d84:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001d88:	ca0c      	ldmia	r2, {r2, r3}
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4630      	mov	r0, r6
 8001d8e:	f7ff ff19 	bl	8001bc4 <remove_piece>

        // Atualiza posição
        *linha = new_linha;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	601a      	str	r2, [r3, #0]
        *coluna = new_coluna;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	601a      	str	r2, [r3, #0]

        // Coloca a peça na nova posição
        place_piece(*linha, *coluna, peca);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681e      	ldr	r6, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	466d      	mov	r5, sp
 8001daa:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dc2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001dc6:	ca0c      	ldmia	r2, {r2, r3}
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4630      	mov	r0, r6
 8001dcc:	f7ff feae 	bl	8001b2c <place_piece>
    }
}
 8001dd0:	bf00      	nop
 8001dd2:	371c      	adds	r7, #28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001dda:	b002      	add	sp, #8
 8001ddc:	4770      	bx	lr

08001dde <move_piece_left>:
 * @param coluna  Ponteiro para a posição horizontal da peça.
 * @param peca    Estrutura contendo o formato da peça.
 */

void move_piece_left(int *linha, int *coluna, PecaTetris peca)
{
 8001dde:	b082      	sub	sp, #8
 8001de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de2:	b095      	sub	sp, #84	@ 0x54
 8001de4:	af0e      	add	r7, sp, #56	@ 0x38
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001dee:	e881 000c 	stmia.w	r1, {r2, r3}
    int new_linha = *linha + 0;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	617b      	str	r3, [r7, #20]
    int new_coluna = *coluna - 1;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]

    if (can_move(new_linha, new_coluna, peca))
 8001e00:	466d      	mov	r5, sp
 8001e02:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e1e:	cb0c      	ldmia	r3, {r2, r3}
 8001e20:	6939      	ldr	r1, [r7, #16]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff1a 	bl	8001c5c <can_move>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d037      	beq.n	8001e9e <move_piece_left+0xc0>
    {
        // Apaga a peça da posição atual
        remove_piece(*linha, *coluna, peca);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681e      	ldr	r6, [r3, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	466d      	mov	r5, sp
 8001e3a:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e52:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001e56:	ca0c      	ldmia	r2, {r2, r3}
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	f7ff feb2 	bl	8001bc4 <remove_piece>

        // Atualiza posição
        *linha = new_linha;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	601a      	str	r2, [r3, #0]
        *coluna = new_coluna;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	601a      	str	r2, [r3, #0]

        // Coloca a peça na nova posição
        place_piece(*linha, *coluna, peca);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681e      	ldr	r6, [r3, #0]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	466d      	mov	r5, sp
 8001e78:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e90:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001e94:	ca0c      	ldmia	r2, {r2, r3}
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f7ff fe47 	bl	8001b2c <place_piece>
    }
}
 8001e9e:	bf00      	nop
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001ea8:	b002      	add	sp, #8
 8001eaa:	4770      	bx	lr

08001eac <rotate_piece_right>:
 * @param coluna  Posição horizontal da peça no tabuleiro.
 * @param peca    Ponteiro para a estrutura da peça a ser rotacionada.
 */

void rotate_piece_right(int linha, int coluna, PecaTetris *peca)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b096      	sub	sp, #88	@ 0x58
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
    int nova_peca[4][4];

    for (int i = 0; i < 4; i++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ebc:	e01d      	b.n	8001efa <rotate_piece_right+0x4e>
    {
        for (int j = 0; j < 4; j++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ec2:	e014      	b.n	8001eee <rotate_piece_right+0x42>
        {
            nova_peca[j][3 - i] = peca->shape[i][j];
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	f1c3 0303 	rsb	r3, r3, #3
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001ece:	0088      	lsls	r0, r1, #2
 8001ed0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ed2:	4401      	add	r1, r0
 8001ed4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001ed8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001eda:	0089      	lsls	r1, r1, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3358      	adds	r3, #88	@ 0x58
 8001ee2:	443b      	add	r3, r7
 8001ee4:	f843 2c48 	str.w	r2, [r3, #-72]
        for (int j = 0; j < 4; j++)
 8001ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001eea:	3301      	adds	r3, #1
 8001eec:	653b      	str	r3, [r7, #80]	@ 0x50
 8001eee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	dde7      	ble.n	8001ec4 <rotate_piece_right+0x18>
    for (int i = 0; i < 4; i++)
 8001ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	ddde      	ble.n	8001ebe <rotate_piece_right+0x12>
        }
    }
    rotate_piece(linha, coluna, nova_peca, peca);
 8001f00:	f107 0210 	add.w	r2, r7, #16
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68b9      	ldr	r1, [r7, #8]
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f804 	bl	8001f16 <rotate_piece>
}
 8001f0e:	bf00      	nop
 8001f10:	3758      	adds	r7, #88	@ 0x58
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <rotate_piece>:
 * @param new_matriz Matriz 4x4 representando a peça rotacionada.
 * @param peca       Ponteiro para a estrutura da peça a ser rotacionada.
 */

void rotate_piece(int linha, int coluna, int new_matriz[4][4], PecaTetris *peca)
{
 8001f16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f18:	b0a7      	sub	sp, #156	@ 0x9c
 8001f1a:	af0e      	add	r7, sp, #56	@ 0x38
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	603b      	str	r3, [r7, #0]

    PecaTetris pecaAux;
    // Cria uma cópia temporária para verificação
    for (int i = 0; i < 4; i++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f28:	e01b      	b.n	8001f62 <rotate_piece+0x4c>
    {
        for (int j = 0; j < 4; j++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f2e:	e012      	b.n	8001f56 <rotate_piece+0x40>
        {
            pecaAux.shape[i][j] = new_matriz[i][j];
 8001f30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f40:	0099      	lsls	r1, r3, #2
 8001f42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f44:	440b      	add	r3, r1
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	3360      	adds	r3, #96	@ 0x60
 8001f4a:	443b      	add	r3, r7
 8001f4c:	f843 2c50 	str.w	r2, [r3, #-80]
        for (int j = 0; j < 4; j++)
 8001f50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f52:	3301      	adds	r3, #1
 8001f54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	dde9      	ble.n	8001f30 <rotate_piece+0x1a>
    for (int i = 0; i < 4; i++)
 8001f5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f5e:	3301      	adds	r3, #1
 8001f60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	dde0      	ble.n	8001f2a <rotate_piece+0x14>
        }
    }

    if (can_move(linha, coluna, pecaAux))
 8001f68:	466d      	mov	r5, sp
 8001f6a:	f107 0418 	add.w	r4, r7, #24
 8001f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f82:	f107 0310 	add.w	r3, r7, #16
 8001f86:	cb0c      	ldmia	r3, {r2, r3}
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff fe66 	bl	8001c5c <can_move>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d047      	beq.n	8002026 <rotate_piece+0x110>
    {
        // Apaga a peça da posição atual
        remove_piece(linha, coluna, *peca);
 8001f96:	683e      	ldr	r6, [r7, #0]
 8001f98:	466d      	mov	r5, sp
 8001f9a:	f106 0408 	add.w	r4, r6, #8
 8001f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001faa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fae:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fb2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff fe03 	bl	8001bc4 <remove_piece>

        // Copia a matriz rotacionada para a peça original
        for (int i = 0; i < 4; i++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fc2:	e019      	b.n	8001ff8 <rotate_piece+0xe2>
        {
            for (int j = 0; j < 4; j++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fc8:	e010      	b.n	8001fec <rotate_piece+0xd6>
            {
                peca->shape[i][j] = new_matriz[i][j];
 8001fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001fd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001fdc:	0090      	lsls	r0, r2, #2
 8001fde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001fe0:	4402      	add	r2, r0
 8001fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = 0; j < 4; j++)
 8001fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fe8:	3301      	adds	r3, #1
 8001fea:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	ddeb      	ble.n	8001fca <rotate_piece+0xb4>
        for (int i = 0; i < 4; i++)
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	dde2      	ble.n	8001fc4 <rotate_piece+0xae>
            }
        }

        // Coloca a peça na nova posição
        place_piece(linha, coluna, *peca);
 8001ffe:	683e      	ldr	r6, [r7, #0]
 8002000:	466d      	mov	r5, sp
 8002002:	f106 0408 	add.w	r4, r6, #8
 8002006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002010:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002012:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002016:	e885 0003 	stmia.w	r5, {r0, r1}
 800201a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7ff fd83 	bl	8001b2c <place_piece>
    }
}
 8002026:	bf00      	nop
 8002028:	3764      	adds	r7, #100	@ 0x64
 800202a:	46bd      	mov	sp, r7
 800202c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800202e <move_piece_down>:
 * @param peca        Ponteiro para a estrutura da peça que está em jogo.
 * @param peca_atual  Ponteiro para o índice da peça atual.
 * @return            Retorna 0 se a peça continuar descendo e 1 se ela foi fixada.
 */
int move_piece_down(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 800202e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002030:	b097      	sub	sp, #92	@ 0x5c
 8002032:	af0e      	add	r7, sp, #56	@ 0x38
 8002034:	6178      	str	r0, [r7, #20]
 8002036:	6139      	str	r1, [r7, #16]
 8002038:	60fa      	str	r2, [r7, #12]
 800203a:	60bb      	str	r3, [r7, #8]
    int nova_linha = *linha + 1;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]

    // Verifica se a peça pode se mover para baixo (se a linha não está fora do tabuleiro e não há outra peça no caminho)
    if (can_move(nova_linha, *coluna, *peca)) // A função can_move agora verifica se a nova posição é válida
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	68fe      	ldr	r6, [r7, #12]
 800204c:	466d      	mov	r5, sp
 800204e:	f106 0408 	add.w	r4, r6, #8
 8002052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002062:	e885 0003 	stmia.w	r5, {r0, r1}
 8002066:	e896 000c 	ldmia.w	r6, {r2, r3}
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	69f8      	ldr	r0, [r7, #28]
 800206e:	f7ff fdf5 	bl	8001c5c <can_move>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d038      	beq.n	80020ea <move_piece_down+0xbc>
    {
        // Apaga a peça da posição atual
        remove_piece(*linha, *coluna, *peca);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	603a      	str	r2, [r7, #0]
 8002084:	68fe      	ldr	r6, [r7, #12]
 8002086:	466d      	mov	r5, sp
 8002088:	f106 0408 	add.w	r4, r6, #8
 800208c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002096:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002098:	e894 0003 	ldmia.w	r4, {r0, r1}
 800209c:	e885 0003 	stmia.w	r5, {r0, r1}
 80020a0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80020a4:	6839      	ldr	r1, [r7, #0]
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fd8c 	bl	8001bc4 <remove_piece>

        // Atualiza a posição da peça
        *linha = nova_linha;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	601a      	str	r2, [r3, #0]

        // Coloca a peça na nova posição
        place_piece(*linha, *coluna, *peca);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	603a      	str	r2, [r7, #0]
 80020be:	68fe      	ldr	r6, [r7, #12]
 80020c0:	466d      	mov	r5, sp
 80020c2:	f106 0408 	add.w	r4, r6, #8
 80020c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020da:	e896 000c 	ldmia.w	r6, {r2, r3}
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fd23 	bl	8001b2c <place_piece>
        return 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e01c      	b.n	8002124 <move_piece_down+0xf6>
    }
    else
    {
        fix_piece(linha, coluna, *peca);
 80020ea:	68fe      	ldr	r6, [r7, #12]
 80020ec:	466d      	mov	r5, sp
 80020ee:	f106 0408 	add.w	r4, r6, #8
 80020f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002102:	e885 0003 	stmia.w	r5, {r0, r1}
 8002106:	e896 000c 	ldmia.w	r6, {r2, r3}
 800210a:	6939      	ldr	r1, [r7, #16]
 800210c:	6978      	ldr	r0, [r7, #20]
 800210e:	f000 f8b9 	bl	8002284 <fix_piece>
        remove_full_lines();
 8002112:	f000 f8f5 	bl	8002300 <remove_full_lines>
        generate_next_piece(linha, coluna, peca, peca_atual);
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	6939      	ldr	r1, [r7, #16]
 800211c:	6978      	ldr	r0, [r7, #20]
 800211e:	f000 f863 	bl	80021e8 <generate_next_piece>
        return 1;
 8002122:	2301      	movs	r3, #1
    }
}
 8002124:	4618      	mov	r0, r3
 8002126:	3724      	adds	r7, #36	@ 0x24
 8002128:	46bd      	mov	sp, r7
 800212a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212c <number_aleatory_peace>:
 *
 * @return       Um número entre 0 e 6, representando o tipo da peça aleatória.
 */

int number_aleatory_peace()
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
    return rand() % 7; // Gera um número entre 0 e 6
 8002130:	f002 fdf2 	bl	8004d18 <rand>
 8002134:	4602      	mov	r2, r0
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <number_aleatory_peace+0x28>)
 8002138:	fb83 1302 	smull	r1, r3, r3, r2
 800213c:	4413      	add	r3, r2
 800213e:	1099      	asrs	r1, r3, #2
 8002140:	17d3      	asrs	r3, r2, #31
 8002142:	1ac9      	subs	r1, r1, r3
 8002144:	460b      	mov	r3, r1
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	1a5b      	subs	r3, r3, r1
 800214a:	1ad1      	subs	r1, r2, r3
 800214c:	460b      	mov	r3, r1
}
 800214e:	4618      	mov	r0, r3
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	92492493 	.word	0x92492493

08002158 <check_piece_at_bottom>:
 *
 * @return 1 se a peça atingiu o fundo ou colidiu com outra peça; 0 caso contrário.
 */

int check_piece_at_bottom(int *linha, int *coluna, PecaTetris peca)
{
 8002158:	b082      	sub	sp, #8
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
 8002164:	f107 0118 	add.w	r1, r7, #24
 8002168:	e881 000c 	stmia.w	r1, {r2, r3}

    // Verifique se há outra peça abaixo dela (posição da peça no tabuleiro)
    for (int i = 0; i < 4; i++)
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e02d      	b.n	80021ce <check_piece_at_bottom+0x76>
    {
        for (int j = 0; j < 4; j++)
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	e024      	b.n	80021c2 <check_piece_at_bottom+0x6a>
        {
            if (peca.shape[i][j] == 1)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	009a      	lsls	r2, r3, #2
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4413      	add	r3, r2
 8002180:	f107 0218 	add.w	r2, r7, #24
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d117      	bne.n	80021bc <check_piece_at_bottom+0x64>
            {
                if (board[*linha + i + 1][*coluna + j] == 2 || (*linha + i) >= 15) // Se houver uma peça fixa abaixo
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	6819      	ldr	r1, [r3, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	440b      	add	r3, r1
 800219e:	4911      	ldr	r1, [pc, #68]	@ (80021e4 <check_piece_at_bottom+0x8c>)
 80021a0:	00d2      	lsls	r2, r2, #3
 80021a2:	440a      	add	r2, r1
 80021a4:	4413      	add	r3, r2
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d005      	beq.n	80021b8 <check_piece_at_bottom+0x60>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	2b0e      	cmp	r3, #14
 80021b6:	dd01      	ble.n	80021bc <check_piece_at_bottom+0x64>
                {
                    return 1;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e00c      	b.n	80021d6 <check_piece_at_bottom+0x7e>
        for (int j = 0; j < 4; j++)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	3301      	adds	r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	ddd7      	ble.n	8002178 <check_piece_at_bottom+0x20>
    for (int i = 0; i < 4; i++)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	ddce      	ble.n	8002172 <check_piece_at_bottom+0x1a>
                }
            }
        }
    }

    return 0; // A peça não atingiu o fundo
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	b002      	add	sp, #8
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	200004a0 	.word	0x200004a0

080021e8 <generate_next_piece>:
 * @param peca        Ponteiro para a estrutura da peça que será colocada no tabuleiro.
 * @param peca_atual  Ponteiro para armazenar o índice da peça atual.
 */

void generate_next_piece(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 80021e8:	b5b0      	push	{r4, r5, r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
    *peca_atual = next_number;
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <generate_next_piece+0x7c>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	601a      	str	r2, [r3, #0]
    *peca = pecas[*peca_atual];
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4a18      	ldr	r2, [pc, #96]	@ (8002268 <generate_next_piece+0x80>)
 8002206:	019b      	lsls	r3, r3, #6
 8002208:	4413      	add	r3, r2
 800220a:	460c      	mov	r4, r1
 800220c:	461d      	mov	r5, r3
 800220e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800221a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800221e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    next_number = number_aleatory_peace();
 8002222:	f7ff ff83 	bl	800212c <number_aleatory_peace>
 8002226:	4603      	mov	r3, r0
 8002228:	4a0e      	ldr	r2, [pc, #56]	@ (8002264 <generate_next_piece+0x7c>)
 800222a:	6013      	str	r3, [r2, #0]
    next_peace = pecas[next_number];
 800222c:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <generate_next_piece+0x7c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	490e      	ldr	r1, [pc, #56]	@ (800226c <generate_next_piece+0x84>)
 8002232:	4a0d      	ldr	r2, [pc, #52]	@ (8002268 <generate_next_piece+0x80>)
 8002234:	019b      	lsls	r3, r3, #6
 8002236:	4413      	add	r3, r2
 8002238:	460c      	mov	r4, r1
 800223a:	461d      	mov	r5, r3
 800223c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800223e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002248:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800224c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Define a posição inicial da nova peça
    *linha = 0;  // Começa do topo
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
    *coluna = 3; // Começa no meio do tabuleiro
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2203      	movs	r2, #3
 800225a:	601a      	str	r2, [r3, #0]
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bdb0      	pop	{r4, r5, r7, pc}
 8002264:	20000530 	.word	0x20000530
 8002268:	20000090 	.word	0x20000090
 800226c:	20000534 	.word	0x20000534

08002270 <get_next_piece>:
 * @brief       Get a Proxima Peca a ser gerada.
 * 
 * Esta função exibe a próxima peça que será gerada no jogo Tetris.
 */

 int get_next_piece(){
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
    return next_number; // Retorna a próxima peça a ser gerada
 8002274:	4b02      	ldr	r3, [pc, #8]	@ (8002280 <get_next_piece+0x10>)
 8002276:	681b      	ldr	r3, [r3, #0]
 }
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	20000530 	.word	0x20000530

08002284 <fix_piece>:
 * @param coluna A coluna onde a peça está atualmente posicionada no tabuleiro.
 * @param peca   A peça que deve ser fixada no tabuleiro.
 */

void fix_piece(int *linha, int *coluna, PecaTetris peca)
{
 8002284:	b082      	sub	sp, #8
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
 8002290:	f107 0118 	add.w	r1, r7, #24
 8002294:	e881 000c 	stmia.w	r1, {r2, r3}
    // Adiciona a peça no tabuleiro, tornando-a fixa
    for (int i = 0; i < 4; i++)
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e023      	b.n	80022e6 <fix_piece+0x62>
    {
        for (int j = 0; j < 4; j++)
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	e01a      	b.n	80022da <fix_piece+0x56>
        {
            if (peca.shape[i][j] == 1)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4413      	add	r3, r2
 80022ac:	f107 0218 	add.w	r2, r7, #24
 80022b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d10d      	bne.n	80022d4 <fix_piece+0x50>
            {
                board[*linha + i][*coluna + j] = 2; // Marca a posição com 2, indicando que está fixa
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	441a      	add	r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6819      	ldr	r1, [r3, #0]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	440b      	add	r3, r1
 80022c8:	490c      	ldr	r1, [pc, #48]	@ (80022fc <fix_piece+0x78>)
 80022ca:	00d2      	lsls	r2, r2, #3
 80022cc:	440a      	add	r2, r1
 80022ce:	4413      	add	r3, r2
 80022d0:	2202      	movs	r2, #2
 80022d2:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	3301      	adds	r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	dde1      	ble.n	80022a4 <fix_piece+0x20>
    for (int i = 0; i < 4; i++)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	ddd8      	ble.n	800229e <fix_piece+0x1a>
            }
        }
    }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	b002      	add	sp, #8
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	200004a0 	.word	0x200004a0

08002300 <remove_full_lines>:
 * acima dela são deslocadas para baixo. A primeira linha do tabuleiro é então limpa.
 * Caso uma ou mais linhas sejam removidas, a pontuação e o nível do jogador são atualizados.
 */

void remove_full_lines()
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0

    int linhas_removidas = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]

    for (int i = ROWS - 1; i >= 0; i--) // Começa da última linha e vai subindo
 800230a:	230f      	movs	r3, #15
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	e052      	b.n	80023b6 <remove_full_lines+0xb6>
    {
        int complete = 1;
 8002310:	2301      	movs	r3, #1
 8002312:	617b      	str	r3, [r7, #20]

        // Verifica se a linha está completa
        for (int j = 0; j < COLS; j++)
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	e00e      	b.n	8002338 <remove_full_lines+0x38>
        {
            if (board[i][j] != 2) // Se qualquer célula não for preenchida
 800231a:	4a31      	ldr	r2, [pc, #196]	@ (80023e0 <remove_full_lines+0xe0>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	441a      	add	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d002      	beq.n	8002332 <remove_full_lines+0x32>
            {
                complete = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
                break; // Se a linha não estiver completa, sai do loop
 8002330:	e005      	b.n	800233e <remove_full_lines+0x3e>
        for (int j = 0; j < COLS; j++)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	3301      	adds	r3, #1
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b07      	cmp	r3, #7
 800233c:	dded      	ble.n	800231a <remove_full_lines+0x1a>
            }
        }

        // Se a linha estiver completa, removemos a linha e deslocamos as linhas acima
        if (complete)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d035      	beq.n	80023b0 <remove_full_lines+0xb0>
        {

            linhas_removidas++;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	3301      	adds	r3, #1
 8002348:	61fb      	str	r3, [r7, #28]

            // Desloca todas as linhas acima uma posição para baixo
            for (int k = i; k > 0; k--)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	e01b      	b.n	8002388 <remove_full_lines+0x88>
            {
                for (int j = 0; j < COLS; j++)
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	e012      	b.n	800237c <remove_full_lines+0x7c>
                {
                    board[k][j] = board[k - 1][j];
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3b01      	subs	r3, #1
 800235a:	4a21      	ldr	r2, [pc, #132]	@ (80023e0 <remove_full_lines+0xe0>)
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	441a      	add	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4413      	add	r3, r2
 8002364:	7819      	ldrb	r1, [r3, #0]
 8002366:	4a1e      	ldr	r2, [pc, #120]	@ (80023e0 <remove_full_lines+0xe0>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	441a      	add	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	4413      	add	r3, r2
 8002372:	460a      	mov	r2, r1
 8002374:	701a      	strb	r2, [r3, #0]
                for (int j = 0; j < COLS; j++)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3301      	adds	r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b07      	cmp	r3, #7
 8002380:	dde9      	ble.n	8002356 <remove_full_lines+0x56>
            for (int k = i; k > 0; k--)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3b01      	subs	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	dce0      	bgt.n	8002350 <remove_full_lines+0x50>
                }
            }

            // Limpa a primeira linha (agora vazia)
            for (int j = 0; j < COLS; j++)
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	e007      	b.n	80023a4 <remove_full_lines+0xa4>
            {
                board[0][j] = 0;
 8002394:	4a12      	ldr	r2, [pc, #72]	@ (80023e0 <remove_full_lines+0xe0>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < COLS; j++)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3301      	adds	r3, #1
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b07      	cmp	r3, #7
 80023a8:	ddf4      	ble.n	8002394 <remove_full_lines+0x94>
            }

            // Como movemos as linhas para baixo, não precisamos verificar a linha removida novamente
            i++; // Reanalisa a linha atual, pois ela pode ter se tornado completa após o deslocamento
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	3301      	adds	r3, #1
 80023ae:	61bb      	str	r3, [r7, #24]
    for (int i = ROWS - 1; i >= 0; i--) // Começa da última linha e vai subindo
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	daa9      	bge.n	8002310 <remove_full_lines+0x10>
        }
    }
    if (linhas_removidas > 0)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	dd0a      	ble.n	80023d8 <remove_full_lines+0xd8>
    {
        atualizar_pontuacao(linhas_removidas);
 80023c2:	69f8      	ldr	r0, [r7, #28]
 80023c4:	f000 f898 	bl	80024f8 <atualizar_pontuacao>

#ifdef DEBUG
        printf("Pontuação: %d   Nível: %d\n", pontuacao, nivel);
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <remove_full_lines+0xe4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a06      	ldr	r2, [pc, #24]	@ (80023e8 <remove_full_lines+0xe8>)
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	4806      	ldr	r0, [pc, #24]	@ (80023ec <remove_full_lines+0xec>)
 80023d4:	f002 fda0 	bl	8004f18 <iprintf>
#endif
    }
}
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200004a0 	.word	0x200004a0
 80023e4:	20000524 	.word	0x20000524
 80023e8:	20000528 	.word	0x20000528
 80023ec:	08006364 	.word	0x08006364

080023f0 <update_game>:
 * @param coluna     Ponteiro para a posição horizontal da peça no tabuleiro.
 * @param peca       Ponteiro para a estrutura da peça atual.
 * @param peca_atual Ponteiro para o índice da peça atual.
 */
void update_game(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	b093      	sub	sp, #76	@ 0x4c
 80023f4:	af0e      	add	r7, sp, #56	@ 0x38
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]

    incrementTime();
 80023fe:	f000 f851 	bl	80024a4 <incrementTime>

    // Se o tempo acumulado atingir o limiar, move a peça para baixo
    if (timer_counter >= TEMPO_BASE / multiplicador_tempo)
 8002402:	4b26      	ldr	r3, [pc, #152]	@ (800249c <update_game+0xac>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800240a:	fb92 f3f3 	sdiv	r3, r2, r3
 800240e:	461a      	mov	r2, r3
 8002410:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <update_game+0xb0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d83c      	bhi.n	8002492 <update_game+0xa2>
    {

        if (check_piece_at_bottom(linha, coluna, *peca) == 1)
 8002418:	687e      	ldr	r6, [r7, #4]
 800241a:	466d      	mov	r5, sp
 800241c:	f106 0408 	add.w	r4, r6, #8
 8002420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002430:	e885 0003 	stmia.w	r5, {r0, r1}
 8002434:	e896 000c 	ldmia.w	r6, {r2, r3}
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f7ff fe8c 	bl	8002158 <check_piece_at_bottom>
 8002440:	4603      	mov	r3, r0
 8002442:	2b01      	cmp	r3, #1
 8002444:	d11c      	bne.n	8002480 <update_game+0x90>
        {
            fix_piece(linha, coluna, *peca);
 8002446:	687e      	ldr	r6, [r7, #4]
 8002448:	466d      	mov	r5, sp
 800244a:	f106 0408 	add.w	r4, r6, #8
 800244e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800245a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800245e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002462:	e896 000c 	ldmia.w	r6, {r2, r3}
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f7ff ff0b 	bl	8002284 <fix_piece>
            remove_full_lines();
 800246e:	f7ff ff47 	bl	8002300 <remove_full_lines>
            generate_next_piece(linha, coluna, peca, peca_atual);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff feb5 	bl	80021e8 <generate_next_piece>
 800247e:	e005      	b.n	800248c <update_game+0x9c>
        }
        else
        {
            move_piece_down(linha, coluna, peca, peca_atual);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7ff fdd1 	bl	800202e <move_piece_down>
        }

        timer_counter = 0; // Reinicia o contador
 800248c:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <update_game+0xb0>)
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
    }

    //draw_board();
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800249a:	bf00      	nop
 800249c:	20000250 	.word	0x20000250
 80024a0:	20000520 	.word	0x20000520

080024a4 <incrementTime>:
 *
 * Esta função é chamada a cada milissegundo para atualizar o contador
 * responsável por controlar a gravidade do jogo.
 */
void incrementTime()
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
    // Chamada de 1 ms aqui
    timer_counter++;
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <incrementTime+0x18>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	4a03      	ldr	r2, [pc, #12]	@ (80024bc <incrementTime+0x18>)
 80024b0:	6013      	str	r3, [r2, #0]
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000520 	.word	0x20000520

080024c0 <game_over>:
 * e o jogo deve terminar.
 *
 * @return      Retorna 1 se o jogo acabou (fim de jogo), ou 0 caso contrário.
 */
int game_over()
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
    for (int j = 0; j < COLS; j++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	e00a      	b.n	80024e2 <game_over+0x22>
    {
        if (board[0][j] == 2)
 80024cc:	4a09      	ldr	r2, [pc, #36]	@ (80024f4 <game_over+0x34>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d101      	bne.n	80024dc <game_over+0x1c>
        {
            return 1;
 80024d8:	2301      	movs	r3, #1
 80024da:	e006      	b.n	80024ea <game_over+0x2a>
    for (int j = 0; j < COLS; j++)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3301      	adds	r3, #1
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b07      	cmp	r3, #7
 80024e6:	ddf1      	ble.n	80024cc <game_over+0xc>
        }
    }
    return 0;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	200004a0 	.word	0x200004a0

080024f8 <atualizar_pontuacao>:
 *   - 4 linhas: 1200 * (nivel+1)
 *
 * @param linhas_removidas Número de linhas removidas de uma vez.
 */
void atualizar_pontuacao(int linhas_removidas)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
    int pontos = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
    switch (linhas_removidas)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	2b03      	cmp	r3, #3
 800250a:	d82e      	bhi.n	800256a <atualizar_pontuacao+0x72>
 800250c:	a201      	add	r2, pc, #4	@ (adr r2, 8002514 <atualizar_pontuacao+0x1c>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	08002525 	.word	0x08002525
 8002518:	08002537 	.word	0x08002537
 800251c:	08002547 	.word	0x08002547
 8002520:	08002559 	.word	0x08002559
    {
    case 1:
        pontos = 40 * (nivel + 1);
 8002524:	4b23      	ldr	r3, [pc, #140]	@ (80025b4 <atualizar_pontuacao+0xbc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	60fb      	str	r3, [r7, #12]
        break;
 8002534:	e01a      	b.n	800256c <atualizar_pontuacao+0x74>
    case 2:
        pontos = 100 * (nivel + 1);
 8002536:	4b1f      	ldr	r3, [pc, #124]	@ (80025b4 <atualizar_pontuacao+0xbc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	2264      	movs	r2, #100	@ 0x64
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	60fb      	str	r3, [r7, #12]
        break;
 8002544:	e012      	b.n	800256c <atualizar_pontuacao+0x74>
    case 3:
        pontos = 300 * (nivel + 1);
 8002546:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <atualizar_pontuacao+0xbc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	60fb      	str	r3, [r7, #12]
        break;
 8002556:	e009      	b.n	800256c <atualizar_pontuacao+0x74>
    case 4:
        pontos = 1200 * (nivel + 1);
 8002558:	4b16      	ldr	r3, [pc, #88]	@ (80025b4 <atualizar_pontuacao+0xbc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3301      	adds	r3, #1
 800255e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	60fb      	str	r3, [r7, #12]
        break;
 8002568:	e000      	b.n	800256c <atualizar_pontuacao+0x74>
    default:
        break;
 800256a:	bf00      	nop
    }
    pontuacao += pontos;
 800256c:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <atualizar_pontuacao+0xc0>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	4a10      	ldr	r2, [pc, #64]	@ (80025b8 <atualizar_pontuacao+0xc0>)
 8002576:	6013      	str	r3, [r2, #0]
    linhas_totais += linhas_removidas;
 8002578:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <atualizar_pontuacao+0xc4>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	4a0e      	ldr	r2, [pc, #56]	@ (80025bc <atualizar_pontuacao+0xc4>)
 8002582:	6013      	str	r3, [r2, #0]

    // Atualiza o nível se atingir o limite
    if (linhas_totais >= LINHAS_POR_NIVEL)
 8002584:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <atualizar_pontuacao+0xc4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b09      	cmp	r3, #9
 800258a:	dd0e      	ble.n	80025aa <atualizar_pontuacao+0xb2>
    {
        nivel++;
 800258c:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <atualizar_pontuacao+0xbc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4a08      	ldr	r2, [pc, #32]	@ (80025b4 <atualizar_pontuacao+0xbc>)
 8002594:	6013      	str	r3, [r2, #0]
        linhas_totais = linhas_totais - LINHAS_POR_NIVEL; // Ou zere e acumule com pontos extras se desejar
 8002596:	4b09      	ldr	r3, [pc, #36]	@ (80025bc <atualizar_pontuacao+0xc4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	3b0a      	subs	r3, #10
 800259c:	4a07      	ldr	r2, [pc, #28]	@ (80025bc <atualizar_pontuacao+0xc4>)
 800259e:	6013      	str	r3, [r2, #0]
        // Ajuste a velocidade do jogo, por exemplo:
        multiplicador_tempo++; // Ou reduza o tempo base
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <atualizar_pontuacao+0xc8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3301      	adds	r3, #1
 80025a6:	4a06      	ldr	r2, [pc, #24]	@ (80025c0 <atualizar_pontuacao+0xc8>)
 80025a8:	6013      	str	r3, [r2, #0]
        //printf("\nNível aumentado! Agora é o nível %d\n", nivel);
    }
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	20000528 	.word	0x20000528
 80025b8:	20000524 	.word	0x20000524
 80025bc:	2000052c 	.word	0x2000052c
 80025c0:	20000250 	.word	0x20000250

080025c4 <show_next_peace>:
 * Esta função imprime no console a matriz 4x4 da próxima peça
 * que será utilizada no jogo. A peça é representada com '█'
 * para blocos preenchidos e '.' para espaços vazios.
 */
void show_next_peace()
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
    printf("Proxima peca a aparecer\n");
 80025ca:	481b      	ldr	r0, [pc, #108]	@ (8002638 <show_next_peace+0x74>)
 80025cc:	f002 fd14 	bl	8004ff8 <puts>
    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 80025d0:	2300      	movs	r3, #0
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	e027      	b.n	8002626 <show_next_peace+0x62>
    {
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 80025d6:	2300      	movs	r3, #0
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	e01b      	b.n	8002614 <show_next_peace+0x50>
        {
            if (next_peace.shape[i][j] == 1)
 80025dc:	4917      	ldr	r1, [pc, #92]	@ (800263c <show_next_peace+0x78>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	009a      	lsls	r2, r3, #2
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d103      	bne.n	80025f6 <show_next_peace+0x32>
            {

                printf("█ "); // Bloco preenchido
 80025ee:	4814      	ldr	r0, [pc, #80]	@ (8002640 <show_next_peace+0x7c>)
 80025f0:	f002 fc92 	bl	8004f18 <iprintf>
 80025f4:	e00b      	b.n	800260e <show_next_peace+0x4a>
            }
            else if (board[i][j] == 0)
 80025f6:	4a13      	ldr	r2, [pc, #76]	@ (8002644 <show_next_peace+0x80>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	441a      	add	r2, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	4413      	add	r3, r2
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <show_next_peace+0x4a>
            {
                printf(". "); // Espaço vazio
 8002608:	480f      	ldr	r0, [pc, #60]	@ (8002648 <show_next_peace+0x84>)
 800260a:	f002 fc85 	bl	8004f18 <iprintf>
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b03      	cmp	r3, #3
 8002618:	dde0      	ble.n	80025dc <show_next_peace+0x18>
            }
        }
        printf("\n");
 800261a:	200a      	movs	r0, #10
 800261c:	f002 fc8e 	bl	8004f3c <putchar>
    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3301      	adds	r3, #1
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b03      	cmp	r3, #3
 800262a:	ddd4      	ble.n	80025d6 <show_next_peace+0x12>
    }
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	08006384 	.word	0x08006384
 800263c:	20000534 	.word	0x20000534
 8002640:	08006340 	.word	0x08006340
 8002644:	200004a0 	.word	0x200004a0
 8002648:	08006348 	.word	0x08006348

0800264c <get_pontuacao>:
 * Esta função retorna a pontuação acumulada pelo jogador durante o jogo.
 *
 * @return A pontuação atual como um valor de 16 bits sem sinal.
 */
uint16_t get_pontuacao(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
    return (uint16_t)pontuacao;
 8002650:	4b03      	ldr	r3, [pc, #12]	@ (8002660 <get_pontuacao+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000524 	.word	0x20000524

08002664 <clear_pontuacao>:

void clear_pontuacao(void){
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
    pontuacao = 0;
 8002668:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <clear_pontuacao+0x2c>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
    nivel = 0;
 800266e:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <clear_pontuacao+0x30>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
    linhas_totais = 0;
 8002674:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <clear_pontuacao+0x34>)
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
    multiplicador_tempo = 1; // Reseta o multiplicador de tempo
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <clear_pontuacao+0x38>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]
    timer_counter = 0; // Reseta o contador de tempo
 8002680:	4b07      	ldr	r3, [pc, #28]	@ (80026a0 <clear_pontuacao+0x3c>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000524 	.word	0x20000524
 8002694:	20000528 	.word	0x20000528
 8002698:	2000052c 	.word	0x2000052c
 800269c:	20000250 	.word	0x20000250
 80026a0:	20000520 	.word	0x20000520

080026a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026a4:	f7ff f9a0 	bl	80019e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480b      	ldr	r0, [pc, #44]	@ (80026d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026aa:	490c      	ldr	r1, [pc, #48]	@ (80026dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026ac:	4a0c      	ldr	r2, [pc, #48]	@ (80026e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a09      	ldr	r2, [pc, #36]	@ (80026e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026c0:	4c09      	ldr	r4, [pc, #36]	@ (80026e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ce:	f002 fe1f 	bl	8005310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026d2:	f7fe fd15 	bl	8001100 <main>
  bx lr
 80026d6:	4770      	bx	lr
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026dc:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 80026e0:	080064c0 	.word	0x080064c0
  ldr r2, =_sbss
 80026e4:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 80026e8:	200006e4 	.word	0x200006e4

080026ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <ADC1_2_IRQHandler>
	...

080026f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f4:	4b08      	ldr	r3, [pc, #32]	@ (8002718 <HAL_Init+0x28>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a07      	ldr	r2, [pc, #28]	@ (8002718 <HAL_Init+0x28>)
 80026fa:	f043 0310 	orr.w	r3, r3, #16
 80026fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002700:	2003      	movs	r0, #3
 8002702:	f000 fd73 	bl	80031ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002706:	200f      	movs	r0, #15
 8002708:	f000 f808 	bl	800271c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800270c:	f7fe ffe2 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40022000 	.word	0x40022000

0800271c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002724:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_InitTick+0x54>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <HAL_InitTick+0x58>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002732:	fbb3 f3f1 	udiv	r3, r3, r1
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fd8b 	bl	8003256 <HAL_SYSTICK_Config>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e00e      	b.n	8002768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0f      	cmp	r3, #15
 800274e:	d80a      	bhi.n	8002766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002750:	2200      	movs	r2, #0
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002758:	f000 fd53 	bl	8003202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800275c:	4a06      	ldr	r2, [pc, #24]	@ (8002778 <HAL_InitTick+0x5c>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	2000008c 	.word	0x2000008c
 8002774:	20000258 	.word	0x20000258
 8002778:	20000254 	.word	0x20000254

0800277c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <HAL_IncTick+0x1c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b05      	ldr	r3, [pc, #20]	@ (800279c <HAL_IncTick+0x20>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4a03      	ldr	r2, [pc, #12]	@ (800279c <HAL_IncTick+0x20>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20000258 	.word	0x20000258
 800279c:	20000574 	.word	0x20000574

080027a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return uwTick;
 80027a4:	4b02      	ldr	r3, [pc, #8]	@ (80027b0 <HAL_GetTick+0x10>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	20000574 	.word	0x20000574

080027b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff fff0 	bl	80027a0 <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027cc:	d005      	beq.n	80027da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_Delay+0x44>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027da:	bf00      	nop
 80027dc:	f7ff ffe0 	bl	80027a0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8f7      	bhi.n	80027dc <HAL_Delay+0x28>
  {
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000258 	.word	0x20000258

080027fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0be      	b.n	800299c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe ff7c 	bl	8001738 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fbc5 	bl	8002fd0 <ADC_ConversionStop_Disable>
 8002846:	4603      	mov	r3, r0
 8002848:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 8099 	bne.w	800298a <HAL_ADC_Init+0x18e>
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 8095 	bne.w	800298a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002864:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002868:	f023 0302 	bic.w	r3, r3, #2
 800286c:	f043 0202 	orr.w	r2, r3, #2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800287c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7b1b      	ldrb	r3, [r3, #12]
 8002882:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002884:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	4313      	orrs	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002894:	d003      	beq.n	800289e <HAL_ADC_Init+0xa2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d102      	bne.n	80028a4 <HAL_ADC_Init+0xa8>
 800289e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028a2:	e000      	b.n	80028a6 <HAL_ADC_Init+0xaa>
 80028a4:	2300      	movs	r3, #0
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7d1b      	ldrb	r3, [r3, #20]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d119      	bne.n	80028e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7b1b      	ldrb	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	035a      	lsls	r2, r3, #13
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e00b      	b.n	80028e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	4b28      	ldr	r3, [pc, #160]	@ (80029a4 <HAL_ADC_Init+0x1a8>)
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	430b      	orrs	r3, r1
 800290e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002918:	d003      	beq.n	8002922 <HAL_ADC_Init+0x126>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d104      	bne.n	800292c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	3b01      	subs	r3, #1
 8002928:	051b      	lsls	r3, r3, #20
 800292a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002932:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	430a      	orrs	r2, r1
 800293e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	4b18      	ldr	r3, [pc, #96]	@ (80029a8 <HAL_ADC_Init+0x1ac>)
 8002948:	4013      	ands	r3, r2
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	429a      	cmp	r2, r3
 800294e:	d10b      	bne.n	8002968 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002966:	e018      	b.n	800299a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	f023 0312 	bic.w	r3, r3, #18
 8002970:	f043 0210 	orr.w	r2, r3, #16
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	f043 0201 	orr.w	r2, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002988:	e007      	b.n	800299a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298e:	f043 0210 	orr.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800299a:	7dfb      	ldrb	r3, [r7, #23]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	ffe1f7fd 	.word	0xffe1f7fd
 80029a8:	ff1f0efe 	.word	0xff1f0efe

080029ac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_Start+0x1a>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e098      	b.n	8002af8 <HAL_ADC_Start+0x14c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 faa4 	bl	8002f1c <ADC_Enable>
 80029d4:	4603      	mov	r3, r0
 80029d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 8087 	bne.w	8002aee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a41      	ldr	r2, [pc, #260]	@ (8002b00 <HAL_ADC_Start+0x154>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d105      	bne.n	8002a0a <HAL_ADC_Start+0x5e>
 80029fe:	4b41      	ldr	r3, [pc, #260]	@ (8002b04 <HAL_ADC_Start+0x158>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d115      	bne.n	8002a36 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d026      	beq.n	8002a72 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a2c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a34:	e01d      	b.n	8002a72 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a2f      	ldr	r2, [pc, #188]	@ (8002b04 <HAL_ADC_Start+0x158>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_ADC_Start+0xaa>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2b      	ldr	r2, [pc, #172]	@ (8002b00 <HAL_ADC_Start+0x154>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10d      	bne.n	8002a72 <HAL_ADC_Start+0xc6>
 8002a56:	4b2b      	ldr	r3, [pc, #172]	@ (8002b04 <HAL_ADC_Start+0x158>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d007      	beq.n	8002a72 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a66:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a6a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	f023 0206 	bic.w	r2, r3, #6
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a8a:	e002      	b.n	8002a92 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f06f 0202 	mvn.w	r2, #2
 8002aa2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002aae:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002ab2:	d113      	bne.n	8002adc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ab8:	4a11      	ldr	r2, [pc, #68]	@ (8002b00 <HAL_ADC_Start+0x154>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d105      	bne.n	8002aca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002abe:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <HAL_ADC_Start+0x158>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d108      	bne.n	8002adc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002ad8:	609a      	str	r2, [r3, #8]
 8002ada:	e00c      	b.n	8002af6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	e003      	b.n	8002af6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40012800 	.word	0x40012800
 8002b04:	40012400 	.word	0x40012400

08002b08 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b1e:	f7ff fe3f 	bl	80027a0 <HAL_GetTick>
 8002b22:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e0d3      	b.n	8002cf2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d131      	bne.n	8002bbc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d12a      	bne.n	8002bbc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b66:	e021      	b.n	8002bac <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b6e:	d01d      	beq.n	8002bac <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <HAL_ADC_PollForConversion+0x7e>
 8002b76:	f7ff fe13 	bl	80027a0 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d212      	bcs.n	8002bac <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b98:	f043 0204 	orr.w	r2, r3, #4
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0a2      	b.n	8002cf2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0d6      	beq.n	8002b68 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bba:	e070      	b.n	8002c9e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8002cfc <HAL_ADC_PollForConversion+0x1f4>)
 8002bbe:	681c      	ldr	r4, [r3, #0]
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	f001 fbd3 	bl	800436c <HAL_RCCEx_GetPeriphCLKFreq>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6919      	ldr	r1, [r3, #16]
 8002bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8002d00 <HAL_ADC_PollForConversion+0x1f8>)
 8002bd4:	400b      	ands	r3, r1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d118      	bne.n	8002c0c <HAL_ADC_PollForConversion+0x104>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68d9      	ldr	r1, [r3, #12]
 8002be0:	4b48      	ldr	r3, [pc, #288]	@ (8002d04 <HAL_ADC_PollForConversion+0x1fc>)
 8002be2:	400b      	ands	r3, r1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d111      	bne.n	8002c0c <HAL_ADC_PollForConversion+0x104>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6919      	ldr	r1, [r3, #16]
 8002bee:	4b46      	ldr	r3, [pc, #280]	@ (8002d08 <HAL_ADC_PollForConversion+0x200>)
 8002bf0:	400b      	ands	r3, r1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d108      	bne.n	8002c08 <HAL_ADC_PollForConversion+0x100>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68d9      	ldr	r1, [r3, #12]
 8002bfc:	4b43      	ldr	r3, [pc, #268]	@ (8002d0c <HAL_ADC_PollForConversion+0x204>)
 8002bfe:	400b      	ands	r3, r1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_PollForConversion+0x100>
 8002c04:	2314      	movs	r3, #20
 8002c06:	e020      	b.n	8002c4a <HAL_ADC_PollForConversion+0x142>
 8002c08:	2329      	movs	r3, #41	@ 0x29
 8002c0a:	e01e      	b.n	8002c4a <HAL_ADC_PollForConversion+0x142>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6919      	ldr	r1, [r3, #16]
 8002c12:	4b3d      	ldr	r3, [pc, #244]	@ (8002d08 <HAL_ADC_PollForConversion+0x200>)
 8002c14:	400b      	ands	r3, r1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_ADC_PollForConversion+0x120>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68d9      	ldr	r1, [r3, #12]
 8002c20:	4b3a      	ldr	r3, [pc, #232]	@ (8002d0c <HAL_ADC_PollForConversion+0x204>)
 8002c22:	400b      	ands	r3, r1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00d      	beq.n	8002c44 <HAL_ADC_PollForConversion+0x13c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6919      	ldr	r1, [r3, #16]
 8002c2e:	4b38      	ldr	r3, [pc, #224]	@ (8002d10 <HAL_ADC_PollForConversion+0x208>)
 8002c30:	400b      	ands	r3, r1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d108      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x140>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68d9      	ldr	r1, [r3, #12]
 8002c3c:	4b34      	ldr	r3, [pc, #208]	@ (8002d10 <HAL_ADC_PollForConversion+0x208>)
 8002c3e:	400b      	ands	r3, r1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x140>
 8002c44:	2354      	movs	r3, #84	@ 0x54
 8002c46:	e000      	b.n	8002c4a <HAL_ADC_PollForConversion+0x142>
 8002c48:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c50:	e021      	b.n	8002c96 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c58:	d01a      	beq.n	8002c90 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_ADC_PollForConversion+0x168>
 8002c60:	f7ff fd9e 	bl	80027a0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d20f      	bcs.n	8002c90 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d90b      	bls.n	8002c90 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	f043 0204 	orr.w	r2, r3, #4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e030      	b.n	8002cf2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3301      	adds	r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d8d9      	bhi.n	8002c52 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f06f 0212 	mvn.w	r2, #18
 8002ca6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002cbe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002cc2:	d115      	bne.n	8002cf0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d111      	bne.n	8002cf0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d105      	bne.n	8002cf0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000008c 	.word	0x2000008c
 8002d00:	24924924 	.word	0x24924924
 8002d04:	00924924 	.word	0x00924924
 8002d08:	12492492 	.word	0x12492492
 8002d0c:	00492492 	.word	0x00492492
 8002d10:	00249249 	.word	0x00249249

08002d14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x20>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e0dc      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x1da>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b06      	cmp	r3, #6
 8002d5a:	d81c      	bhi.n	8002d96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3b05      	subs	r3, #5
 8002d6e:	221f      	movs	r2, #31
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	4019      	ands	r1, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	3b05      	subs	r3, #5
 8002d88:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d94:	e03c      	b.n	8002e10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b0c      	cmp	r3, #12
 8002d9c:	d81c      	bhi.n	8002dd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	3b23      	subs	r3, #35	@ 0x23
 8002db0:	221f      	movs	r2, #31
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	4019      	ands	r1, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3b23      	subs	r3, #35	@ 0x23
 8002dca:	fa00 f203 	lsl.w	r2, r0, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dd6:	e01b      	b.n	8002e10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	3b41      	subs	r3, #65	@ 0x41
 8002dea:	221f      	movs	r2, #31
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	4019      	ands	r1, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	3b41      	subs	r3, #65	@ 0x41
 8002e04:	fa00 f203 	lsl.w	r2, r0, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b09      	cmp	r3, #9
 8002e16:	d91c      	bls.n	8002e52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68d9      	ldr	r1, [r3, #12]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	3b1e      	subs	r3, #30
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	4019      	ands	r1, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6898      	ldr	r0, [r3, #8]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	3b1e      	subs	r3, #30
 8002e44:	fa00 f203 	lsl.w	r2, r0, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	60da      	str	r2, [r3, #12]
 8002e50:	e019      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6919      	ldr	r1, [r3, #16]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	2207      	movs	r2, #7
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	4019      	ands	r1, r3
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6898      	ldr	r0, [r3, #8]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b10      	cmp	r3, #16
 8002e8c:	d003      	beq.n	8002e96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e92:	2b11      	cmp	r3, #17
 8002e94:	d132      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f10 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d125      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d126      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002ebc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d11a      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ec6:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a13      	ldr	r2, [pc, #76]	@ (8002f18 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	0c9a      	lsrs	r2, r3, #18
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002edc:	e002      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f9      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x1b2>
 8002eea:	e007      	b.n	8002efc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef0:	f043 0220 	orr.w	r2, r3, #32
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	40012400 	.word	0x40012400
 8002f14:	2000008c 	.word	0x2000008c
 8002f18:	431bde83 	.word	0x431bde83

08002f1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d040      	beq.n	8002fbc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc8 <ADC_Enable+0xac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fcc <ADC_Enable+0xb0>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	0c9b      	lsrs	r3, r3, #18
 8002f56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f58:	e002      	b.n	8002f60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f9      	bne.n	8002f5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f66:	f7ff fc1b 	bl	80027a0 <HAL_GetTick>
 8002f6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f6c:	e01f      	b.n	8002fae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f6e:	f7ff fc17 	bl	80027a0 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d918      	bls.n	8002fae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d011      	beq.n	8002fae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8e:	f043 0210 	orr.w	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	f043 0201 	orr.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e007      	b.n	8002fbe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d1d8      	bne.n	8002f6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	2000008c 	.word	0x2000008c
 8002fcc:	431bde83 	.word	0x431bde83

08002fd0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d12e      	bne.n	8003048 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ffa:	f7ff fbd1 	bl	80027a0 <HAL_GetTick>
 8002ffe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003000:	e01b      	b.n	800303a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003002:	f7ff fbcd 	bl	80027a0 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d914      	bls.n	800303a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10d      	bne.n	800303a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003022:	f043 0210 	orr.w	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e007      	b.n	800304a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d0dc      	beq.n	8003002 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003064:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003070:	4013      	ands	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800307c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003086:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	60d3      	str	r3, [r2, #12]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a0:	4b04      	ldr	r3, [pc, #16]	@ (80030b4 <__NVIC_GetPriorityGrouping+0x18>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	f003 0307 	and.w	r3, r3, #7
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	db0b      	blt.n	80030e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	f003 021f 	and.w	r2, r3, #31
 80030d0:	4906      	ldr	r1, [pc, #24]	@ (80030ec <__NVIC_EnableIRQ+0x34>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2001      	movs	r0, #1
 80030da:	fa00 f202 	lsl.w	r2, r0, r2
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	e000e100 	.word	0xe000e100

080030f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	6039      	str	r1, [r7, #0]
 80030fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003100:	2b00      	cmp	r3, #0
 8003102:	db0a      	blt.n	800311a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	490c      	ldr	r1, [pc, #48]	@ (800313c <__NVIC_SetPriority+0x4c>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	0112      	lsls	r2, r2, #4
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	440b      	add	r3, r1
 8003114:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003118:	e00a      	b.n	8003130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4908      	ldr	r1, [pc, #32]	@ (8003140 <__NVIC_SetPriority+0x50>)
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	3b04      	subs	r3, #4
 8003128:	0112      	lsls	r2, r2, #4
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	440b      	add	r3, r1
 800312e:	761a      	strb	r2, [r3, #24]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e100 	.word	0xe000e100
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003144:	b480      	push	{r7}
 8003146:	b089      	sub	sp, #36	@ 0x24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f1c3 0307 	rsb	r3, r3, #7
 800315e:	2b04      	cmp	r3, #4
 8003160:	bf28      	it	cs
 8003162:	2304      	movcs	r3, #4
 8003164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3304      	adds	r3, #4
 800316a:	2b06      	cmp	r3, #6
 800316c:	d902      	bls.n	8003174 <NVIC_EncodePriority+0x30>
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3b03      	subs	r3, #3
 8003172:	e000      	b.n	8003176 <NVIC_EncodePriority+0x32>
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43da      	mvns	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	401a      	ands	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800318c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	43d9      	mvns	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	4313      	orrs	r3, r2
         );
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3724      	adds	r7, #36	@ 0x24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031b8:	d301      	bcc.n	80031be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ba:	2301      	movs	r3, #1
 80031bc:	e00f      	b.n	80031de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031be:	4a0a      	ldr	r2, [pc, #40]	@ (80031e8 <SysTick_Config+0x40>)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c6:	210f      	movs	r1, #15
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031cc:	f7ff ff90 	bl	80030f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d0:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <SysTick_Config+0x40>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d6:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <SysTick_Config+0x40>)
 80031d8:	2207      	movs	r2, #7
 80031da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	e000e010 	.word	0xe000e010

080031ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff ff2d 	bl	8003054 <__NVIC_SetPriorityGrouping>
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003214:	f7ff ff42 	bl	800309c <__NVIC_GetPriorityGrouping>
 8003218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	6978      	ldr	r0, [r7, #20]
 8003220:	f7ff ff90 	bl	8003144 <NVIC_EncodePriority>
 8003224:	4602      	mov	r2, r0
 8003226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff5f 	bl	80030f0 <__NVIC_SetPriority>
}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	4603      	mov	r3, r0
 8003242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff35 	bl	80030b8 <__NVIC_EnableIRQ>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ffa2 	bl	80031a8 <SysTick_Config>
 8003264:	4603      	mov	r3, r0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800328a:	4b2f      	ldr	r3, [pc, #188]	@ (8003348 <HAL_FLASH_Program+0xd8>)
 800328c:	7e1b      	ldrb	r3, [r3, #24]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_FLASH_Program+0x26>
 8003292:	2302      	movs	r3, #2
 8003294:	e054      	b.n	8003340 <HAL_FLASH_Program+0xd0>
 8003296:	4b2c      	ldr	r3, [pc, #176]	@ (8003348 <HAL_FLASH_Program+0xd8>)
 8003298:	2201      	movs	r2, #1
 800329a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800329c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80032a0:	f000 f8a8 	bl	80033f4 <FLASH_WaitForLastOperation>
 80032a4:	4603      	mov	r3, r0
 80032a6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d144      	bne.n	8003338 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d102      	bne.n	80032ba <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80032b4:	2301      	movs	r3, #1
 80032b6:	757b      	strb	r3, [r7, #21]
 80032b8:	e007      	b.n	80032ca <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d102      	bne.n	80032c6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80032c0:	2302      	movs	r3, #2
 80032c2:	757b      	strb	r3, [r7, #21]
 80032c4:	e001      	b.n	80032ca <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80032c6:	2304      	movs	r3, #4
 80032c8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	75bb      	strb	r3, [r7, #22]
 80032ce:	e02d      	b.n	800332c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80032d0:	7dbb      	ldrb	r3, [r7, #22]
 80032d2:	005a      	lsls	r2, r3, #1
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	eb02 0c03 	add.w	ip, r2, r3
 80032da:	7dbb      	ldrb	r3, [r7, #22]
 80032dc:	0119      	lsls	r1, r3, #4
 80032de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032e2:	f1c1 0620 	rsb	r6, r1, #32
 80032e6:	f1a1 0020 	sub.w	r0, r1, #32
 80032ea:	fa22 f401 	lsr.w	r4, r2, r1
 80032ee:	fa03 f606 	lsl.w	r6, r3, r6
 80032f2:	4334      	orrs	r4, r6
 80032f4:	fa23 f000 	lsr.w	r0, r3, r0
 80032f8:	4304      	orrs	r4, r0
 80032fa:	fa23 f501 	lsr.w	r5, r3, r1
 80032fe:	b2a3      	uxth	r3, r4
 8003300:	4619      	mov	r1, r3
 8003302:	4660      	mov	r0, ip
 8003304:	f000 f85a 	bl	80033bc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003308:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800330c:	f000 f872 	bl	80033f4 <FLASH_WaitForLastOperation>
 8003310:	4603      	mov	r3, r0
 8003312:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003314:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <HAL_FLASH_Program+0xdc>)
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	4a0c      	ldr	r2, [pc, #48]	@ (800334c <HAL_FLASH_Program+0xdc>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d107      	bne.n	8003336 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003326:	7dbb      	ldrb	r3, [r7, #22]
 8003328:	3301      	adds	r3, #1
 800332a:	75bb      	strb	r3, [r7, #22]
 800332c:	7dba      	ldrb	r2, [r7, #22]
 800332e:	7d7b      	ldrb	r3, [r7, #21]
 8003330:	429a      	cmp	r2, r3
 8003332:	d3cd      	bcc.n	80032d0 <HAL_FLASH_Program+0x60>
 8003334:	e000      	b.n	8003338 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003336:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003338:	4b03      	ldr	r3, [pc, #12]	@ (8003348 <HAL_FLASH_Program+0xd8>)
 800333a:	2200      	movs	r2, #0
 800333c:	761a      	strb	r2, [r3, #24]

  return status;
 800333e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003340:	4618      	mov	r0, r3
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003348:	20000578 	.word	0x20000578
 800334c:	40022000 	.word	0x40022000

08003350 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800335a:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <HAL_FLASH_Unlock+0x40>)
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003366:	4b0a      	ldr	r3, [pc, #40]	@ (8003390 <HAL_FLASH_Unlock+0x40>)
 8003368:	4a0a      	ldr	r2, [pc, #40]	@ (8003394 <HAL_FLASH_Unlock+0x44>)
 800336a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800336c:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <HAL_FLASH_Unlock+0x40>)
 800336e:	4a0a      	ldr	r2, [pc, #40]	@ (8003398 <HAL_FLASH_Unlock+0x48>)
 8003370:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003372:	4b07      	ldr	r3, [pc, #28]	@ (8003390 <HAL_FLASH_Unlock+0x40>)
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003382:	79fb      	ldrb	r3, [r7, #7]
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40022000 	.word	0x40022000
 8003394:	45670123 	.word	0x45670123
 8003398:	cdef89ab 	.word	0xcdef89ab

0800339c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80033a0:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <HAL_FLASH_Lock+0x1c>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <HAL_FLASH_Lock+0x1c>)
 80033a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033aa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40022000 	.word	0x40022000

080033bc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033c8:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <FLASH_Program_HalfWord+0x30>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80033ce:	4b08      	ldr	r3, [pc, #32]	@ (80033f0 <FLASH_Program_HalfWord+0x34>)
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	4a07      	ldr	r2, [pc, #28]	@ (80033f0 <FLASH_Program_HalfWord+0x34>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	887a      	ldrh	r2, [r7, #2]
 80033de:	801a      	strh	r2, [r3, #0]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000578 	.word	0x20000578
 80033f0:	40022000 	.word	0x40022000

080033f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80033fc:	f7ff f9d0 	bl	80027a0 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003402:	e010      	b.n	8003426 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800340a:	d00c      	beq.n	8003426 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <FLASH_WaitForLastOperation+0x2e>
 8003412:	f7ff f9c5 	bl	80027a0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	429a      	cmp	r2, r3
 8003420:	d201      	bcs.n	8003426 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e025      	b.n	8003472 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003426:	4b15      	ldr	r3, [pc, #84]	@ (800347c <FLASH_WaitForLastOperation+0x88>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e8      	bne.n	8003404 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003432:	4b12      	ldr	r3, [pc, #72]	@ (800347c <FLASH_WaitForLastOperation+0x88>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800343e:	4b0f      	ldr	r3, [pc, #60]	@ (800347c <FLASH_WaitForLastOperation+0x88>)
 8003440:	2220      	movs	r2, #32
 8003442:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003444:	4b0d      	ldr	r3, [pc, #52]	@ (800347c <FLASH_WaitForLastOperation+0x88>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003450:	4b0a      	ldr	r3, [pc, #40]	@ (800347c <FLASH_WaitForLastOperation+0x88>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800345c:	4b07      	ldr	r3, [pc, #28]	@ (800347c <FLASH_WaitForLastOperation+0x88>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003468:	f000 f80a 	bl	8003480 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40022000 	.word	0x40022000

08003480 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800348a:	4b23      	ldr	r3, [pc, #140]	@ (8003518 <FLASH_SetErrorCode+0x98>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003496:	4b21      	ldr	r3, [pc, #132]	@ (800351c <FLASH_SetErrorCode+0x9c>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f043 0302 	orr.w	r3, r3, #2
 800349e:	4a1f      	ldr	r2, [pc, #124]	@ (800351c <FLASH_SetErrorCode+0x9c>)
 80034a0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f043 0310 	orr.w	r3, r3, #16
 80034a8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80034aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003518 <FLASH_SetErrorCode+0x98>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80034b6:	4b19      	ldr	r3, [pc, #100]	@ (800351c <FLASH_SetErrorCode+0x9c>)
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	4a17      	ldr	r2, [pc, #92]	@ (800351c <FLASH_SetErrorCode+0x9c>)
 80034c0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80034ca:	4b13      	ldr	r3, [pc, #76]	@ (8003518 <FLASH_SetErrorCode+0x98>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80034d6:	4b11      	ldr	r3, [pc, #68]	@ (800351c <FLASH_SetErrorCode+0x9c>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f043 0304 	orr.w	r3, r3, #4
 80034de:	4a0f      	ldr	r2, [pc, #60]	@ (800351c <FLASH_SetErrorCode+0x9c>)
 80034e0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80034e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003518 <FLASH_SetErrorCode+0x98>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003518 <FLASH_SetErrorCode+0x98>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f240 1201 	movw	r2, #257	@ 0x101
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d106      	bne.n	8003506 <FLASH_SetErrorCode+0x86>
 80034f8:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <FLASH_SetErrorCode+0x98>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	4a06      	ldr	r2, [pc, #24]	@ (8003518 <FLASH_SetErrorCode+0x98>)
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	61d3      	str	r3, [r2, #28]
}  
 8003504:	e002      	b.n	800350c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003506:	4a04      	ldr	r2, [pc, #16]	@ (8003518 <FLASH_SetErrorCode+0x98>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	60d3      	str	r3, [r2, #12]
}  
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40022000 	.word	0x40022000
 800351c:	20000578 	.word	0x20000578

08003520 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003532:	4b2f      	ldr	r3, [pc, #188]	@ (80035f0 <HAL_FLASHEx_Erase+0xd0>)
 8003534:	7e1b      	ldrb	r3, [r3, #24]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_FLASHEx_Erase+0x1e>
 800353a:	2302      	movs	r3, #2
 800353c:	e053      	b.n	80035e6 <HAL_FLASHEx_Erase+0xc6>
 800353e:	4b2c      	ldr	r3, [pc, #176]	@ (80035f0 <HAL_FLASHEx_Erase+0xd0>)
 8003540:	2201      	movs	r2, #1
 8003542:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d116      	bne.n	800357a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800354c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003550:	f7ff ff50 	bl	80033f4 <FLASH_WaitForLastOperation>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d141      	bne.n	80035de <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800355a:	2001      	movs	r0, #1
 800355c:	f000 f84c 	bl	80035f8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003560:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003564:	f7ff ff46 	bl	80033f4 <FLASH_WaitForLastOperation>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800356c:	4b21      	ldr	r3, [pc, #132]	@ (80035f4 <HAL_FLASHEx_Erase+0xd4>)
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	4a20      	ldr	r2, [pc, #128]	@ (80035f4 <HAL_FLASHEx_Erase+0xd4>)
 8003572:	f023 0304 	bic.w	r3, r3, #4
 8003576:	6113      	str	r3, [r2, #16]
 8003578:	e031      	b.n	80035de <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800357a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800357e:	f7ff ff39 	bl	80033f4 <FLASH_WaitForLastOperation>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d12a      	bne.n	80035de <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800358e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	e019      	b.n	80035cc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003598:	68b8      	ldr	r0, [r7, #8]
 800359a:	f000 f849 	bl	8003630 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800359e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80035a2:	f7ff ff27 	bl	80033f4 <FLASH_WaitForLastOperation>
 80035a6:	4603      	mov	r3, r0
 80035a8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80035aa:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <HAL_FLASHEx_Erase+0xd4>)
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	4a11      	ldr	r2, [pc, #68]	@ (80035f4 <HAL_FLASHEx_Erase+0xd4>)
 80035b0:	f023 0302 	bic.w	r3, r3, #2
 80035b4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	601a      	str	r2, [r3, #0]
            break;
 80035c2:	e00c      	b.n	80035de <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035ca:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	029a      	lsls	r2, r3, #10
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	4413      	add	r3, r2
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d3dc      	bcc.n	8003598 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80035de:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <HAL_FLASHEx_Erase+0xd0>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	761a      	strb	r2, [r3, #24]

  return status;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000578 	.word	0x20000578
 80035f4:	40022000 	.word	0x40022000

080035f8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003600:	4b09      	ldr	r3, [pc, #36]	@ (8003628 <FLASH_MassErase+0x30>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003606:	4b09      	ldr	r3, [pc, #36]	@ (800362c <FLASH_MassErase+0x34>)
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	4a08      	ldr	r2, [pc, #32]	@ (800362c <FLASH_MassErase+0x34>)
 800360c:	f043 0304 	orr.w	r3, r3, #4
 8003610:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003612:	4b06      	ldr	r3, [pc, #24]	@ (800362c <FLASH_MassErase+0x34>)
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	4a05      	ldr	r2, [pc, #20]	@ (800362c <FLASH_MassErase+0x34>)
 8003618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800361c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	20000578 	.word	0x20000578
 800362c:	40022000 	.word	0x40022000

08003630 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <FLASH_PageErase+0x38>)
 800363a:	2200      	movs	r2, #0
 800363c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800363e:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <FLASH_PageErase+0x3c>)
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <FLASH_PageErase+0x3c>)
 8003644:	f043 0302 	orr.w	r3, r3, #2
 8003648:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800364a:	4a08      	ldr	r2, [pc, #32]	@ (800366c <FLASH_PageErase+0x3c>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003650:	4b06      	ldr	r3, [pc, #24]	@ (800366c <FLASH_PageErase+0x3c>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4a05      	ldr	r2, [pc, #20]	@ (800366c <FLASH_PageErase+0x3c>)
 8003656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800365a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000578 	.word	0x20000578
 800366c:	40022000 	.word	0x40022000

08003670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003670:	b480      	push	{r7}
 8003672:	b08b      	sub	sp, #44	@ 0x2c
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800367a:	2300      	movs	r3, #0
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800367e:	2300      	movs	r3, #0
 8003680:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003682:	e169      	b.n	8003958 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003684:	2201      	movs	r2, #1
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	429a      	cmp	r2, r3
 800369e:	f040 8158 	bne.w	8003952 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4a9a      	ldr	r2, [pc, #616]	@ (8003910 <HAL_GPIO_Init+0x2a0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d05e      	beq.n	800376a <HAL_GPIO_Init+0xfa>
 80036ac:	4a98      	ldr	r2, [pc, #608]	@ (8003910 <HAL_GPIO_Init+0x2a0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d875      	bhi.n	800379e <HAL_GPIO_Init+0x12e>
 80036b2:	4a98      	ldr	r2, [pc, #608]	@ (8003914 <HAL_GPIO_Init+0x2a4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d058      	beq.n	800376a <HAL_GPIO_Init+0xfa>
 80036b8:	4a96      	ldr	r2, [pc, #600]	@ (8003914 <HAL_GPIO_Init+0x2a4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d86f      	bhi.n	800379e <HAL_GPIO_Init+0x12e>
 80036be:	4a96      	ldr	r2, [pc, #600]	@ (8003918 <HAL_GPIO_Init+0x2a8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d052      	beq.n	800376a <HAL_GPIO_Init+0xfa>
 80036c4:	4a94      	ldr	r2, [pc, #592]	@ (8003918 <HAL_GPIO_Init+0x2a8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d869      	bhi.n	800379e <HAL_GPIO_Init+0x12e>
 80036ca:	4a94      	ldr	r2, [pc, #592]	@ (800391c <HAL_GPIO_Init+0x2ac>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d04c      	beq.n	800376a <HAL_GPIO_Init+0xfa>
 80036d0:	4a92      	ldr	r2, [pc, #584]	@ (800391c <HAL_GPIO_Init+0x2ac>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d863      	bhi.n	800379e <HAL_GPIO_Init+0x12e>
 80036d6:	4a92      	ldr	r2, [pc, #584]	@ (8003920 <HAL_GPIO_Init+0x2b0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d046      	beq.n	800376a <HAL_GPIO_Init+0xfa>
 80036dc:	4a90      	ldr	r2, [pc, #576]	@ (8003920 <HAL_GPIO_Init+0x2b0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d85d      	bhi.n	800379e <HAL_GPIO_Init+0x12e>
 80036e2:	2b12      	cmp	r3, #18
 80036e4:	d82a      	bhi.n	800373c <HAL_GPIO_Init+0xcc>
 80036e6:	2b12      	cmp	r3, #18
 80036e8:	d859      	bhi.n	800379e <HAL_GPIO_Init+0x12e>
 80036ea:	a201      	add	r2, pc, #4	@ (adr r2, 80036f0 <HAL_GPIO_Init+0x80>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	0800376b 	.word	0x0800376b
 80036f4:	08003745 	.word	0x08003745
 80036f8:	08003757 	.word	0x08003757
 80036fc:	08003799 	.word	0x08003799
 8003700:	0800379f 	.word	0x0800379f
 8003704:	0800379f 	.word	0x0800379f
 8003708:	0800379f 	.word	0x0800379f
 800370c:	0800379f 	.word	0x0800379f
 8003710:	0800379f 	.word	0x0800379f
 8003714:	0800379f 	.word	0x0800379f
 8003718:	0800379f 	.word	0x0800379f
 800371c:	0800379f 	.word	0x0800379f
 8003720:	0800379f 	.word	0x0800379f
 8003724:	0800379f 	.word	0x0800379f
 8003728:	0800379f 	.word	0x0800379f
 800372c:	0800379f 	.word	0x0800379f
 8003730:	0800379f 	.word	0x0800379f
 8003734:	0800374d 	.word	0x0800374d
 8003738:	08003761 	.word	0x08003761
 800373c:	4a79      	ldr	r2, [pc, #484]	@ (8003924 <HAL_GPIO_Init+0x2b4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d013      	beq.n	800376a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003742:	e02c      	b.n	800379e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	623b      	str	r3, [r7, #32]
          break;
 800374a:	e029      	b.n	80037a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	3304      	adds	r3, #4
 8003752:	623b      	str	r3, [r7, #32]
          break;
 8003754:	e024      	b.n	80037a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	3308      	adds	r3, #8
 800375c:	623b      	str	r3, [r7, #32]
          break;
 800375e:	e01f      	b.n	80037a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	330c      	adds	r3, #12
 8003766:	623b      	str	r3, [r7, #32]
          break;
 8003768:	e01a      	b.n	80037a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d102      	bne.n	8003778 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003772:	2304      	movs	r3, #4
 8003774:	623b      	str	r3, [r7, #32]
          break;
 8003776:	e013      	b.n	80037a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d105      	bne.n	800378c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003780:	2308      	movs	r3, #8
 8003782:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	611a      	str	r2, [r3, #16]
          break;
 800378a:	e009      	b.n	80037a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800378c:	2308      	movs	r3, #8
 800378e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	615a      	str	r2, [r3, #20]
          break;
 8003796:	e003      	b.n	80037a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003798:	2300      	movs	r3, #0
 800379a:	623b      	str	r3, [r7, #32]
          break;
 800379c:	e000      	b.n	80037a0 <HAL_GPIO_Init+0x130>
          break;
 800379e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2bff      	cmp	r3, #255	@ 0xff
 80037a4:	d801      	bhi.n	80037aa <HAL_GPIO_Init+0x13a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	e001      	b.n	80037ae <HAL_GPIO_Init+0x13e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2bff      	cmp	r3, #255	@ 0xff
 80037b4:	d802      	bhi.n	80037bc <HAL_GPIO_Init+0x14c>
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	e002      	b.n	80037c2 <HAL_GPIO_Init+0x152>
 80037bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037be:	3b08      	subs	r3, #8
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	210f      	movs	r1, #15
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	fa01 f303 	lsl.w	r3, r1, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	401a      	ands	r2, r3
 80037d4:	6a39      	ldr	r1, [r7, #32]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	fa01 f303 	lsl.w	r3, r1, r3
 80037dc:	431a      	orrs	r2, r3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80b1 	beq.w	8003952 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003928 <HAL_GPIO_Init+0x2b8>)
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003928 <HAL_GPIO_Init+0x2b8>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6193      	str	r3, [r2, #24]
 80037fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003928 <HAL_GPIO_Init+0x2b8>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003808:	4a48      	ldr	r2, [pc, #288]	@ (800392c <HAL_GPIO_Init+0x2bc>)
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	089b      	lsrs	r3, r3, #2
 800380e:	3302      	adds	r3, #2
 8003810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003814:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	220f      	movs	r2, #15
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4013      	ands	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a40      	ldr	r2, [pc, #256]	@ (8003930 <HAL_GPIO_Init+0x2c0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d013      	beq.n	800385c <HAL_GPIO_Init+0x1ec>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a3f      	ldr	r2, [pc, #252]	@ (8003934 <HAL_GPIO_Init+0x2c4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00d      	beq.n	8003858 <HAL_GPIO_Init+0x1e8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a3e      	ldr	r2, [pc, #248]	@ (8003938 <HAL_GPIO_Init+0x2c8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d007      	beq.n	8003854 <HAL_GPIO_Init+0x1e4>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a3d      	ldr	r2, [pc, #244]	@ (800393c <HAL_GPIO_Init+0x2cc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_GPIO_Init+0x1e0>
 800384c:	2303      	movs	r3, #3
 800384e:	e006      	b.n	800385e <HAL_GPIO_Init+0x1ee>
 8003850:	2304      	movs	r3, #4
 8003852:	e004      	b.n	800385e <HAL_GPIO_Init+0x1ee>
 8003854:	2302      	movs	r3, #2
 8003856:	e002      	b.n	800385e <HAL_GPIO_Init+0x1ee>
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_GPIO_Init+0x1ee>
 800385c:	2300      	movs	r3, #0
 800385e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003860:	f002 0203 	and.w	r2, r2, #3
 8003864:	0092      	lsls	r2, r2, #2
 8003866:	4093      	lsls	r3, r2
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800386e:	492f      	ldr	r1, [pc, #188]	@ (800392c <HAL_GPIO_Init+0x2bc>)
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	3302      	adds	r3, #2
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d006      	beq.n	8003896 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003888:	4b2d      	ldr	r3, [pc, #180]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	492c      	ldr	r1, [pc, #176]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]
 8003894:	e006      	b.n	80038a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003896:	4b2a      	ldr	r3, [pc, #168]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	43db      	mvns	r3, r3
 800389e:	4928      	ldr	r1, [pc, #160]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d006      	beq.n	80038be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038b0:	4b23      	ldr	r3, [pc, #140]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	4922      	ldr	r1, [pc, #136]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60cb      	str	r3, [r1, #12]
 80038bc:	e006      	b.n	80038cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038be:	4b20      	ldr	r3, [pc, #128]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	491e      	ldr	r1, [pc, #120]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d006      	beq.n	80038e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038d8:	4b19      	ldr	r3, [pc, #100]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	4918      	ldr	r1, [pc, #96]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
 80038e4:	e006      	b.n	80038f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038e6:	4b16      	ldr	r3, [pc, #88]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	4914      	ldr	r1, [pc, #80]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d021      	beq.n	8003944 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003900:	4b0f      	ldr	r3, [pc, #60]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	490e      	ldr	r1, [pc, #56]	@ (8003940 <HAL_GPIO_Init+0x2d0>)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	600b      	str	r3, [r1, #0]
 800390c:	e021      	b.n	8003952 <HAL_GPIO_Init+0x2e2>
 800390e:	bf00      	nop
 8003910:	10320000 	.word	0x10320000
 8003914:	10310000 	.word	0x10310000
 8003918:	10220000 	.word	0x10220000
 800391c:	10210000 	.word	0x10210000
 8003920:	10120000 	.word	0x10120000
 8003924:	10110000 	.word	0x10110000
 8003928:	40021000 	.word	0x40021000
 800392c:	40010000 	.word	0x40010000
 8003930:	40010800 	.word	0x40010800
 8003934:	40010c00 	.word	0x40010c00
 8003938:	40011000 	.word	0x40011000
 800393c:	40011400 	.word	0x40011400
 8003940:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003944:	4b0b      	ldr	r3, [pc, #44]	@ (8003974 <HAL_GPIO_Init+0x304>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	43db      	mvns	r3, r3
 800394c:	4909      	ldr	r1, [pc, #36]	@ (8003974 <HAL_GPIO_Init+0x304>)
 800394e:	4013      	ands	r3, r2
 8003950:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	3301      	adds	r3, #1
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395e:	fa22 f303 	lsr.w	r3, r2, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	f47f ae8e 	bne.w	8003684 <HAL_GPIO_Init+0x14>
  }
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	372c      	adds	r7, #44	@ 0x2c
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr
 8003974:	40010400 	.word	0x40010400

08003978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
 8003994:	e001      	b.n	800399a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003996:	2300      	movs	r3, #0
 8003998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	807b      	strh	r3, [r7, #2]
 80039b2:	4613      	mov	r3, r2
 80039b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039b6:	787b      	ldrb	r3, [r7, #1]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039bc:	887a      	ldrh	r2, [r7, #2]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039c2:	e003      	b.n	80039cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039c4:	887b      	ldrh	r3, [r7, #2]
 80039c6:	041a      	lsls	r2, r3, #16
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	611a      	str	r2, [r3, #16]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039e8:	887a      	ldrh	r2, [r7, #2]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4013      	ands	r3, r2
 80039ee:	041a      	lsls	r2, r3, #16
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	43d9      	mvns	r1, r3
 80039f4:	887b      	ldrh	r3, [r7, #2]
 80039f6:	400b      	ands	r3, r1
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	611a      	str	r2, [r3, #16]
}
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e272      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8087 	beq.w	8003b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a28:	4b92      	ldr	r3, [pc, #584]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d00c      	beq.n	8003a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a34:	4b8f      	ldr	r3, [pc, #572]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 030c 	and.w	r3, r3, #12
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d112      	bne.n	8003a66 <HAL_RCC_OscConfig+0x5e>
 8003a40:	4b8c      	ldr	r3, [pc, #560]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a4c:	d10b      	bne.n	8003a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4e:	4b89      	ldr	r3, [pc, #548]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d06c      	beq.n	8003b34 <HAL_RCC_OscConfig+0x12c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d168      	bne.n	8003b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e24c      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x76>
 8003a70:	4b80      	ldr	r3, [pc, #512]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a7f      	ldr	r2, [pc, #508]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e02e      	b.n	8003adc <HAL_RCC_OscConfig+0xd4>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x98>
 8003a86:	4b7b      	ldr	r3, [pc, #492]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a7a      	ldr	r2, [pc, #488]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b78      	ldr	r3, [pc, #480]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a77      	ldr	r2, [pc, #476]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e01d      	b.n	8003adc <HAL_RCC_OscConfig+0xd4>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0xbc>
 8003aaa:	4b72      	ldr	r3, [pc, #456]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a71      	ldr	r2, [pc, #452]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b6f      	ldr	r3, [pc, #444]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6e      	ldr	r2, [pc, #440]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0xd4>
 8003ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6a      	ldr	r2, [pc, #424]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b68      	ldr	r3, [pc, #416]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a67      	ldr	r2, [pc, #412]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fe5c 	bl	80027a0 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe fe58 	bl	80027a0 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	@ 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e200      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b5d      	ldr	r3, [pc, #372]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xe4>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fe48 	bl	80027a0 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fe fe44 	bl	80027a0 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	@ 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1ec      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	4b53      	ldr	r3, [pc, #332]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x10c>
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b42:	4b4c      	ldr	r3, [pc, #304]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b4e:	4b49      	ldr	r3, [pc, #292]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d11c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x18c>
 8003b5a:	4b46      	ldr	r3, [pc, #280]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b66:	4b43      	ldr	r3, [pc, #268]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_RCC_OscConfig+0x176>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e1c0      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4939      	ldr	r1, [pc, #228]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b92:	e03a      	b.n	8003c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9c:	4b36      	ldr	r3, [pc, #216]	@ (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fe fdfd 	bl	80027a0 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003baa:	f7fe fdf9 	bl	80027a0 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1a1      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4927      	ldr	r1, [pc, #156]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bde:	4b26      	ldr	r3, [pc, #152]	@ (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe fddc 	bl	80027a0 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fe fdd8 	bl	80027a0 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e180      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d03a      	beq.n	8003c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d019      	beq.n	8003c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b17      	ldr	r3, [pc, #92]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c24:	f7fe fdbc 	bl	80027a0 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7fe fdb8 	bl	80027a0 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e160      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f000 faba 	bl	80041c4 <RCC_Delay>
 8003c50:	e01c      	b.n	8003c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c52:	4b0a      	ldr	r3, [pc, #40]	@ (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c58:	f7fe fda2 	bl	80027a0 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5e:	e00f      	b.n	8003c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c60:	f7fe fd9e 	bl	80027a0 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d908      	bls.n	8003c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e146      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	42420000 	.word	0x42420000
 8003c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	4b92      	ldr	r3, [pc, #584]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e9      	bne.n	8003c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80a6 	beq.w	8003de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9e:	4b8b      	ldr	r3, [pc, #556]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	4b88      	ldr	r3, [pc, #544]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	4a87      	ldr	r2, [pc, #540]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb4:	61d3      	str	r3, [r2, #28]
 8003cb6:	4b85      	ldr	r3, [pc, #532]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b82      	ldr	r3, [pc, #520]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d118      	bne.n	8003d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c8>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cde:	f7fe fd5f 	bl	80027a0 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce6:	f7fe fd5b 	bl	80027a0 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b64      	cmp	r3, #100	@ 0x64
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e103      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	4b75      	ldr	r3, [pc, #468]	@ (8003ed0 <HAL_RCC_OscConfig+0x4c8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCC_OscConfig+0x312>
 8003d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4a6e      	ldr	r2, [pc, #440]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6213      	str	r3, [r2, #32]
 8003d18:	e02d      	b.n	8003d76 <HAL_RCC_OscConfig+0x36e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x334>
 8003d22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	4a69      	ldr	r2, [pc, #420]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6213      	str	r3, [r2, #32]
 8003d2e:	4b67      	ldr	r3, [pc, #412]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	4a66      	ldr	r2, [pc, #408]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	6213      	str	r3, [r2, #32]
 8003d3a:	e01c      	b.n	8003d76 <HAL_RCC_OscConfig+0x36e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	d10c      	bne.n	8003d5e <HAL_RCC_OscConfig+0x356>
 8003d44:	4b61      	ldr	r3, [pc, #388]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4a60      	ldr	r2, [pc, #384]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	6213      	str	r3, [r2, #32]
 8003d50:	4b5e      	ldr	r3, [pc, #376]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	4a5d      	ldr	r2, [pc, #372]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6213      	str	r3, [r2, #32]
 8003d5c:	e00b      	b.n	8003d76 <HAL_RCC_OscConfig+0x36e>
 8003d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	4a5a      	ldr	r2, [pc, #360]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6213      	str	r3, [r2, #32]
 8003d6a:	4b58      	ldr	r3, [pc, #352]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	4a57      	ldr	r2, [pc, #348]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d015      	beq.n	8003daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7e:	f7fe fd0f 	bl	80027a0 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fe fd0b 	bl	80027a0 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e0b1      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ee      	beq.n	8003d86 <HAL_RCC_OscConfig+0x37e>
 8003da8:	e014      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003daa:	f7fe fcf9 	bl	80027a0 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fe fcf5 	bl	80027a0 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e09b      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc8:	4b40      	ldr	r3, [pc, #256]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ee      	bne.n	8003db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d105      	bne.n	8003de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dda:	4b3c      	ldr	r3, [pc, #240]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4a3b      	ldr	r2, [pc, #236]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8087 	beq.w	8003efe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003df0:	4b36      	ldr	r3, [pc, #216]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 030c 	and.w	r3, r3, #12
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d061      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d146      	bne.n	8003e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e04:	4b33      	ldr	r3, [pc, #204]	@ (8003ed4 <HAL_RCC_OscConfig+0x4cc>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7fe fcc9 	bl	80027a0 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e12:	f7fe fcc5 	bl	80027a0 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e06d      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e24:	4b29      	ldr	r3, [pc, #164]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f0      	bne.n	8003e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e38:	d108      	bne.n	8003e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e3a:	4b24      	ldr	r3, [pc, #144]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	4921      	ldr	r1, [pc, #132]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a19      	ldr	r1, [r3, #32]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	491b      	ldr	r1, [pc, #108]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e64:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed4 <HAL_RCC_OscConfig+0x4cc>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6a:	f7fe fc99 	bl	80027a0 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e72:	f7fe fc95 	bl	80027a0 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e03d      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e84:	4b11      	ldr	r3, [pc, #68]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x46a>
 8003e90:	e035      	b.n	8003efe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e92:	4b10      	ldr	r3, [pc, #64]	@ (8003ed4 <HAL_RCC_OscConfig+0x4cc>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fe fc82 	bl	80027a0 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fe fc7e 	bl	80027a0 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e026      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb2:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x498>
 8003ebe:	e01e      	b.n	8003efe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d107      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e019      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <HAL_RCC_OscConfig+0x500>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d106      	bne.n	8003efa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000

08003f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0d0      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f20:	4b6a      	ldr	r3, [pc, #424]	@ (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d910      	bls.n	8003f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b67      	ldr	r3, [pc, #412]	@ (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 0207 	bic.w	r2, r3, #7
 8003f36:	4965      	ldr	r1, [pc, #404]	@ (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	4b63      	ldr	r3, [pc, #396]	@ (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0b8      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d020      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f68:	4b59      	ldr	r3, [pc, #356]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4a58      	ldr	r2, [pc, #352]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f80:	4b53      	ldr	r3, [pc, #332]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a52      	ldr	r2, [pc, #328]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f8c:	4b50      	ldr	r3, [pc, #320]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	494d      	ldr	r1, [pc, #308]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d040      	beq.n	800402c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	4b47      	ldr	r3, [pc, #284]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d115      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e07f      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	4b41      	ldr	r3, [pc, #260]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e073      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fda:	4b3d      	ldr	r3, [pc, #244]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e06b      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fea:	4b39      	ldr	r3, [pc, #228]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f023 0203 	bic.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4936      	ldr	r1, [pc, #216]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ffc:	f7fe fbd0 	bl	80027a0 <HAL_GetTick>
 8004000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	e00a      	b.n	800401a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004004:	f7fe fbcc 	bl	80027a0 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e053      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	4b2d      	ldr	r3, [pc, #180]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 020c 	and.w	r2, r3, #12
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	429a      	cmp	r2, r3
 800402a:	d1eb      	bne.n	8004004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800402c:	4b27      	ldr	r3, [pc, #156]	@ (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d210      	bcs.n	800405c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b24      	ldr	r3, [pc, #144]	@ (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 0207 	bic.w	r2, r3, #7
 8004042:	4922      	ldr	r1, [pc, #136]	@ (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b20      	ldr	r3, [pc, #128]	@ (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e032      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004068:	4b19      	ldr	r3, [pc, #100]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4916      	ldr	r1, [pc, #88]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004076:	4313      	orrs	r3, r2
 8004078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004086:	4b12      	ldr	r3, [pc, #72]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	490e      	ldr	r1, [pc, #56]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004096:	4313      	orrs	r3, r2
 8004098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800409a:	f000 f821 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 800409e:	4602      	mov	r2, r0
 80040a0:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	490a      	ldr	r1, [pc, #40]	@ (80040d4 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	5ccb      	ldrb	r3, [r1, r3]
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	4a09      	ldr	r2, [pc, #36]	@ (80040d8 <HAL_RCC_ClockConfig+0x1cc>)
 80040b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040b6:	4b09      	ldr	r3, [pc, #36]	@ (80040dc <HAL_RCC_ClockConfig+0x1d0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fb2e 	bl	800271c <HAL_InitTick>

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40022000 	.word	0x40022000
 80040d0:	40021000 	.word	0x40021000
 80040d4:	0800639c 	.word	0x0800639c
 80040d8:	2000008c 	.word	0x2000008c
 80040dc:	20000254 	.word	0x20000254

080040e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	2300      	movs	r3, #0
 80040f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x94>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b04      	cmp	r3, #4
 8004108:	d002      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x30>
 800410a:	2b08      	cmp	r3, #8
 800410c:	d003      	beq.n	8004116 <HAL_RCC_GetSysClockFreq+0x36>
 800410e:	e027      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004110:	4b19      	ldr	r3, [pc, #100]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x98>)
 8004112:	613b      	str	r3, [r7, #16]
      break;
 8004114:	e027      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	0c9b      	lsrs	r3, r3, #18
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	4a17      	ldr	r2, [pc, #92]	@ (800417c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004120:	5cd3      	ldrb	r3, [r2, r3]
 8004122:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d010      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800412e:	4b11      	ldr	r3, [pc, #68]	@ (8004174 <HAL_RCC_GetSysClockFreq+0x94>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	0c5b      	lsrs	r3, r3, #17
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	4a11      	ldr	r2, [pc, #68]	@ (8004180 <HAL_RCC_GetSysClockFreq+0xa0>)
 800413a:	5cd3      	ldrb	r3, [r2, r3]
 800413c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a0d      	ldr	r2, [pc, #52]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x98>)
 8004142:	fb03 f202 	mul.w	r2, r3, r2
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	e004      	b.n	800415a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a0c      	ldr	r2, [pc, #48]	@ (8004184 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	613b      	str	r3, [r7, #16]
      break;
 800415e:	e002      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004160:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <HAL_RCC_GetSysClockFreq+0x98>)
 8004162:	613b      	str	r3, [r7, #16]
      break;
 8004164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004166:	693b      	ldr	r3, [r7, #16]
}
 8004168:	4618      	mov	r0, r3
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	007a1200 	.word	0x007a1200
 800417c:	080063b4 	.word	0x080063b4
 8004180:	080063c4 	.word	0x080063c4
 8004184:	003d0900 	.word	0x003d0900

08004188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800418c:	4b02      	ldr	r3, [pc, #8]	@ (8004198 <HAL_RCC_GetHCLKFreq+0x10>)
 800418e:	681b      	ldr	r3, [r3, #0]
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	2000008c 	.word	0x2000008c

0800419c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041a0:	f7ff fff2 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	0adb      	lsrs	r3, r3, #11
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	@ (80041c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	080063ac 	.word	0x080063ac

080041c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041cc:	4b0a      	ldr	r3, [pc, #40]	@ (80041f8 <RCC_Delay+0x34>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0a      	ldr	r2, [pc, #40]	@ (80041fc <RCC_Delay+0x38>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	0a5b      	lsrs	r3, r3, #9
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80041e0:	bf00      	nop
  }
  while (Delay --);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1e5a      	subs	r2, r3, #1
 80041e6:	60fa      	str	r2, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f9      	bne.n	80041e0 <RCC_Delay+0x1c>
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	2000008c 	.word	0x2000008c
 80041fc:	10624dd3 	.word	0x10624dd3

08004200 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d07d      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800421c:	2300      	movs	r3, #0
 800421e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004220:	4b4f      	ldr	r3, [pc, #316]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422c:	4b4c      	ldr	r3, [pc, #304]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	4a4b      	ldr	r2, [pc, #300]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004236:	61d3      	str	r3, [r2, #28]
 8004238:	4b49      	ldr	r3, [pc, #292]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	4b46      	ldr	r3, [pc, #280]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d118      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004254:	4b43      	ldr	r3, [pc, #268]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a42      	ldr	r2, [pc, #264]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800425a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800425e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004260:	f7fe fa9e 	bl	80027a0 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004266:	e008      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004268:	f7fe fa9a 	bl	80027a0 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	@ 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e06d      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427a:	4b3a      	ldr	r3, [pc, #232]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004286:	4b36      	ldr	r3, [pc, #216]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d02e      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d027      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042ba:	4a29      	ldr	r2, [pc, #164]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d014      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ca:	f7fe fa69 	bl	80027a0 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fe fa65 	bl	80027a0 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e036      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ee      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4917      	ldr	r1, [pc, #92]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004302:	4313      	orrs	r3, r2
 8004304:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b14      	ldr	r3, [pc, #80]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4a13      	ldr	r2, [pc, #76]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004316:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004324:	4b0e      	ldr	r3, [pc, #56]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	490b      	ldr	r1, [pc, #44]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004342:	4b07      	ldr	r3, [pc, #28]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	4904      	ldr	r1, [pc, #16]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004350:	4313      	orrs	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	40007000 	.word	0x40007000
 8004368:	42420440 	.word	0x42420440

0800436c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	2300      	movs	r3, #0
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	2300      	movs	r3, #0
 800437e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b10      	cmp	r3, #16
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b10      	cmp	r3, #16
 8004392:	f200 808a 	bhi.w	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d045      	beq.n	8004428 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d075      	beq.n	800448e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80043a2:	e082      	b.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80043a4:	4b46      	ldr	r3, [pc, #280]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80043aa:	4b45      	ldr	r3, [pc, #276]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d07b      	beq.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	0c9b      	lsrs	r3, r3, #18
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	4a41      	ldr	r2, [pc, #260]	@ (80044c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80043c0:	5cd3      	ldrb	r3, [r2, r3]
 80043c2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d015      	beq.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043ce:	4b3c      	ldr	r3, [pc, #240]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	0c5b      	lsrs	r3, r3, #17
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	4a3b      	ldr	r2, [pc, #236]	@ (80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80043da:	5cd3      	ldrb	r3, [r2, r3]
 80043dc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00d      	beq.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80043e8:	4a38      	ldr	r2, [pc, #224]	@ (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	e004      	b.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4a34      	ldr	r2, [pc, #208]	@ (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004404:	4b2e      	ldr	r3, [pc, #184]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800440c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004410:	d102      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	61bb      	str	r3, [r7, #24]
      break;
 8004416:	e04a      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	4a2d      	ldr	r2, [pc, #180]	@ (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	61bb      	str	r3, [r7, #24]
      break;
 8004426:	e042      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004428:	4b25      	ldr	r3, [pc, #148]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004438:	d108      	bne.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	e01f      	b.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004456:	d109      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004458:	4b19      	ldr	r3, [pc, #100]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004464:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	e00f      	b.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004472:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004476:	d11c      	bne.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004478:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d016      	beq.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004484:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004488:	61bb      	str	r3, [r7, #24]
      break;
 800448a:	e012      	b.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800448c:	e011      	b.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800448e:	f7ff fe85 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 8004492:	4602      	mov	r2, r0
 8004494:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	0b9b      	lsrs	r3, r3, #14
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	3301      	adds	r3, #1
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	61bb      	str	r3, [r7, #24]
      break;
 80044a8:	e004      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80044b2:	bf00      	nop
    }
  }
  return (frequency);
 80044b4:	69bb      	ldr	r3, [r7, #24]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40021000 	.word	0x40021000
 80044c4:	080063c8 	.word	0x080063c8
 80044c8:	080063d8 	.word	0x080063d8
 80044cc:	007a1200 	.word	0x007a1200
 80044d0:	003d0900 	.word	0x003d0900
 80044d4:	aaaaaaab 	.word	0xaaaaaaab

080044d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e041      	b.n	800456e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fd f956 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3304      	adds	r3, #4
 8004514:	4619      	mov	r1, r3
 8004516:	4610      	mov	r0, r2
 8004518:	f000 fa5c 	bl	80049d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d001      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e03a      	b.n	8004606 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a18      	ldr	r2, [pc, #96]	@ (8004610 <HAL_TIM_Base_Start_IT+0x98>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00e      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x58>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ba:	d009      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x58>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a14      	ldr	r2, [pc, #80]	@ (8004614 <HAL_TIM_Base_Start_IT+0x9c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x58>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a13      	ldr	r2, [pc, #76]	@ (8004618 <HAL_TIM_Base_Start_IT+0xa0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d111      	bne.n	80045f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b06      	cmp	r3, #6
 80045e0:	d010      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0201 	orr.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f2:	e007      	b.n	8004604 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40000400 	.word	0x40000400
 8004618:	40000800 	.word	0x40000800

0800461c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d020      	beq.n	8004680 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01b      	beq.n	8004680 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0202 	mvn.w	r2, #2
 8004650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f998 	bl	800499c <HAL_TIM_IC_CaptureCallback>
 800466c:	e005      	b.n	800467a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f98b 	bl	800498a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f99a 	bl	80049ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d020      	beq.n	80046cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01b      	beq.n	80046cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0204 	mvn.w	r2, #4
 800469c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f972 	bl	800499c <HAL_TIM_IC_CaptureCallback>
 80046b8:	e005      	b.n	80046c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f965 	bl	800498a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f974 	bl	80049ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d020      	beq.n	8004718 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01b      	beq.n	8004718 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0208 	mvn.w	r2, #8
 80046e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2204      	movs	r2, #4
 80046ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f94c 	bl	800499c <HAL_TIM_IC_CaptureCallback>
 8004704:	e005      	b.n	8004712 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f93f 	bl	800498a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f94e 	bl	80049ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	d020      	beq.n	8004764 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01b      	beq.n	8004764 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0210 	mvn.w	r2, #16
 8004734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2208      	movs	r2, #8
 800473a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f926 	bl	800499c <HAL_TIM_IC_CaptureCallback>
 8004750:	e005      	b.n	800475e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f919 	bl	800498a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f928 	bl	80049ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0201 	mvn.w	r2, #1
 8004780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fc fc98 	bl	80010b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00c      	beq.n	80047ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004798:	2b00      	cmp	r3, #0
 800479a:	d007      	beq.n	80047ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fa7f 	bl	8004caa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00c      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f8f8 	bl	80049c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00c      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0220 	mvn.w	r2, #32
 80047ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fa52 	bl	8004c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIM_ConfigClockSource+0x1c>
 8004814:	2302      	movs	r3, #2
 8004816:	e0b4      	b.n	8004982 <HAL_TIM_ConfigClockSource+0x186>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800483e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004850:	d03e      	beq.n	80048d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004856:	f200 8087 	bhi.w	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 800485a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485e:	f000 8086 	beq.w	800496e <HAL_TIM_ConfigClockSource+0x172>
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004866:	d87f      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004868:	2b70      	cmp	r3, #112	@ 0x70
 800486a:	d01a      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0xa6>
 800486c:	2b70      	cmp	r3, #112	@ 0x70
 800486e:	d87b      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004870:	2b60      	cmp	r3, #96	@ 0x60
 8004872:	d050      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0x11a>
 8004874:	2b60      	cmp	r3, #96	@ 0x60
 8004876:	d877      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004878:	2b50      	cmp	r3, #80	@ 0x50
 800487a:	d03c      	beq.n	80048f6 <HAL_TIM_ConfigClockSource+0xfa>
 800487c:	2b50      	cmp	r3, #80	@ 0x50
 800487e:	d873      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004880:	2b40      	cmp	r3, #64	@ 0x40
 8004882:	d058      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0x13a>
 8004884:	2b40      	cmp	r3, #64	@ 0x40
 8004886:	d86f      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004888:	2b30      	cmp	r3, #48	@ 0x30
 800488a:	d064      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x15a>
 800488c:	2b30      	cmp	r3, #48	@ 0x30
 800488e:	d86b      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d060      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x15a>
 8004894:	2b20      	cmp	r3, #32
 8004896:	d867      	bhi.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d05c      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x15a>
 800489c:	2b10      	cmp	r3, #16
 800489e:	d05a      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x15a>
 80048a0:	e062      	b.n	8004968 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048b2:	f000 f974 	bl	8004b9e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	609a      	str	r2, [r3, #8]
      break;
 80048ce:	e04f      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048e0:	f000 f95d 	bl	8004b9e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048f2:	609a      	str	r2, [r3, #8]
      break;
 80048f4:	e03c      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004902:	461a      	mov	r2, r3
 8004904:	f000 f8d4 	bl	8004ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2150      	movs	r1, #80	@ 0x50
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f92b 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 8004914:	e02c      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004922:	461a      	mov	r2, r3
 8004924:	f000 f8f2 	bl	8004b0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2160      	movs	r1, #96	@ 0x60
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f91b 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 8004934:	e01c      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004942:	461a      	mov	r2, r3
 8004944:	f000 f8b4 	bl	8004ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2140      	movs	r1, #64	@ 0x40
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f90b 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 8004954:	e00c      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f000 f902 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 8004966:	e003      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e000      	b.n	8004970 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800496e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004980:	7bfb      	ldrb	r3, [r7, #15]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr

080049ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
	...

080049d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a2f      	ldr	r2, [pc, #188]	@ (8004aa4 <TIM_Base_SetConfig+0xd0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00b      	beq.n	8004a04 <TIM_Base_SetConfig+0x30>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f2:	d007      	beq.n	8004a04 <TIM_Base_SetConfig+0x30>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a2c      	ldr	r2, [pc, #176]	@ (8004aa8 <TIM_Base_SetConfig+0xd4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_Base_SetConfig+0x30>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a2b      	ldr	r2, [pc, #172]	@ (8004aac <TIM_Base_SetConfig+0xd8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d108      	bne.n	8004a16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a22      	ldr	r2, [pc, #136]	@ (8004aa4 <TIM_Base_SetConfig+0xd0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00b      	beq.n	8004a36 <TIM_Base_SetConfig+0x62>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a24:	d007      	beq.n	8004a36 <TIM_Base_SetConfig+0x62>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa8 <TIM_Base_SetConfig+0xd4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_Base_SetConfig+0x62>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1e      	ldr	r2, [pc, #120]	@ (8004aac <TIM_Base_SetConfig+0xd8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d108      	bne.n	8004a48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa4 <TIM_Base_SetConfig+0xd0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d103      	bne.n	8004a7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f023 0201 	bic.w	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	611a      	str	r2, [r3, #16]
  }
}
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40000800 	.word	0x40000800

08004ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f023 0201 	bic.w	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f023 030a 	bic.w	r3, r3, #10
 8004aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f023 0210 	bic.w	r2, r3, #16
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	031b      	lsls	r3, r3, #12
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	621a      	str	r2, [r3, #32]
}
 8004b60:	bf00      	nop
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f043 0307 	orr.w	r3, r3, #7
 8004b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	609a      	str	r2, [r3, #8]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr

08004b9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b087      	sub	sp, #28
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	021a      	lsls	r2, r3, #8
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	609a      	str	r2, [r3, #8]
}
 8004bd2:	bf00      	nop
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e046      	b.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a16      	ldr	r2, [pc, #88]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c40:	d009      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a12      	ldr	r2, [pc, #72]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a10      	ldr	r2, [pc, #64]	@ (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d10c      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800

08004c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr

08004caa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <srand>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4b10      	ldr	r3, [pc, #64]	@ (8004d00 <srand+0x44>)
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	681d      	ldr	r5, [r3, #0]
 8004cc4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004cc6:	b9b3      	cbnz	r3, 8004cf6 <srand+0x3a>
 8004cc8:	2018      	movs	r0, #24
 8004cca:	f000 fbc5 	bl	8005458 <malloc>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	6328      	str	r0, [r5, #48]	@ 0x30
 8004cd2:	b920      	cbnz	r0, 8004cde <srand+0x22>
 8004cd4:	2146      	movs	r1, #70	@ 0x46
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d04 <srand+0x48>)
 8004cd8:	480b      	ldr	r0, [pc, #44]	@ (8004d08 <srand+0x4c>)
 8004cda:	f000 fb57 	bl	800538c <__assert_func>
 8004cde:	490b      	ldr	r1, [pc, #44]	@ (8004d0c <srand+0x50>)
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d10 <srand+0x54>)
 8004ce2:	e9c0 1300 	strd	r1, r3, [r0]
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d14 <srand+0x58>)
 8004ce8:	2100      	movs	r1, #0
 8004cea:	6083      	str	r3, [r0, #8]
 8004cec:	230b      	movs	r3, #11
 8004cee:	8183      	strh	r3, [r0, #12]
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8004cfa:	611c      	str	r4, [r3, #16]
 8004cfc:	615a      	str	r2, [r3, #20]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	20000268 	.word	0x20000268
 8004d04:	080063da 	.word	0x080063da
 8004d08:	080063f1 	.word	0x080063f1
 8004d0c:	abcd330e 	.word	0xabcd330e
 8004d10:	e66d1234 	.word	0xe66d1234
 8004d14:	0005deec 	.word	0x0005deec

08004d18 <rand>:
 8004d18:	4b16      	ldr	r3, [pc, #88]	@ (8004d74 <rand+0x5c>)
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	681c      	ldr	r4, [r3, #0]
 8004d1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004d20:	b9b3      	cbnz	r3, 8004d50 <rand+0x38>
 8004d22:	2018      	movs	r0, #24
 8004d24:	f000 fb98 	bl	8005458 <malloc>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	6320      	str	r0, [r4, #48]	@ 0x30
 8004d2c:	b920      	cbnz	r0, 8004d38 <rand+0x20>
 8004d2e:	2152      	movs	r1, #82	@ 0x52
 8004d30:	4b11      	ldr	r3, [pc, #68]	@ (8004d78 <rand+0x60>)
 8004d32:	4812      	ldr	r0, [pc, #72]	@ (8004d7c <rand+0x64>)
 8004d34:	f000 fb2a 	bl	800538c <__assert_func>
 8004d38:	4911      	ldr	r1, [pc, #68]	@ (8004d80 <rand+0x68>)
 8004d3a:	4b12      	ldr	r3, [pc, #72]	@ (8004d84 <rand+0x6c>)
 8004d3c:	e9c0 1300 	strd	r1, r3, [r0]
 8004d40:	4b11      	ldr	r3, [pc, #68]	@ (8004d88 <rand+0x70>)
 8004d42:	2100      	movs	r1, #0
 8004d44:	6083      	str	r3, [r0, #8]
 8004d46:	230b      	movs	r3, #11
 8004d48:	8183      	strh	r3, [r0, #12]
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004d50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004d52:	480e      	ldr	r0, [pc, #56]	@ (8004d8c <rand+0x74>)
 8004d54:	690b      	ldr	r3, [r1, #16]
 8004d56:	694c      	ldr	r4, [r1, #20]
 8004d58:	4358      	muls	r0, r3
 8004d5a:	4a0d      	ldr	r2, [pc, #52]	@ (8004d90 <rand+0x78>)
 8004d5c:	fb02 0004 	mla	r0, r2, r4, r0
 8004d60:	fba3 3202 	umull	r3, r2, r3, r2
 8004d64:	3301      	adds	r3, #1
 8004d66:	eb40 0002 	adc.w	r0, r0, r2
 8004d6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004d6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004d72:	bd10      	pop	{r4, pc}
 8004d74:	20000268 	.word	0x20000268
 8004d78:	080063da 	.word	0x080063da
 8004d7c:	080063f1 	.word	0x080063f1
 8004d80:	abcd330e 	.word	0xabcd330e
 8004d84:	e66d1234 	.word	0xe66d1234
 8004d88:	0005deec 	.word	0x0005deec
 8004d8c:	5851f42d 	.word	0x5851f42d
 8004d90:	4c957f2d 	.word	0x4c957f2d

08004d94 <std>:
 8004d94:	2300      	movs	r3, #0
 8004d96:	b510      	push	{r4, lr}
 8004d98:	4604      	mov	r4, r0
 8004d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004da2:	6083      	str	r3, [r0, #8]
 8004da4:	8181      	strh	r1, [r0, #12]
 8004da6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004da8:	81c2      	strh	r2, [r0, #14]
 8004daa:	6183      	str	r3, [r0, #24]
 8004dac:	4619      	mov	r1, r3
 8004dae:	2208      	movs	r2, #8
 8004db0:	305c      	adds	r0, #92	@ 0x5c
 8004db2:	f000 fa59 	bl	8005268 <memset>
 8004db6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dec <std+0x58>)
 8004db8:	6224      	str	r4, [r4, #32]
 8004dba:	6263      	str	r3, [r4, #36]	@ 0x24
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <std+0x5c>)
 8004dbe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004df4 <std+0x60>)
 8004dc2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004df8 <std+0x64>)
 8004dc6:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004dfc <std+0x68>)
 8004dca:	429c      	cmp	r4, r3
 8004dcc:	d006      	beq.n	8004ddc <std+0x48>
 8004dce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004dd2:	4294      	cmp	r4, r2
 8004dd4:	d002      	beq.n	8004ddc <std+0x48>
 8004dd6:	33d0      	adds	r3, #208	@ 0xd0
 8004dd8:	429c      	cmp	r4, r3
 8004dda:	d105      	bne.n	8004de8 <std+0x54>
 8004ddc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de4:	f000 bab8 	b.w	8005358 <__retarget_lock_init_recursive>
 8004de8:	bd10      	pop	{r4, pc}
 8004dea:	bf00      	nop
 8004dec:	080050b9 	.word	0x080050b9
 8004df0:	080050db 	.word	0x080050db
 8004df4:	08005113 	.word	0x08005113
 8004df8:	08005137 	.word	0x08005137
 8004dfc:	20000598 	.word	0x20000598

08004e00 <stdio_exit_handler>:
 8004e00:	4a02      	ldr	r2, [pc, #8]	@ (8004e0c <stdio_exit_handler+0xc>)
 8004e02:	4903      	ldr	r1, [pc, #12]	@ (8004e10 <stdio_exit_handler+0x10>)
 8004e04:	4803      	ldr	r0, [pc, #12]	@ (8004e14 <stdio_exit_handler+0x14>)
 8004e06:	f000 b869 	b.w	8004edc <_fwalk_sglue>
 8004e0a:	bf00      	nop
 8004e0c:	2000025c 	.word	0x2000025c
 8004e10:	08005f15 	.word	0x08005f15
 8004e14:	2000026c 	.word	0x2000026c

08004e18 <cleanup_stdio>:
 8004e18:	6841      	ldr	r1, [r0, #4]
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e4c <cleanup_stdio+0x34>)
 8004e1c:	b510      	push	{r4, lr}
 8004e1e:	4299      	cmp	r1, r3
 8004e20:	4604      	mov	r4, r0
 8004e22:	d001      	beq.n	8004e28 <cleanup_stdio+0x10>
 8004e24:	f001 f876 	bl	8005f14 <_fflush_r>
 8004e28:	68a1      	ldr	r1, [r4, #8]
 8004e2a:	4b09      	ldr	r3, [pc, #36]	@ (8004e50 <cleanup_stdio+0x38>)
 8004e2c:	4299      	cmp	r1, r3
 8004e2e:	d002      	beq.n	8004e36 <cleanup_stdio+0x1e>
 8004e30:	4620      	mov	r0, r4
 8004e32:	f001 f86f 	bl	8005f14 <_fflush_r>
 8004e36:	68e1      	ldr	r1, [r4, #12]
 8004e38:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <cleanup_stdio+0x3c>)
 8004e3a:	4299      	cmp	r1, r3
 8004e3c:	d004      	beq.n	8004e48 <cleanup_stdio+0x30>
 8004e3e:	4620      	mov	r0, r4
 8004e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e44:	f001 b866 	b.w	8005f14 <_fflush_r>
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000598 	.word	0x20000598
 8004e50:	20000600 	.word	0x20000600
 8004e54:	20000668 	.word	0x20000668

08004e58 <global_stdio_init.part.0>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <global_stdio_init.part.0+0x30>)
 8004e5c:	4c0b      	ldr	r4, [pc, #44]	@ (8004e8c <global_stdio_init.part.0+0x34>)
 8004e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e90 <global_stdio_init.part.0+0x38>)
 8004e60:	4620      	mov	r0, r4
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	2104      	movs	r1, #4
 8004e66:	2200      	movs	r2, #0
 8004e68:	f7ff ff94 	bl	8004d94 <std>
 8004e6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e70:	2201      	movs	r2, #1
 8004e72:	2109      	movs	r1, #9
 8004e74:	f7ff ff8e 	bl	8004d94 <std>
 8004e78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e82:	2112      	movs	r1, #18
 8004e84:	f7ff bf86 	b.w	8004d94 <std>
 8004e88:	200006d0 	.word	0x200006d0
 8004e8c:	20000598 	.word	0x20000598
 8004e90:	08004e01 	.word	0x08004e01

08004e94 <__sfp_lock_acquire>:
 8004e94:	4801      	ldr	r0, [pc, #4]	@ (8004e9c <__sfp_lock_acquire+0x8>)
 8004e96:	f000 ba60 	b.w	800535a <__retarget_lock_acquire_recursive>
 8004e9a:	bf00      	nop
 8004e9c:	200006d9 	.word	0x200006d9

08004ea0 <__sfp_lock_release>:
 8004ea0:	4801      	ldr	r0, [pc, #4]	@ (8004ea8 <__sfp_lock_release+0x8>)
 8004ea2:	f000 ba5b 	b.w	800535c <__retarget_lock_release_recursive>
 8004ea6:	bf00      	nop
 8004ea8:	200006d9 	.word	0x200006d9

08004eac <__sinit>:
 8004eac:	b510      	push	{r4, lr}
 8004eae:	4604      	mov	r4, r0
 8004eb0:	f7ff fff0 	bl	8004e94 <__sfp_lock_acquire>
 8004eb4:	6a23      	ldr	r3, [r4, #32]
 8004eb6:	b11b      	cbz	r3, 8004ec0 <__sinit+0x14>
 8004eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ebc:	f7ff bff0 	b.w	8004ea0 <__sfp_lock_release>
 8004ec0:	4b04      	ldr	r3, [pc, #16]	@ (8004ed4 <__sinit+0x28>)
 8004ec2:	6223      	str	r3, [r4, #32]
 8004ec4:	4b04      	ldr	r3, [pc, #16]	@ (8004ed8 <__sinit+0x2c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f5      	bne.n	8004eb8 <__sinit+0xc>
 8004ecc:	f7ff ffc4 	bl	8004e58 <global_stdio_init.part.0>
 8004ed0:	e7f2      	b.n	8004eb8 <__sinit+0xc>
 8004ed2:	bf00      	nop
 8004ed4:	08004e19 	.word	0x08004e19
 8004ed8:	200006d0 	.word	0x200006d0

08004edc <_fwalk_sglue>:
 8004edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee0:	4607      	mov	r7, r0
 8004ee2:	4688      	mov	r8, r1
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	2600      	movs	r6, #0
 8004ee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004eec:	f1b9 0901 	subs.w	r9, r9, #1
 8004ef0:	d505      	bpl.n	8004efe <_fwalk_sglue+0x22>
 8004ef2:	6824      	ldr	r4, [r4, #0]
 8004ef4:	2c00      	cmp	r4, #0
 8004ef6:	d1f7      	bne.n	8004ee8 <_fwalk_sglue+0xc>
 8004ef8:	4630      	mov	r0, r6
 8004efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004efe:	89ab      	ldrh	r3, [r5, #12]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d907      	bls.n	8004f14 <_fwalk_sglue+0x38>
 8004f04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	d003      	beq.n	8004f14 <_fwalk_sglue+0x38>
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	4638      	mov	r0, r7
 8004f10:	47c0      	blx	r8
 8004f12:	4306      	orrs	r6, r0
 8004f14:	3568      	adds	r5, #104	@ 0x68
 8004f16:	e7e9      	b.n	8004eec <_fwalk_sglue+0x10>

08004f18 <iprintf>:
 8004f18:	b40f      	push	{r0, r1, r2, r3}
 8004f1a:	b507      	push	{r0, r1, r2, lr}
 8004f1c:	4906      	ldr	r1, [pc, #24]	@ (8004f38 <iprintf+0x20>)
 8004f1e:	ab04      	add	r3, sp, #16
 8004f20:	6808      	ldr	r0, [r1, #0]
 8004f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f26:	6881      	ldr	r1, [r0, #8]
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	f000 fccb 	bl	80058c4 <_vfiprintf_r>
 8004f2e:	b003      	add	sp, #12
 8004f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f34:	b004      	add	sp, #16
 8004f36:	4770      	bx	lr
 8004f38:	20000268 	.word	0x20000268

08004f3c <putchar>:
 8004f3c:	4b02      	ldr	r3, [pc, #8]	@ (8004f48 <putchar+0xc>)
 8004f3e:	4601      	mov	r1, r0
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	6882      	ldr	r2, [r0, #8]
 8004f44:	f001 b881 	b.w	800604a <_putc_r>
 8004f48:	20000268 	.word	0x20000268

08004f4c <_puts_r>:
 8004f4c:	6a03      	ldr	r3, [r0, #32]
 8004f4e:	b570      	push	{r4, r5, r6, lr}
 8004f50:	4605      	mov	r5, r0
 8004f52:	460e      	mov	r6, r1
 8004f54:	6884      	ldr	r4, [r0, #8]
 8004f56:	b90b      	cbnz	r3, 8004f5c <_puts_r+0x10>
 8004f58:	f7ff ffa8 	bl	8004eac <__sinit>
 8004f5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f5e:	07db      	lsls	r3, r3, #31
 8004f60:	d405      	bmi.n	8004f6e <_puts_r+0x22>
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	0598      	lsls	r0, r3, #22
 8004f66:	d402      	bmi.n	8004f6e <_puts_r+0x22>
 8004f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f6a:	f000 f9f6 	bl	800535a <__retarget_lock_acquire_recursive>
 8004f6e:	89a3      	ldrh	r3, [r4, #12]
 8004f70:	0719      	lsls	r1, r3, #28
 8004f72:	d502      	bpl.n	8004f7a <_puts_r+0x2e>
 8004f74:	6923      	ldr	r3, [r4, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d135      	bne.n	8004fe6 <_puts_r+0x9a>
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f000 f91d 	bl	80051bc <__swsetup_r>
 8004f82:	b380      	cbz	r0, 8004fe6 <_puts_r+0x9a>
 8004f84:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004f88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f8a:	07da      	lsls	r2, r3, #31
 8004f8c:	d405      	bmi.n	8004f9a <_puts_r+0x4e>
 8004f8e:	89a3      	ldrh	r3, [r4, #12]
 8004f90:	059b      	lsls	r3, r3, #22
 8004f92:	d402      	bmi.n	8004f9a <_puts_r+0x4e>
 8004f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f96:	f000 f9e1 	bl	800535c <__retarget_lock_release_recursive>
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	bd70      	pop	{r4, r5, r6, pc}
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	da04      	bge.n	8004fac <_puts_r+0x60>
 8004fa2:	69a2      	ldr	r2, [r4, #24]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	dc17      	bgt.n	8004fd8 <_puts_r+0x8c>
 8004fa8:	290a      	cmp	r1, #10
 8004faa:	d015      	beq.n	8004fd8 <_puts_r+0x8c>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	6022      	str	r2, [r4, #0]
 8004fb2:	7019      	strb	r1, [r3, #0]
 8004fb4:	68a3      	ldr	r3, [r4, #8]
 8004fb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	60a3      	str	r3, [r4, #8]
 8004fbe:	2900      	cmp	r1, #0
 8004fc0:	d1ed      	bne.n	8004f9e <_puts_r+0x52>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	da11      	bge.n	8004fea <_puts_r+0x9e>
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	210a      	movs	r1, #10
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f000 f8b7 	bl	800513e <__swbuf_r>
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	d0d7      	beq.n	8004f84 <_puts_r+0x38>
 8004fd4:	250a      	movs	r5, #10
 8004fd6:	e7d7      	b.n	8004f88 <_puts_r+0x3c>
 8004fd8:	4622      	mov	r2, r4
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f000 f8af 	bl	800513e <__swbuf_r>
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d1e7      	bne.n	8004fb4 <_puts_r+0x68>
 8004fe4:	e7ce      	b.n	8004f84 <_puts_r+0x38>
 8004fe6:	3e01      	subs	r6, #1
 8004fe8:	e7e4      	b.n	8004fb4 <_puts_r+0x68>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	6022      	str	r2, [r4, #0]
 8004ff0:	220a      	movs	r2, #10
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	e7ee      	b.n	8004fd4 <_puts_r+0x88>
	...

08004ff8 <puts>:
 8004ff8:	4b02      	ldr	r3, [pc, #8]	@ (8005004 <puts+0xc>)
 8004ffa:	4601      	mov	r1, r0
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	f7ff bfa5 	b.w	8004f4c <_puts_r>
 8005002:	bf00      	nop
 8005004:	20000268 	.word	0x20000268

08005008 <sniprintf>:
 8005008:	b40c      	push	{r2, r3}
 800500a:	b530      	push	{r4, r5, lr}
 800500c:	4b18      	ldr	r3, [pc, #96]	@ (8005070 <sniprintf+0x68>)
 800500e:	1e0c      	subs	r4, r1, #0
 8005010:	681d      	ldr	r5, [r3, #0]
 8005012:	b09d      	sub	sp, #116	@ 0x74
 8005014:	da08      	bge.n	8005028 <sniprintf+0x20>
 8005016:	238b      	movs	r3, #139	@ 0x8b
 8005018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800501c:	602b      	str	r3, [r5, #0]
 800501e:	b01d      	add	sp, #116	@ 0x74
 8005020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005024:	b002      	add	sp, #8
 8005026:	4770      	bx	lr
 8005028:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800502c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005036:	bf0c      	ite	eq
 8005038:	4623      	moveq	r3, r4
 800503a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800503e:	9304      	str	r3, [sp, #16]
 8005040:	9307      	str	r3, [sp, #28]
 8005042:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005046:	9002      	str	r0, [sp, #8]
 8005048:	9006      	str	r0, [sp, #24]
 800504a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800504e:	4628      	mov	r0, r5
 8005050:	ab21      	add	r3, sp, #132	@ 0x84
 8005052:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005054:	a902      	add	r1, sp, #8
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	f000 fb10 	bl	800567c <_svfiprintf_r>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	bfbc      	itt	lt
 8005060:	238b      	movlt	r3, #139	@ 0x8b
 8005062:	602b      	strlt	r3, [r5, #0]
 8005064:	2c00      	cmp	r4, #0
 8005066:	d0da      	beq.n	800501e <sniprintf+0x16>
 8005068:	2200      	movs	r2, #0
 800506a:	9b02      	ldr	r3, [sp, #8]
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	e7d6      	b.n	800501e <sniprintf+0x16>
 8005070:	20000268 	.word	0x20000268

08005074 <siprintf>:
 8005074:	b40e      	push	{r1, r2, r3}
 8005076:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800507a:	b510      	push	{r4, lr}
 800507c:	2400      	movs	r4, #0
 800507e:	b09d      	sub	sp, #116	@ 0x74
 8005080:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005082:	9002      	str	r0, [sp, #8]
 8005084:	9006      	str	r0, [sp, #24]
 8005086:	9107      	str	r1, [sp, #28]
 8005088:	9104      	str	r1, [sp, #16]
 800508a:	4809      	ldr	r0, [pc, #36]	@ (80050b0 <siprintf+0x3c>)
 800508c:	4909      	ldr	r1, [pc, #36]	@ (80050b4 <siprintf+0x40>)
 800508e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005092:	9105      	str	r1, [sp, #20]
 8005094:	6800      	ldr	r0, [r0, #0]
 8005096:	a902      	add	r1, sp, #8
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800509c:	f000 faee 	bl	800567c <_svfiprintf_r>
 80050a0:	9b02      	ldr	r3, [sp, #8]
 80050a2:	701c      	strb	r4, [r3, #0]
 80050a4:	b01d      	add	sp, #116	@ 0x74
 80050a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050aa:	b003      	add	sp, #12
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000268 	.word	0x20000268
 80050b4:	ffff0208 	.word	0xffff0208

080050b8 <__sread>:
 80050b8:	b510      	push	{r4, lr}
 80050ba:	460c      	mov	r4, r1
 80050bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c0:	f000 f8fc 	bl	80052bc <_read_r>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	bfab      	itete	ge
 80050c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050ca:	89a3      	ldrhlt	r3, [r4, #12]
 80050cc:	181b      	addge	r3, r3, r0
 80050ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80050d2:	bfac      	ite	ge
 80050d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80050d6:	81a3      	strhlt	r3, [r4, #12]
 80050d8:	bd10      	pop	{r4, pc}

080050da <__swrite>:
 80050da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050de:	461f      	mov	r7, r3
 80050e0:	898b      	ldrh	r3, [r1, #12]
 80050e2:	4605      	mov	r5, r0
 80050e4:	05db      	lsls	r3, r3, #23
 80050e6:	460c      	mov	r4, r1
 80050e8:	4616      	mov	r6, r2
 80050ea:	d505      	bpl.n	80050f8 <__swrite+0x1e>
 80050ec:	2302      	movs	r3, #2
 80050ee:	2200      	movs	r2, #0
 80050f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f4:	f000 f8d0 	bl	8005298 <_lseek_r>
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	4632      	mov	r2, r6
 80050fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005100:	81a3      	strh	r3, [r4, #12]
 8005102:	4628      	mov	r0, r5
 8005104:	463b      	mov	r3, r7
 8005106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800510a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800510e:	f000 b8e7 	b.w	80052e0 <_write_r>

08005112 <__sseek>:
 8005112:	b510      	push	{r4, lr}
 8005114:	460c      	mov	r4, r1
 8005116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800511a:	f000 f8bd 	bl	8005298 <_lseek_r>
 800511e:	1c43      	adds	r3, r0, #1
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	bf15      	itete	ne
 8005124:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005126:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800512a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800512e:	81a3      	strheq	r3, [r4, #12]
 8005130:	bf18      	it	ne
 8005132:	81a3      	strhne	r3, [r4, #12]
 8005134:	bd10      	pop	{r4, pc}

08005136 <__sclose>:
 8005136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800513a:	f000 b89d 	b.w	8005278 <_close_r>

0800513e <__swbuf_r>:
 800513e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005140:	460e      	mov	r6, r1
 8005142:	4614      	mov	r4, r2
 8005144:	4605      	mov	r5, r0
 8005146:	b118      	cbz	r0, 8005150 <__swbuf_r+0x12>
 8005148:	6a03      	ldr	r3, [r0, #32]
 800514a:	b90b      	cbnz	r3, 8005150 <__swbuf_r+0x12>
 800514c:	f7ff feae 	bl	8004eac <__sinit>
 8005150:	69a3      	ldr	r3, [r4, #24]
 8005152:	60a3      	str	r3, [r4, #8]
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	071a      	lsls	r2, r3, #28
 8005158:	d501      	bpl.n	800515e <__swbuf_r+0x20>
 800515a:	6923      	ldr	r3, [r4, #16]
 800515c:	b943      	cbnz	r3, 8005170 <__swbuf_r+0x32>
 800515e:	4621      	mov	r1, r4
 8005160:	4628      	mov	r0, r5
 8005162:	f000 f82b 	bl	80051bc <__swsetup_r>
 8005166:	b118      	cbz	r0, 8005170 <__swbuf_r+0x32>
 8005168:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800516c:	4638      	mov	r0, r7
 800516e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	6922      	ldr	r2, [r4, #16]
 8005174:	b2f6      	uxtb	r6, r6
 8005176:	1a98      	subs	r0, r3, r2
 8005178:	6963      	ldr	r3, [r4, #20]
 800517a:	4637      	mov	r7, r6
 800517c:	4283      	cmp	r3, r0
 800517e:	dc05      	bgt.n	800518c <__swbuf_r+0x4e>
 8005180:	4621      	mov	r1, r4
 8005182:	4628      	mov	r0, r5
 8005184:	f000 fec6 	bl	8005f14 <_fflush_r>
 8005188:	2800      	cmp	r0, #0
 800518a:	d1ed      	bne.n	8005168 <__swbuf_r+0x2a>
 800518c:	68a3      	ldr	r3, [r4, #8]
 800518e:	3b01      	subs	r3, #1
 8005190:	60a3      	str	r3, [r4, #8]
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	6022      	str	r2, [r4, #0]
 8005198:	701e      	strb	r6, [r3, #0]
 800519a:	6962      	ldr	r2, [r4, #20]
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	429a      	cmp	r2, r3
 80051a0:	d004      	beq.n	80051ac <__swbuf_r+0x6e>
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	07db      	lsls	r3, r3, #31
 80051a6:	d5e1      	bpl.n	800516c <__swbuf_r+0x2e>
 80051a8:	2e0a      	cmp	r6, #10
 80051aa:	d1df      	bne.n	800516c <__swbuf_r+0x2e>
 80051ac:	4621      	mov	r1, r4
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 feb0 	bl	8005f14 <_fflush_r>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d0d9      	beq.n	800516c <__swbuf_r+0x2e>
 80051b8:	e7d6      	b.n	8005168 <__swbuf_r+0x2a>
	...

080051bc <__swsetup_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4b29      	ldr	r3, [pc, #164]	@ (8005264 <__swsetup_r+0xa8>)
 80051c0:	4605      	mov	r5, r0
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	460c      	mov	r4, r1
 80051c6:	b118      	cbz	r0, 80051d0 <__swsetup_r+0x14>
 80051c8:	6a03      	ldr	r3, [r0, #32]
 80051ca:	b90b      	cbnz	r3, 80051d0 <__swsetup_r+0x14>
 80051cc:	f7ff fe6e 	bl	8004eac <__sinit>
 80051d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d4:	0719      	lsls	r1, r3, #28
 80051d6:	d422      	bmi.n	800521e <__swsetup_r+0x62>
 80051d8:	06da      	lsls	r2, r3, #27
 80051da:	d407      	bmi.n	80051ec <__swsetup_r+0x30>
 80051dc:	2209      	movs	r2, #9
 80051de:	602a      	str	r2, [r5, #0]
 80051e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	e033      	b.n	8005254 <__swsetup_r+0x98>
 80051ec:	0758      	lsls	r0, r3, #29
 80051ee:	d512      	bpl.n	8005216 <__swsetup_r+0x5a>
 80051f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051f2:	b141      	cbz	r1, 8005206 <__swsetup_r+0x4a>
 80051f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051f8:	4299      	cmp	r1, r3
 80051fa:	d002      	beq.n	8005202 <__swsetup_r+0x46>
 80051fc:	4628      	mov	r0, r5
 80051fe:	f000 f8e3 	bl	80053c8 <_free_r>
 8005202:	2300      	movs	r3, #0
 8005204:	6363      	str	r3, [r4, #52]	@ 0x34
 8005206:	89a3      	ldrh	r3, [r4, #12]
 8005208:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800520c:	81a3      	strh	r3, [r4, #12]
 800520e:	2300      	movs	r3, #0
 8005210:	6063      	str	r3, [r4, #4]
 8005212:	6923      	ldr	r3, [r4, #16]
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	f043 0308 	orr.w	r3, r3, #8
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	b94b      	cbnz	r3, 8005236 <__swsetup_r+0x7a>
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800522c:	d003      	beq.n	8005236 <__swsetup_r+0x7a>
 800522e:	4621      	mov	r1, r4
 8005230:	4628      	mov	r0, r5
 8005232:	f000 fece 	bl	8005fd2 <__smakebuf_r>
 8005236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800523a:	f013 0201 	ands.w	r2, r3, #1
 800523e:	d00a      	beq.n	8005256 <__swsetup_r+0x9a>
 8005240:	2200      	movs	r2, #0
 8005242:	60a2      	str	r2, [r4, #8]
 8005244:	6962      	ldr	r2, [r4, #20]
 8005246:	4252      	negs	r2, r2
 8005248:	61a2      	str	r2, [r4, #24]
 800524a:	6922      	ldr	r2, [r4, #16]
 800524c:	b942      	cbnz	r2, 8005260 <__swsetup_r+0xa4>
 800524e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005252:	d1c5      	bne.n	80051e0 <__swsetup_r+0x24>
 8005254:	bd38      	pop	{r3, r4, r5, pc}
 8005256:	0799      	lsls	r1, r3, #30
 8005258:	bf58      	it	pl
 800525a:	6962      	ldrpl	r2, [r4, #20]
 800525c:	60a2      	str	r2, [r4, #8]
 800525e:	e7f4      	b.n	800524a <__swsetup_r+0x8e>
 8005260:	2000      	movs	r0, #0
 8005262:	e7f7      	b.n	8005254 <__swsetup_r+0x98>
 8005264:	20000268 	.word	0x20000268

08005268 <memset>:
 8005268:	4603      	mov	r3, r0
 800526a:	4402      	add	r2, r0
 800526c:	4293      	cmp	r3, r2
 800526e:	d100      	bne.n	8005272 <memset+0xa>
 8005270:	4770      	bx	lr
 8005272:	f803 1b01 	strb.w	r1, [r3], #1
 8005276:	e7f9      	b.n	800526c <memset+0x4>

08005278 <_close_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	2300      	movs	r3, #0
 800527c:	4d05      	ldr	r5, [pc, #20]	@ (8005294 <_close_r+0x1c>)
 800527e:	4604      	mov	r4, r0
 8005280:	4608      	mov	r0, r1
 8005282:	602b      	str	r3, [r5, #0]
 8005284:	f7fc fb49 	bl	800191a <_close>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	d102      	bne.n	8005292 <_close_r+0x1a>
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	b103      	cbz	r3, 8005292 <_close_r+0x1a>
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	200006d4 	.word	0x200006d4

08005298 <_lseek_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4604      	mov	r4, r0
 800529c:	4608      	mov	r0, r1
 800529e:	4611      	mov	r1, r2
 80052a0:	2200      	movs	r2, #0
 80052a2:	4d05      	ldr	r5, [pc, #20]	@ (80052b8 <_lseek_r+0x20>)
 80052a4:	602a      	str	r2, [r5, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f7fc fb5b 	bl	8001962 <_lseek>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d102      	bne.n	80052b6 <_lseek_r+0x1e>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	b103      	cbz	r3, 80052b6 <_lseek_r+0x1e>
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	200006d4 	.word	0x200006d4

080052bc <_read_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4604      	mov	r4, r0
 80052c0:	4608      	mov	r0, r1
 80052c2:	4611      	mov	r1, r2
 80052c4:	2200      	movs	r2, #0
 80052c6:	4d05      	ldr	r5, [pc, #20]	@ (80052dc <_read_r+0x20>)
 80052c8:	602a      	str	r2, [r5, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f7fc faec 	bl	80018a8 <_read>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_read_r+0x1e>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	b103      	cbz	r3, 80052da <_read_r+0x1e>
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	200006d4 	.word	0x200006d4

080052e0 <_write_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4604      	mov	r4, r0
 80052e4:	4608      	mov	r0, r1
 80052e6:	4611      	mov	r1, r2
 80052e8:	2200      	movs	r2, #0
 80052ea:	4d05      	ldr	r5, [pc, #20]	@ (8005300 <_write_r+0x20>)
 80052ec:	602a      	str	r2, [r5, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f7fc faf7 	bl	80018e2 <_write>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d102      	bne.n	80052fe <_write_r+0x1e>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	b103      	cbz	r3, 80052fe <_write_r+0x1e>
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
 8005300:	200006d4 	.word	0x200006d4

08005304 <__errno>:
 8005304:	4b01      	ldr	r3, [pc, #4]	@ (800530c <__errno+0x8>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000268 	.word	0x20000268

08005310 <__libc_init_array>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	2600      	movs	r6, #0
 8005314:	4d0c      	ldr	r5, [pc, #48]	@ (8005348 <__libc_init_array+0x38>)
 8005316:	4c0d      	ldr	r4, [pc, #52]	@ (800534c <__libc_init_array+0x3c>)
 8005318:	1b64      	subs	r4, r4, r5
 800531a:	10a4      	asrs	r4, r4, #2
 800531c:	42a6      	cmp	r6, r4
 800531e:	d109      	bne.n	8005334 <__libc_init_array+0x24>
 8005320:	f000 ffa4 	bl	800626c <_init>
 8005324:	2600      	movs	r6, #0
 8005326:	4d0a      	ldr	r5, [pc, #40]	@ (8005350 <__libc_init_array+0x40>)
 8005328:	4c0a      	ldr	r4, [pc, #40]	@ (8005354 <__libc_init_array+0x44>)
 800532a:	1b64      	subs	r4, r4, r5
 800532c:	10a4      	asrs	r4, r4, #2
 800532e:	42a6      	cmp	r6, r4
 8005330:	d105      	bne.n	800533e <__libc_init_array+0x2e>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	f855 3b04 	ldr.w	r3, [r5], #4
 8005338:	4798      	blx	r3
 800533a:	3601      	adds	r6, #1
 800533c:	e7ee      	b.n	800531c <__libc_init_array+0xc>
 800533e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005342:	4798      	blx	r3
 8005344:	3601      	adds	r6, #1
 8005346:	e7f2      	b.n	800532e <__libc_init_array+0x1e>
 8005348:	080064b8 	.word	0x080064b8
 800534c:	080064b8 	.word	0x080064b8
 8005350:	080064b8 	.word	0x080064b8
 8005354:	080064bc 	.word	0x080064bc

08005358 <__retarget_lock_init_recursive>:
 8005358:	4770      	bx	lr

0800535a <__retarget_lock_acquire_recursive>:
 800535a:	4770      	bx	lr

0800535c <__retarget_lock_release_recursive>:
 800535c:	4770      	bx	lr

0800535e <strcpy>:
 800535e:	4603      	mov	r3, r0
 8005360:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005364:	f803 2b01 	strb.w	r2, [r3], #1
 8005368:	2a00      	cmp	r2, #0
 800536a:	d1f9      	bne.n	8005360 <strcpy+0x2>
 800536c:	4770      	bx	lr

0800536e <memcpy>:
 800536e:	440a      	add	r2, r1
 8005370:	4291      	cmp	r1, r2
 8005372:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005376:	d100      	bne.n	800537a <memcpy+0xc>
 8005378:	4770      	bx	lr
 800537a:	b510      	push	{r4, lr}
 800537c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005380:	4291      	cmp	r1, r2
 8005382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005386:	d1f9      	bne.n	800537c <memcpy+0xe>
 8005388:	bd10      	pop	{r4, pc}
	...

0800538c <__assert_func>:
 800538c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800538e:	4614      	mov	r4, r2
 8005390:	461a      	mov	r2, r3
 8005392:	4b09      	ldr	r3, [pc, #36]	@ (80053b8 <__assert_func+0x2c>)
 8005394:	4605      	mov	r5, r0
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68d8      	ldr	r0, [r3, #12]
 800539a:	b14c      	cbz	r4, 80053b0 <__assert_func+0x24>
 800539c:	4b07      	ldr	r3, [pc, #28]	@ (80053bc <__assert_func+0x30>)
 800539e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053a2:	9100      	str	r1, [sp, #0]
 80053a4:	462b      	mov	r3, r5
 80053a6:	4906      	ldr	r1, [pc, #24]	@ (80053c0 <__assert_func+0x34>)
 80053a8:	f000 fddc 	bl	8005f64 <fiprintf>
 80053ac:	f000 fedc 	bl	8006168 <abort>
 80053b0:	4b04      	ldr	r3, [pc, #16]	@ (80053c4 <__assert_func+0x38>)
 80053b2:	461c      	mov	r4, r3
 80053b4:	e7f3      	b.n	800539e <__assert_func+0x12>
 80053b6:	bf00      	nop
 80053b8:	20000268 	.word	0x20000268
 80053bc:	08006449 	.word	0x08006449
 80053c0:	08006456 	.word	0x08006456
 80053c4:	08006484 	.word	0x08006484

080053c8 <_free_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4605      	mov	r5, r0
 80053cc:	2900      	cmp	r1, #0
 80053ce:	d040      	beq.n	8005452 <_free_r+0x8a>
 80053d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d4:	1f0c      	subs	r4, r1, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bfb8      	it	lt
 80053da:	18e4      	addlt	r4, r4, r3
 80053dc:	f000 f8e6 	bl	80055ac <__malloc_lock>
 80053e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005454 <_free_r+0x8c>)
 80053e2:	6813      	ldr	r3, [r2, #0]
 80053e4:	b933      	cbnz	r3, 80053f4 <_free_r+0x2c>
 80053e6:	6063      	str	r3, [r4, #4]
 80053e8:	6014      	str	r4, [r2, #0]
 80053ea:	4628      	mov	r0, r5
 80053ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053f0:	f000 b8e2 	b.w	80055b8 <__malloc_unlock>
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	d908      	bls.n	800540a <_free_r+0x42>
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	1821      	adds	r1, r4, r0
 80053fc:	428b      	cmp	r3, r1
 80053fe:	bf01      	itttt	eq
 8005400:	6819      	ldreq	r1, [r3, #0]
 8005402:	685b      	ldreq	r3, [r3, #4]
 8005404:	1809      	addeq	r1, r1, r0
 8005406:	6021      	streq	r1, [r4, #0]
 8005408:	e7ed      	b.n	80053e6 <_free_r+0x1e>
 800540a:	461a      	mov	r2, r3
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	b10b      	cbz	r3, 8005414 <_free_r+0x4c>
 8005410:	42a3      	cmp	r3, r4
 8005412:	d9fa      	bls.n	800540a <_free_r+0x42>
 8005414:	6811      	ldr	r1, [r2, #0]
 8005416:	1850      	adds	r0, r2, r1
 8005418:	42a0      	cmp	r0, r4
 800541a:	d10b      	bne.n	8005434 <_free_r+0x6c>
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	4401      	add	r1, r0
 8005420:	1850      	adds	r0, r2, r1
 8005422:	4283      	cmp	r3, r0
 8005424:	6011      	str	r1, [r2, #0]
 8005426:	d1e0      	bne.n	80053ea <_free_r+0x22>
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4408      	add	r0, r1
 800542e:	6010      	str	r0, [r2, #0]
 8005430:	6053      	str	r3, [r2, #4]
 8005432:	e7da      	b.n	80053ea <_free_r+0x22>
 8005434:	d902      	bls.n	800543c <_free_r+0x74>
 8005436:	230c      	movs	r3, #12
 8005438:	602b      	str	r3, [r5, #0]
 800543a:	e7d6      	b.n	80053ea <_free_r+0x22>
 800543c:	6820      	ldr	r0, [r4, #0]
 800543e:	1821      	adds	r1, r4, r0
 8005440:	428b      	cmp	r3, r1
 8005442:	bf01      	itttt	eq
 8005444:	6819      	ldreq	r1, [r3, #0]
 8005446:	685b      	ldreq	r3, [r3, #4]
 8005448:	1809      	addeq	r1, r1, r0
 800544a:	6021      	streq	r1, [r4, #0]
 800544c:	6063      	str	r3, [r4, #4]
 800544e:	6054      	str	r4, [r2, #4]
 8005450:	e7cb      	b.n	80053ea <_free_r+0x22>
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	200006e0 	.word	0x200006e0

08005458 <malloc>:
 8005458:	4b02      	ldr	r3, [pc, #8]	@ (8005464 <malloc+0xc>)
 800545a:	4601      	mov	r1, r0
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	f000 b825 	b.w	80054ac <_malloc_r>
 8005462:	bf00      	nop
 8005464:	20000268 	.word	0x20000268

08005468 <sbrk_aligned>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	4e0f      	ldr	r6, [pc, #60]	@ (80054a8 <sbrk_aligned+0x40>)
 800546c:	460c      	mov	r4, r1
 800546e:	6831      	ldr	r1, [r6, #0]
 8005470:	4605      	mov	r5, r0
 8005472:	b911      	cbnz	r1, 800547a <sbrk_aligned+0x12>
 8005474:	f000 fe5a 	bl	800612c <_sbrk_r>
 8005478:	6030      	str	r0, [r6, #0]
 800547a:	4621      	mov	r1, r4
 800547c:	4628      	mov	r0, r5
 800547e:	f000 fe55 	bl	800612c <_sbrk_r>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	d103      	bne.n	800548e <sbrk_aligned+0x26>
 8005486:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800548a:	4620      	mov	r0, r4
 800548c:	bd70      	pop	{r4, r5, r6, pc}
 800548e:	1cc4      	adds	r4, r0, #3
 8005490:	f024 0403 	bic.w	r4, r4, #3
 8005494:	42a0      	cmp	r0, r4
 8005496:	d0f8      	beq.n	800548a <sbrk_aligned+0x22>
 8005498:	1a21      	subs	r1, r4, r0
 800549a:	4628      	mov	r0, r5
 800549c:	f000 fe46 	bl	800612c <_sbrk_r>
 80054a0:	3001      	adds	r0, #1
 80054a2:	d1f2      	bne.n	800548a <sbrk_aligned+0x22>
 80054a4:	e7ef      	b.n	8005486 <sbrk_aligned+0x1e>
 80054a6:	bf00      	nop
 80054a8:	200006dc 	.word	0x200006dc

080054ac <_malloc_r>:
 80054ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b0:	1ccd      	adds	r5, r1, #3
 80054b2:	f025 0503 	bic.w	r5, r5, #3
 80054b6:	3508      	adds	r5, #8
 80054b8:	2d0c      	cmp	r5, #12
 80054ba:	bf38      	it	cc
 80054bc:	250c      	movcc	r5, #12
 80054be:	2d00      	cmp	r5, #0
 80054c0:	4606      	mov	r6, r0
 80054c2:	db01      	blt.n	80054c8 <_malloc_r+0x1c>
 80054c4:	42a9      	cmp	r1, r5
 80054c6:	d904      	bls.n	80054d2 <_malloc_r+0x26>
 80054c8:	230c      	movs	r3, #12
 80054ca:	6033      	str	r3, [r6, #0]
 80054cc:	2000      	movs	r0, #0
 80054ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055a8 <_malloc_r+0xfc>
 80054d6:	f000 f869 	bl	80055ac <__malloc_lock>
 80054da:	f8d8 3000 	ldr.w	r3, [r8]
 80054de:	461c      	mov	r4, r3
 80054e0:	bb44      	cbnz	r4, 8005534 <_malloc_r+0x88>
 80054e2:	4629      	mov	r1, r5
 80054e4:	4630      	mov	r0, r6
 80054e6:	f7ff ffbf 	bl	8005468 <sbrk_aligned>
 80054ea:	1c43      	adds	r3, r0, #1
 80054ec:	4604      	mov	r4, r0
 80054ee:	d158      	bne.n	80055a2 <_malloc_r+0xf6>
 80054f0:	f8d8 4000 	ldr.w	r4, [r8]
 80054f4:	4627      	mov	r7, r4
 80054f6:	2f00      	cmp	r7, #0
 80054f8:	d143      	bne.n	8005582 <_malloc_r+0xd6>
 80054fa:	2c00      	cmp	r4, #0
 80054fc:	d04b      	beq.n	8005596 <_malloc_r+0xea>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	4639      	mov	r1, r7
 8005502:	4630      	mov	r0, r6
 8005504:	eb04 0903 	add.w	r9, r4, r3
 8005508:	f000 fe10 	bl	800612c <_sbrk_r>
 800550c:	4581      	cmp	r9, r0
 800550e:	d142      	bne.n	8005596 <_malloc_r+0xea>
 8005510:	6821      	ldr	r1, [r4, #0]
 8005512:	4630      	mov	r0, r6
 8005514:	1a6d      	subs	r5, r5, r1
 8005516:	4629      	mov	r1, r5
 8005518:	f7ff ffa6 	bl	8005468 <sbrk_aligned>
 800551c:	3001      	adds	r0, #1
 800551e:	d03a      	beq.n	8005596 <_malloc_r+0xea>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	442b      	add	r3, r5
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	f8d8 3000 	ldr.w	r3, [r8]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	bb62      	cbnz	r2, 8005588 <_malloc_r+0xdc>
 800552e:	f8c8 7000 	str.w	r7, [r8]
 8005532:	e00f      	b.n	8005554 <_malloc_r+0xa8>
 8005534:	6822      	ldr	r2, [r4, #0]
 8005536:	1b52      	subs	r2, r2, r5
 8005538:	d420      	bmi.n	800557c <_malloc_r+0xd0>
 800553a:	2a0b      	cmp	r2, #11
 800553c:	d917      	bls.n	800556e <_malloc_r+0xc2>
 800553e:	1961      	adds	r1, r4, r5
 8005540:	42a3      	cmp	r3, r4
 8005542:	6025      	str	r5, [r4, #0]
 8005544:	bf18      	it	ne
 8005546:	6059      	strne	r1, [r3, #4]
 8005548:	6863      	ldr	r3, [r4, #4]
 800554a:	bf08      	it	eq
 800554c:	f8c8 1000 	streq.w	r1, [r8]
 8005550:	5162      	str	r2, [r4, r5]
 8005552:	604b      	str	r3, [r1, #4]
 8005554:	4630      	mov	r0, r6
 8005556:	f000 f82f 	bl	80055b8 <__malloc_unlock>
 800555a:	f104 000b 	add.w	r0, r4, #11
 800555e:	1d23      	adds	r3, r4, #4
 8005560:	f020 0007 	bic.w	r0, r0, #7
 8005564:	1ac2      	subs	r2, r0, r3
 8005566:	bf1c      	itt	ne
 8005568:	1a1b      	subne	r3, r3, r0
 800556a:	50a3      	strne	r3, [r4, r2]
 800556c:	e7af      	b.n	80054ce <_malloc_r+0x22>
 800556e:	6862      	ldr	r2, [r4, #4]
 8005570:	42a3      	cmp	r3, r4
 8005572:	bf0c      	ite	eq
 8005574:	f8c8 2000 	streq.w	r2, [r8]
 8005578:	605a      	strne	r2, [r3, #4]
 800557a:	e7eb      	b.n	8005554 <_malloc_r+0xa8>
 800557c:	4623      	mov	r3, r4
 800557e:	6864      	ldr	r4, [r4, #4]
 8005580:	e7ae      	b.n	80054e0 <_malloc_r+0x34>
 8005582:	463c      	mov	r4, r7
 8005584:	687f      	ldr	r7, [r7, #4]
 8005586:	e7b6      	b.n	80054f6 <_malloc_r+0x4a>
 8005588:	461a      	mov	r2, r3
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	42a3      	cmp	r3, r4
 800558e:	d1fb      	bne.n	8005588 <_malloc_r+0xdc>
 8005590:	2300      	movs	r3, #0
 8005592:	6053      	str	r3, [r2, #4]
 8005594:	e7de      	b.n	8005554 <_malloc_r+0xa8>
 8005596:	230c      	movs	r3, #12
 8005598:	4630      	mov	r0, r6
 800559a:	6033      	str	r3, [r6, #0]
 800559c:	f000 f80c 	bl	80055b8 <__malloc_unlock>
 80055a0:	e794      	b.n	80054cc <_malloc_r+0x20>
 80055a2:	6005      	str	r5, [r0, #0]
 80055a4:	e7d6      	b.n	8005554 <_malloc_r+0xa8>
 80055a6:	bf00      	nop
 80055a8:	200006e0 	.word	0x200006e0

080055ac <__malloc_lock>:
 80055ac:	4801      	ldr	r0, [pc, #4]	@ (80055b4 <__malloc_lock+0x8>)
 80055ae:	f7ff bed4 	b.w	800535a <__retarget_lock_acquire_recursive>
 80055b2:	bf00      	nop
 80055b4:	200006d8 	.word	0x200006d8

080055b8 <__malloc_unlock>:
 80055b8:	4801      	ldr	r0, [pc, #4]	@ (80055c0 <__malloc_unlock+0x8>)
 80055ba:	f7ff becf 	b.w	800535c <__retarget_lock_release_recursive>
 80055be:	bf00      	nop
 80055c0:	200006d8 	.word	0x200006d8

080055c4 <__ssputs_r>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	461f      	mov	r7, r3
 80055ca:	688e      	ldr	r6, [r1, #8]
 80055cc:	4682      	mov	sl, r0
 80055ce:	42be      	cmp	r6, r7
 80055d0:	460c      	mov	r4, r1
 80055d2:	4690      	mov	r8, r2
 80055d4:	680b      	ldr	r3, [r1, #0]
 80055d6:	d82d      	bhi.n	8005634 <__ssputs_r+0x70>
 80055d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055e0:	d026      	beq.n	8005630 <__ssputs_r+0x6c>
 80055e2:	6965      	ldr	r5, [r4, #20]
 80055e4:	6909      	ldr	r1, [r1, #16]
 80055e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055ea:	eba3 0901 	sub.w	r9, r3, r1
 80055ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055f2:	1c7b      	adds	r3, r7, #1
 80055f4:	444b      	add	r3, r9
 80055f6:	106d      	asrs	r5, r5, #1
 80055f8:	429d      	cmp	r5, r3
 80055fa:	bf38      	it	cc
 80055fc:	461d      	movcc	r5, r3
 80055fe:	0553      	lsls	r3, r2, #21
 8005600:	d527      	bpl.n	8005652 <__ssputs_r+0x8e>
 8005602:	4629      	mov	r1, r5
 8005604:	f7ff ff52 	bl	80054ac <_malloc_r>
 8005608:	4606      	mov	r6, r0
 800560a:	b360      	cbz	r0, 8005666 <__ssputs_r+0xa2>
 800560c:	464a      	mov	r2, r9
 800560e:	6921      	ldr	r1, [r4, #16]
 8005610:	f7ff fead 	bl	800536e <memcpy>
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800561a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800561e:	81a3      	strh	r3, [r4, #12]
 8005620:	6126      	str	r6, [r4, #16]
 8005622:	444e      	add	r6, r9
 8005624:	6026      	str	r6, [r4, #0]
 8005626:	463e      	mov	r6, r7
 8005628:	6165      	str	r5, [r4, #20]
 800562a:	eba5 0509 	sub.w	r5, r5, r9
 800562e:	60a5      	str	r5, [r4, #8]
 8005630:	42be      	cmp	r6, r7
 8005632:	d900      	bls.n	8005636 <__ssputs_r+0x72>
 8005634:	463e      	mov	r6, r7
 8005636:	4632      	mov	r2, r6
 8005638:	4641      	mov	r1, r8
 800563a:	6820      	ldr	r0, [r4, #0]
 800563c:	f000 fd39 	bl	80060b2 <memmove>
 8005640:	2000      	movs	r0, #0
 8005642:	68a3      	ldr	r3, [r4, #8]
 8005644:	1b9b      	subs	r3, r3, r6
 8005646:	60a3      	str	r3, [r4, #8]
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	4433      	add	r3, r6
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005652:	462a      	mov	r2, r5
 8005654:	f000 fd8f 	bl	8006176 <_realloc_r>
 8005658:	4606      	mov	r6, r0
 800565a:	2800      	cmp	r0, #0
 800565c:	d1e0      	bne.n	8005620 <__ssputs_r+0x5c>
 800565e:	4650      	mov	r0, sl
 8005660:	6921      	ldr	r1, [r4, #16]
 8005662:	f7ff feb1 	bl	80053c8 <_free_r>
 8005666:	230c      	movs	r3, #12
 8005668:	f8ca 3000 	str.w	r3, [sl]
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005676:	81a3      	strh	r3, [r4, #12]
 8005678:	e7e9      	b.n	800564e <__ssputs_r+0x8a>
	...

0800567c <_svfiprintf_r>:
 800567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005680:	4698      	mov	r8, r3
 8005682:	898b      	ldrh	r3, [r1, #12]
 8005684:	4607      	mov	r7, r0
 8005686:	061b      	lsls	r3, r3, #24
 8005688:	460d      	mov	r5, r1
 800568a:	4614      	mov	r4, r2
 800568c:	b09d      	sub	sp, #116	@ 0x74
 800568e:	d510      	bpl.n	80056b2 <_svfiprintf_r+0x36>
 8005690:	690b      	ldr	r3, [r1, #16]
 8005692:	b973      	cbnz	r3, 80056b2 <_svfiprintf_r+0x36>
 8005694:	2140      	movs	r1, #64	@ 0x40
 8005696:	f7ff ff09 	bl	80054ac <_malloc_r>
 800569a:	6028      	str	r0, [r5, #0]
 800569c:	6128      	str	r0, [r5, #16]
 800569e:	b930      	cbnz	r0, 80056ae <_svfiprintf_r+0x32>
 80056a0:	230c      	movs	r3, #12
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056a8:	b01d      	add	sp, #116	@ 0x74
 80056aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ae:	2340      	movs	r3, #64	@ 0x40
 80056b0:	616b      	str	r3, [r5, #20]
 80056b2:	2300      	movs	r3, #0
 80056b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056b6:	2320      	movs	r3, #32
 80056b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056bc:	2330      	movs	r3, #48	@ 0x30
 80056be:	f04f 0901 	mov.w	r9, #1
 80056c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80056c6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005860 <_svfiprintf_r+0x1e4>
 80056ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056ce:	4623      	mov	r3, r4
 80056d0:	469a      	mov	sl, r3
 80056d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056d6:	b10a      	cbz	r2, 80056dc <_svfiprintf_r+0x60>
 80056d8:	2a25      	cmp	r2, #37	@ 0x25
 80056da:	d1f9      	bne.n	80056d0 <_svfiprintf_r+0x54>
 80056dc:	ebba 0b04 	subs.w	fp, sl, r4
 80056e0:	d00b      	beq.n	80056fa <_svfiprintf_r+0x7e>
 80056e2:	465b      	mov	r3, fp
 80056e4:	4622      	mov	r2, r4
 80056e6:	4629      	mov	r1, r5
 80056e8:	4638      	mov	r0, r7
 80056ea:	f7ff ff6b 	bl	80055c4 <__ssputs_r>
 80056ee:	3001      	adds	r0, #1
 80056f0:	f000 80a7 	beq.w	8005842 <_svfiprintf_r+0x1c6>
 80056f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056f6:	445a      	add	r2, fp
 80056f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80056fa:	f89a 3000 	ldrb.w	r3, [sl]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 809f 	beq.w	8005842 <_svfiprintf_r+0x1c6>
 8005704:	2300      	movs	r3, #0
 8005706:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800570a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800570e:	f10a 0a01 	add.w	sl, sl, #1
 8005712:	9304      	str	r3, [sp, #16]
 8005714:	9307      	str	r3, [sp, #28]
 8005716:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800571a:	931a      	str	r3, [sp, #104]	@ 0x68
 800571c:	4654      	mov	r4, sl
 800571e:	2205      	movs	r2, #5
 8005720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005724:	484e      	ldr	r0, [pc, #312]	@ (8005860 <_svfiprintf_r+0x1e4>)
 8005726:	f000 fd11 	bl	800614c <memchr>
 800572a:	9a04      	ldr	r2, [sp, #16]
 800572c:	b9d8      	cbnz	r0, 8005766 <_svfiprintf_r+0xea>
 800572e:	06d0      	lsls	r0, r2, #27
 8005730:	bf44      	itt	mi
 8005732:	2320      	movmi	r3, #32
 8005734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005738:	0711      	lsls	r1, r2, #28
 800573a:	bf44      	itt	mi
 800573c:	232b      	movmi	r3, #43	@ 0x2b
 800573e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005742:	f89a 3000 	ldrb.w	r3, [sl]
 8005746:	2b2a      	cmp	r3, #42	@ 0x2a
 8005748:	d015      	beq.n	8005776 <_svfiprintf_r+0xfa>
 800574a:	4654      	mov	r4, sl
 800574c:	2000      	movs	r0, #0
 800574e:	f04f 0c0a 	mov.w	ip, #10
 8005752:	9a07      	ldr	r2, [sp, #28]
 8005754:	4621      	mov	r1, r4
 8005756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800575a:	3b30      	subs	r3, #48	@ 0x30
 800575c:	2b09      	cmp	r3, #9
 800575e:	d94b      	bls.n	80057f8 <_svfiprintf_r+0x17c>
 8005760:	b1b0      	cbz	r0, 8005790 <_svfiprintf_r+0x114>
 8005762:	9207      	str	r2, [sp, #28]
 8005764:	e014      	b.n	8005790 <_svfiprintf_r+0x114>
 8005766:	eba0 0308 	sub.w	r3, r0, r8
 800576a:	fa09 f303 	lsl.w	r3, r9, r3
 800576e:	4313      	orrs	r3, r2
 8005770:	46a2      	mov	sl, r4
 8005772:	9304      	str	r3, [sp, #16]
 8005774:	e7d2      	b.n	800571c <_svfiprintf_r+0xa0>
 8005776:	9b03      	ldr	r3, [sp, #12]
 8005778:	1d19      	adds	r1, r3, #4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	9103      	str	r1, [sp, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	bfbb      	ittet	lt
 8005782:	425b      	neglt	r3, r3
 8005784:	f042 0202 	orrlt.w	r2, r2, #2
 8005788:	9307      	strge	r3, [sp, #28]
 800578a:	9307      	strlt	r3, [sp, #28]
 800578c:	bfb8      	it	lt
 800578e:	9204      	strlt	r2, [sp, #16]
 8005790:	7823      	ldrb	r3, [r4, #0]
 8005792:	2b2e      	cmp	r3, #46	@ 0x2e
 8005794:	d10a      	bne.n	80057ac <_svfiprintf_r+0x130>
 8005796:	7863      	ldrb	r3, [r4, #1]
 8005798:	2b2a      	cmp	r3, #42	@ 0x2a
 800579a:	d132      	bne.n	8005802 <_svfiprintf_r+0x186>
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	3402      	adds	r4, #2
 80057a0:	1d1a      	adds	r2, r3, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	9203      	str	r2, [sp, #12]
 80057a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005864 <_svfiprintf_r+0x1e8>
 80057b0:	2203      	movs	r2, #3
 80057b2:	4650      	mov	r0, sl
 80057b4:	7821      	ldrb	r1, [r4, #0]
 80057b6:	f000 fcc9 	bl	800614c <memchr>
 80057ba:	b138      	cbz	r0, 80057cc <_svfiprintf_r+0x150>
 80057bc:	2240      	movs	r2, #64	@ 0x40
 80057be:	9b04      	ldr	r3, [sp, #16]
 80057c0:	eba0 000a 	sub.w	r0, r0, sl
 80057c4:	4082      	lsls	r2, r0
 80057c6:	4313      	orrs	r3, r2
 80057c8:	3401      	adds	r4, #1
 80057ca:	9304      	str	r3, [sp, #16]
 80057cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d0:	2206      	movs	r2, #6
 80057d2:	4825      	ldr	r0, [pc, #148]	@ (8005868 <_svfiprintf_r+0x1ec>)
 80057d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057d8:	f000 fcb8 	bl	800614c <memchr>
 80057dc:	2800      	cmp	r0, #0
 80057de:	d036      	beq.n	800584e <_svfiprintf_r+0x1d2>
 80057e0:	4b22      	ldr	r3, [pc, #136]	@ (800586c <_svfiprintf_r+0x1f0>)
 80057e2:	bb1b      	cbnz	r3, 800582c <_svfiprintf_r+0x1b0>
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	3307      	adds	r3, #7
 80057e8:	f023 0307 	bic.w	r3, r3, #7
 80057ec:	3308      	adds	r3, #8
 80057ee:	9303      	str	r3, [sp, #12]
 80057f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057f2:	4433      	add	r3, r6
 80057f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f6:	e76a      	b.n	80056ce <_svfiprintf_r+0x52>
 80057f8:	460c      	mov	r4, r1
 80057fa:	2001      	movs	r0, #1
 80057fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005800:	e7a8      	b.n	8005754 <_svfiprintf_r+0xd8>
 8005802:	2300      	movs	r3, #0
 8005804:	f04f 0c0a 	mov.w	ip, #10
 8005808:	4619      	mov	r1, r3
 800580a:	3401      	adds	r4, #1
 800580c:	9305      	str	r3, [sp, #20]
 800580e:	4620      	mov	r0, r4
 8005810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005814:	3a30      	subs	r2, #48	@ 0x30
 8005816:	2a09      	cmp	r2, #9
 8005818:	d903      	bls.n	8005822 <_svfiprintf_r+0x1a6>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0c6      	beq.n	80057ac <_svfiprintf_r+0x130>
 800581e:	9105      	str	r1, [sp, #20]
 8005820:	e7c4      	b.n	80057ac <_svfiprintf_r+0x130>
 8005822:	4604      	mov	r4, r0
 8005824:	2301      	movs	r3, #1
 8005826:	fb0c 2101 	mla	r1, ip, r1, r2
 800582a:	e7f0      	b.n	800580e <_svfiprintf_r+0x192>
 800582c:	ab03      	add	r3, sp, #12
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	462a      	mov	r2, r5
 8005832:	4638      	mov	r0, r7
 8005834:	4b0e      	ldr	r3, [pc, #56]	@ (8005870 <_svfiprintf_r+0x1f4>)
 8005836:	a904      	add	r1, sp, #16
 8005838:	f3af 8000 	nop.w
 800583c:	1c42      	adds	r2, r0, #1
 800583e:	4606      	mov	r6, r0
 8005840:	d1d6      	bne.n	80057f0 <_svfiprintf_r+0x174>
 8005842:	89ab      	ldrh	r3, [r5, #12]
 8005844:	065b      	lsls	r3, r3, #25
 8005846:	f53f af2d 	bmi.w	80056a4 <_svfiprintf_r+0x28>
 800584a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800584c:	e72c      	b.n	80056a8 <_svfiprintf_r+0x2c>
 800584e:	ab03      	add	r3, sp, #12
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	462a      	mov	r2, r5
 8005854:	4638      	mov	r0, r7
 8005856:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <_svfiprintf_r+0x1f4>)
 8005858:	a904      	add	r1, sp, #16
 800585a:	f000 f9bd 	bl	8005bd8 <_printf_i>
 800585e:	e7ed      	b.n	800583c <_svfiprintf_r+0x1c0>
 8005860:	08006485 	.word	0x08006485
 8005864:	0800648b 	.word	0x0800648b
 8005868:	0800648f 	.word	0x0800648f
 800586c:	00000000 	.word	0x00000000
 8005870:	080055c5 	.word	0x080055c5

08005874 <__sfputc_r>:
 8005874:	6893      	ldr	r3, [r2, #8]
 8005876:	b410      	push	{r4}
 8005878:	3b01      	subs	r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	6093      	str	r3, [r2, #8]
 800587e:	da07      	bge.n	8005890 <__sfputc_r+0x1c>
 8005880:	6994      	ldr	r4, [r2, #24]
 8005882:	42a3      	cmp	r3, r4
 8005884:	db01      	blt.n	800588a <__sfputc_r+0x16>
 8005886:	290a      	cmp	r1, #10
 8005888:	d102      	bne.n	8005890 <__sfputc_r+0x1c>
 800588a:	bc10      	pop	{r4}
 800588c:	f7ff bc57 	b.w	800513e <__swbuf_r>
 8005890:	6813      	ldr	r3, [r2, #0]
 8005892:	1c58      	adds	r0, r3, #1
 8005894:	6010      	str	r0, [r2, #0]
 8005896:	7019      	strb	r1, [r3, #0]
 8005898:	4608      	mov	r0, r1
 800589a:	bc10      	pop	{r4}
 800589c:	4770      	bx	lr

0800589e <__sfputs_r>:
 800589e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a0:	4606      	mov	r6, r0
 80058a2:	460f      	mov	r7, r1
 80058a4:	4614      	mov	r4, r2
 80058a6:	18d5      	adds	r5, r2, r3
 80058a8:	42ac      	cmp	r4, r5
 80058aa:	d101      	bne.n	80058b0 <__sfputs_r+0x12>
 80058ac:	2000      	movs	r0, #0
 80058ae:	e007      	b.n	80058c0 <__sfputs_r+0x22>
 80058b0:	463a      	mov	r2, r7
 80058b2:	4630      	mov	r0, r6
 80058b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b8:	f7ff ffdc 	bl	8005874 <__sfputc_r>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d1f3      	bne.n	80058a8 <__sfputs_r+0xa>
 80058c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058c4 <_vfiprintf_r>:
 80058c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c8:	460d      	mov	r5, r1
 80058ca:	4614      	mov	r4, r2
 80058cc:	4698      	mov	r8, r3
 80058ce:	4606      	mov	r6, r0
 80058d0:	b09d      	sub	sp, #116	@ 0x74
 80058d2:	b118      	cbz	r0, 80058dc <_vfiprintf_r+0x18>
 80058d4:	6a03      	ldr	r3, [r0, #32]
 80058d6:	b90b      	cbnz	r3, 80058dc <_vfiprintf_r+0x18>
 80058d8:	f7ff fae8 	bl	8004eac <__sinit>
 80058dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058de:	07d9      	lsls	r1, r3, #31
 80058e0:	d405      	bmi.n	80058ee <_vfiprintf_r+0x2a>
 80058e2:	89ab      	ldrh	r3, [r5, #12]
 80058e4:	059a      	lsls	r2, r3, #22
 80058e6:	d402      	bmi.n	80058ee <_vfiprintf_r+0x2a>
 80058e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058ea:	f7ff fd36 	bl	800535a <__retarget_lock_acquire_recursive>
 80058ee:	89ab      	ldrh	r3, [r5, #12]
 80058f0:	071b      	lsls	r3, r3, #28
 80058f2:	d501      	bpl.n	80058f8 <_vfiprintf_r+0x34>
 80058f4:	692b      	ldr	r3, [r5, #16]
 80058f6:	b99b      	cbnz	r3, 8005920 <_vfiprintf_r+0x5c>
 80058f8:	4629      	mov	r1, r5
 80058fa:	4630      	mov	r0, r6
 80058fc:	f7ff fc5e 	bl	80051bc <__swsetup_r>
 8005900:	b170      	cbz	r0, 8005920 <_vfiprintf_r+0x5c>
 8005902:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005904:	07dc      	lsls	r4, r3, #31
 8005906:	d504      	bpl.n	8005912 <_vfiprintf_r+0x4e>
 8005908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800590c:	b01d      	add	sp, #116	@ 0x74
 800590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005912:	89ab      	ldrh	r3, [r5, #12]
 8005914:	0598      	lsls	r0, r3, #22
 8005916:	d4f7      	bmi.n	8005908 <_vfiprintf_r+0x44>
 8005918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800591a:	f7ff fd1f 	bl	800535c <__retarget_lock_release_recursive>
 800591e:	e7f3      	b.n	8005908 <_vfiprintf_r+0x44>
 8005920:	2300      	movs	r3, #0
 8005922:	9309      	str	r3, [sp, #36]	@ 0x24
 8005924:	2320      	movs	r3, #32
 8005926:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800592a:	2330      	movs	r3, #48	@ 0x30
 800592c:	f04f 0901 	mov.w	r9, #1
 8005930:	f8cd 800c 	str.w	r8, [sp, #12]
 8005934:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005ae0 <_vfiprintf_r+0x21c>
 8005938:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800593c:	4623      	mov	r3, r4
 800593e:	469a      	mov	sl, r3
 8005940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005944:	b10a      	cbz	r2, 800594a <_vfiprintf_r+0x86>
 8005946:	2a25      	cmp	r2, #37	@ 0x25
 8005948:	d1f9      	bne.n	800593e <_vfiprintf_r+0x7a>
 800594a:	ebba 0b04 	subs.w	fp, sl, r4
 800594e:	d00b      	beq.n	8005968 <_vfiprintf_r+0xa4>
 8005950:	465b      	mov	r3, fp
 8005952:	4622      	mov	r2, r4
 8005954:	4629      	mov	r1, r5
 8005956:	4630      	mov	r0, r6
 8005958:	f7ff ffa1 	bl	800589e <__sfputs_r>
 800595c:	3001      	adds	r0, #1
 800595e:	f000 80a7 	beq.w	8005ab0 <_vfiprintf_r+0x1ec>
 8005962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005964:	445a      	add	r2, fp
 8005966:	9209      	str	r2, [sp, #36]	@ 0x24
 8005968:	f89a 3000 	ldrb.w	r3, [sl]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 809f 	beq.w	8005ab0 <_vfiprintf_r+0x1ec>
 8005972:	2300      	movs	r3, #0
 8005974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800597c:	f10a 0a01 	add.w	sl, sl, #1
 8005980:	9304      	str	r3, [sp, #16]
 8005982:	9307      	str	r3, [sp, #28]
 8005984:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005988:	931a      	str	r3, [sp, #104]	@ 0x68
 800598a:	4654      	mov	r4, sl
 800598c:	2205      	movs	r2, #5
 800598e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005992:	4853      	ldr	r0, [pc, #332]	@ (8005ae0 <_vfiprintf_r+0x21c>)
 8005994:	f000 fbda 	bl	800614c <memchr>
 8005998:	9a04      	ldr	r2, [sp, #16]
 800599a:	b9d8      	cbnz	r0, 80059d4 <_vfiprintf_r+0x110>
 800599c:	06d1      	lsls	r1, r2, #27
 800599e:	bf44      	itt	mi
 80059a0:	2320      	movmi	r3, #32
 80059a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059a6:	0713      	lsls	r3, r2, #28
 80059a8:	bf44      	itt	mi
 80059aa:	232b      	movmi	r3, #43	@ 0x2b
 80059ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059b0:	f89a 3000 	ldrb.w	r3, [sl]
 80059b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80059b6:	d015      	beq.n	80059e4 <_vfiprintf_r+0x120>
 80059b8:	4654      	mov	r4, sl
 80059ba:	2000      	movs	r0, #0
 80059bc:	f04f 0c0a 	mov.w	ip, #10
 80059c0:	9a07      	ldr	r2, [sp, #28]
 80059c2:	4621      	mov	r1, r4
 80059c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059c8:	3b30      	subs	r3, #48	@ 0x30
 80059ca:	2b09      	cmp	r3, #9
 80059cc:	d94b      	bls.n	8005a66 <_vfiprintf_r+0x1a2>
 80059ce:	b1b0      	cbz	r0, 80059fe <_vfiprintf_r+0x13a>
 80059d0:	9207      	str	r2, [sp, #28]
 80059d2:	e014      	b.n	80059fe <_vfiprintf_r+0x13a>
 80059d4:	eba0 0308 	sub.w	r3, r0, r8
 80059d8:	fa09 f303 	lsl.w	r3, r9, r3
 80059dc:	4313      	orrs	r3, r2
 80059de:	46a2      	mov	sl, r4
 80059e0:	9304      	str	r3, [sp, #16]
 80059e2:	e7d2      	b.n	800598a <_vfiprintf_r+0xc6>
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	1d19      	adds	r1, r3, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	9103      	str	r1, [sp, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	bfbb      	ittet	lt
 80059f0:	425b      	neglt	r3, r3
 80059f2:	f042 0202 	orrlt.w	r2, r2, #2
 80059f6:	9307      	strge	r3, [sp, #28]
 80059f8:	9307      	strlt	r3, [sp, #28]
 80059fa:	bfb8      	it	lt
 80059fc:	9204      	strlt	r2, [sp, #16]
 80059fe:	7823      	ldrb	r3, [r4, #0]
 8005a00:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a02:	d10a      	bne.n	8005a1a <_vfiprintf_r+0x156>
 8005a04:	7863      	ldrb	r3, [r4, #1]
 8005a06:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a08:	d132      	bne.n	8005a70 <_vfiprintf_r+0x1ac>
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	3402      	adds	r4, #2
 8005a0e:	1d1a      	adds	r2, r3, #4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	9203      	str	r2, [sp, #12]
 8005a14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a18:	9305      	str	r3, [sp, #20]
 8005a1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005ae4 <_vfiprintf_r+0x220>
 8005a1e:	2203      	movs	r2, #3
 8005a20:	4650      	mov	r0, sl
 8005a22:	7821      	ldrb	r1, [r4, #0]
 8005a24:	f000 fb92 	bl	800614c <memchr>
 8005a28:	b138      	cbz	r0, 8005a3a <_vfiprintf_r+0x176>
 8005a2a:	2240      	movs	r2, #64	@ 0x40
 8005a2c:	9b04      	ldr	r3, [sp, #16]
 8005a2e:	eba0 000a 	sub.w	r0, r0, sl
 8005a32:	4082      	lsls	r2, r0
 8005a34:	4313      	orrs	r3, r2
 8005a36:	3401      	adds	r4, #1
 8005a38:	9304      	str	r3, [sp, #16]
 8005a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a3e:	2206      	movs	r2, #6
 8005a40:	4829      	ldr	r0, [pc, #164]	@ (8005ae8 <_vfiprintf_r+0x224>)
 8005a42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a46:	f000 fb81 	bl	800614c <memchr>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d03f      	beq.n	8005ace <_vfiprintf_r+0x20a>
 8005a4e:	4b27      	ldr	r3, [pc, #156]	@ (8005aec <_vfiprintf_r+0x228>)
 8005a50:	bb1b      	cbnz	r3, 8005a9a <_vfiprintf_r+0x1d6>
 8005a52:	9b03      	ldr	r3, [sp, #12]
 8005a54:	3307      	adds	r3, #7
 8005a56:	f023 0307 	bic.w	r3, r3, #7
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	9303      	str	r3, [sp, #12]
 8005a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a60:	443b      	add	r3, r7
 8005a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a64:	e76a      	b.n	800593c <_vfiprintf_r+0x78>
 8005a66:	460c      	mov	r4, r1
 8005a68:	2001      	movs	r0, #1
 8005a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a6e:	e7a8      	b.n	80059c2 <_vfiprintf_r+0xfe>
 8005a70:	2300      	movs	r3, #0
 8005a72:	f04f 0c0a 	mov.w	ip, #10
 8005a76:	4619      	mov	r1, r3
 8005a78:	3401      	adds	r4, #1
 8005a7a:	9305      	str	r3, [sp, #20]
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a82:	3a30      	subs	r2, #48	@ 0x30
 8005a84:	2a09      	cmp	r2, #9
 8005a86:	d903      	bls.n	8005a90 <_vfiprintf_r+0x1cc>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0c6      	beq.n	8005a1a <_vfiprintf_r+0x156>
 8005a8c:	9105      	str	r1, [sp, #20]
 8005a8e:	e7c4      	b.n	8005a1a <_vfiprintf_r+0x156>
 8005a90:	4604      	mov	r4, r0
 8005a92:	2301      	movs	r3, #1
 8005a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a98:	e7f0      	b.n	8005a7c <_vfiprintf_r+0x1b8>
 8005a9a:	ab03      	add	r3, sp, #12
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	462a      	mov	r2, r5
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	4b13      	ldr	r3, [pc, #76]	@ (8005af0 <_vfiprintf_r+0x22c>)
 8005aa4:	a904      	add	r1, sp, #16
 8005aa6:	f3af 8000 	nop.w
 8005aaa:	4607      	mov	r7, r0
 8005aac:	1c78      	adds	r0, r7, #1
 8005aae:	d1d6      	bne.n	8005a5e <_vfiprintf_r+0x19a>
 8005ab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ab2:	07d9      	lsls	r1, r3, #31
 8005ab4:	d405      	bmi.n	8005ac2 <_vfiprintf_r+0x1fe>
 8005ab6:	89ab      	ldrh	r3, [r5, #12]
 8005ab8:	059a      	lsls	r2, r3, #22
 8005aba:	d402      	bmi.n	8005ac2 <_vfiprintf_r+0x1fe>
 8005abc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005abe:	f7ff fc4d 	bl	800535c <__retarget_lock_release_recursive>
 8005ac2:	89ab      	ldrh	r3, [r5, #12]
 8005ac4:	065b      	lsls	r3, r3, #25
 8005ac6:	f53f af1f 	bmi.w	8005908 <_vfiprintf_r+0x44>
 8005aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005acc:	e71e      	b.n	800590c <_vfiprintf_r+0x48>
 8005ace:	ab03      	add	r3, sp, #12
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	462a      	mov	r2, r5
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <_vfiprintf_r+0x22c>)
 8005ad8:	a904      	add	r1, sp, #16
 8005ada:	f000 f87d 	bl	8005bd8 <_printf_i>
 8005ade:	e7e4      	b.n	8005aaa <_vfiprintf_r+0x1e6>
 8005ae0:	08006485 	.word	0x08006485
 8005ae4:	0800648b 	.word	0x0800648b
 8005ae8:	0800648f 	.word	0x0800648f
 8005aec:	00000000 	.word	0x00000000
 8005af0:	0800589f 	.word	0x0800589f

08005af4 <_printf_common>:
 8005af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af8:	4616      	mov	r6, r2
 8005afa:	4698      	mov	r8, r3
 8005afc:	688a      	ldr	r2, [r1, #8]
 8005afe:	690b      	ldr	r3, [r1, #16]
 8005b00:	4607      	mov	r7, r0
 8005b02:	4293      	cmp	r3, r2
 8005b04:	bfb8      	it	lt
 8005b06:	4613      	movlt	r3, r2
 8005b08:	6033      	str	r3, [r6, #0]
 8005b0a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b0e:	460c      	mov	r4, r1
 8005b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b14:	b10a      	cbz	r2, 8005b1a <_printf_common+0x26>
 8005b16:	3301      	adds	r3, #1
 8005b18:	6033      	str	r3, [r6, #0]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	0699      	lsls	r1, r3, #26
 8005b1e:	bf42      	ittt	mi
 8005b20:	6833      	ldrmi	r3, [r6, #0]
 8005b22:	3302      	addmi	r3, #2
 8005b24:	6033      	strmi	r3, [r6, #0]
 8005b26:	6825      	ldr	r5, [r4, #0]
 8005b28:	f015 0506 	ands.w	r5, r5, #6
 8005b2c:	d106      	bne.n	8005b3c <_printf_common+0x48>
 8005b2e:	f104 0a19 	add.w	sl, r4, #25
 8005b32:	68e3      	ldr	r3, [r4, #12]
 8005b34:	6832      	ldr	r2, [r6, #0]
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	42ab      	cmp	r3, r5
 8005b3a:	dc2b      	bgt.n	8005b94 <_printf_common+0xa0>
 8005b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b40:	6822      	ldr	r2, [r4, #0]
 8005b42:	3b00      	subs	r3, #0
 8005b44:	bf18      	it	ne
 8005b46:	2301      	movne	r3, #1
 8005b48:	0692      	lsls	r2, r2, #26
 8005b4a:	d430      	bmi.n	8005bae <_printf_common+0xba>
 8005b4c:	4641      	mov	r1, r8
 8005b4e:	4638      	mov	r0, r7
 8005b50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b54:	47c8      	blx	r9
 8005b56:	3001      	adds	r0, #1
 8005b58:	d023      	beq.n	8005ba2 <_printf_common+0xae>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	6922      	ldr	r2, [r4, #16]
 8005b5e:	f003 0306 	and.w	r3, r3, #6
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	bf14      	ite	ne
 8005b66:	2500      	movne	r5, #0
 8005b68:	6833      	ldreq	r3, [r6, #0]
 8005b6a:	f04f 0600 	mov.w	r6, #0
 8005b6e:	bf08      	it	eq
 8005b70:	68e5      	ldreq	r5, [r4, #12]
 8005b72:	f104 041a 	add.w	r4, r4, #26
 8005b76:	bf08      	it	eq
 8005b78:	1aed      	subeq	r5, r5, r3
 8005b7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005b7e:	bf08      	it	eq
 8005b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b84:	4293      	cmp	r3, r2
 8005b86:	bfc4      	itt	gt
 8005b88:	1a9b      	subgt	r3, r3, r2
 8005b8a:	18ed      	addgt	r5, r5, r3
 8005b8c:	42b5      	cmp	r5, r6
 8005b8e:	d11a      	bne.n	8005bc6 <_printf_common+0xd2>
 8005b90:	2000      	movs	r0, #0
 8005b92:	e008      	b.n	8005ba6 <_printf_common+0xb2>
 8005b94:	2301      	movs	r3, #1
 8005b96:	4652      	mov	r2, sl
 8005b98:	4641      	mov	r1, r8
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	47c8      	blx	r9
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d103      	bne.n	8005baa <_printf_common+0xb6>
 8005ba2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005baa:	3501      	adds	r5, #1
 8005bac:	e7c1      	b.n	8005b32 <_printf_common+0x3e>
 8005bae:	2030      	movs	r0, #48	@ 0x30
 8005bb0:	18e1      	adds	r1, r4, r3
 8005bb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bbc:	4422      	add	r2, r4
 8005bbe:	3302      	adds	r3, #2
 8005bc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bc4:	e7c2      	b.n	8005b4c <_printf_common+0x58>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4622      	mov	r2, r4
 8005bca:	4641      	mov	r1, r8
 8005bcc:	4638      	mov	r0, r7
 8005bce:	47c8      	blx	r9
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d0e6      	beq.n	8005ba2 <_printf_common+0xae>
 8005bd4:	3601      	adds	r6, #1
 8005bd6:	e7d9      	b.n	8005b8c <_printf_common+0x98>

08005bd8 <_printf_i>:
 8005bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bdc:	7e0f      	ldrb	r7, [r1, #24]
 8005bde:	4691      	mov	r9, r2
 8005be0:	2f78      	cmp	r7, #120	@ 0x78
 8005be2:	4680      	mov	r8, r0
 8005be4:	460c      	mov	r4, r1
 8005be6:	469a      	mov	sl, r3
 8005be8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bee:	d807      	bhi.n	8005c00 <_printf_i+0x28>
 8005bf0:	2f62      	cmp	r7, #98	@ 0x62
 8005bf2:	d80a      	bhi.n	8005c0a <_printf_i+0x32>
 8005bf4:	2f00      	cmp	r7, #0
 8005bf6:	f000 80d1 	beq.w	8005d9c <_printf_i+0x1c4>
 8005bfa:	2f58      	cmp	r7, #88	@ 0x58
 8005bfc:	f000 80b8 	beq.w	8005d70 <_printf_i+0x198>
 8005c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c08:	e03a      	b.n	8005c80 <_printf_i+0xa8>
 8005c0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c0e:	2b15      	cmp	r3, #21
 8005c10:	d8f6      	bhi.n	8005c00 <_printf_i+0x28>
 8005c12:	a101      	add	r1, pc, #4	@ (adr r1, 8005c18 <_printf_i+0x40>)
 8005c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c18:	08005c71 	.word	0x08005c71
 8005c1c:	08005c85 	.word	0x08005c85
 8005c20:	08005c01 	.word	0x08005c01
 8005c24:	08005c01 	.word	0x08005c01
 8005c28:	08005c01 	.word	0x08005c01
 8005c2c:	08005c01 	.word	0x08005c01
 8005c30:	08005c85 	.word	0x08005c85
 8005c34:	08005c01 	.word	0x08005c01
 8005c38:	08005c01 	.word	0x08005c01
 8005c3c:	08005c01 	.word	0x08005c01
 8005c40:	08005c01 	.word	0x08005c01
 8005c44:	08005d83 	.word	0x08005d83
 8005c48:	08005caf 	.word	0x08005caf
 8005c4c:	08005d3d 	.word	0x08005d3d
 8005c50:	08005c01 	.word	0x08005c01
 8005c54:	08005c01 	.word	0x08005c01
 8005c58:	08005da5 	.word	0x08005da5
 8005c5c:	08005c01 	.word	0x08005c01
 8005c60:	08005caf 	.word	0x08005caf
 8005c64:	08005c01 	.word	0x08005c01
 8005c68:	08005c01 	.word	0x08005c01
 8005c6c:	08005d45 	.word	0x08005d45
 8005c70:	6833      	ldr	r3, [r6, #0]
 8005c72:	1d1a      	adds	r2, r3, #4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6032      	str	r2, [r6, #0]
 8005c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c80:	2301      	movs	r3, #1
 8005c82:	e09c      	b.n	8005dbe <_printf_i+0x1e6>
 8005c84:	6833      	ldr	r3, [r6, #0]
 8005c86:	6820      	ldr	r0, [r4, #0]
 8005c88:	1d19      	adds	r1, r3, #4
 8005c8a:	6031      	str	r1, [r6, #0]
 8005c8c:	0606      	lsls	r6, r0, #24
 8005c8e:	d501      	bpl.n	8005c94 <_printf_i+0xbc>
 8005c90:	681d      	ldr	r5, [r3, #0]
 8005c92:	e003      	b.n	8005c9c <_printf_i+0xc4>
 8005c94:	0645      	lsls	r5, r0, #25
 8005c96:	d5fb      	bpl.n	8005c90 <_printf_i+0xb8>
 8005c98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c9c:	2d00      	cmp	r5, #0
 8005c9e:	da03      	bge.n	8005ca8 <_printf_i+0xd0>
 8005ca0:	232d      	movs	r3, #45	@ 0x2d
 8005ca2:	426d      	negs	r5, r5
 8005ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ca8:	230a      	movs	r3, #10
 8005caa:	4858      	ldr	r0, [pc, #352]	@ (8005e0c <_printf_i+0x234>)
 8005cac:	e011      	b.n	8005cd2 <_printf_i+0xfa>
 8005cae:	6821      	ldr	r1, [r4, #0]
 8005cb0:	6833      	ldr	r3, [r6, #0]
 8005cb2:	0608      	lsls	r0, r1, #24
 8005cb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005cb8:	d402      	bmi.n	8005cc0 <_printf_i+0xe8>
 8005cba:	0649      	lsls	r1, r1, #25
 8005cbc:	bf48      	it	mi
 8005cbe:	b2ad      	uxthmi	r5, r5
 8005cc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cc2:	6033      	str	r3, [r6, #0]
 8005cc4:	bf14      	ite	ne
 8005cc6:	230a      	movne	r3, #10
 8005cc8:	2308      	moveq	r3, #8
 8005cca:	4850      	ldr	r0, [pc, #320]	@ (8005e0c <_printf_i+0x234>)
 8005ccc:	2100      	movs	r1, #0
 8005cce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cd2:	6866      	ldr	r6, [r4, #4]
 8005cd4:	2e00      	cmp	r6, #0
 8005cd6:	60a6      	str	r6, [r4, #8]
 8005cd8:	db05      	blt.n	8005ce6 <_printf_i+0x10e>
 8005cda:	6821      	ldr	r1, [r4, #0]
 8005cdc:	432e      	orrs	r6, r5
 8005cde:	f021 0104 	bic.w	r1, r1, #4
 8005ce2:	6021      	str	r1, [r4, #0]
 8005ce4:	d04b      	beq.n	8005d7e <_printf_i+0x1a6>
 8005ce6:	4616      	mov	r6, r2
 8005ce8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cec:	fb03 5711 	mls	r7, r3, r1, r5
 8005cf0:	5dc7      	ldrb	r7, [r0, r7]
 8005cf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cf6:	462f      	mov	r7, r5
 8005cf8:	42bb      	cmp	r3, r7
 8005cfa:	460d      	mov	r5, r1
 8005cfc:	d9f4      	bls.n	8005ce8 <_printf_i+0x110>
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d10b      	bne.n	8005d1a <_printf_i+0x142>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	07df      	lsls	r7, r3, #31
 8005d06:	d508      	bpl.n	8005d1a <_printf_i+0x142>
 8005d08:	6923      	ldr	r3, [r4, #16]
 8005d0a:	6861      	ldr	r1, [r4, #4]
 8005d0c:	4299      	cmp	r1, r3
 8005d0e:	bfde      	ittt	le
 8005d10:	2330      	movle	r3, #48	@ 0x30
 8005d12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d16:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005d1a:	1b92      	subs	r2, r2, r6
 8005d1c:	6122      	str	r2, [r4, #16]
 8005d1e:	464b      	mov	r3, r9
 8005d20:	4621      	mov	r1, r4
 8005d22:	4640      	mov	r0, r8
 8005d24:	f8cd a000 	str.w	sl, [sp]
 8005d28:	aa03      	add	r2, sp, #12
 8005d2a:	f7ff fee3 	bl	8005af4 <_printf_common>
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d14a      	bne.n	8005dc8 <_printf_i+0x1f0>
 8005d32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d36:	b004      	add	sp, #16
 8005d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	f043 0320 	orr.w	r3, r3, #32
 8005d42:	6023      	str	r3, [r4, #0]
 8005d44:	2778      	movs	r7, #120	@ 0x78
 8005d46:	4832      	ldr	r0, [pc, #200]	@ (8005e10 <_printf_i+0x238>)
 8005d48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	6831      	ldr	r1, [r6, #0]
 8005d50:	061f      	lsls	r7, r3, #24
 8005d52:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d56:	d402      	bmi.n	8005d5e <_printf_i+0x186>
 8005d58:	065f      	lsls	r7, r3, #25
 8005d5a:	bf48      	it	mi
 8005d5c:	b2ad      	uxthmi	r5, r5
 8005d5e:	6031      	str	r1, [r6, #0]
 8005d60:	07d9      	lsls	r1, r3, #31
 8005d62:	bf44      	itt	mi
 8005d64:	f043 0320 	orrmi.w	r3, r3, #32
 8005d68:	6023      	strmi	r3, [r4, #0]
 8005d6a:	b11d      	cbz	r5, 8005d74 <_printf_i+0x19c>
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	e7ad      	b.n	8005ccc <_printf_i+0xf4>
 8005d70:	4826      	ldr	r0, [pc, #152]	@ (8005e0c <_printf_i+0x234>)
 8005d72:	e7e9      	b.n	8005d48 <_printf_i+0x170>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	f023 0320 	bic.w	r3, r3, #32
 8005d7a:	6023      	str	r3, [r4, #0]
 8005d7c:	e7f6      	b.n	8005d6c <_printf_i+0x194>
 8005d7e:	4616      	mov	r6, r2
 8005d80:	e7bd      	b.n	8005cfe <_printf_i+0x126>
 8005d82:	6833      	ldr	r3, [r6, #0]
 8005d84:	6825      	ldr	r5, [r4, #0]
 8005d86:	1d18      	adds	r0, r3, #4
 8005d88:	6961      	ldr	r1, [r4, #20]
 8005d8a:	6030      	str	r0, [r6, #0]
 8005d8c:	062e      	lsls	r6, r5, #24
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	d501      	bpl.n	8005d96 <_printf_i+0x1be>
 8005d92:	6019      	str	r1, [r3, #0]
 8005d94:	e002      	b.n	8005d9c <_printf_i+0x1c4>
 8005d96:	0668      	lsls	r0, r5, #25
 8005d98:	d5fb      	bpl.n	8005d92 <_printf_i+0x1ba>
 8005d9a:	8019      	strh	r1, [r3, #0]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4616      	mov	r6, r2
 8005da0:	6123      	str	r3, [r4, #16]
 8005da2:	e7bc      	b.n	8005d1e <_printf_i+0x146>
 8005da4:	6833      	ldr	r3, [r6, #0]
 8005da6:	2100      	movs	r1, #0
 8005da8:	1d1a      	adds	r2, r3, #4
 8005daa:	6032      	str	r2, [r6, #0]
 8005dac:	681e      	ldr	r6, [r3, #0]
 8005dae:	6862      	ldr	r2, [r4, #4]
 8005db0:	4630      	mov	r0, r6
 8005db2:	f000 f9cb 	bl	800614c <memchr>
 8005db6:	b108      	cbz	r0, 8005dbc <_printf_i+0x1e4>
 8005db8:	1b80      	subs	r0, r0, r6
 8005dba:	6060      	str	r0, [r4, #4]
 8005dbc:	6863      	ldr	r3, [r4, #4]
 8005dbe:	6123      	str	r3, [r4, #16]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dc6:	e7aa      	b.n	8005d1e <_printf_i+0x146>
 8005dc8:	4632      	mov	r2, r6
 8005dca:	4649      	mov	r1, r9
 8005dcc:	4640      	mov	r0, r8
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	47d0      	blx	sl
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d0ad      	beq.n	8005d32 <_printf_i+0x15a>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	079b      	lsls	r3, r3, #30
 8005dda:	d413      	bmi.n	8005e04 <_printf_i+0x22c>
 8005ddc:	68e0      	ldr	r0, [r4, #12]
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	4298      	cmp	r0, r3
 8005de2:	bfb8      	it	lt
 8005de4:	4618      	movlt	r0, r3
 8005de6:	e7a6      	b.n	8005d36 <_printf_i+0x15e>
 8005de8:	2301      	movs	r3, #1
 8005dea:	4632      	mov	r2, r6
 8005dec:	4649      	mov	r1, r9
 8005dee:	4640      	mov	r0, r8
 8005df0:	47d0      	blx	sl
 8005df2:	3001      	adds	r0, #1
 8005df4:	d09d      	beq.n	8005d32 <_printf_i+0x15a>
 8005df6:	3501      	adds	r5, #1
 8005df8:	68e3      	ldr	r3, [r4, #12]
 8005dfa:	9903      	ldr	r1, [sp, #12]
 8005dfc:	1a5b      	subs	r3, r3, r1
 8005dfe:	42ab      	cmp	r3, r5
 8005e00:	dcf2      	bgt.n	8005de8 <_printf_i+0x210>
 8005e02:	e7eb      	b.n	8005ddc <_printf_i+0x204>
 8005e04:	2500      	movs	r5, #0
 8005e06:	f104 0619 	add.w	r6, r4, #25
 8005e0a:	e7f5      	b.n	8005df8 <_printf_i+0x220>
 8005e0c:	08006496 	.word	0x08006496
 8005e10:	080064a7 	.word	0x080064a7

08005e14 <__sflush_r>:
 8005e14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	0716      	lsls	r6, r2, #28
 8005e1c:	4605      	mov	r5, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	d454      	bmi.n	8005ecc <__sflush_r+0xb8>
 8005e22:	684b      	ldr	r3, [r1, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dc02      	bgt.n	8005e2e <__sflush_r+0x1a>
 8005e28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	dd48      	ble.n	8005ec0 <__sflush_r+0xac>
 8005e2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e30:	2e00      	cmp	r6, #0
 8005e32:	d045      	beq.n	8005ec0 <__sflush_r+0xac>
 8005e34:	2300      	movs	r3, #0
 8005e36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e3a:	682f      	ldr	r7, [r5, #0]
 8005e3c:	6a21      	ldr	r1, [r4, #32]
 8005e3e:	602b      	str	r3, [r5, #0]
 8005e40:	d030      	beq.n	8005ea4 <__sflush_r+0x90>
 8005e42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	0759      	lsls	r1, r3, #29
 8005e48:	d505      	bpl.n	8005e56 <__sflush_r+0x42>
 8005e4a:	6863      	ldr	r3, [r4, #4]
 8005e4c:	1ad2      	subs	r2, r2, r3
 8005e4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e50:	b10b      	cbz	r3, 8005e56 <__sflush_r+0x42>
 8005e52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e54:	1ad2      	subs	r2, r2, r3
 8005e56:	2300      	movs	r3, #0
 8005e58:	4628      	mov	r0, r5
 8005e5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e5c:	6a21      	ldr	r1, [r4, #32]
 8005e5e:	47b0      	blx	r6
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	89a3      	ldrh	r3, [r4, #12]
 8005e64:	d106      	bne.n	8005e74 <__sflush_r+0x60>
 8005e66:	6829      	ldr	r1, [r5, #0]
 8005e68:	291d      	cmp	r1, #29
 8005e6a:	d82b      	bhi.n	8005ec4 <__sflush_r+0xb0>
 8005e6c:	4a28      	ldr	r2, [pc, #160]	@ (8005f10 <__sflush_r+0xfc>)
 8005e6e:	40ca      	lsrs	r2, r1
 8005e70:	07d6      	lsls	r6, r2, #31
 8005e72:	d527      	bpl.n	8005ec4 <__sflush_r+0xb0>
 8005e74:	2200      	movs	r2, #0
 8005e76:	6062      	str	r2, [r4, #4]
 8005e78:	6922      	ldr	r2, [r4, #16]
 8005e7a:	04d9      	lsls	r1, r3, #19
 8005e7c:	6022      	str	r2, [r4, #0]
 8005e7e:	d504      	bpl.n	8005e8a <__sflush_r+0x76>
 8005e80:	1c42      	adds	r2, r0, #1
 8005e82:	d101      	bne.n	8005e88 <__sflush_r+0x74>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	b903      	cbnz	r3, 8005e8a <__sflush_r+0x76>
 8005e88:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e8c:	602f      	str	r7, [r5, #0]
 8005e8e:	b1b9      	cbz	r1, 8005ec0 <__sflush_r+0xac>
 8005e90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e94:	4299      	cmp	r1, r3
 8005e96:	d002      	beq.n	8005e9e <__sflush_r+0x8a>
 8005e98:	4628      	mov	r0, r5
 8005e9a:	f7ff fa95 	bl	80053c8 <_free_r>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ea2:	e00d      	b.n	8005ec0 <__sflush_r+0xac>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b0      	blx	r6
 8005eaa:	4602      	mov	r2, r0
 8005eac:	1c50      	adds	r0, r2, #1
 8005eae:	d1c9      	bne.n	8005e44 <__sflush_r+0x30>
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0c6      	beq.n	8005e44 <__sflush_r+0x30>
 8005eb6:	2b1d      	cmp	r3, #29
 8005eb8:	d001      	beq.n	8005ebe <__sflush_r+0xaa>
 8005eba:	2b16      	cmp	r3, #22
 8005ebc:	d11d      	bne.n	8005efa <__sflush_r+0xe6>
 8005ebe:	602f      	str	r7, [r5, #0]
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	e021      	b.n	8005f08 <__sflush_r+0xf4>
 8005ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ec8:	b21b      	sxth	r3, r3
 8005eca:	e01a      	b.n	8005f02 <__sflush_r+0xee>
 8005ecc:	690f      	ldr	r7, [r1, #16]
 8005ece:	2f00      	cmp	r7, #0
 8005ed0:	d0f6      	beq.n	8005ec0 <__sflush_r+0xac>
 8005ed2:	0793      	lsls	r3, r2, #30
 8005ed4:	bf18      	it	ne
 8005ed6:	2300      	movne	r3, #0
 8005ed8:	680e      	ldr	r6, [r1, #0]
 8005eda:	bf08      	it	eq
 8005edc:	694b      	ldreq	r3, [r1, #20]
 8005ede:	1bf6      	subs	r6, r6, r7
 8005ee0:	600f      	str	r7, [r1, #0]
 8005ee2:	608b      	str	r3, [r1, #8]
 8005ee4:	2e00      	cmp	r6, #0
 8005ee6:	ddeb      	ble.n	8005ec0 <__sflush_r+0xac>
 8005ee8:	4633      	mov	r3, r6
 8005eea:	463a      	mov	r2, r7
 8005eec:	4628      	mov	r0, r5
 8005eee:	6a21      	ldr	r1, [r4, #32]
 8005ef0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005ef4:	47e0      	blx	ip
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	dc07      	bgt.n	8005f0a <__sflush_r+0xf6>
 8005efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f0a:	4407      	add	r7, r0
 8005f0c:	1a36      	subs	r6, r6, r0
 8005f0e:	e7e9      	b.n	8005ee4 <__sflush_r+0xd0>
 8005f10:	20400001 	.word	0x20400001

08005f14 <_fflush_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	690b      	ldr	r3, [r1, #16]
 8005f18:	4605      	mov	r5, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	b913      	cbnz	r3, 8005f24 <_fflush_r+0x10>
 8005f1e:	2500      	movs	r5, #0
 8005f20:	4628      	mov	r0, r5
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	b118      	cbz	r0, 8005f2e <_fflush_r+0x1a>
 8005f26:	6a03      	ldr	r3, [r0, #32]
 8005f28:	b90b      	cbnz	r3, 8005f2e <_fflush_r+0x1a>
 8005f2a:	f7fe ffbf 	bl	8004eac <__sinit>
 8005f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f3      	beq.n	8005f1e <_fflush_r+0xa>
 8005f36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f38:	07d0      	lsls	r0, r2, #31
 8005f3a:	d404      	bmi.n	8005f46 <_fflush_r+0x32>
 8005f3c:	0599      	lsls	r1, r3, #22
 8005f3e:	d402      	bmi.n	8005f46 <_fflush_r+0x32>
 8005f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f42:	f7ff fa0a 	bl	800535a <__retarget_lock_acquire_recursive>
 8005f46:	4628      	mov	r0, r5
 8005f48:	4621      	mov	r1, r4
 8005f4a:	f7ff ff63 	bl	8005e14 <__sflush_r>
 8005f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f50:	4605      	mov	r5, r0
 8005f52:	07da      	lsls	r2, r3, #31
 8005f54:	d4e4      	bmi.n	8005f20 <_fflush_r+0xc>
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	059b      	lsls	r3, r3, #22
 8005f5a:	d4e1      	bmi.n	8005f20 <_fflush_r+0xc>
 8005f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f5e:	f7ff f9fd 	bl	800535c <__retarget_lock_release_recursive>
 8005f62:	e7dd      	b.n	8005f20 <_fflush_r+0xc>

08005f64 <fiprintf>:
 8005f64:	b40e      	push	{r1, r2, r3}
 8005f66:	b503      	push	{r0, r1, lr}
 8005f68:	4601      	mov	r1, r0
 8005f6a:	ab03      	add	r3, sp, #12
 8005f6c:	4805      	ldr	r0, [pc, #20]	@ (8005f84 <fiprintf+0x20>)
 8005f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f72:	6800      	ldr	r0, [r0, #0]
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	f7ff fca5 	bl	80058c4 <_vfiprintf_r>
 8005f7a:	b002      	add	sp, #8
 8005f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f80:	b003      	add	sp, #12
 8005f82:	4770      	bx	lr
 8005f84:	20000268 	.word	0x20000268

08005f88 <__swhatbuf_r>:
 8005f88:	b570      	push	{r4, r5, r6, lr}
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f90:	4615      	mov	r5, r2
 8005f92:	2900      	cmp	r1, #0
 8005f94:	461e      	mov	r6, r3
 8005f96:	b096      	sub	sp, #88	@ 0x58
 8005f98:	da0c      	bge.n	8005fb4 <__swhatbuf_r+0x2c>
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005fa2:	bf14      	ite	ne
 8005fa4:	2340      	movne	r3, #64	@ 0x40
 8005fa6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005faa:	2000      	movs	r0, #0
 8005fac:	6031      	str	r1, [r6, #0]
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	b016      	add	sp, #88	@ 0x58
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
 8005fb4:	466a      	mov	r2, sp
 8005fb6:	f000 f897 	bl	80060e8 <_fstat_r>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	dbed      	blt.n	8005f9a <__swhatbuf_r+0x12>
 8005fbe:	9901      	ldr	r1, [sp, #4]
 8005fc0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005fc4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005fc8:	4259      	negs	r1, r3
 8005fca:	4159      	adcs	r1, r3
 8005fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fd0:	e7eb      	b.n	8005faa <__swhatbuf_r+0x22>

08005fd2 <__smakebuf_r>:
 8005fd2:	898b      	ldrh	r3, [r1, #12]
 8005fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fd6:	079d      	lsls	r5, r3, #30
 8005fd8:	4606      	mov	r6, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	d507      	bpl.n	8005fee <__smakebuf_r+0x1c>
 8005fde:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	6123      	str	r3, [r4, #16]
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	6163      	str	r3, [r4, #20]
 8005fea:	b003      	add	sp, #12
 8005fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fee:	466a      	mov	r2, sp
 8005ff0:	ab01      	add	r3, sp, #4
 8005ff2:	f7ff ffc9 	bl	8005f88 <__swhatbuf_r>
 8005ff6:	9f00      	ldr	r7, [sp, #0]
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f7ff fa55 	bl	80054ac <_malloc_r>
 8006002:	b948      	cbnz	r0, 8006018 <__smakebuf_r+0x46>
 8006004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006008:	059a      	lsls	r2, r3, #22
 800600a:	d4ee      	bmi.n	8005fea <__smakebuf_r+0x18>
 800600c:	f023 0303 	bic.w	r3, r3, #3
 8006010:	f043 0302 	orr.w	r3, r3, #2
 8006014:	81a3      	strh	r3, [r4, #12]
 8006016:	e7e2      	b.n	8005fde <__smakebuf_r+0xc>
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800601e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006022:	81a3      	strh	r3, [r4, #12]
 8006024:	9b01      	ldr	r3, [sp, #4]
 8006026:	6020      	str	r0, [r4, #0]
 8006028:	b15b      	cbz	r3, 8006042 <__smakebuf_r+0x70>
 800602a:	4630      	mov	r0, r6
 800602c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006030:	f000 f86c 	bl	800610c <_isatty_r>
 8006034:	b128      	cbz	r0, 8006042 <__smakebuf_r+0x70>
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	f023 0303 	bic.w	r3, r3, #3
 800603c:	f043 0301 	orr.w	r3, r3, #1
 8006040:	81a3      	strh	r3, [r4, #12]
 8006042:	89a3      	ldrh	r3, [r4, #12]
 8006044:	431d      	orrs	r5, r3
 8006046:	81a5      	strh	r5, [r4, #12]
 8006048:	e7cf      	b.n	8005fea <__smakebuf_r+0x18>

0800604a <_putc_r>:
 800604a:	b570      	push	{r4, r5, r6, lr}
 800604c:	460d      	mov	r5, r1
 800604e:	4614      	mov	r4, r2
 8006050:	4606      	mov	r6, r0
 8006052:	b118      	cbz	r0, 800605c <_putc_r+0x12>
 8006054:	6a03      	ldr	r3, [r0, #32]
 8006056:	b90b      	cbnz	r3, 800605c <_putc_r+0x12>
 8006058:	f7fe ff28 	bl	8004eac <__sinit>
 800605c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800605e:	07d8      	lsls	r0, r3, #31
 8006060:	d405      	bmi.n	800606e <_putc_r+0x24>
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	0599      	lsls	r1, r3, #22
 8006066:	d402      	bmi.n	800606e <_putc_r+0x24>
 8006068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800606a:	f7ff f976 	bl	800535a <__retarget_lock_acquire_recursive>
 800606e:	68a3      	ldr	r3, [r4, #8]
 8006070:	3b01      	subs	r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	60a3      	str	r3, [r4, #8]
 8006076:	da05      	bge.n	8006084 <_putc_r+0x3a>
 8006078:	69a2      	ldr	r2, [r4, #24]
 800607a:	4293      	cmp	r3, r2
 800607c:	db12      	blt.n	80060a4 <_putc_r+0x5a>
 800607e:	b2eb      	uxtb	r3, r5
 8006080:	2b0a      	cmp	r3, #10
 8006082:	d00f      	beq.n	80060a4 <_putc_r+0x5a>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	6022      	str	r2, [r4, #0]
 800608a:	701d      	strb	r5, [r3, #0]
 800608c:	b2ed      	uxtb	r5, r5
 800608e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006090:	07da      	lsls	r2, r3, #31
 8006092:	d405      	bmi.n	80060a0 <_putc_r+0x56>
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	059b      	lsls	r3, r3, #22
 8006098:	d402      	bmi.n	80060a0 <_putc_r+0x56>
 800609a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800609c:	f7ff f95e 	bl	800535c <__retarget_lock_release_recursive>
 80060a0:	4628      	mov	r0, r5
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	4629      	mov	r1, r5
 80060a6:	4622      	mov	r2, r4
 80060a8:	4630      	mov	r0, r6
 80060aa:	f7ff f848 	bl	800513e <__swbuf_r>
 80060ae:	4605      	mov	r5, r0
 80060b0:	e7ed      	b.n	800608e <_putc_r+0x44>

080060b2 <memmove>:
 80060b2:	4288      	cmp	r0, r1
 80060b4:	b510      	push	{r4, lr}
 80060b6:	eb01 0402 	add.w	r4, r1, r2
 80060ba:	d902      	bls.n	80060c2 <memmove+0x10>
 80060bc:	4284      	cmp	r4, r0
 80060be:	4623      	mov	r3, r4
 80060c0:	d807      	bhi.n	80060d2 <memmove+0x20>
 80060c2:	1e43      	subs	r3, r0, #1
 80060c4:	42a1      	cmp	r1, r4
 80060c6:	d008      	beq.n	80060da <memmove+0x28>
 80060c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060d0:	e7f8      	b.n	80060c4 <memmove+0x12>
 80060d2:	4601      	mov	r1, r0
 80060d4:	4402      	add	r2, r0
 80060d6:	428a      	cmp	r2, r1
 80060d8:	d100      	bne.n	80060dc <memmove+0x2a>
 80060da:	bd10      	pop	{r4, pc}
 80060dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060e4:	e7f7      	b.n	80060d6 <memmove+0x24>
	...

080060e8 <_fstat_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	2300      	movs	r3, #0
 80060ec:	4d06      	ldr	r5, [pc, #24]	@ (8006108 <_fstat_r+0x20>)
 80060ee:	4604      	mov	r4, r0
 80060f0:	4608      	mov	r0, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	602b      	str	r3, [r5, #0]
 80060f6:	f7fb fc1b 	bl	8001930 <_fstat>
 80060fa:	1c43      	adds	r3, r0, #1
 80060fc:	d102      	bne.n	8006104 <_fstat_r+0x1c>
 80060fe:	682b      	ldr	r3, [r5, #0]
 8006100:	b103      	cbz	r3, 8006104 <_fstat_r+0x1c>
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	bd38      	pop	{r3, r4, r5, pc}
 8006106:	bf00      	nop
 8006108:	200006d4 	.word	0x200006d4

0800610c <_isatty_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	2300      	movs	r3, #0
 8006110:	4d05      	ldr	r5, [pc, #20]	@ (8006128 <_isatty_r+0x1c>)
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	f7fb fc19 	bl	800194e <_isatty>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_isatty_r+0x1a>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_isatty_r+0x1a>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	200006d4 	.word	0x200006d4

0800612c <_sbrk_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	2300      	movs	r3, #0
 8006130:	4d05      	ldr	r5, [pc, #20]	@ (8006148 <_sbrk_r+0x1c>)
 8006132:	4604      	mov	r4, r0
 8006134:	4608      	mov	r0, r1
 8006136:	602b      	str	r3, [r5, #0]
 8006138:	f7fb fc20 	bl	800197c <_sbrk>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_sbrk_r+0x1a>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_sbrk_r+0x1a>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	200006d4 	.word	0x200006d4

0800614c <memchr>:
 800614c:	4603      	mov	r3, r0
 800614e:	b510      	push	{r4, lr}
 8006150:	b2c9      	uxtb	r1, r1
 8006152:	4402      	add	r2, r0
 8006154:	4293      	cmp	r3, r2
 8006156:	4618      	mov	r0, r3
 8006158:	d101      	bne.n	800615e <memchr+0x12>
 800615a:	2000      	movs	r0, #0
 800615c:	e003      	b.n	8006166 <memchr+0x1a>
 800615e:	7804      	ldrb	r4, [r0, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	428c      	cmp	r4, r1
 8006164:	d1f6      	bne.n	8006154 <memchr+0x8>
 8006166:	bd10      	pop	{r4, pc}

08006168 <abort>:
 8006168:	2006      	movs	r0, #6
 800616a:	b508      	push	{r3, lr}
 800616c:	f000 f85a 	bl	8006224 <raise>
 8006170:	2001      	movs	r0, #1
 8006172:	f7fb fb8e 	bl	8001892 <_exit>

08006176 <_realloc_r>:
 8006176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800617a:	4607      	mov	r7, r0
 800617c:	4614      	mov	r4, r2
 800617e:	460d      	mov	r5, r1
 8006180:	b921      	cbnz	r1, 800618c <_realloc_r+0x16>
 8006182:	4611      	mov	r1, r2
 8006184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006188:	f7ff b990 	b.w	80054ac <_malloc_r>
 800618c:	b92a      	cbnz	r2, 800619a <_realloc_r+0x24>
 800618e:	f7ff f91b 	bl	80053c8 <_free_r>
 8006192:	4625      	mov	r5, r4
 8006194:	4628      	mov	r0, r5
 8006196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800619a:	f000 f85f 	bl	800625c <_malloc_usable_size_r>
 800619e:	4284      	cmp	r4, r0
 80061a0:	4606      	mov	r6, r0
 80061a2:	d802      	bhi.n	80061aa <_realloc_r+0x34>
 80061a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061a8:	d8f4      	bhi.n	8006194 <_realloc_r+0x1e>
 80061aa:	4621      	mov	r1, r4
 80061ac:	4638      	mov	r0, r7
 80061ae:	f7ff f97d 	bl	80054ac <_malloc_r>
 80061b2:	4680      	mov	r8, r0
 80061b4:	b908      	cbnz	r0, 80061ba <_realloc_r+0x44>
 80061b6:	4645      	mov	r5, r8
 80061b8:	e7ec      	b.n	8006194 <_realloc_r+0x1e>
 80061ba:	42b4      	cmp	r4, r6
 80061bc:	4622      	mov	r2, r4
 80061be:	4629      	mov	r1, r5
 80061c0:	bf28      	it	cs
 80061c2:	4632      	movcs	r2, r6
 80061c4:	f7ff f8d3 	bl	800536e <memcpy>
 80061c8:	4629      	mov	r1, r5
 80061ca:	4638      	mov	r0, r7
 80061cc:	f7ff f8fc 	bl	80053c8 <_free_r>
 80061d0:	e7f1      	b.n	80061b6 <_realloc_r+0x40>

080061d2 <_raise_r>:
 80061d2:	291f      	cmp	r1, #31
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4605      	mov	r5, r0
 80061d8:	460c      	mov	r4, r1
 80061da:	d904      	bls.n	80061e6 <_raise_r+0x14>
 80061dc:	2316      	movs	r3, #22
 80061de:	6003      	str	r3, [r0, #0]
 80061e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061e4:	bd38      	pop	{r3, r4, r5, pc}
 80061e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80061e8:	b112      	cbz	r2, 80061f0 <_raise_r+0x1e>
 80061ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061ee:	b94b      	cbnz	r3, 8006204 <_raise_r+0x32>
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 f831 	bl	8006258 <_getpid_r>
 80061f6:	4622      	mov	r2, r4
 80061f8:	4601      	mov	r1, r0
 80061fa:	4628      	mov	r0, r5
 80061fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006200:	f000 b818 	b.w	8006234 <_kill_r>
 8006204:	2b01      	cmp	r3, #1
 8006206:	d00a      	beq.n	800621e <_raise_r+0x4c>
 8006208:	1c59      	adds	r1, r3, #1
 800620a:	d103      	bne.n	8006214 <_raise_r+0x42>
 800620c:	2316      	movs	r3, #22
 800620e:	6003      	str	r3, [r0, #0]
 8006210:	2001      	movs	r0, #1
 8006212:	e7e7      	b.n	80061e4 <_raise_r+0x12>
 8006214:	2100      	movs	r1, #0
 8006216:	4620      	mov	r0, r4
 8006218:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800621c:	4798      	blx	r3
 800621e:	2000      	movs	r0, #0
 8006220:	e7e0      	b.n	80061e4 <_raise_r+0x12>
	...

08006224 <raise>:
 8006224:	4b02      	ldr	r3, [pc, #8]	@ (8006230 <raise+0xc>)
 8006226:	4601      	mov	r1, r0
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	f7ff bfd2 	b.w	80061d2 <_raise_r>
 800622e:	bf00      	nop
 8006230:	20000268 	.word	0x20000268

08006234 <_kill_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	2300      	movs	r3, #0
 8006238:	4d06      	ldr	r5, [pc, #24]	@ (8006254 <_kill_r+0x20>)
 800623a:	4604      	mov	r4, r0
 800623c:	4608      	mov	r0, r1
 800623e:	4611      	mov	r1, r2
 8006240:	602b      	str	r3, [r5, #0]
 8006242:	f7fb fb16 	bl	8001872 <_kill>
 8006246:	1c43      	adds	r3, r0, #1
 8006248:	d102      	bne.n	8006250 <_kill_r+0x1c>
 800624a:	682b      	ldr	r3, [r5, #0]
 800624c:	b103      	cbz	r3, 8006250 <_kill_r+0x1c>
 800624e:	6023      	str	r3, [r4, #0]
 8006250:	bd38      	pop	{r3, r4, r5, pc}
 8006252:	bf00      	nop
 8006254:	200006d4 	.word	0x200006d4

08006258 <_getpid_r>:
 8006258:	f7fb bb04 	b.w	8001864 <_getpid>

0800625c <_malloc_usable_size_r>:
 800625c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006260:	1f18      	subs	r0, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	bfbc      	itt	lt
 8006266:	580b      	ldrlt	r3, [r1, r0]
 8006268:	18c0      	addlt	r0, r0, r3
 800626a:	4770      	bx	lr

0800626c <_init>:
 800626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626e:	bf00      	nop
 8006270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006272:	bc08      	pop	{r3}
 8006274:	469e      	mov	lr, r3
 8006276:	4770      	bx	lr

08006278 <_fini>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	bf00      	nop
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr
