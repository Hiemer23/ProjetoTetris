
ProjetoTetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080058c0  080058c0  000068c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae0  08005ae0  0000728c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005ae0  08005ae0  0000728c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005ae0  08005ae0  0000728c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae0  08005ae0  00006ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ae4  08005ae4  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000028c  20000000  08005ae8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000028c  08005d74  0000728c  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20000668  08005d74  00007668  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000728c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcdc  00000000  00000000  000072b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027be  00000000  00000000  00012f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00015750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a58  00000000  00000000  000164e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a151  00000000  00000000  00016f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc2f  00000000  00000000  00031091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f86e  00000000  00000000  00040cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d052e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  000d0574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d4848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000028c 	.word	0x2000028c
 8000128:	00000000 	.word	0x00000000
 800012c:	080058a8 	.word	0x080058a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000290 	.word	0x20000290
 8000148:	080058a8 	.word	0x080058a8

0800014c <lcd_Task>:
    0B00000};

estados_LCD estadoLCD = TELA1;
uint8_t PecasLCD[7] = {CUSTOMT,CUSTOMZ,CUSTOMI,CUSTOML,CUSTOMJ,CUSTOMS,CUSTOMO};

void lcd_Task(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b089      	sub	sp, #36	@ 0x24
 8000150:	af00      	add	r7, sp, #0
	//4 estados na máquina de estados

	switch (estadoLCD) {
 8000152:	4b31      	ldr	r3, [pc, #196]	@ (8000218 <lcd_Task+0xcc>)
 8000154:	781b      	ldrb	r3, [r3, #0]
 8000156:	2b06      	cmp	r3, #6
 8000158:	d810      	bhi.n	800017c <lcd_Task+0x30>
 800015a:	a201      	add	r2, pc, #4	@ (adr r2, 8000160 <lcd_Task+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000183 	.word	0x08000183
 8000164:	08000195 	.word	0x08000195
 8000168:	080001a7 	.word	0x080001a7
 800016c:	080001b9 	.word	0x080001b9
 8000170:	080001cb 	.word	0x080001cb
 8000174:	0800017d 	.word	0x0800017d
 8000178:	0800020d 	.word	0x0800020d
	default:
		estadoLCD = TELA1;
 800017c:	4b26      	ldr	r3, [pc, #152]	@ (8000218 <lcd_Task+0xcc>)
 800017e:	2200      	movs	r2, #0
 8000180:	701a      	strb	r2, [r3, #0]
	case TELA1:
		change_Message(0, ">>Start Game");
 8000182:	4926      	ldr	r1, [pc, #152]	@ (800021c <lcd_Task+0xd0>)
 8000184:	2000      	movs	r0, #0
 8000186:	f000 fc37 	bl	80009f8 <change_Message>
		change_Message(1, "Recorde Atual");
 800018a:	4925      	ldr	r1, [pc, #148]	@ (8000220 <lcd_Task+0xd4>)
 800018c:	2001      	movs	r0, #1
 800018e:	f000 fc33 	bl	80009f8 <change_Message>
		break;
 8000192:	e03c      	b.n	800020e <lcd_Task+0xc2>
	case TELA2:
		change_Message(0, ">>Recorde Atual");
 8000194:	4923      	ldr	r1, [pc, #140]	@ (8000224 <lcd_Task+0xd8>)
 8000196:	2000      	movs	r0, #0
 8000198:	f000 fc2e 	bl	80009f8 <change_Message>
		change_Message(1, "Gravar Nome");
 800019c:	4922      	ldr	r1, [pc, #136]	@ (8000228 <lcd_Task+0xdc>)
 800019e:	2001      	movs	r0, #1
 80001a0:	f000 fc2a 	bl	80009f8 <change_Message>
		break;
 80001a4:	e033      	b.n	800020e <lcd_Task+0xc2>
	case TELA3:
		change_Message(0, ">>Gravar Nome");
 80001a6:	4921      	ldr	r1, [pc, #132]	@ (800022c <lcd_Task+0xe0>)
 80001a8:	2000      	movs	r0, #0
 80001aa:	f000 fc25 	bl	80009f8 <change_Message>
		change_Message(1, "Limpar Recorde");
 80001ae:	4920      	ldr	r1, [pc, #128]	@ (8000230 <lcd_Task+0xe4>)
 80001b0:	2001      	movs	r0, #1
 80001b2:	f000 fc21 	bl	80009f8 <change_Message>
		break;
 80001b6:	e02a      	b.n	800020e <lcd_Task+0xc2>
	case TELA4:
		change_Message(0, ">>Limpar Recorde");
 80001b8:	491e      	ldr	r1, [pc, #120]	@ (8000234 <lcd_Task+0xe8>)
 80001ba:	2000      	movs	r0, #0
 80001bc:	f000 fc1c 	bl	80009f8 <change_Message>
		change_Message(1, "Start Game");
 80001c0:	491d      	ldr	r1, [pc, #116]	@ (8000238 <lcd_Task+0xec>)
 80001c2:	2001      	movs	r0, #1
 80001c4:	f000 fc18 	bl	80009f8 <change_Message>
		break;
 80001c8:	e021      	b.n	800020e <lcd_Task+0xc2>
//        change_Message(0, linhaTeste);
//        snprintf(linhaTestes2, sizeof(linhaTestes2), "Cima:%u Baixo:%u ", getCima(), getBaixo());   // %4u → valor sem sinal com 4 dígitos (ajustável)
//        change_Message(1, linhaTestes2);
        break;
    case TELANEXTPIECE:
    	char linha[16] = "Proxima Peca:   ";
 80001ca:	4b1c      	ldr	r3, [pc, #112]	@ (800023c <lcd_Task+0xf0>)
 80001cc:	f107 0410 	add.w	r4, r7, #16
 80001d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        char linha2[16];
    	linha[15] = PecasLCD[get_next_piece()];
 80001d6:	f001 fda7 	bl	8001d28 <get_next_piece>
 80001da:	4603      	mov	r3, r0
 80001dc:	4a18      	ldr	r2, [pc, #96]	@ (8000240 <lcd_Task+0xf4>)
 80001de:	5cd3      	ldrb	r3, [r2, r3]
 80001e0:	77fb      	strb	r3, [r7, #31]
    	change_Message(0, linha);
 80001e2:	f107 0310 	add.w	r3, r7, #16
 80001e6:	4619      	mov	r1, r3
 80001e8:	2000      	movs	r0, #0
 80001ea:	f000 fc05 	bl	80009f8 <change_Message>
        sprintf(linha2, "Pont:%5u ", get_pontuacao());   // %4u → valor sem sinal com 4 dígitos (ajustável)
 80001ee:	f001 ff89 	bl	8002104 <get_pontuacao>
 80001f2:	4603      	mov	r3, r0
 80001f4:	461a      	mov	r2, r3
 80001f6:	463b      	mov	r3, r7
 80001f8:	4912      	ldr	r1, [pc, #72]	@ (8000244 <lcd_Task+0xf8>)
 80001fa:	4618      	mov	r0, r3
 80001fc:	f004 fa60 	bl	80046c0 <siprintf>
        change_Message(1, linha2);
 8000200:	463b      	mov	r3, r7
 8000202:	4619      	mov	r1, r3
 8000204:	2001      	movs	r0, #1
 8000206:	f000 fbf7 	bl	80009f8 <change_Message>
    	break;
 800020a:	e000      	b.n	800020e <lcd_Task+0xc2>
        break;
 800020c:	bf00      	nop
	}
}
 800020e:	bf00      	nop
 8000210:	3724      	adds	r7, #36	@ 0x24
 8000212:	46bd      	mov	sp, r7
 8000214:	bd90      	pop	{r4, r7, pc}
 8000216:	bf00      	nop
 8000218:	200002a8 	.word	0x200002a8
 800021c:	080058c0 	.word	0x080058c0
 8000220:	080058d0 	.word	0x080058d0
 8000224:	080058e0 	.word	0x080058e0
 8000228:	080058f0 	.word	0x080058f0
 800022c:	080058fc 	.word	0x080058fc
 8000230:	0800590c 	.word	0x0800590c
 8000234:	0800591c 	.word	0x0800591c
 8000238:	08005930 	.word	0x08005930
 800023c:	08005948 	.word	0x08005948
 8000240:	20000030 	.word	0x20000030
 8000244:	0800593c 	.word	0x0800593c

08000248 <changeLCDScreen>:

void changeLCDScreen(estados_LCD novaTela) {
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
	//valide que novaTela é um estado valido antes de mudar
	if (novaTela >= TELA1 && novaTela < FIM) {
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	2b04      	cmp	r3, #4
 8000256:	d803      	bhi.n	8000260 <changeLCDScreen+0x18>
		estadoLCD = novaTela;
 8000258:	4a05      	ldr	r2, [pc, #20]	@ (8000270 <changeLCDScreen+0x28>)
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	7013      	strb	r3, [r2, #0]
	} else {
		estadoLCD = TELA1; // Reset to default state if invalid
	}
}
 800025e:	e002      	b.n	8000266 <changeLCDScreen+0x1e>
		estadoLCD = TELA1; // Reset to default state if invalid
 8000260:	4b03      	ldr	r3, [pc, #12]	@ (8000270 <changeLCDScreen+0x28>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr
 8000270:	200002a8 	.word	0x200002a8

08000274 <initLCD>:

void initLCD(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    initialize_LCD(); // Initialize the LCD
 8000278:	f000 fc9a 	bl	8000bb0 <initialize_LCD>
    lcd_create_char(1, pieceO);
 800027c:	490c      	ldr	r1, [pc, #48]	@ (80002b0 <initLCD+0x3c>)
 800027e:	2001      	movs	r0, #1
 8000280:	f000 fcc7 	bl	8000c12 <lcd_create_char>
    lcd_create_char(2, pieceL);
 8000284:	490b      	ldr	r1, [pc, #44]	@ (80002b4 <initLCD+0x40>)
 8000286:	2002      	movs	r0, #2
 8000288:	f000 fcc3 	bl	8000c12 <lcd_create_char>
    lcd_create_char(3, pieceS);
 800028c:	490a      	ldr	r1, [pc, #40]	@ (80002b8 <initLCD+0x44>)
 800028e:	2003      	movs	r0, #3
 8000290:	f000 fcbf 	bl	8000c12 <lcd_create_char>
    lcd_create_char(4, pieceZ);
 8000294:	4909      	ldr	r1, [pc, #36]	@ (80002bc <initLCD+0x48>)
 8000296:	2004      	movs	r0, #4
 8000298:	f000 fcbb 	bl	8000c12 <lcd_create_char>
    lcd_create_char(5, pieceT);
 800029c:	4908      	ldr	r1, [pc, #32]	@ (80002c0 <initLCD+0x4c>)
 800029e:	2005      	movs	r0, #5
 80002a0:	f000 fcb7 	bl	8000c12 <lcd_create_char>
    lcd_create_char(6, pieceJ);
 80002a4:	4907      	ldr	r1, [pc, #28]	@ (80002c4 <initLCD+0x50>)
 80002a6:	2006      	movs	r0, #6
 80002a8:	f000 fcb3 	bl	8000c12 <lcd_create_char>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000028 	.word	0x20000028
 80002b4:	20000000 	.word	0x20000000
 80002b8:	20000018 	.word	0x20000018
 80002bc:	20000010 	.word	0x20000010
 80002c0:	20000020 	.word	0x20000020
 80002c4:	20000008 	.word	0x20000008

080002c8 <initGame>:
PecaTetris peca;

// Funções

void initGame(void)
{
 80002c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ca:	b091      	sub	sp, #68	@ 0x44
 80002cc:	af0e      	add	r7, sp, #56	@ 0x38
	srand(HAL_GetTick());
 80002ce:	f001 ffc3 	bl	8002258 <HAL_GetTick>
 80002d2:	4603      	mov	r3, r0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f004 f84d 	bl	8004374 <srand>
    peca_atual = number_aleatory_peace(); // Gera a primeira peça aleatória
 80002da:	f001 fc83 	bl	8001be4 <number_aleatory_peace>
 80002de:	4603      	mov	r3, r0
 80002e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000360 <initGame+0x98>)
 80002e2:	6013      	str	r3, [r2, #0]
    peca = pecas[peca_atual];
 80002e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000360 <initGame+0x98>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	491e      	ldr	r1, [pc, #120]	@ (8000364 <initGame+0x9c>)
 80002ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000368 <initGame+0xa0>)
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	4413      	add	r3, r2
 80002f0:	460c      	mov	r4, r1
 80002f2:	461d      	mov	r5, r3
 80002f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000300:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    linha = 0;
 8000308:	4b18      	ldr	r3, [pc, #96]	@ (800036c <initGame+0xa4>)
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
    coluna = 3;
 800030e:	4b18      	ldr	r3, [pc, #96]	@ (8000370 <initGame+0xa8>)
 8000310:	2203      	movs	r2, #3
 8000312:	601a      	str	r2, [r3, #0]
    init_game();
 8000314:	f001 f8ca 	bl	80014ac <init_game>
    running = TRUE; // Inicia o jogo
 8000318:	4b16      	ldr	r3, [pc, #88]	@ (8000374 <initGame+0xac>)
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]
    place_piece(linha, coluna, peca);
 800031e:	4b13      	ldr	r3, [pc, #76]	@ (800036c <initGame+0xa4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	4b12      	ldr	r3, [pc, #72]	@ (8000370 <initGame+0xa8>)
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	603a      	str	r2, [r7, #0]
 800032a:	4e0e      	ldr	r6, [pc, #56]	@ (8000364 <initGame+0x9c>)
 800032c:	466d      	mov	r5, sp
 800032e:	f106 0408 	add.w	r4, r6, #8
 8000332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800033a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800033c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800033e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000342:	e885 0003 	stmia.w	r5, {r0, r1}
 8000346:	e896 000c 	ldmia.w	r6, {r2, r3}
 800034a:	6839      	ldr	r1, [r7, #0]
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f001 f949 	bl	80015e4 <place_piece>
    clear_pontuacao();
 8000352:	f001 fee3 	bl	800211c <clear_pontuacao>
    // limpaTela();
    // draw_board();
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035e:	bf00      	nop
 8000360:	200002b4 	.word	0x200002b4
 8000364:	200002bc 	.word	0x200002bc
 8000368:	20000064 	.word	0x20000064
 800036c:	200002ac 	.word	0x200002ac
 8000370:	200002b0 	.word	0x200002b0
 8000374:	200002b8 	.word	0x200002b8

08000378 <taskTetris>:

void taskTetris(void)
{
 8000378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037a:	b08f      	sub	sp, #60	@ 0x3c
 800037c:	af0e      	add	r7, sp, #56	@ 0x38
    if (game_over()) // Verifica se o jogo acabou
 800037e:	f001 fdfb 	bl	8001f78 <game_over>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d005      	beq.n	8000394 <taskTetris+0x1c>
    {
        running = FALSE; // Para o jogo
 8000388:	4b34      	ldr	r3, [pc, #208]	@ (800045c <taskTetris+0xe4>)
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
        resetBotaoEvento();
 800038e:	f000 fab7 	bl	8000900 <resetBotaoEvento>
        return;
 8000392:	e05f      	b.n	8000454 <taskTetris+0xdc>
    }
    if(getDireita())
 8000394:	f000 fa86 	bl	80008a4 <getDireita>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d017      	beq.n	80003ce <taskTetris+0x56>
    {
        resetDireitaEsquerda();
 800039e:	f000 fa9f 	bl	80008e0 <resetDireitaEsquerda>
        move_piece_right(&linha, &coluna, peca);
 80003a2:	4e2f      	ldr	r6, [pc, #188]	@ (8000460 <taskTetris+0xe8>)
 80003a4:	466d      	mov	r5, sp
 80003a6:	f106 0408 	add.w	r4, r6, #8
 80003aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80003ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80003be:	e896 000c 	ldmia.w	r6, {r2, r3}
 80003c2:	4928      	ldr	r1, [pc, #160]	@ (8000464 <taskTetris+0xec>)
 80003c4:	4828      	ldr	r0, [pc, #160]	@ (8000468 <taskTetris+0xf0>)
 80003c6:	f001 f9ff 	bl	80017c8 <move_piece_right>
        draw_board();
 80003ca:	f001 f8af 	bl	800152c <draw_board>
    }
    if (getEsquerda())
 80003ce:	f000 fa73 	bl	80008b8 <getEsquerda>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d017      	beq.n	8000408 <taskTetris+0x90>
    {
        resetDireitaEsquerda();
 80003d8:	f000 fa82 	bl	80008e0 <resetDireitaEsquerda>
        move_piece_left(&linha, &coluna, peca);
 80003dc:	4e20      	ldr	r6, [pc, #128]	@ (8000460 <taskTetris+0xe8>)
 80003de:	466d      	mov	r5, sp
 80003e0:	f106 0408 	add.w	r4, r6, #8
 80003e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80003f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80003f8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80003fc:	4919      	ldr	r1, [pc, #100]	@ (8000464 <taskTetris+0xec>)
 80003fe:	481a      	ldr	r0, [pc, #104]	@ (8000468 <taskTetris+0xf0>)
 8000400:	f001 fa49 	bl	8001896 <move_piece_left>
        draw_board();
 8000404:	f001 f892 	bl	800152c <draw_board>
    //     resetCimaBaixo();
    //     rotate_piece_right(linha, coluna, &peca);
    //     draw_board();
    // }

    if (getBaixo())
 8000408:	f000 fa32 	bl	8000870 <getBaixo>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d009      	beq.n	8000426 <taskTetris+0xae>
    {
        resetCimaBaixo();
 8000412:	f000 fa37 	bl	8000884 <resetCimaBaixo>
        move_piece_down(&linha, &coluna, &peca, &peca_atual);
 8000416:	4b15      	ldr	r3, [pc, #84]	@ (800046c <taskTetris+0xf4>)
 8000418:	4a11      	ldr	r2, [pc, #68]	@ (8000460 <taskTetris+0xe8>)
 800041a:	4912      	ldr	r1, [pc, #72]	@ (8000464 <taskTetris+0xec>)
 800041c:	4812      	ldr	r0, [pc, #72]	@ (8000468 <taskTetris+0xf0>)
 800041e:	f001 fb62 	bl	8001ae6 <move_piece_down>
        draw_board();
 8000422:	f001 f883 	bl	800152c <draw_board>
    }
    if (getBotaoEvento())
 8000426:	f000 fa51 	bl	80008cc <getBotaoEvento>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d00b      	beq.n	8000448 <taskTetris+0xd0>
    {
        resetBotaoEvento();
 8000430:	f000 fa66 	bl	8000900 <resetBotaoEvento>
        rotate_piece_right(linha, coluna, &peca);
 8000434:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <taskTetris+0xf0>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a0a      	ldr	r2, [pc, #40]	@ (8000464 <taskTetris+0xec>)
 800043a:	6811      	ldr	r1, [r2, #0]
 800043c:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <taskTetris+0xe8>)
 800043e:	4618      	mov	r0, r3
 8000440:	f001 fa90 	bl	8001964 <rotate_piece_right>
        draw_board();
 8000444:	f001 f872 	bl	800152c <draw_board>
    }

    update_game(&linha, &coluna, &peca, &peca_atual);
 8000448:	4b08      	ldr	r3, [pc, #32]	@ (800046c <taskTetris+0xf4>)
 800044a:	4a05      	ldr	r2, [pc, #20]	@ (8000460 <taskTetris+0xe8>)
 800044c:	4905      	ldr	r1, [pc, #20]	@ (8000464 <taskTetris+0xec>)
 800044e:	4806      	ldr	r0, [pc, #24]	@ (8000468 <taskTetris+0xf0>)
 8000450:	f001 fd2a 	bl	8001ea8 <update_game>
}
 8000454:	3704      	adds	r7, #4
 8000456:	46bd      	mov	sp, r7
 8000458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800045a:	bf00      	nop
 800045c:	200002b8 	.word	0x200002b8
 8000460:	200002bc 	.word	0x200002bc
 8000464:	200002b0 	.word	0x200002b0
 8000468:	200002ac 	.word	0x200002ac
 800046c:	200002b4 	.word	0x200002b4

08000470 <gameRunning>:

int gameRunning(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
    return running; // Retorna o estado do jogo
 8000474:	4b02      	ldr	r3, [pc, #8]	@ (8000480 <gameRunning+0x10>)
 8000476:	681b      	ldr	r3, [r3, #0]
}
 8000478:	4618      	mov	r0, r3
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	200002b8 	.word	0x200002b8

08000484 <taskMatrizLed>:
#include "main.h"

volatile MatrizLED_t MatrizLed = {0};

void taskMatrizLed(void) //150us de execucao
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
    static volatile uint8_t line = 0;
    static volatile uint16_t line_m = 0b1000000000000000;

    volatile uint16_t aux_line = 0x00;
 800048a:	2300      	movs	r3, #0
 800048c:	80fb      	strh	r3, [r7, #6]
    volatile uint8_t aux_line2 = 0x00;
 800048e:	2300      	movs	r3, #0
 8000490:	717b      	strb	r3, [r7, #5]

    line++;
 8000492:	4b53      	ldr	r3, [pc, #332]	@ (80005e0 <taskMatrizLed+0x15c>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	b2db      	uxtb	r3, r3
 8000498:	3301      	adds	r3, #1
 800049a:	b2da      	uxtb	r2, r3
 800049c:	4b50      	ldr	r3, [pc, #320]	@ (80005e0 <taskMatrizLed+0x15c>)
 800049e:	701a      	strb	r2, [r3, #0]
    if (line == 16)
 80004a0:	4b4f      	ldr	r3, [pc, #316]	@ (80005e0 <taskMatrizLed+0x15c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	2b10      	cmp	r3, #16
 80004a8:	d102      	bne.n	80004b0 <taskMatrizLed+0x2c>
        line = 0;
 80004aa:	4b4d      	ldr	r3, [pc, #308]	@ (80005e0 <taskMatrizLed+0x15c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
    aux_line = (line_m >> line) | (line_m << (15 - line));
 80004b0:	4b4c      	ldr	r3, [pc, #304]	@ (80005e4 <taskMatrizLed+0x160>)
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	461a      	mov	r2, r3
 80004b8:	4b49      	ldr	r3, [pc, #292]	@ (80005e0 <taskMatrizLed+0x15c>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	fa42 f303 	asr.w	r3, r2, r3
 80004c2:	b21a      	sxth	r2, r3
 80004c4:	4b47      	ldr	r3, [pc, #284]	@ (80005e4 <taskMatrizLed+0x160>)
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	4619      	mov	r1, r3
 80004cc:	4b44      	ldr	r3, [pc, #272]	@ (80005e0 <taskMatrizLed+0x15c>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	f1c3 030f 	rsb	r3, r3, #15
 80004d6:	fa01 f303 	lsl.w	r3, r1, r3
 80004da:	b21b      	sxth	r3, r3
 80004dc:	4313      	orrs	r3, r2
 80004de:	b21b      	sxth	r3, r3
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	80fb      	strh	r3, [r7, #6]

    for (int i = 0; i < 8; i++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	e02e      	b.n	8000548 <taskMatrizLed+0xc4>
    {
        if (MatrizLed[line][7 - i] == 0)
 80004ea:	4b3d      	ldr	r3, [pc, #244]	@ (80005e0 <taskMatrizLed+0x15c>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	461a      	mov	r2, r3
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	f1c3 0307 	rsb	r3, r3, #7
 80004f8:	493b      	ldr	r1, [pc, #236]	@ (80005e8 <taskMatrizLed+0x164>)
 80004fa:	00d2      	lsls	r2, r2, #3
 80004fc:	440a      	add	r2, r1
 80004fe:	4413      	add	r3, r2
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	2b00      	cmp	r3, #0
 8000506:	d106      	bne.n	8000516 <taskMatrizLed+0x92>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800050e:	4837      	ldr	r0, [pc, #220]	@ (80005ec <taskMatrizLed+0x168>)
 8000510:	f002 fda5 	bl	800305e <HAL_GPIO_WritePin>
 8000514:	e005      	b.n	8000522 <taskMatrizLed+0x9e>
        else
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800051c:	4833      	ldr	r0, [pc, #204]	@ (80005ec <taskMatrizLed+0x168>)
 800051e:	f002 fd9e 	bl	800305e <HAL_GPIO_WritePin>

        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 8000522:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000526:	4831      	ldr	r0, [pc, #196]	@ (80005ec <taskMatrizLed+0x168>)
 8000528:	f002 fdb1 	bl	800308e <HAL_GPIO_TogglePin>
        DWT_Delay_us(1);
 800052c:	2001      	movs	r0, #1
 800052e:	f000 fbb1 	bl	8000c94 <DWT_Delay_us>
        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 8000532:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000536:	482d      	ldr	r0, [pc, #180]	@ (80005ec <taskMatrizLed+0x168>)
 8000538:	f002 fda9 	bl	800308e <HAL_GPIO_TogglePin>
        DWT_Delay_us(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f000 fba9 	bl	8000c94 <DWT_Delay_us>
    for (int i = 0; i < 8; i++)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3301      	adds	r3, #1
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2b07      	cmp	r3, #7
 800054c:	ddcd      	ble.n	80004ea <taskMatrizLed+0x66>
    }
    for (int i = 0; i < 16; i++)
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	e02e      	b.n	80005b2 <taskMatrizLed+0x12e>
    {
        aux_line2 = (aux_line >> i) & 0x0001;
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	b29b      	uxth	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	fa42 f303 	asr.w	r3, r2, r3
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	b2db      	uxtb	r3, r3
 8000568:	717b      	strb	r3, [r7, #5]
        if (aux_line2 == 0)
 800056a:	797b      	ldrb	r3, [r7, #5]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d106      	bne.n	8000580 <taskMatrizLed+0xfc>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000578:	481c      	ldr	r0, [pc, #112]	@ (80005ec <taskMatrizLed+0x168>)
 800057a:	f002 fd70 	bl	800305e <HAL_GPIO_WritePin>
 800057e:	e005      	b.n	800058c <taskMatrizLed+0x108>
        else
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000586:	4819      	ldr	r0, [pc, #100]	@ (80005ec <taskMatrizLed+0x168>)
 8000588:	f002 fd69 	bl	800305e <HAL_GPIO_WritePin>

        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 800058c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000590:	4816      	ldr	r0, [pc, #88]	@ (80005ec <taskMatrizLed+0x168>)
 8000592:	f002 fd7c 	bl	800308e <HAL_GPIO_TogglePin>

        DWT_Delay_us(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fb7c 	bl	8000c94 <DWT_Delay_us>
        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 800059c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a0:	4812      	ldr	r0, [pc, #72]	@ (80005ec <taskMatrizLed+0x168>)
 80005a2:	f002 fd74 	bl	800308e <HAL_GPIO_TogglePin>

        DWT_Delay_us(1);
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 fb74 	bl	8000c94 <DWT_Delay_us>
    for (int i = 0; i < 16; i++)
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	3301      	adds	r3, #1
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	ddcd      	ble.n	8000554 <taskMatrizLed+0xd0>
    }
    HAL_GPIO_TogglePin(CLK2_GPIO_Port, CLK2_Pin);
 80005b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005bc:	480b      	ldr	r0, [pc, #44]	@ (80005ec <taskMatrizLed+0x168>)
 80005be:	f002 fd66 	bl	800308e <HAL_GPIO_TogglePin>
    DWT_Delay_us(1);
 80005c2:	2001      	movs	r0, #1
 80005c4:	f000 fb66 	bl	8000c94 <DWT_Delay_us>
    HAL_GPIO_TogglePin(CLK2_GPIO_Port, CLK2_Pin);
 80005c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005cc:	4807      	ldr	r0, [pc, #28]	@ (80005ec <taskMatrizLed+0x168>)
 80005ce:	f002 fd5e 	bl	800308e <HAL_GPIO_TogglePin>
    DWT_Delay_us(1);
 80005d2:	2001      	movs	r0, #1
 80005d4:	f000 fb5e 	bl	8000c94 <DWT_Delay_us>
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	2000037c 	.word	0x2000037c
 80005e4:	20000038 	.word	0x20000038
 80005e8:	200002fc 	.word	0x200002fc
 80005ec:	40010c00 	.word	0x40010c00

080005f0 <changeMatriz>:

void changeMatriz(MatrizLED_t newMatriz)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < LinhasMatriz; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e01a      	b.n	8000634 <changeMatriz+0x44>
    {
        for (int j = 0; j < ColunasMatriz; j++)
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	e011      	b.n	8000628 <changeMatriz+0x38>
        {
            MatrizLed[i][j] = newMatriz[i][j];
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	00db      	lsls	r3, r3, #3
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	441a      	add	r2, r3
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4413      	add	r3, r2
 8000610:	7819      	ldrb	r1, [r3, #0]
 8000612:	4a0d      	ldr	r2, [pc, #52]	@ (8000648 <changeMatriz+0x58>)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	441a      	add	r2, r3
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	4413      	add	r3, r2
 800061e:	460a      	mov	r2, r1
 8000620:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < ColunasMatriz; j++)
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	3301      	adds	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	2b07      	cmp	r3, #7
 800062c:	ddea      	ble.n	8000604 <changeMatriz+0x14>
    for (int i = 0; i < LinhasMatriz; i++)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3301      	adds	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b0f      	cmp	r3, #15
 8000638:	dde1      	ble.n	80005fe <changeMatriz+0xe>
        }
    }
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	200002fc 	.word	0x200002fc

0800064c <initInput>:
void resetCimaBaixo(void);
void atualizaNavegacaoEsquerdaDireita(void);
void atualizaBotao(void);

void initInput(ADC_HandleTypeDef *hadc)
{
 800064c:	b4b0      	push	{r4, r5, r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    hadc1 = *hadc; // Copia o handle do ADC
 8000654:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <initInput+0x2c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4614      	mov	r4, r2
 800065a:	461d      	mov	r5, r3
 800065c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000664:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000668:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bcb0      	pop	{r4, r5, r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000384 	.word	0x20000384

0800067c <ler_ADC_canal>:

uint16_t ler_ADC_canal(uint8_t canal)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]

    sConfig.Channel = (canal == 0 ? (uint32_t)0 : (uint32_t)1);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	bf14      	ite	ne
 8000698:	2301      	movne	r3, #1
 800069a:	2300      	moveq	r3, #0
 800069c:	b2db      	uxtb	r3, r3
 800069e:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80006a4:	2303      	movs	r3, #3
 80006a6:	613b      	str	r3, [r7, #16]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig); // Aponta o canal
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <ler_ADC_canal+0x5c>)
 80006b0:	f002 f898 	bl	80027e4 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);                            // Inicia conversão
 80006b4:	4808      	ldr	r0, [pc, #32]	@ (80006d8 <ler_ADC_canal+0x5c>)
 80006b6:	f001 fed5 	bl	8002464 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Espera terminar
 80006ba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006be:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <ler_ADC_canal+0x5c>)
 80006c0:	f001 ff7e 	bl	80025c0 <HAL_ADC_PollForConversion>
    uint16_t valor = HAL_ADC_GetValue(&hadc1);        // Lê resultado
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <ler_ADC_canal+0x5c>)
 80006c6:	f002 f881 	bl	80027cc <HAL_ADC_GetValue>
 80006ca:	4603      	mov	r3, r0
 80006cc:	82fb      	strh	r3, [r7, #22]

    return valor;
 80006ce:	8afb      	ldrh	r3, [r7, #22]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000384 	.word	0x20000384

080006dc <taskLeituraAD>:

void taskLeituraAD(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    AD1 = ler_ADC_canal(0); // Lê ADC canal 0
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff ffcb 	bl	800067c <ler_ADC_canal>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <taskLeituraAD+0x44>)
 80006ec:	801a      	strh	r2, [r3, #0]
    AD2 = ler_ADC_canal(1); // Lê ADC canal 1
 80006ee:	2001      	movs	r0, #1
 80006f0:	f7ff ffc4 	bl	800067c <ler_ADC_canal>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <taskLeituraAD+0x48>)
 80006fa:	801a      	strh	r2, [r3, #0]

    BotaoStatus = HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin); // Lê estado do botão
 80006fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000700:	4809      	ldr	r0, [pc, #36]	@ (8000728 <taskLeituraAD+0x4c>)
 8000702:	f002 fc95 	bl	8003030 <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <taskLeituraAD+0x50>)
 800070c:	801a      	strh	r2, [r3, #0]

    atualizaNavegacaoUpandDown();
 800070e:	f000 f80f 	bl	8000730 <atualizaNavegacaoUpandDown>
    atualizaBotao();
 8000712:	f000 f87d 	bl	8000810 <atualizaBotao>
    atualizaNavegacaoEsquerdaDireita();
 8000716:	f000 f843 	bl	80007a0 <atualizaNavegacaoEsquerdaDireita>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000037e 	.word	0x2000037e
 8000724:	20000380 	.word	0x20000380
 8000728:	40010c00 	.word	0x40010c00
 800072c:	20000382 	.word	0x20000382

08000730 <atualizaNavegacaoUpandDown>:

void atualizaNavegacaoUpandDown(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
    if (!upAndDown_locked)
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <atualizaNavegacaoUpandDown+0x60>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d117      	bne.n	800076c <atualizaNavegacaoUpandDown+0x3c>
    {
        if (AD2 < AD2_THRESHOLD_LOW)
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <atualizaNavegacaoUpandDown+0x64>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	2bc7      	cmp	r3, #199	@ 0xc7
 8000742:	d806      	bhi.n	8000752 <atualizaNavegacaoUpandDown+0x22>
        {
            // Desce no menu
            baixo = TRUE;
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <atualizaNavegacaoUpandDown+0x68>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
            upAndDown_locked = 1;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <atualizaNavegacaoUpandDown+0x60>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
        {
            upAndDown_locked = 0;
            resetCimaBaixo();
        }
    }
}
 8000750:	e01b      	b.n	800078a <atualizaNavegacaoUpandDown+0x5a>
        else if (AD2 > AD2_THRESHOLD_HIGH)
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <atualizaNavegacaoUpandDown+0x64>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	f640 723c 	movw	r2, #3900	@ 0xf3c
 800075a:	4293      	cmp	r3, r2
 800075c:	d915      	bls.n	800078a <atualizaNavegacaoUpandDown+0x5a>
            cima = TRUE;
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <atualizaNavegacaoUpandDown+0x6c>)
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
            upAndDown_locked = 1;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <atualizaNavegacaoUpandDown+0x60>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
}
 800076a:	e00e      	b.n	800078a <atualizaNavegacaoUpandDown+0x5a>
        if (AD2 > AD2_DEADZONE_MIN && AD2 < AD2_DEADZONE_MAX)
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <atualizaNavegacaoUpandDown+0x64>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000774:	d909      	bls.n	800078a <atualizaNavegacaoUpandDown+0x5a>
 8000776:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <atualizaNavegacaoUpandDown+0x64>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 800077e:	d204      	bcs.n	800078a <atualizaNavegacaoUpandDown+0x5a>
            upAndDown_locked = 0;
 8000780:	4b03      	ldr	r3, [pc, #12]	@ (8000790 <atualizaNavegacaoUpandDown+0x60>)
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
            resetCimaBaixo();
 8000786:	f000 f87d 	bl	8000884 <resetCimaBaixo>
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200003b4 	.word	0x200003b4
 8000794:	20000380 	.word	0x20000380
 8000798:	200003b8 	.word	0x200003b8
 800079c:	200003b6 	.word	0x200003b6

080007a0 <atualizaNavegacaoEsquerdaDireita>:
void atualizaNavegacaoEsquerdaDireita(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    if (!rightAndLeft_locked)
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <atualizaNavegacaoEsquerdaDireita+0x60>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d117      	bne.n	80007dc <atualizaNavegacaoEsquerdaDireita+0x3c>
    {
        if (AD1 < AD2_THRESHOLD_LOW)
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <atualizaNavegacaoEsquerdaDireita+0x64>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80007b2:	d806      	bhi.n	80007c2 <atualizaNavegacaoEsquerdaDireita+0x22>
        {
            esquerda = TRUE; // Movimento para a esquerda
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <atualizaNavegacaoEsquerdaDireita+0x68>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
            rightAndLeft_locked = 1;
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <atualizaNavegacaoEsquerdaDireita+0x60>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
        {
            rightAndLeft_locked = 0;
            resetDireitaEsquerda();
        }
    }
}
 80007c0:	e01b      	b.n	80007fa <atualizaNavegacaoEsquerdaDireita+0x5a>
        else if (AD1 > AD2_THRESHOLD_HIGH)
 80007c2:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <atualizaNavegacaoEsquerdaDireita+0x64>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d915      	bls.n	80007fa <atualizaNavegacaoEsquerdaDireita+0x5a>
            direita = TRUE; // Movimento para a direita
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <atualizaNavegacaoEsquerdaDireita+0x6c>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
            rightAndLeft_locked = 1;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <atualizaNavegacaoEsquerdaDireita+0x60>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
}
 80007da:	e00e      	b.n	80007fa <atualizaNavegacaoEsquerdaDireita+0x5a>
        if (AD1 > AD2_DEADZONE_MIN && AD1 < AD2_DEADZONE_MAX)
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <atualizaNavegacaoEsquerdaDireita+0x64>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80007e4:	d909      	bls.n	80007fa <atualizaNavegacaoEsquerdaDireita+0x5a>
 80007e6:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <atualizaNavegacaoEsquerdaDireita+0x64>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80007ee:	d204      	bcs.n	80007fa <atualizaNavegacaoEsquerdaDireita+0x5a>
            rightAndLeft_locked = 0;
 80007f0:	4b03      	ldr	r3, [pc, #12]	@ (8000800 <atualizaNavegacaoEsquerdaDireita+0x60>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
            resetDireitaEsquerda();
 80007f6:	f000 f873 	bl	80008e0 <resetDireitaEsquerda>
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200003b5 	.word	0x200003b5
 8000804:	2000037e 	.word	0x2000037e
 8000808:	200003b9 	.word	0x200003b9
 800080c:	200003b7 	.word	0x200003b7

08000810 <atualizaBotao>:

void atualizaBotao(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
    static uint8_t uinflagBotaoApertado = 0;
    if (BotaoStatus == GPIO_PIN_RESET && botaoEvento == 0)
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <atualizaBotao+0x40>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d106      	bne.n	800082a <atualizaBotao+0x1a>
 800081c:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <atualizaBotao+0x44>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d102      	bne.n	800082a <atualizaBotao+0x1a>
    {
        uinflagBotaoApertado = 1; // Marca que o evento já ocorreu
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <atualizaBotao+0x48>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
    }
    if(uinflagBotaoApertado && BotaoStatus == GPIO_PIN_SET)
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <atualizaBotao+0x48>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d009      	beq.n	8000846 <atualizaBotao+0x36>
 8000832:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <atualizaBotao+0x40>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d105      	bne.n	8000846 <atualizaBotao+0x36>
    {
        botaoEvento = 1; // Marca o evento do botão
 800083a:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <atualizaBotao+0x44>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
        uinflagBotaoApertado = 0; // Reseta a flag
 8000840:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <atualizaBotao+0x48>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
    }
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000382 	.word	0x20000382
 8000854:	200003ba 	.word	0x200003ba
 8000858:	200003bb 	.word	0x200003bb

0800085c <getCima>:

uint8_t getCima(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
    return cima;
 8000860:	4b02      	ldr	r3, [pc, #8]	@ (800086c <getCima+0x10>)
 8000862:	781b      	ldrb	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	200003b6 	.word	0x200003b6

08000870 <getBaixo>:
uint8_t getBaixo(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
    return baixo;
 8000874:	4b02      	ldr	r3, [pc, #8]	@ (8000880 <getBaixo+0x10>)
 8000876:	781b      	ldrb	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	200003b8 	.word	0x200003b8

08000884 <resetCimaBaixo>:
void resetCimaBaixo(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
    cima = 0;
 8000888:	4b04      	ldr	r3, [pc, #16]	@ (800089c <resetCimaBaixo+0x18>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
    baixo = 0;
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <resetCimaBaixo+0x1c>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	200003b6 	.word	0x200003b6
 80008a0:	200003b8 	.word	0x200003b8

080008a4 <getDireita>:
uint8_t getDireita(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
    return direita;
 80008a8:	4b02      	ldr	r3, [pc, #8]	@ (80008b4 <getDireita+0x10>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	200003b7 	.word	0x200003b7

080008b8 <getEsquerda>:
uint8_t getEsquerda(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
    return esquerda;
 80008bc:	4b02      	ldr	r3, [pc, #8]	@ (80008c8 <getEsquerda+0x10>)
 80008be:	781b      	ldrb	r3, [r3, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	200003b9 	.word	0x200003b9

080008cc <getBotaoEvento>:
uint8_t getBotaoEvento(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
    return botaoEvento;
 80008d0:	4b02      	ldr	r3, [pc, #8]	@ (80008dc <getBotaoEvento+0x10>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	200003ba 	.word	0x200003ba

080008e0 <resetDireitaEsquerda>:

void resetDireitaEsquerda(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
    direita = 0;
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <resetDireitaEsquerda+0x18>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
    esquerda = 0;
 80008ea:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <resetDireitaEsquerda+0x1c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	200003b7 	.word	0x200003b7
 80008fc:	200003b9 	.word	0x200003b9

08000900 <resetBotaoEvento>:

void resetBotaoEvento(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
    botaoEvento = 0; // Reseta o evento do botão
 8000904:	4b03      	ldr	r3, [pc, #12]	@ (8000914 <resetBotaoEvento+0x14>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	200003ba 	.word	0x200003ba

08000918 <register_EN>:
uint8_t position_String = 0;
uint8_t linha_LCD = 0;

void lcd_send_data(uint8_t data);

void register_EN(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
    EN_HIGH;
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000922:	4808      	ldr	r0, [pc, #32]	@ (8000944 <register_EN+0x2c>)
 8000924:	f002 fb9b 	bl	800305e <HAL_GPIO_WritePin>
    LCD_delay_us(1);
 8000928:	2001      	movs	r0, #1
 800092a:	f000 f9b3 	bl	8000c94 <DWT_Delay_us>
    EN_LOW;
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000934:	4803      	ldr	r0, [pc, #12]	@ (8000944 <register_EN+0x2c>)
 8000936:	f002 fb92 	bl	800305e <HAL_GPIO_WritePin>
    LCD_delay_us(40);
 800093a:	2028      	movs	r0, #40	@ 0x28
 800093c:	f000 f9aa 	bl	8000c94 <DWT_Delay_us>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40011000 	.word	0x40011000

08000948 <Write_Display>:
//    DB1_HIGH;
//    DB0_LOW;
//    register_EN();
//}

void Write_Display() {
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

    if (position_String < 16) {
 800094c:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <Write_Display+0x64>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d816      	bhi.n	8000982 <Write_Display+0x3a>
        Write_caracter(message[linha_LCD][position_String]);
 8000954:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <Write_Display+0x68>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <Write_Display+0x64>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <Write_Display+0x6c>)
 8000962:	460b      	mov	r3, r1
 8000964:	011b      	lsls	r3, r3, #4
 8000966:	440b      	add	r3, r1
 8000968:	4413      	add	r3, r2
 800096a:	4403      	add	r3, r0
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f822 	bl	80009b8 <Write_caracter>
        position_String++;
 8000974:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <Write_Display+0x64>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <Write_Display+0x64>)
 800097e:	701a      	strb	r2, [r3, #0]
        position_String = 0;
        (linha_LCD == 0) ? (linha_LCD = 1) : (linha_LCD = 0);
        Set_Line(linha_LCD);
    }

}
 8000980:	e012      	b.n	80009a8 <Write_Display+0x60>
        position_String = 0;
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <Write_Display+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
        (linha_LCD == 0) ? (linha_LCD = 1) : (linha_LCD = 0);
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <Write_Display+0x68>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d103      	bne.n	8000998 <Write_Display+0x50>
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <Write_Display+0x68>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	e002      	b.n	800099e <Write_Display+0x56>
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <Write_Display+0x68>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
        Set_Line(linha_LCD);
 800099e:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <Write_Display+0x68>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f815 	bl	80009d2 <Set_Line>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200003bc 	.word	0x200003bc
 80009b0:	200003bd 	.word	0x200003bd
 80009b4:	2000003c 	.word	0x2000003c

080009b8 <Write_caracter>:

void Write_caracter(uint8_t c) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	lcd_send_data(c);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f8cf 	bl	8000b68 <lcd_send_data>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <Set_Line>:
    EN_LOW;
    LCD_delay_us(1);
    RS_LOW;
}

void Set_Line(char line) {
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	71fb      	strb	r3, [r7, #7]
	if (line == 0)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d103      	bne.n	80009ea <Set_Line+0x18>
	        lcd_send_command(0x80);  // linha 1
 80009e2:	2080      	movs	r0, #128	@ 0x80
 80009e4:	f000 f8a2 	bl	8000b2c <lcd_send_command>
	    else
	        lcd_send_command(0xC0);  // linha 2
}
 80009e8:	e002      	b.n	80009f0 <Set_Line+0x1e>
	        lcd_send_command(0xC0);  // linha 2
 80009ea:	20c0      	movs	r0, #192	@ 0xc0
 80009ec:	f000 f89e 	bl	8000b2c <lcd_send_command>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <change_Message>:

void change_Message(uint8_t line, char *new_Text) {
 80009f8:	b490      	push	{r4, r7}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]
    //Verifica onde acaba a string enviada
    while (new_Text[i] != '\0' && i < 16) {
 8000a08:	e01f      	b.n	8000a4a <change_Message+0x52>

        if (message[line][i] != new_Text[i]) {
 8000a0a:	79fa      	ldrb	r2, [r7, #7]
 8000a0c:	7bf9      	ldrb	r1, [r7, #15]
 8000a0e:	481f      	ldr	r0, [pc, #124]	@ (8000a8c <change_Message+0x94>)
 8000a10:	4613      	mov	r3, r2
 8000a12:	011b      	lsls	r3, r3, #4
 8000a14:	4413      	add	r3, r2
 8000a16:	4403      	add	r3, r0
 8000a18:	440b      	add	r3, r1
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	440b      	add	r3, r1
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d00d      	beq.n	8000a44 <change_Message+0x4c>
                message[line][i] = new_Text[i];
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	79fa      	ldrb	r2, [r7, #7]
 8000a30:	7bf9      	ldrb	r1, [r7, #15]
 8000a32:	781c      	ldrb	r4, [r3, #0]
 8000a34:	4815      	ldr	r0, [pc, #84]	@ (8000a8c <change_Message+0x94>)
 8000a36:	4613      	mov	r3, r2
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4403      	add	r3, r0
 8000a3e:	440b      	add	r3, r1
 8000a40:	4622      	mov	r2, r4
 8000a42:	701a      	strb	r2, [r3, #0]
            }
        i++;
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	3301      	adds	r3, #1
 8000a48:	73fb      	strb	r3, [r7, #15]
    while (new_Text[i] != '\0' && i < 16) {
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d010      	beq.n	8000a78 <change_Message+0x80>
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d9d6      	bls.n	8000a0a <change_Message+0x12>
    }
    for (i = i; i < 16; i++) {
 8000a5c:	e00c      	b.n	8000a78 <change_Message+0x80>
        message[line][i] = ' ';
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	7bf9      	ldrb	r1, [r7, #15]
 8000a62:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <change_Message+0x94>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	4413      	add	r3, r2
 8000a6a:	4403      	add	r3, r0
 8000a6c:	440b      	add	r3, r1
 8000a6e:	2220      	movs	r2, #32
 8000a70:	701a      	strb	r2, [r3, #0]
    for (i = i; i < 16; i++) {
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	3301      	adds	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	d9ef      	bls.n	8000a5e <change_Message+0x66>
    }
}
 8000a7e:	bf00      	nop
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc90      	pop	{r4, r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	2000003c 	.word	0x2000003c

08000a90 <send_nibble>:

void send_nibble(uint8_t nibble) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
    (nibble & 0x08) ? DB7_HIGH : DB7_LOW;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d005      	beq.n	8000ab0 <send_nibble+0x20>
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2140      	movs	r1, #64	@ 0x40
 8000aa8:	481f      	ldr	r0, [pc, #124]	@ (8000b28 <send_nibble+0x98>)
 8000aaa:	f002 fad8 	bl	800305e <HAL_GPIO_WritePin>
 8000aae:	e004      	b.n	8000aba <send_nibble+0x2a>
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2140      	movs	r1, #64	@ 0x40
 8000ab4:	481c      	ldr	r0, [pc, #112]	@ (8000b28 <send_nibble+0x98>)
 8000ab6:	f002 fad2 	bl	800305e <HAL_GPIO_WritePin>
    (nibble & 0x04) ? DB6_HIGH : DB6_LOW;
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d005      	beq.n	8000ad0 <send_nibble+0x40>
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2120      	movs	r1, #32
 8000ac8:	4817      	ldr	r0, [pc, #92]	@ (8000b28 <send_nibble+0x98>)
 8000aca:	f002 fac8 	bl	800305e <HAL_GPIO_WritePin>
 8000ace:	e004      	b.n	8000ada <send_nibble+0x4a>
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2120      	movs	r1, #32
 8000ad4:	4814      	ldr	r0, [pc, #80]	@ (8000b28 <send_nibble+0x98>)
 8000ad6:	f002 fac2 	bl	800305e <HAL_GPIO_WritePin>
    (nibble & 0x02) ? DB5_HIGH : DB5_LOW;
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d005      	beq.n	8000af0 <send_nibble+0x60>
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	480f      	ldr	r0, [pc, #60]	@ (8000b28 <send_nibble+0x98>)
 8000aea:	f002 fab8 	bl	800305e <HAL_GPIO_WritePin>
 8000aee:	e004      	b.n	8000afa <send_nibble+0x6a>
 8000af0:	2200      	movs	r2, #0
 8000af2:	2110      	movs	r1, #16
 8000af4:	480c      	ldr	r0, [pc, #48]	@ (8000b28 <send_nibble+0x98>)
 8000af6:	f002 fab2 	bl	800305e <HAL_GPIO_WritePin>
    (nibble & 0x01) ? DB4_HIGH : DB4_LOW;
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d005      	beq.n	8000b10 <send_nibble+0x80>
 8000b04:	2201      	movs	r2, #1
 8000b06:	2108      	movs	r1, #8
 8000b08:	4807      	ldr	r0, [pc, #28]	@ (8000b28 <send_nibble+0x98>)
 8000b0a:	f002 faa8 	bl	800305e <HAL_GPIO_WritePin>
 8000b0e:	e004      	b.n	8000b1a <send_nibble+0x8a>
 8000b10:	2200      	movs	r2, #0
 8000b12:	2108      	movs	r1, #8
 8000b14:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <send_nibble+0x98>)
 8000b16:	f002 faa2 	bl	800305e <HAL_GPIO_WritePin>

    register_EN();
 8000b1a:	f7ff fefd 	bl	8000918 <register_EN>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40010800 	.word	0x40010800

08000b2c <lcd_send_command>:

void lcd_send_command(uint8_t cmd) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
    RS_LOW;
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b3c:	4809      	ldr	r0, [pc, #36]	@ (8000b64 <lcd_send_command+0x38>)
 8000b3e:	f002 fa8e 	bl	800305e <HAL_GPIO_WritePin>
    send_nibble(cmd >> 4);  // parte alta
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	091b      	lsrs	r3, r3, #4
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ffa1 	bl	8000a90 <send_nibble>
    send_nibble(cmd & 0x0F); // parte baixa
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff9a 	bl	8000a90 <send_nibble>
    //LCD_delay_us(40);
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40011000 	.word	0x40011000

08000b68 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
    RS_HIGH;
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <lcd_send_data+0x44>)
 8000b7a:	f002 fa70 	bl	800305e <HAL_GPIO_WritePin>
    //LCD_delay_us(1);
    send_nibble(data >> 4);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	091b      	lsrs	r3, r3, #4
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff83 	bl	8000a90 <send_nibble>
    send_nibble(data & 0x0F);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 030f 	and.w	r3, r3, #15
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff7c 	bl	8000a90 <send_nibble>
    //LCD_delay_us(40);
    RS_LOW;
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9e:	4803      	ldr	r0, [pc, #12]	@ (8000bac <lcd_send_data+0x44>)
 8000ba0:	f002 fa5d 	bl	800305e <HAL_GPIO_WritePin>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40011000 	.word	0x40011000

08000bb0 <initialize_LCD>:

void initialize_LCD(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
    LCD_delay_ms(15); // tempo mínimo de boot
 8000bb4:	200f      	movs	r0, #15
 8000bb6:	f001 fb59 	bl	800226c <HAL_Delay>

    // Inicialização especial para 4 bits
    send_nibble(0x03);  // função set 8 bits (3)
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f7ff ff68 	bl	8000a90 <send_nibble>
    LCD_delay_ms(5);
 8000bc0:	2005      	movs	r0, #5
 8000bc2:	f001 fb53 	bl	800226c <HAL_Delay>
    send_nibble(0x03);
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	f7ff ff62 	bl	8000a90 <send_nibble>
    LCD_delay_us(150);
 8000bcc:	2096      	movs	r0, #150	@ 0x96
 8000bce:	f000 f861 	bl	8000c94 <DWT_Delay_us>
    send_nibble(0x03);
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f7ff ff5c 	bl	8000a90 <send_nibble>
    LCD_delay_us(150);
 8000bd8:	2096      	movs	r0, #150	@ 0x96
 8000bda:	f000 f85b 	bl	8000c94 <DWT_Delay_us>
    send_nibble(0x02);  // função set para 4 bits
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff ff56 	bl	8000a90 <send_nibble>
    LCD_delay_us(150);
 8000be4:	2096      	movs	r0, #150	@ 0x96
 8000be6:	f000 f855 	bl	8000c94 <DWT_Delay_us>

    lcd_send_command(0x28); // function set: 4 bits, 2 linhas, 5x8
 8000bea:	2028      	movs	r0, #40	@ 0x28
 8000bec:	f7ff ff9e 	bl	8000b2c <lcd_send_command>
    lcd_send_command(0x08); // display OFF
 8000bf0:	2008      	movs	r0, #8
 8000bf2:	f7ff ff9b 	bl	8000b2c <lcd_send_command>
    lcd_send_command(0x01); // clear display
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f7ff ff98 	bl	8000b2c <lcd_send_command>
    LCD_delay_ms(2);
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f001 fb35 	bl	800226c <HAL_Delay>
    lcd_send_command(0x06); // entry mode set
 8000c02:	2006      	movs	r0, #6
 8000c04:	f7ff ff92 	bl	8000b2c <lcd_send_command>
    lcd_send_command(0x0C); // display ON, cursor OFF
 8000c08:	200c      	movs	r0, #12
 8000c0a:	f7ff ff8f 	bl	8000b2c <lcd_send_command>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <lcd_create_char>:

void lcd_create_char(uint8_t pos, uint8_t *pattern) {
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	6039      	str	r1, [r7, #0]
 8000c1c:	71fb      	strb	r3, [r7, #7]
    // CGRAM começa em 0x40, cada caractere ocupa 8 bytes
    lcd_send_command(0x40 | (pos << 3));  // endereço CGRAM para caractere N
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	b25b      	sxtb	r3, r3
 8000c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff7c 	bl	8000b2c <lcd_send_command>
    for (int i = 0; i < 8; i++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e009      	b.n	8000c4e <lcd_create_char+0x3c>
        lcd_send_data(pattern[i]);   // envia cada linha do caractere
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	683a      	ldr	r2, [r7, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff90 	bl	8000b68 <lcd_send_data>
    for (int i = 0; i < 8; i++) {
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2b07      	cmp	r3, #7
 8000c52:	ddf2      	ble.n	8000c3a <lcd_create_char+0x28>
    }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <DWT_Delay_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void DWT_Delay_Init(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <DWT_Delay_Init+0x2c>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <DWT_Delay_Init+0x2c>)
 8000c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c6e:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8000c70:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <DWT_Delay_Init+0x30>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <DWT_Delay_Init+0x30>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <DWT_Delay_Init+0x30>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6013      	str	r3, [r2, #0]
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000edf0 	.word	0xe000edf0
 8000c90:	e0001000 	.word	0xe0001000

08000c94 <DWT_Delay_us>:

void DWT_Delay_us(uint32_t us)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <DWT_Delay_us+0x40>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000);
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <DWT_Delay_us+0x44>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <DWT_Delay_us+0x48>)
 8000ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cac:	0c9a      	lsrs	r2, r3, #18
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	fb02 f303 	mul.w	r3, r2, r3
 8000cb4:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks)
 8000cb6:	bf00      	nop
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <DWT_Delay_us+0x40>)
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d8f8      	bhi.n	8000cb8 <DWT_Delay_us+0x24>
        ;
}
 8000cc6:	bf00      	nop
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e0001000 	.word	0xe0001000
 8000cd8:	20000060 	.word	0x20000060
 8000cdc:	431bde83 	.word	0x431bde83

08000ce0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cf0:	d10e      	bne.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x30>
    {
        flag1ms = TRUE;
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
        count100ms++;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d02:	701a      	strb	r2, [r3, #0]
        count1000ms++;
 8000d04:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d0e:	801a      	strh	r2, [r3, #0]
    }
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000438 	.word	0x20000438
 8000d20:	20000439 	.word	0x20000439
 8000d24:	2000043c 	.word	0x2000043c

08000d28 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000d2e:	f001 fa3b 	bl	80021a8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000d32:	f000 f8a1 	bl	8000e78 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000d36:	f000 f985 	bl	8001044 <MX_GPIO_Init>
    MX_TIM2_Init();
 8000d3a:	f000 f937 	bl	8000fac <MX_TIM2_Init>
    MX_ADC1_Init();
 8000d3e:	f000 f8f7 	bl	8000f30 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim2);
 8000d42:	4845      	ldr	r0, [pc, #276]	@ (8000e58 <main+0x130>)
 8000d44:	f002 ff74 	bl	8003c30 <HAL_TIM_Base_Start_IT>
    HAL_ADC_Start(&hadc1);
 8000d48:	4844      	ldr	r0, [pc, #272]	@ (8000e5c <main+0x134>)
 8000d4a:	f001 fb8b 	bl	8002464 <HAL_ADC_Start>

    initInput(&hadc1);
 8000d4e:	4843      	ldr	r0, [pc, #268]	@ (8000e5c <main+0x134>)
 8000d50:	f7ff fc7c 	bl	800064c <initInput>
    DWT_Delay_Init();
 8000d54:	f7ff ff84 	bl	8000c60 <DWT_Delay_Init>
    initLCD();
 8000d58:	f7ff fa8c 	bl	8000274 <initLCD>

    estados_LCD estadoTeste = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	71fb      	strb	r3, [r7, #7]
    editPosition = 1;
 8000d60:	4b3f      	ldr	r3, [pc, #252]	@ (8000e60 <main+0x138>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]

    
    changeLCDScreen(TELA1);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fa6e 	bl	8000248 <changeLCDScreen>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (flag1ms)
 8000d6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e64 <main+0x13c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d01e      	beq.n	8000db2 <main+0x8a>
        {
            HAL_GPIO_TogglePin(TestePin_GPIO_Port, TestePin_Pin);
 8000d74:	2110      	movs	r1, #16
 8000d76:	483c      	ldr	r0, [pc, #240]	@ (8000e68 <main+0x140>)
 8000d78:	f002 f989 	bl	800308e <HAL_GPIO_TogglePin>
            flag1ms = FALSE;
 8000d7c:	4b39      	ldr	r3, [pc, #228]	@ (8000e64 <main+0x13c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
            taskLeituraAD();
 8000d82:	f7ff fcab 	bl	80006dc <taskLeituraAD>

            Write_Display();
 8000d86:	f7ff fddf 	bl	8000948 <Write_Display>
            taskMatrizLed();
 8000d8a:	f7ff fb7b 	bl	8000484 <taskMatrizLed>
            if(gameRunning())
 8000d8e:	f7ff fb6f 	bl	8000470 <gameRunning>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <main+0x76>
            {
                taskTetris();
 8000d98:	f7ff faee 	bl	8000378 <taskTetris>
 8000d9c:	e002      	b.n	8000da4 <main+0x7c>
            }
            else{
                editPosition = TRUE;
 8000d9e:	4b30      	ldr	r3, [pc, #192]	@ (8000e60 <main+0x138>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
            }
            
            changeMatriz(board);
 8000da4:	4831      	ldr	r0, [pc, #196]	@ (8000e6c <main+0x144>)
 8000da6:	f7ff fc23 	bl	80005f0 <changeMatriz>
            HAL_GPIO_TogglePin(TestePin_GPIO_Port, TestePin_Pin);
 8000daa:	2110      	movs	r1, #16
 8000dac:	482e      	ldr	r0, [pc, #184]	@ (8000e68 <main+0x140>)
 8000dae:	f002 f96e 	bl	800308e <HAL_GPIO_TogglePin>
        }

        if (count100ms >= 100)
 8000db2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e70 <main+0x148>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b63      	cmp	r3, #99	@ 0x63
 8000db8:	d944      	bls.n	8000e44 <main+0x11c>
        {
            if (editPosition)
 8000dba:	4b29      	ldr	r3, [pc, #164]	@ (8000e60 <main+0x138>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d02a      	beq.n	8000e18 <main+0xf0>
            {
                count100ms = 0;
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <main+0x148>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
                if (getCima())
 8000dc8:	f7ff fd48 	bl	800085c <getCima>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00e      	beq.n	8000df0 <main+0xc8>
                {
                    estadoTeste = estadoTeste == TELA1 ? TELA4 : estadoTeste - 1;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <main+0xb8>
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	e000      	b.n	8000de2 <main+0xba>
 8000de0:	2303      	movs	r3, #3
 8000de2:	71fb      	strb	r3, [r7, #7]
                    changeLCDScreen(estadoTeste);
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fa2e 	bl	8000248 <changeLCDScreen>
                    resetCimaBaixo();
 8000dec:	f7ff fd4a 	bl	8000884 <resetCimaBaixo>
                }
                if (getBaixo())
 8000df0:	f7ff fd3e 	bl	8000870 <getBaixo>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00e      	beq.n	8000e18 <main+0xf0>
                {
                    estadoTeste = estadoTeste == TELA4 ? TELA1 : estadoTeste + 1;
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d003      	beq.n	8000e08 <main+0xe0>
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	3301      	adds	r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	e000      	b.n	8000e0a <main+0xe2>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	71fb      	strb	r3, [r7, #7]
                    changeLCDScreen(estadoTeste);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fa1a 	bl	8000248 <changeLCDScreen>
                    resetCimaBaixo();
 8000e14:	f7ff fd36 	bl	8000884 <resetCimaBaixo>
                }
            }

            if(getBotaoEvento() && !gameRunning()){
 8000e18:	f7ff fd58 	bl	80008cc <getBotaoEvento>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00e      	beq.n	8000e40 <main+0x118>
 8000e22:	f7ff fb25 	bl	8000470 <gameRunning>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d109      	bne.n	8000e40 <main+0x118>
                editPosition = FALSE;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <main+0x138>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
                changeLCDScreen(TELANEXTPIECE);
 8000e32:	2004      	movs	r0, #4
 8000e34:	f7ff fa08 	bl	8000248 <changeLCDScreen>
                initGame();
 8000e38:	f7ff fa46 	bl	80002c8 <initGame>
                resetBotaoEvento();
 8000e3c:	f7ff fd60 	bl	8000900 <resetBotaoEvento>
            }
            lcd_Task();
 8000e40:	f7ff f984 	bl	800014c <lcd_Task>
        }

        if (count1000ms >= 1000)
 8000e44:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <main+0x14c>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e4c:	d38e      	bcc.n	8000d6c <main+0x44>
        {
            count1000ms = 0;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <main+0x14c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	801a      	strh	r2, [r3, #0]
        if (flag1ms)
 8000e54:	e78a      	b.n	8000d6c <main+0x44>
 8000e56:	bf00      	nop
 8000e58:	200003f0 	.word	0x200003f0
 8000e5c:	200003c0 	.word	0x200003c0
 8000e60:	2000043a 	.word	0x2000043a
 8000e64:	20000438 	.word	0x20000438
 8000e68:	40010c00 	.word	0x40010c00
 8000e6c:	20000444 	.word	0x20000444
 8000e70:	20000439 	.word	0x20000439
 8000e74:	2000043c 	.word	0x2000043c

08000e78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	@ 0x50
 8000e7c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e82:	2228      	movs	r2, #40	@ 0x28
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fd14 	bl	80048b4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ebe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ec4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 f8f6 	bl	80030c0 <HAL_RCC_OscConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x66>
    {
        Error_Handler();
 8000eda:	f000 f951 	bl	8001180 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ede:	230f      	movs	r3, #15
 8000ee0:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eee:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fb62 	bl	80035c4 <HAL_RCC_ClockConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0x92>
    {
        Error_Handler();
 8000f06:	f000 f93b 	bl	8001180 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f12:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 fcce 	bl	80038b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0xae>
    {
        Error_Handler();
 8000f22:	f000 f92d 	bl	8001180 <Error_Handler>
    }
}
 8000f26:	bf00      	nop
 8000f28:	3750      	adds	r7, #80	@ 0x50
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <MX_ADC1_Init+0x74>)
 8000f42:	4a19      	ldr	r2, [pc, #100]	@ (8000fa8 <MX_ADC1_Init+0x78>)
 8000f44:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <MX_ADC1_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <MX_ADC1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f52:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <MX_ADC1_Init+0x74>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <MX_ADC1_Init+0x74>)
 8000f5a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000f5e:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f60:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_ADC1_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 1;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_ADC1_Init+0x74>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	611a      	str	r2, [r3, #16]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f6c:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <MX_ADC1_Init+0x74>)
 8000f6e:	f001 f9a1 	bl	80022b4 <HAL_ADC_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC1_Init+0x4c>
    {
        Error_Handler();
 8000f78:	f000 f902 	bl	8001180 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000f84:	2302      	movs	r3, #2
 8000f86:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_ADC1_Init+0x74>)
 8000f8e:	f001 fc29 	bl	80027e4 <HAL_ADC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC1_Init+0x6c>
    {
        Error_Handler();
 8000f98:	f000 f8f2 	bl	8001180 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200003c0 	.word	0x200003c0
 8000fa8:	40012400 	.word	0x40012400

08000fac <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000fca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fce:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 7199;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000fd2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000fd6:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 9;
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000fe0:	2209      	movs	r2, #9
 8000fe2:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff0:	4813      	ldr	r0, [pc, #76]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000ff2:	f002 fdcd 	bl	8003b90 <HAL_TIM_Base_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0x54>
    {
        Error_Handler();
 8000ffc:	f000 f8c0 	bl	8001180 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001004:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	4619      	mov	r1, r3
 800100c:	480c      	ldr	r0, [pc, #48]	@ (8001040 <MX_TIM2_Init+0x94>)
 800100e:	f002 ff51 	bl	8003eb4 <HAL_TIM_ConfigClockSource>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM2_Init+0x70>
    {
        Error_Handler();
 8001018:	f000 f8b2 	bl	8001180 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101c:	2300      	movs	r3, #0
 800101e:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <MX_TIM2_Init+0x94>)
 800102a:	f003 f933 	bl	8004294 <HAL_TIMEx_MasterConfigSynchronization>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0x8c>
    {
        Error_Handler();
 8001034:	f000 f8a4 	bl	8001180 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 8001038:	bf00      	nop
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200003f0 	.word	0x200003f0

08001044 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001058:	4b45      	ldr	r3, [pc, #276]	@ (8001170 <MX_GPIO_Init+0x12c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a44      	ldr	r2, [pc, #272]	@ (8001170 <MX_GPIO_Init+0x12c>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <MX_GPIO_Init+0x12c>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001070:	4b3f      	ldr	r3, [pc, #252]	@ (8001170 <MX_GPIO_Init+0x12c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a3e      	ldr	r2, [pc, #248]	@ (8001170 <MX_GPIO_Init+0x12c>)
 8001076:	f043 0320 	orr.w	r3, r3, #32
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <MX_GPIO_Init+0x12c>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0320 	and.w	r3, r3, #32
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b39      	ldr	r3, [pc, #228]	@ (8001170 <MX_GPIO_Init+0x12c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a38      	ldr	r2, [pc, #224]	@ (8001170 <MX_GPIO_Init+0x12c>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b36      	ldr	r3, [pc, #216]	@ (8001170 <MX_GPIO_Init+0x12c>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	4b33      	ldr	r3, [pc, #204]	@ (8001170 <MX_GPIO_Init+0x12c>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a32      	ldr	r2, [pc, #200]	@ (8001170 <MX_GPIO_Init+0x12c>)
 80010a6:	f043 0308 	orr.w	r3, r3, #8
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <MX_GPIO_Init+0x12c>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin | LCD_E_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80010be:	482d      	ldr	r0, [pc, #180]	@ (8001174 <MX_GPIO_Init+0x130>)
 80010c0:	f001 ffcd 	bl	800305e <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2178      	movs	r1, #120	@ 0x78
 80010c8:	482b      	ldr	r0, [pc, #172]	@ (8001178 <MX_GPIO_Init+0x134>)
 80010ca:	f001 ffc8 	bl	800305e <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, D_Pin | CLK1_Pin | CLK2_Pin | TestePin_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f247 0110 	movw	r1, #28688	@ 0x7010
 80010d4:	4829      	ldr	r0, [pc, #164]	@ (800117c <MX_GPIO_Init+0x138>)
 80010d6:	f001 ffc2 	bl	800305e <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin */
    GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_E_Pin;
 80010da:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80010de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	4820      	ldr	r0, [pc, #128]	@ (8001174 <MX_GPIO_Init+0x130>)
 80010f4:	f001 fe18 	bl	8002d28 <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
    GPIO_InitStruct.Pin = LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 80010f8:	2378      	movs	r3, #120	@ 0x78
 80010fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	481a      	ldr	r0, [pc, #104]	@ (8001178 <MX_GPIO_Init+0x134>)
 8001110:	f001 fe0a 	bl	8002d28 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOTAO_Pin */
    GPIO_InitStruct.Pin = BOTAO_Pin;
 8001114:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001118:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4619      	mov	r1, r3
 8001128:	4814      	ldr	r0, [pc, #80]	@ (800117c <MX_GPIO_Init+0x138>)
 800112a:	f001 fdfd 	bl	8002d28 <HAL_GPIO_Init>

    /*Configure GPIO pins : D_Pin CLK1_Pin CLK2_Pin */
    GPIO_InitStruct.Pin = D_Pin | CLK1_Pin | CLK2_Pin;
 800112e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001132:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2302      	movs	r3, #2
 800113e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	480d      	ldr	r0, [pc, #52]	@ (800117c <MX_GPIO_Init+0x138>)
 8001148:	f001 fdee 	bl	8002d28 <HAL_GPIO_Init>

    /*Configure GPIO pin : TestePin_Pin */
    GPIO_InitStruct.Pin = TestePin_Pin;
 800114c:	2310      	movs	r3, #16
 800114e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TestePin_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	@ (800117c <MX_GPIO_Init+0x138>)
 8001164:	f001 fde0 	bl	8002d28 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	40011000 	.word	0x40011000
 8001178:	40010800 	.word	0x40010800
 800117c:	40010c00 	.word	0x40010c00

08001180 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <Error_Handler+0x8>

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <HAL_MspInit+0x5c>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <HAL_MspInit+0x5c>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6193      	str	r3, [r2, #24]
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_MspInit+0x5c>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_MspInit+0x5c>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <HAL_MspInit+0x5c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <HAL_MspInit+0x5c>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <HAL_MspInit+0x60>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <HAL_MspInit+0x60>)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010000 	.word	0x40010000

080011f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a14      	ldr	r2, [pc, #80]	@ (800125c <HAL_ADC_MspInit+0x6c>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d121      	bne.n	8001254 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <HAL_ADC_MspInit+0x70>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <HAL_ADC_MspInit+0x70>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <HAL_ADC_MspInit+0x70>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <HAL_ADC_MspInit+0x70>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a0c      	ldr	r2, [pc, #48]	@ (8001260 <HAL_ADC_MspInit+0x70>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <HAL_ADC_MspInit+0x70>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001240:	2303      	movs	r3, #3
 8001242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001244:	2303      	movs	r3, #3
 8001246:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <HAL_ADC_MspInit+0x74>)
 8001250:	f001 fd6a 	bl	8002d28 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001254:	bf00      	nop
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40012400 	.word	0x40012400
 8001260:	40021000 	.word	0x40021000
 8001264:	40010800 	.word	0x40010800

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001278:	d113      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127a:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <HAL_TIM_Base_MspInit+0x44>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <HAL_TIM_Base_MspInit+0x44>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <HAL_TIM_Base_MspInit+0x44>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	201c      	movs	r0, #28
 8001298:	f001 fd0f 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800129c:	201c      	movs	r0, #28
 800129e:	f001 fd28 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <NMI_Handler+0x4>

080012b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <MemManage_Handler+0x4>

080012c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 ff98 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <TIM2_IRQHandler+0x10>)
 800130e:	f002 fce1 	bl	8003cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200003f0 	.word	0x200003f0

0800131c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return 1;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <_kill>:

int _kill(int pid, int sig)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001334:	f003 fb0c 	bl	8004950 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	2216      	movs	r2, #22
 800133c:	601a      	str	r2, [r3, #0]
  return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_exit>:

void _exit (int status)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001352:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffe7 	bl	800132a <_kill>
  while (1) {}    /* Make sure we hang here */
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <_exit+0x12>

08001360 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e00a      	b.n	8001388 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001372:	f3af 8000 	nop.w
 8001376:	4601      	mov	r1, r0
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	60ba      	str	r2, [r7, #8]
 800137e:	b2ca      	uxtb	r2, r1
 8001380:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	429a      	cmp	r2, r3
 800138e:	dbf0      	blt.n	8001372 <_read+0x12>
  }

  return len;
 8001390:	687b      	ldr	r3, [r7, #4]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e009      	b.n	80013c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	60ba      	str	r2, [r7, #8]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dbf1      	blt.n	80013ac <_write+0x12>
  }
  return len;
 80013c8:	687b      	ldr	r3, [r7, #4]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <_close>:

int _close(int file)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f8:	605a      	str	r2, [r3, #4]
  return 0;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <_isatty>:

int _isatty(int file)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800141a:	b480      	push	{r7}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
	...

08001434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800143c:	4a14      	ldr	r2, [pc, #80]	@ (8001490 <_sbrk+0x5c>)
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <_sbrk+0x60>)
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001448:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <_sbrk+0x64>)
 8001452:	4a12      	ldr	r2, [pc, #72]	@ (800149c <_sbrk+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001464:	f003 fa74 	bl	8004950 <__errno>
 8001468:	4603      	mov	r3, r0
 800146a:	220c      	movs	r2, #12
 800146c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001472:	e009      	b.n	8001488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147a:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a05      	ldr	r2, [pc, #20]	@ (8001498 <_sbrk+0x64>)
 8001484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20005000 	.word	0x20005000
 8001494:	00000500 	.word	0x00000500
 8001498:	20000440 	.word	0x20000440
 800149c:	20000668 	.word	0x20000668

080014a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <init_game>:
 * Esta função preenche o tabuleiro com zeros, garantindo que todas as
 * posições estejam vazias no início do jogo. Também inicializa a próxima peça
 * a partir de um número aleatório.
 */
void init_game()
{
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
    //printf("Iniciando Tetris...\n");

    for (int i = 0; i < ROWS; i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	e013      	b.n	80014e0 <init_game+0x34>
    {
        for (int j = 0; j < COLS; j++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	e00a      	b.n	80014d4 <init_game+0x28>
        {
            board[i][j] = 0;
 80014be:	4a17      	ldr	r2, [pc, #92]	@ (800151c <init_game+0x70>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	441a      	add	r2, r3
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	4413      	add	r3, r2
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < COLS; j++)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b07      	cmp	r3, #7
 80014d8:	ddf1      	ble.n	80014be <init_game+0x12>
    for (int i = 0; i < ROWS; i++)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3301      	adds	r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	dde8      	ble.n	80014b8 <init_game+0xc>
        }
    }
    next_number = number_aleatory_peace();
 80014e6:	f000 fb7d 	bl	8001be4 <number_aleatory_peace>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001520 <init_game+0x74>)
 80014ee:	6013      	str	r3, [r2, #0]
    next_peace = pecas[next_number];
 80014f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <init_game+0x74>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	490b      	ldr	r1, [pc, #44]	@ (8001524 <init_game+0x78>)
 80014f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001528 <init_game+0x7c>)
 80014f8:	019b      	lsls	r3, r3, #6
 80014fa:	4413      	add	r3, r2
 80014fc:	460c      	mov	r4, r1
 80014fe:	461d      	mov	r5, r3
 8001500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bdb0      	pop	{r4, r5, r7, pc}
 800151c:	20000444 	.word	0x20000444
 8001520:	200004d4 	.word	0x200004d4
 8001524:	200004d8 	.word	0x200004d8
 8001528:	20000064 	.word	0x20000064

0800152c <draw_board>:
 * ativos, espaços vazios e blocos fixos de maneira visual para o jogador.
 * Também exibe a próxima peça a ser enviada.
 */

void draw_board()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
    //printf("Tabuleiro:\n    0 1 2 3 4 5 6 7   Pontuacao: %d \n", pontuacao);
    for (int i = 0; i < ROWS; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	e040      	b.n	80015ba <draw_board+0x8e>
    {
        if (i < 10)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b09      	cmp	r3, #9
 800153c:	dc04      	bgt.n	8001548 <draw_board+0x1c>
        {
            printf("%d - ", i);
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4822      	ldr	r0, [pc, #136]	@ (80015cc <draw_board+0xa0>)
 8001542:	f003 f845 	bl	80045d0 <iprintf>
 8001546:	e003      	b.n	8001550 <draw_board+0x24>
        }
        else
        {
            printf("%d -", i);
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4821      	ldr	r0, [pc, #132]	@ (80015d0 <draw_board+0xa4>)
 800154c:	f003 f840 	bl	80045d0 <iprintf>
        }

        for (int j = 0; j < COLS; j++)
 8001550:	2300      	movs	r3, #0
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	e028      	b.n	80015a8 <draw_board+0x7c>
        {
            if (board[i][j] == 1)
 8001556:	4a1f      	ldr	r2, [pc, #124]	@ (80015d4 <draw_board+0xa8>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	441a      	add	r2, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d103      	bne.n	8001570 <draw_board+0x44>
            {
                printf("█ "); // Bloco preenchido
 8001568:	481b      	ldr	r0, [pc, #108]	@ (80015d8 <draw_board+0xac>)
 800156a:	f003 f831 	bl	80045d0 <iprintf>
 800156e:	e018      	b.n	80015a2 <draw_board+0x76>
            }
            else if (board[i][j] == 0)
 8001570:	4a18      	ldr	r2, [pc, #96]	@ (80015d4 <draw_board+0xa8>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	441a      	add	r2, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4413      	add	r3, r2
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d103      	bne.n	800158a <draw_board+0x5e>
            {
                printf(". "); // Espaço vazio
 8001582:	4816      	ldr	r0, [pc, #88]	@ (80015dc <draw_board+0xb0>)
 8001584:	f003 f824 	bl	80045d0 <iprintf>
 8001588:	e00b      	b.n	80015a2 <draw_board+0x76>
            }
            else if (board[i][j] == 2)
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <draw_board+0xa8>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	441a      	add	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	4413      	add	r3, r2
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d102      	bne.n	80015a2 <draw_board+0x76>
            {
                printf("[]"); // Espaço Ja preenchido e fixo
 800159c:	4810      	ldr	r0, [pc, #64]	@ (80015e0 <draw_board+0xb4>)
 800159e:	f003 f817 	bl	80045d0 <iprintf>
        for (int j = 0; j < COLS; j++)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2b07      	cmp	r3, #7
 80015ac:	ddd3      	ble.n	8001556 <draw_board+0x2a>
            }
        }
        printf("\n");
 80015ae:	200a      	movs	r0, #10
 80015b0:	f003 f820 	bl	80045f4 <putchar>
    for (int i = 0; i < ROWS; i++)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3301      	adds	r3, #1
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	ddbb      	ble.n	8001538 <draw_board+0xc>
    }
    show_next_peace();
 80015c0:	f000 fd5c 	bl	800207c <show_next_peace>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	08005958 	.word	0x08005958
 80015d0:	08005960 	.word	0x08005960
 80015d4:	20000444 	.word	0x20000444
 80015d8:	08005968 	.word	0x08005968
 80015dc:	08005970 	.word	0x08005970
 80015e0:	08005974 	.word	0x08005974

080015e4 <place_piece>:
 * @param coluna  Posição inicial da peça no eixo horizontal.
 * @param peca    Estrutura contendo o formato da peça.
 */

void place_piece(int linha, int coluna, PecaTetris peca)
{
 80015e4:	b082      	sub	sp, #8
 80015e6:	b480      	push	{r7}
 80015e8:	b087      	sub	sp, #28
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
 80015f0:	f107 0120 	add.w	r1, r7, #32
 80015f4:	e881 000c 	stmia.w	r1, {r2, r3}

    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e031      	b.n	8001662 <place_piece+0x7e>
    {
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	e028      	b.n	8001656 <place_piece+0x72>
        {
            if (peca.shape[i][j] == 1)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	009a      	lsls	r2, r3, #2
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4413      	add	r3, r2
 800160c:	f107 0220 	add.w	r2, r7, #32
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d11b      	bne.n	8001650 <place_piece+0x6c>
            {
                int board_linha = linha + i;
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	4413      	add	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4413      	add	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha >= 0 && board_linha < ROWS && board_coluna >= 0 && board_coluna < COLS)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db10      	blt.n	8001650 <place_piece+0x6c>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	dc0d      	bgt.n	8001650 <place_piece+0x6c>
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db0a      	blt.n	8001650 <place_piece+0x6c>
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b07      	cmp	r3, #7
 800163e:	dc07      	bgt.n	8001650 <place_piece+0x6c>
                {
                    board[board_linha][board_coluna] = 1;
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <place_piece+0x94>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	441a      	add	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4413      	add	r3, r2
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	3301      	adds	r3, #1
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b03      	cmp	r3, #3
 800165a:	ddd3      	ble.n	8001604 <place_piece+0x20>
    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3301      	adds	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b03      	cmp	r3, #3
 8001666:	ddca      	ble.n	80015fe <place_piece+0x1a>
                }
            }
        }
    }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	b002      	add	sp, #8
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000444 	.word	0x20000444

0800167c <remove_piece>:
 * @param coluna  Posição inicial da peça no eixo horizontal.
 * @param peca    Estrutura contendo o formato da peça.
 */

void remove_piece(int linha, int coluna, PecaTetris peca)
{
 800167c:	b082      	sub	sp, #8
 800167e:	b480      	push	{r7}
 8001680:	b087      	sub	sp, #28
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
 8001688:	f107 0120 	add.w	r1, r7, #32
 800168c:	e881 000c 	stmia.w	r1, {r2, r3}
    for (int i = 0; i < 4; i++)
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e031      	b.n	80016fa <remove_piece+0x7e>
    {
        for (int j = 0; j < 4; j++)
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	e028      	b.n	80016ee <remove_piece+0x72>
        {
            if (peca.shape[i][j] == 1)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	009a      	lsls	r2, r3, #2
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4413      	add	r3, r2
 80016a4:	f107 0220 	add.w	r2, r7, #32
 80016a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d11b      	bne.n	80016e8 <remove_piece+0x6c>
            {
                int board_linha = linha + i;
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	4413      	add	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4413      	add	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha >= 0 && board_linha < ROWS && board_coluna >= 0 && board_coluna < COLS)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db10      	blt.n	80016e8 <remove_piece+0x6c>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	dc0d      	bgt.n	80016e8 <remove_piece+0x6c>
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db0a      	blt.n	80016e8 <remove_piece+0x6c>
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b07      	cmp	r3, #7
 80016d6:	dc07      	bgt.n	80016e8 <remove_piece+0x6c>
                {
                    board[board_linha][board_coluna] = 0;
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <remove_piece+0x94>)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	441a      	add	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4413      	add	r3, r2
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	3301      	adds	r3, #1
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	ddd3      	ble.n	800169c <remove_piece+0x20>
    for (int i = 0; i < 4; i++)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	ddca      	ble.n	8001696 <remove_piece+0x1a>
                }
            }
        }
    }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	b002      	add	sp, #8
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000444 	.word	0x20000444

08001714 <can_move>:
 * @param peca    Estrutura contendo o formato da peça.
 * @return        1 se o movimento for válido, 0 caso contrário.
 */

int can_move(int linha, int coluna, PecaTetris peca)
{
 8001714:	b082      	sub	sp, #8
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
 8001720:	f107 0120 	add.w	r1, r7, #32
 8001724:	e881 000c 	stmia.w	r1, {r2, r3}

    for (int i = 0; i < 4; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e03c      	b.n	80017a8 <can_move+0x94>
    {
        for (int j = 0; j < 4; j++)
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	e033      	b.n	800179c <can_move+0x88>
        {
            if (peca.shape[i][j] == 1)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	009a      	lsls	r2, r3, #2
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4413      	add	r3, r2
 800173c:	f107 0220 	add.w	r2, r7, #32
 8001740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d126      	bne.n	8001796 <can_move+0x82>
            {
                int board_linha = linha + i;
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	4413      	add	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4413      	add	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha < 0 || board_linha >= ROWS || board_coluna < 0 || board_coluna >= COLS)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db08      	blt.n	8001770 <can_move+0x5c>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	dc05      	bgt.n	8001770 <can_move+0x5c>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db02      	blt.n	8001770 <can_move+0x5c>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b07      	cmp	r3, #7
 800176e:	dd04      	ble.n	800177a <can_move+0x66>
                {
#ifdef DEBUG
                    printf("\nMovimento Invalido\n");
 8001770:	4813      	ldr	r0, [pc, #76]	@ (80017c0 <can_move+0xac>)
 8001772:	f002 ff9d 	bl	80046b0 <puts>
#endif
                    return 0; // Movimento inválido
 8001776:	2300      	movs	r3, #0
 8001778:	e01a      	b.n	80017b0 <can_move+0x9c>
                }

                // Verifica se a posição está ocupada
                if (board[board_linha][board_coluna] == 2)
 800177a:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <can_move+0xb0>)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	441a      	add	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	4413      	add	r3, r2
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d104      	bne.n	8001796 <can_move+0x82>
                {
#ifdef DEBUG
                    printf("\nMovimento Invalido\n");
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <can_move+0xac>)
 800178e:	f002 ff8f 	bl	80046b0 <puts>
#endif
                    return 0; // Movimento inválido
 8001792:	2300      	movs	r3, #0
 8001794:	e00c      	b.n	80017b0 <can_move+0x9c>
        for (int j = 0; j < 4; j++)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	3301      	adds	r3, #1
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	ddc8      	ble.n	8001734 <can_move+0x20>
    for (int i = 0; i < 4; i++)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	ddbf      	ble.n	800172e <can_move+0x1a>
                }
            }
        }
    }

    return 1; // Movimento válido
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017ba:	b002      	add	sp, #8
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	08005978 	.word	0x08005978
 80017c4:	20000444 	.word	0x20000444

080017c8 <move_piece_right>:
 * @param coluna  Ponteiro para a posição horizontal da peça.
 * @param peca    Estrutura contendo o formato da peça.
 */

void move_piece_right(int *linha, int *coluna, PecaTetris peca)
{
 80017c8:	b082      	sub	sp, #8
 80017ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017cc:	b095      	sub	sp, #84	@ 0x54
 80017ce:	af0e      	add	r7, sp, #56	@ 0x38
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80017d8:	e881 000c 	stmia.w	r1, {r2, r3}
    int new_linha = *linha + 0;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	617b      	str	r3, [r7, #20]
    int new_coluna = *coluna + 1;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	613b      	str	r3, [r7, #16]

    if (can_move(new_linha, new_coluna, peca))
 80017ea:	466d      	mov	r5, sp
 80017ec:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80017f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001800:	e885 0003 	stmia.w	r5, {r0, r1}
 8001804:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001808:	cb0c      	ldmia	r3, {r2, r3}
 800180a:	6939      	ldr	r1, [r7, #16]
 800180c:	6978      	ldr	r0, [r7, #20]
 800180e:	f7ff ff81 	bl	8001714 <can_move>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d037      	beq.n	8001888 <move_piece_right+0xc0>
    {
        // Apaga a peça da posição atual
        remove_piece(*linha, *coluna, peca);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681e      	ldr	r6, [r3, #0]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	466d      	mov	r5, sp
 8001824:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001834:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001838:	e885 0003 	stmia.w	r5, {r0, r1}
 800183c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001840:	ca0c      	ldmia	r2, {r2, r3}
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4630      	mov	r0, r6
 8001846:	f7ff ff19 	bl	800167c <remove_piece>

        // Atualiza posição
        *linha = new_linha;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	601a      	str	r2, [r3, #0]
        *coluna = new_coluna;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	601a      	str	r2, [r3, #0]

        // Coloca a peça na nova posição
        place_piece(*linha, *coluna, peca);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681e      	ldr	r6, [r3, #0]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	466d      	mov	r5, sp
 8001862:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001872:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001876:	e885 0003 	stmia.w	r5, {r0, r1}
 800187a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800187e:	ca0c      	ldmia	r2, {r2, r3}
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4630      	mov	r0, r6
 8001884:	f7ff feae 	bl	80015e4 <place_piece>
    }
}
 8001888:	bf00      	nop
 800188a:	371c      	adds	r7, #28
 800188c:	46bd      	mov	sp, r7
 800188e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001892:	b002      	add	sp, #8
 8001894:	4770      	bx	lr

08001896 <move_piece_left>:
 * @param coluna  Ponteiro para a posição horizontal da peça.
 * @param peca    Estrutura contendo o formato da peça.
 */

void move_piece_left(int *linha, int *coluna, PecaTetris peca)
{
 8001896:	b082      	sub	sp, #8
 8001898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189a:	b095      	sub	sp, #84	@ 0x54
 800189c:	af0e      	add	r7, sp, #56	@ 0x38
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80018a6:	e881 000c 	stmia.w	r1, {r2, r3}
    int new_linha = *linha + 0;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	617b      	str	r3, [r7, #20]
    int new_coluna = *coluna - 1;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	613b      	str	r3, [r7, #16]

    if (can_move(new_linha, new_coluna, peca))
 80018b8:	466d      	mov	r5, sp
 80018ba:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80018be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80018d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018d6:	cb0c      	ldmia	r3, {r2, r3}
 80018d8:	6939      	ldr	r1, [r7, #16]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff1a 	bl	8001714 <can_move>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d037      	beq.n	8001956 <move_piece_left+0xc0>
    {
        // Apaga a peça da posição atual
        remove_piece(*linha, *coluna, peca);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681e      	ldr	r6, [r3, #0]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	466d      	mov	r5, sp
 80018f2:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80018f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001902:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001906:	e885 0003 	stmia.w	r5, {r0, r1}
 800190a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800190e:	ca0c      	ldmia	r2, {r2, r3}
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4630      	mov	r0, r6
 8001914:	f7ff feb2 	bl	800167c <remove_piece>

        // Atualiza posição
        *linha = new_linha;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	601a      	str	r2, [r3, #0]
        *coluna = new_coluna;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	601a      	str	r2, [r3, #0]

        // Coloca a peça na nova posição
        place_piece(*linha, *coluna, peca);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681e      	ldr	r6, [r3, #0]
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	466d      	mov	r5, sp
 8001930:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001940:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001944:	e885 0003 	stmia.w	r5, {r0, r1}
 8001948:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800194c:	ca0c      	ldmia	r2, {r2, r3}
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4630      	mov	r0, r6
 8001952:	f7ff fe47 	bl	80015e4 <place_piece>
    }
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001960:	b002      	add	sp, #8
 8001962:	4770      	bx	lr

08001964 <rotate_piece_right>:
 * @param coluna  Posição horizontal da peça no tabuleiro.
 * @param peca    Ponteiro para a estrutura da peça a ser rotacionada.
 */

void rotate_piece_right(int linha, int coluna, PecaTetris *peca)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b096      	sub	sp, #88	@ 0x58
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
    int nova_peca[4][4];

    for (int i = 0; i < 4; i++)
 8001970:	2300      	movs	r3, #0
 8001972:	657b      	str	r3, [r7, #84]	@ 0x54
 8001974:	e01d      	b.n	80019b2 <rotate_piece_right+0x4e>
    {
        for (int j = 0; j < 4; j++)
 8001976:	2300      	movs	r3, #0
 8001978:	653b      	str	r3, [r7, #80]	@ 0x50
 800197a:	e014      	b.n	80019a6 <rotate_piece_right+0x42>
        {
            nova_peca[j][3 - i] = peca->shape[i][j];
 800197c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800197e:	f1c3 0303 	rsb	r3, r3, #3
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001986:	0088      	lsls	r0, r1, #2
 8001988:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800198a:	4401      	add	r1, r0
 800198c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001990:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001992:	0089      	lsls	r1, r1, #2
 8001994:	440b      	add	r3, r1
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	3358      	adds	r3, #88	@ 0x58
 800199a:	443b      	add	r3, r7
 800199c:	f843 2c48 	str.w	r2, [r3, #-72]
        for (int j = 0; j < 4; j++)
 80019a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019a2:	3301      	adds	r3, #1
 80019a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80019a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	dde7      	ble.n	800197c <rotate_piece_right+0x18>
    for (int i = 0; i < 4; i++)
 80019ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ae:	3301      	adds	r3, #1
 80019b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80019b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	ddde      	ble.n	8001976 <rotate_piece_right+0x12>
        }
    }
    rotate_piece(linha, coluna, nova_peca, peca);
 80019b8:	f107 0210 	add.w	r2, r7, #16
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 f804 	bl	80019ce <rotate_piece>
}
 80019c6:	bf00      	nop
 80019c8:	3758      	adds	r7, #88	@ 0x58
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <rotate_piece>:
 * @param new_matriz Matriz 4x4 representando a peça rotacionada.
 * @param peca       Ponteiro para a estrutura da peça a ser rotacionada.
 */

void rotate_piece(int linha, int coluna, int new_matriz[4][4], PecaTetris *peca)
{
 80019ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d0:	b0a7      	sub	sp, #156	@ 0x9c
 80019d2:	af0e      	add	r7, sp, #56	@ 0x38
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	603b      	str	r3, [r7, #0]

    PecaTetris pecaAux;
    // Cria uma cópia temporária para verificação
    for (int i = 0; i < 4; i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80019e0:	e01b      	b.n	8001a1a <rotate_piece+0x4c>
    {
        for (int j = 0; j < 4; j++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80019e6:	e012      	b.n	8001a0e <rotate_piece+0x40>
        {
            pecaAux.shape[i][j] = new_matriz[i][j];
 80019e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80019f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019f8:	0099      	lsls	r1, r3, #2
 80019fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019fc:	440b      	add	r3, r1
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	3360      	adds	r3, #96	@ 0x60
 8001a02:	443b      	add	r3, r7
 8001a04:	f843 2c50 	str.w	r2, [r3, #-80]
        for (int j = 0; j < 4; j++)
 8001a08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	dde9      	ble.n	80019e8 <rotate_piece+0x1a>
    for (int i = 0; i < 4; i++)
 8001a14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a16:	3301      	adds	r3, #1
 8001a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	dde0      	ble.n	80019e2 <rotate_piece+0x14>
        }
    }

    if (can_move(linha, coluna, pecaAux))
 8001a20:	466d      	mov	r5, sp
 8001a22:	f107 0418 	add.w	r4, r7, #24
 8001a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a36:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a3a:	f107 0310 	add.w	r3, r7, #16
 8001a3e:	cb0c      	ldmia	r3, {r2, r3}
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f7ff fe66 	bl	8001714 <can_move>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d047      	beq.n	8001ade <rotate_piece+0x110>
    {
        // Apaga a peça da posição atual
        remove_piece(linha, coluna, *peca);
 8001a4e:	683e      	ldr	r6, [r7, #0]
 8001a50:	466d      	mov	r5, sp
 8001a52:	f106 0408 	add.w	r4, r6, #8
 8001a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a66:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a6a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fe03 	bl	800167c <remove_piece>

        // Copia a matriz rotacionada para a peça original
        for (int i = 0; i < 4; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a7a:	e019      	b.n	8001ab0 <rotate_piece+0xe2>
        {
            for (int j = 0; j < 4; j++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a80:	e010      	b.n	8001aa4 <rotate_piece+0xd6>
            {
                peca->shape[i][j] = new_matriz[i][j];
 8001a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a94:	0090      	lsls	r0, r2, #2
 8001a96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001a98:	4402      	add	r2, r0
 8001a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = 0; j < 4; j++)
 8001a9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8001aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	ddeb      	ble.n	8001a82 <rotate_piece+0xb4>
        for (int i = 0; i < 4; i++)
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aac:	3301      	adds	r3, #1
 8001aae:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	dde2      	ble.n	8001a7c <rotate_piece+0xae>
            }
        }

        // Coloca a peça na nova posição
        place_piece(linha, coluna, *peca);
 8001ab6:	683e      	ldr	r6, [r7, #0]
 8001ab8:	466d      	mov	r5, sp
 8001aba:	f106 0408 	add.w	r4, r6, #8
 8001abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ad2:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff fd83 	bl	80015e4 <place_piece>
    }
}
 8001ade:	bf00      	nop
 8001ae0:	3764      	adds	r7, #100	@ 0x64
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ae6 <move_piece_down>:
 * @param peca        Ponteiro para a estrutura da peça que está em jogo.
 * @param peca_atual  Ponteiro para o índice da peça atual.
 * @return            Retorna 0 se a peça continuar descendo e 1 se ela foi fixada.
 */
int move_piece_down(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 8001ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae8:	b097      	sub	sp, #92	@ 0x5c
 8001aea:	af0e      	add	r7, sp, #56	@ 0x38
 8001aec:	6178      	str	r0, [r7, #20]
 8001aee:	6139      	str	r1, [r7, #16]
 8001af0:	60fa      	str	r2, [r7, #12]
 8001af2:	60bb      	str	r3, [r7, #8]
    int nova_linha = *linha + 1;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	61fb      	str	r3, [r7, #28]

    // Verifica se a peça pode se mover para baixo (se a linha não está fora do tabuleiro e não há outra peça no caminho)
    if (can_move(nova_linha, *coluna, *peca)) // A função can_move agora verifica se a nova posição é válida
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	68fe      	ldr	r6, [r7, #12]
 8001b04:	466d      	mov	r5, sp
 8001b06:	f106 0408 	add.w	r4, r6, #8
 8001b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b1e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	69f8      	ldr	r0, [r7, #28]
 8001b26:	f7ff fdf5 	bl	8001714 <can_move>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d038      	beq.n	8001ba2 <move_piece_down+0xbc>
    {
        // Apaga a peça da posição atual
        remove_piece(*linha, *coluna, *peca);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	603a      	str	r2, [r7, #0]
 8001b3c:	68fe      	ldr	r6, [r7, #12]
 8001b3e:	466d      	mov	r5, sp
 8001b40:	f106 0408 	add.w	r4, r6, #8
 8001b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b54:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b58:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fd8c 	bl	800167c <remove_piece>

        // Atualiza a posição da peça
        *linha = nova_linha;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	601a      	str	r2, [r3, #0]

        // Coloca a peça na nova posição
        place_piece(*linha, *coluna, *peca);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	603a      	str	r2, [r7, #0]
 8001b76:	68fe      	ldr	r6, [r7, #12]
 8001b78:	466d      	mov	r5, sp
 8001b7a:	f106 0408 	add.w	r4, r6, #8
 8001b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b92:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001b96:	6839      	ldr	r1, [r7, #0]
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fd23 	bl	80015e4 <place_piece>
        return 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e01c      	b.n	8001bdc <move_piece_down+0xf6>
    }
    else
    {
        fix_piece(linha, coluna, *peca);
 8001ba2:	68fe      	ldr	r6, [r7, #12]
 8001ba4:	466d      	mov	r5, sp
 8001ba6:	f106 0408 	add.w	r4, r6, #8
 8001baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bba:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bbe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001bc2:	6939      	ldr	r1, [r7, #16]
 8001bc4:	6978      	ldr	r0, [r7, #20]
 8001bc6:	f000 f8b9 	bl	8001d3c <fix_piece>
        remove_full_lines();
 8001bca:	f000 f8f5 	bl	8001db8 <remove_full_lines>
        generate_next_piece(linha, coluna, peca, peca_atual);
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	6939      	ldr	r1, [r7, #16]
 8001bd4:	6978      	ldr	r0, [r7, #20]
 8001bd6:	f000 f863 	bl	8001ca0 <generate_next_piece>
        return 1;
 8001bda:	2301      	movs	r3, #1
    }
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3724      	adds	r7, #36	@ 0x24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001be4 <number_aleatory_peace>:
 *
 * @return       Um número entre 0 e 6, representando o tipo da peça aleatória.
 */

int number_aleatory_peace()
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
    return rand() % 7; // Gera um número entre 0 e 6
 8001be8:	f002 fbf2 	bl	80043d0 <rand>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <number_aleatory_peace+0x28>)
 8001bf0:	fb83 1302 	smull	r1, r3, r3, r2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	1099      	asrs	r1, r3, #2
 8001bf8:	17d3      	asrs	r3, r2, #31
 8001bfa:	1ac9      	subs	r1, r1, r3
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	1a5b      	subs	r3, r3, r1
 8001c02:	1ad1      	subs	r1, r2, r3
 8001c04:	460b      	mov	r3, r1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	92492493 	.word	0x92492493

08001c10 <check_piece_at_bottom>:
 *
 * @return 1 se a peça atingiu o fundo ou colidiu com outra peça; 0 caso contrário.
 */

int check_piece_at_bottom(int *linha, int *coluna, PecaTetris peca)
{
 8001c10:	b082      	sub	sp, #8
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
 8001c1c:	f107 0118 	add.w	r1, r7, #24
 8001c20:	e881 000c 	stmia.w	r1, {r2, r3}

    // Verifique se há outra peça abaixo dela (posição da peça no tabuleiro)
    for (int i = 0; i < 4; i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e02d      	b.n	8001c86 <check_piece_at_bottom+0x76>
    {
        for (int j = 0; j < 4; j++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	e024      	b.n	8001c7a <check_piece_at_bottom+0x6a>
        {
            if (peca.shape[i][j] == 1)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	009a      	lsls	r2, r3, #2
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4413      	add	r3, r2
 8001c38:	f107 0218 	add.w	r2, r7, #24
 8001c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d117      	bne.n	8001c74 <check_piece_at_bottom+0x64>
            {
                if (board[*linha + i + 1][*coluna + j] == 2 || (*linha + i) >= 15) // Se houver uma peça fixa abaixo
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6819      	ldr	r1, [r3, #0]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	440b      	add	r3, r1
 8001c56:	4911      	ldr	r1, [pc, #68]	@ (8001c9c <check_piece_at_bottom+0x8c>)
 8001c58:	00d2      	lsls	r2, r2, #3
 8001c5a:	440a      	add	r2, r1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d005      	beq.n	8001c70 <check_piece_at_bottom+0x60>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	2b0e      	cmp	r3, #14
 8001c6e:	dd01      	ble.n	8001c74 <check_piece_at_bottom+0x64>
                {
                    return 1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e00c      	b.n	8001c8e <check_piece_at_bottom+0x7e>
        for (int j = 0; j < 4; j++)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	3301      	adds	r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	ddd7      	ble.n	8001c30 <check_piece_at_bottom+0x20>
    for (int i = 0; i < 4; i++)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3301      	adds	r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	ddce      	ble.n	8001c2a <check_piece_at_bottom+0x1a>
                }
            }
        }
    }

    return 0; // A peça não atingiu o fundo
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	b002      	add	sp, #8
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000444 	.word	0x20000444

08001ca0 <generate_next_piece>:
 * @param peca        Ponteiro para a estrutura da peça que será colocada no tabuleiro.
 * @param peca_atual  Ponteiro para armazenar o índice da peça atual.
 */

void generate_next_piece(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 8001ca0:	b5b0      	push	{r4, r5, r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
    *peca_atual = next_number;
 8001cae:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <generate_next_piece+0x7c>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	601a      	str	r2, [r3, #0]
    *peca = pecas[*peca_atual];
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4a18      	ldr	r2, [pc, #96]	@ (8001d20 <generate_next_piece+0x80>)
 8001cbe:	019b      	lsls	r3, r3, #6
 8001cc0:	4413      	add	r3, r2
 8001cc2:	460c      	mov	r4, r1
 8001cc4:	461d      	mov	r5, r3
 8001cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    next_number = number_aleatory_peace();
 8001cda:	f7ff ff83 	bl	8001be4 <number_aleatory_peace>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8001d1c <generate_next_piece+0x7c>)
 8001ce2:	6013      	str	r3, [r2, #0]
    next_peace = pecas[next_number];
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <generate_next_piece+0x7c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	490e      	ldr	r1, [pc, #56]	@ (8001d24 <generate_next_piece+0x84>)
 8001cea:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <generate_next_piece+0x80>)
 8001cec:	019b      	lsls	r3, r3, #6
 8001cee:	4413      	add	r3, r2
 8001cf0:	460c      	mov	r4, r1
 8001cf2:	461d      	mov	r5, r3
 8001cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Define a posição inicial da nova peça
    *linha = 0;  // Começa do topo
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
    *coluna = 3; // Começa no meio do tabuleiro
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2203      	movs	r2, #3
 8001d12:	601a      	str	r2, [r3, #0]
}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1c:	200004d4 	.word	0x200004d4
 8001d20:	20000064 	.word	0x20000064
 8001d24:	200004d8 	.word	0x200004d8

08001d28 <get_next_piece>:
 * @brief       Get a Proxima Peca a ser gerada.
 * 
 * Esta função exibe a próxima peça que será gerada no jogo Tetris.
 */

 int get_next_piece(){
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
    return next_number; // Retorna a próxima peça a ser gerada
 8001d2c:	4b02      	ldr	r3, [pc, #8]	@ (8001d38 <get_next_piece+0x10>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 }
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	200004d4 	.word	0x200004d4

08001d3c <fix_piece>:
 * @param coluna A coluna onde a peça está atualmente posicionada no tabuleiro.
 * @param peca   A peça que deve ser fixada no tabuleiro.
 */

void fix_piece(int *linha, int *coluna, PecaTetris peca)
{
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
 8001d48:	f107 0118 	add.w	r1, r7, #24
 8001d4c:	e881 000c 	stmia.w	r1, {r2, r3}
    // Adiciona a peça no tabuleiro, tornando-a fixa
    for (int i = 0; i < 4; i++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	e023      	b.n	8001d9e <fix_piece+0x62>
    {
        for (int j = 0; j < 4; j++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	e01a      	b.n	8001d92 <fix_piece+0x56>
        {
            if (peca.shape[i][j] == 1)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	009a      	lsls	r2, r3, #2
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4413      	add	r3, r2
 8001d64:	f107 0218 	add.w	r2, r7, #24
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10d      	bne.n	8001d8c <fix_piece+0x50>
            {
                board[*linha + i][*coluna + j] = 2; // Marca a posição com 2, indicando que está fixa
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	441a      	add	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6819      	ldr	r1, [r3, #0]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	440b      	add	r3, r1
 8001d80:	490c      	ldr	r1, [pc, #48]	@ (8001db4 <fix_piece+0x78>)
 8001d82:	00d2      	lsls	r2, r2, #3
 8001d84:	440a      	add	r2, r1
 8001d86:	4413      	add	r3, r2
 8001d88:	2202      	movs	r2, #2
 8001d8a:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	dde1      	ble.n	8001d5c <fix_piece+0x20>
    for (int i = 0; i < 4; i++)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	ddd8      	ble.n	8001d56 <fix_piece+0x1a>
            }
        }
    }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	b002      	add	sp, #8
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000444 	.word	0x20000444

08001db8 <remove_full_lines>:
 * acima dela são deslocadas para baixo. A primeira linha do tabuleiro é então limpa.
 * Caso uma ou mais linhas sejam removidas, a pontuação e o nível do jogador são atualizados.
 */

void remove_full_lines()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0

    int linhas_removidas = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]

    for (int i = ROWS - 1; i >= 0; i--) // Começa da última linha e vai subindo
 8001dc2:	230f      	movs	r3, #15
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	e052      	b.n	8001e6e <remove_full_lines+0xb6>
    {
        int complete = 1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]

        // Verifica se a linha está completa
        for (int j = 0; j < COLS; j++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e00e      	b.n	8001df0 <remove_full_lines+0x38>
        {
            if (board[i][j] != 2) // Se qualquer célula não for preenchida
 8001dd2:	4a31      	ldr	r2, [pc, #196]	@ (8001e98 <remove_full_lines+0xe0>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	441a      	add	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4413      	add	r3, r2
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d002      	beq.n	8001dea <remove_full_lines+0x32>
            {
                complete = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
                break; // Se a linha não estiver completa, sai do loop
 8001de8:	e005      	b.n	8001df6 <remove_full_lines+0x3e>
        for (int j = 0; j < COLS; j++)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	3301      	adds	r3, #1
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b07      	cmp	r3, #7
 8001df4:	dded      	ble.n	8001dd2 <remove_full_lines+0x1a>
            }
        }

        // Se a linha estiver completa, removemos a linha e deslocamos as linhas acima
        if (complete)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d035      	beq.n	8001e68 <remove_full_lines+0xb0>
        {

            linhas_removidas++;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]

            // Desloca todas as linhas acima uma posição para baixo
            for (int k = i; k > 0; k--)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	e01b      	b.n	8001e40 <remove_full_lines+0x88>
            {
                for (int j = 0; j < COLS; j++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	e012      	b.n	8001e34 <remove_full_lines+0x7c>
                {
                    board[k][j] = board[k - 1][j];
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	4a21      	ldr	r2, [pc, #132]	@ (8001e98 <remove_full_lines+0xe0>)
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	441a      	add	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	7819      	ldrb	r1, [r3, #0]
 8001e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e98 <remove_full_lines+0xe0>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	441a      	add	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4413      	add	r3, r2
 8001e2a:	460a      	mov	r2, r1
 8001e2c:	701a      	strb	r2, [r3, #0]
                for (int j = 0; j < COLS; j++)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3301      	adds	r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b07      	cmp	r3, #7
 8001e38:	dde9      	ble.n	8001e0e <remove_full_lines+0x56>
            for (int k = i; k > 0; k--)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	dce0      	bgt.n	8001e08 <remove_full_lines+0x50>
                }
            }

            // Limpa a primeira linha (agora vazia)
            for (int j = 0; j < COLS; j++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	e007      	b.n	8001e5c <remove_full_lines+0xa4>
            {
                board[0][j] = 0;
 8001e4c:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <remove_full_lines+0xe0>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < COLS; j++)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b07      	cmp	r3, #7
 8001e60:	ddf4      	ble.n	8001e4c <remove_full_lines+0x94>
            }

            // Como movemos as linhas para baixo, não precisamos verificar a linha removida novamente
            i++; // Reanalisa a linha atual, pois ela pode ter se tornado completa após o deslocamento
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
    for (int i = ROWS - 1; i >= 0; i--) // Começa da última linha e vai subindo
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	daa9      	bge.n	8001dc8 <remove_full_lines+0x10>
        }
    }
    if (linhas_removidas > 0)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	dd0a      	ble.n	8001e90 <remove_full_lines+0xd8>
    {
        atualizar_pontuacao(linhas_removidas);
 8001e7a:	69f8      	ldr	r0, [r7, #28]
 8001e7c:	f000 f898 	bl	8001fb0 <atualizar_pontuacao>

#ifdef DEBUG
        printf("Pontuação: %d   Nível: %d\n", pontuacao, nivel);
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <remove_full_lines+0xe4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <remove_full_lines+0xe8>)
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4806      	ldr	r0, [pc, #24]	@ (8001ea4 <remove_full_lines+0xec>)
 8001e8c:	f002 fba0 	bl	80045d0 <iprintf>
#endif
    }
}
 8001e90:	bf00      	nop
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000444 	.word	0x20000444
 8001e9c:	200004c8 	.word	0x200004c8
 8001ea0:	200004cc 	.word	0x200004cc
 8001ea4:	0800598c 	.word	0x0800598c

08001ea8 <update_game>:
 * @param coluna     Ponteiro para a posição horizontal da peça no tabuleiro.
 * @param peca       Ponteiro para a estrutura da peça atual.
 * @param peca_atual Ponteiro para o índice da peça atual.
 */
void update_game(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 8001ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eaa:	b093      	sub	sp, #76	@ 0x4c
 8001eac:	af0e      	add	r7, sp, #56	@ 0x38
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]

    incrementTime();
 8001eb6:	f000 f851 	bl	8001f5c <incrementTime>

    // Se o tempo acumulado atingir o limiar, move a peça para baixo
    if (timer_counter >= TEMPO_BASE / multiplicador_tempo)
 8001eba:	4b26      	ldr	r3, [pc, #152]	@ (8001f54 <update_game+0xac>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001ec2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <update_game+0xb0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d83c      	bhi.n	8001f4a <update_game+0xa2>
    {

        if (check_piece_at_bottom(linha, coluna, *peca) == 1)
 8001ed0:	687e      	ldr	r6, [r7, #4]
 8001ed2:	466d      	mov	r5, sp
 8001ed4:	f106 0408 	add.w	r4, r6, #8
 8001ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eec:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff fe8c 	bl	8001c10 <check_piece_at_bottom>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d11c      	bne.n	8001f38 <update_game+0x90>
        {
            fix_piece(linha, coluna, *peca);
 8001efe:	687e      	ldr	r6, [r7, #4]
 8001f00:	466d      	mov	r5, sp
 8001f02:	f106 0408 	add.w	r4, r6, #8
 8001f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f1a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f7ff ff0b 	bl	8001d3c <fix_piece>
            remove_full_lines();
 8001f26:	f7ff ff47 	bl	8001db8 <remove_full_lines>
            generate_next_piece(linha, coluna, peca, peca_atual);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	68b9      	ldr	r1, [r7, #8]
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7ff feb5 	bl	8001ca0 <generate_next_piece>
 8001f36:	e005      	b.n	8001f44 <update_game+0x9c>
        }
        else
        {
            move_piece_down(linha, coluna, peca, peca_atual);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f7ff fdd1 	bl	8001ae6 <move_piece_down>
        }

        timer_counter = 0; // Reinicia o contador
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <update_game+0xb0>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
    }

    //draw_board();
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000224 	.word	0x20000224
 8001f58:	200004c4 	.word	0x200004c4

08001f5c <incrementTime>:
 *
 * Esta função é chamada a cada milissegundo para atualizar o contador
 * responsável por controlar a gravidade do jogo.
 */
void incrementTime()
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
    // Chamada de 1 ms aqui
    timer_counter++;
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <incrementTime+0x18>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	4a03      	ldr	r2, [pc, #12]	@ (8001f74 <incrementTime+0x18>)
 8001f68:	6013      	str	r3, [r2, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	200004c4 	.word	0x200004c4

08001f78 <game_over>:
 * e o jogo deve terminar.
 *
 * @return      Retorna 1 se o jogo acabou (fim de jogo), ou 0 caso contrário.
 */
int game_over()
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
    for (int j = 0; j < COLS; j++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	e00a      	b.n	8001f9a <game_over+0x22>
    {
        if (board[0][j] == 2)
 8001f84:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <game_over+0x34>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d101      	bne.n	8001f94 <game_over+0x1c>
        {
            return 1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e006      	b.n	8001fa2 <game_over+0x2a>
    for (int j = 0; j < COLS; j++)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b07      	cmp	r3, #7
 8001f9e:	ddf1      	ble.n	8001f84 <game_over+0xc>
        }
    }
    return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	20000444 	.word	0x20000444

08001fb0 <atualizar_pontuacao>:
 *   - 4 linhas: 1200 * (nivel+1)
 *
 * @param linhas_removidas Número de linhas removidas de uma vez.
 */
void atualizar_pontuacao(int linhas_removidas)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    int pontos = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
    switch (linhas_removidas)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d82e      	bhi.n	8002022 <atualizar_pontuacao+0x72>
 8001fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fcc <atualizar_pontuacao+0x1c>)
 8001fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fca:	bf00      	nop
 8001fcc:	08001fdd 	.word	0x08001fdd
 8001fd0:	08001fef 	.word	0x08001fef
 8001fd4:	08001fff 	.word	0x08001fff
 8001fd8:	08002011 	.word	0x08002011
    {
    case 1:
        pontos = 40 * (nivel + 1);
 8001fdc:	4b23      	ldr	r3, [pc, #140]	@ (800206c <atualizar_pontuacao+0xbc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	60fb      	str	r3, [r7, #12]
        break;
 8001fec:	e01a      	b.n	8002024 <atualizar_pontuacao+0x74>
    case 2:
        pontos = 100 * (nivel + 1);
 8001fee:	4b1f      	ldr	r3, [pc, #124]	@ (800206c <atualizar_pontuacao+0xbc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	2264      	movs	r2, #100	@ 0x64
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	60fb      	str	r3, [r7, #12]
        break;
 8001ffc:	e012      	b.n	8002024 <atualizar_pontuacao+0x74>
    case 3:
        pontos = 300 * (nivel + 1);
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <atualizar_pontuacao+0xbc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002008:	fb02 f303 	mul.w	r3, r2, r3
 800200c:	60fb      	str	r3, [r7, #12]
        break;
 800200e:	e009      	b.n	8002024 <atualizar_pontuacao+0x74>
    case 4:
        pontos = 1200 * (nivel + 1);
 8002010:	4b16      	ldr	r3, [pc, #88]	@ (800206c <atualizar_pontuacao+0xbc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	60fb      	str	r3, [r7, #12]
        break;
 8002020:	e000      	b.n	8002024 <atualizar_pontuacao+0x74>
    default:
        break;
 8002022:	bf00      	nop
    }
    pontuacao += pontos;
 8002024:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <atualizar_pontuacao+0xc0>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	4a10      	ldr	r2, [pc, #64]	@ (8002070 <atualizar_pontuacao+0xc0>)
 800202e:	6013      	str	r3, [r2, #0]
    linhas_totais += linhas_removidas;
 8002030:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <atualizar_pontuacao+0xc4>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	4a0e      	ldr	r2, [pc, #56]	@ (8002074 <atualizar_pontuacao+0xc4>)
 800203a:	6013      	str	r3, [r2, #0]

    // Atualiza o nível se atingir o limite
    if (linhas_totais >= LINHAS_POR_NIVEL)
 800203c:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <atualizar_pontuacao+0xc4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b09      	cmp	r3, #9
 8002042:	dd0e      	ble.n	8002062 <atualizar_pontuacao+0xb2>
    {
        nivel++;
 8002044:	4b09      	ldr	r3, [pc, #36]	@ (800206c <atualizar_pontuacao+0xbc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	4a08      	ldr	r2, [pc, #32]	@ (800206c <atualizar_pontuacao+0xbc>)
 800204c:	6013      	str	r3, [r2, #0]
        linhas_totais = linhas_totais - LINHAS_POR_NIVEL; // Ou zere e acumule com pontos extras se desejar
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <atualizar_pontuacao+0xc4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	3b0a      	subs	r3, #10
 8002054:	4a07      	ldr	r2, [pc, #28]	@ (8002074 <atualizar_pontuacao+0xc4>)
 8002056:	6013      	str	r3, [r2, #0]
        // Ajuste a velocidade do jogo, por exemplo:
        multiplicador_tempo++; // Ou reduza o tempo base
 8002058:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <atualizar_pontuacao+0xc8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	4a06      	ldr	r2, [pc, #24]	@ (8002078 <atualizar_pontuacao+0xc8>)
 8002060:	6013      	str	r3, [r2, #0]
        //printf("\nNível aumentado! Agora é o nível %d\n", nivel);
    }
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	200004cc 	.word	0x200004cc
 8002070:	200004c8 	.word	0x200004c8
 8002074:	200004d0 	.word	0x200004d0
 8002078:	20000224 	.word	0x20000224

0800207c <show_next_peace>:
 * Esta função imprime no console a matriz 4x4 da próxima peça
 * que será utilizada no jogo. A peça é representada com '█'
 * para blocos preenchidos e '.' para espaços vazios.
 */
void show_next_peace()
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
    printf("Proxima peca a aparecer\n");
 8002082:	481b      	ldr	r0, [pc, #108]	@ (80020f0 <show_next_peace+0x74>)
 8002084:	f002 fb14 	bl	80046b0 <puts>
    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
 800208c:	e027      	b.n	80020de <show_next_peace+0x62>
    {
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 800208e:	2300      	movs	r3, #0
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	e01b      	b.n	80020cc <show_next_peace+0x50>
        {
            if (next_peace.shape[i][j] == 1)
 8002094:	4917      	ldr	r1, [pc, #92]	@ (80020f4 <show_next_peace+0x78>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	009a      	lsls	r2, r3, #2
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	4413      	add	r3, r2
 800209e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d103      	bne.n	80020ae <show_next_peace+0x32>
            {

                printf("█ "); // Bloco preenchido
 80020a6:	4814      	ldr	r0, [pc, #80]	@ (80020f8 <show_next_peace+0x7c>)
 80020a8:	f002 fa92 	bl	80045d0 <iprintf>
 80020ac:	e00b      	b.n	80020c6 <show_next_peace+0x4a>
            }
            else if (board[i][j] == 0)
 80020ae:	4a13      	ldr	r2, [pc, #76]	@ (80020fc <show_next_peace+0x80>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	441a      	add	r2, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <show_next_peace+0x4a>
            {
                printf(". "); // Espaço vazio
 80020c0:	480f      	ldr	r0, [pc, #60]	@ (8002100 <show_next_peace+0x84>)
 80020c2:	f002 fa85 	bl	80045d0 <iprintf>
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	dde0      	ble.n	8002094 <show_next_peace+0x18>
            }
        }
        printf("\n");
 80020d2:	200a      	movs	r0, #10
 80020d4:	f002 fa8e 	bl	80045f4 <putchar>
    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3301      	adds	r3, #1
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	ddd4      	ble.n	800208e <show_next_peace+0x12>
    }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	080059ac 	.word	0x080059ac
 80020f4:	200004d8 	.word	0x200004d8
 80020f8:	08005968 	.word	0x08005968
 80020fc:	20000444 	.word	0x20000444
 8002100:	08005970 	.word	0x08005970

08002104 <get_pontuacao>:
 * Esta função retorna a pontuação acumulada pelo jogador durante o jogo.
 *
 * @return A pontuação atual como um valor de 16 bits sem sinal.
 */
uint16_t get_pontuacao(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
    return (uint16_t)pontuacao;
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <get_pontuacao+0x14>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	200004c8 	.word	0x200004c8

0800211c <clear_pontuacao>:

void clear_pontuacao(void){
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
    pontuacao = 0;
 8002120:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <clear_pontuacao+0x2c>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
    nivel = 0;
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <clear_pontuacao+0x30>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
    linhas_totais = 0;
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <clear_pontuacao+0x34>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
    multiplicador_tempo = 1; // Reseta o multiplicador de tempo
 8002132:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <clear_pontuacao+0x38>)
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]
    timer_counter = 0; // Reseta o contador de tempo
 8002138:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <clear_pontuacao+0x3c>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	200004c8 	.word	0x200004c8
 800214c:	200004cc 	.word	0x200004cc
 8002150:	200004d0 	.word	0x200004d0
 8002154:	20000224 	.word	0x20000224
 8002158:	200004c4 	.word	0x200004c4

0800215c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800215c:	f7ff f9a0 	bl	80014a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002160:	480b      	ldr	r0, [pc, #44]	@ (8002190 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002162:	490c      	ldr	r1, [pc, #48]	@ (8002194 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002164:	4a0c      	ldr	r2, [pc, #48]	@ (8002198 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002168:	e002      	b.n	8002170 <LoopCopyDataInit>

0800216a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800216c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216e:	3304      	adds	r3, #4

08002170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002174:	d3f9      	bcc.n	800216a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002176:	4a09      	ldr	r2, [pc, #36]	@ (800219c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002178:	4c09      	ldr	r4, [pc, #36]	@ (80021a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800217c:	e001      	b.n	8002182 <LoopFillZerobss>

0800217e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002180:	3204      	adds	r2, #4

08002182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002184:	d3fb      	bcc.n	800217e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002186:	f002 fbe9 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800218a:	f7fe fdcd 	bl	8000d28 <main>
  bx lr
 800218e:	4770      	bx	lr
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8002198:	08005ae8 	.word	0x08005ae8
  ldr r2, =_sbss
 800219c:	2000028c 	.word	0x2000028c
  ldr r4, =_ebss
 80021a0:	20000668 	.word	0x20000668

080021a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <ADC1_2_IRQHandler>
	...

080021a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ac:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <HAL_Init+0x28>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a07      	ldr	r2, [pc, #28]	@ (80021d0 <HAL_Init+0x28>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 fd73 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021be:	200f      	movs	r0, #15
 80021c0:	f000 f808 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c4:	f7fe ffe2 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40022000 	.word	0x40022000

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021dc:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_InitTick+0x54>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b12      	ldr	r3, [pc, #72]	@ (800222c <HAL_InitTick+0x58>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fd8b 	bl	8002d0e <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0f      	cmp	r3, #15
 8002206:	d80a      	bhi.n	800221e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002210:	f000 fd53 	bl	8002cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4a06      	ldr	r2, [pc, #24]	@ (8002230 <HAL_InitTick+0x5c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000060 	.word	0x20000060
 800222c:	2000022c 	.word	0x2000022c
 8002230:	20000228 	.word	0x20000228

08002234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <HAL_IncTick+0x1c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_IncTick+0x20>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a03      	ldr	r2, [pc, #12]	@ (8002254 <HAL_IncTick+0x20>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	2000022c 	.word	0x2000022c
 8002254:	20000518 	.word	0x20000518

08002258 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return uwTick;
 800225c:	4b02      	ldr	r3, [pc, #8]	@ (8002268 <HAL_GetTick+0x10>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000518 	.word	0x20000518

0800226c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff fff0 	bl	8002258 <HAL_GetTick>
 8002278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002284:	d005      	beq.n	8002292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002286:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <HAL_Delay+0x44>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002292:	bf00      	nop
 8002294:	f7ff ffe0 	bl	8002258 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d8f7      	bhi.n	8002294 <HAL_Delay+0x28>
  {
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000022c 	.word	0x2000022c

080022b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0be      	b.n	8002454 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe ff7c 	bl	80011f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fbc5 	bl	8002a88 <ADC_ConversionStop_Disable>
 80022fe:	4603      	mov	r3, r0
 8002300:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 8099 	bne.w	8002442 <HAL_ADC_Init+0x18e>
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 8095 	bne.w	8002442 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002320:	f023 0302 	bic.w	r3, r3, #2
 8002324:	f043 0202 	orr.w	r2, r3, #2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002334:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7b1b      	ldrb	r3, [r3, #12]
 800233a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800233c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	4313      	orrs	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800234c:	d003      	beq.n	8002356 <HAL_ADC_Init+0xa2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <HAL_ADC_Init+0xa8>
 8002356:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800235a:	e000      	b.n	800235e <HAL_ADC_Init+0xaa>
 800235c:	2300      	movs	r3, #0
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7d1b      	ldrb	r3, [r3, #20]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d119      	bne.n	80023a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7b1b      	ldrb	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	3b01      	subs	r3, #1
 800237a:	035a      	lsls	r2, r3, #13
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e00b      	b.n	80023a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	4b28      	ldr	r3, [pc, #160]	@ (800245c <HAL_ADC_Init+0x1a8>)
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023d0:	d003      	beq.n	80023da <HAL_ADC_Init+0x126>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d104      	bne.n	80023e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	3b01      	subs	r3, #1
 80023e0:	051b      	lsls	r3, r3, #20
 80023e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ea:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	4b18      	ldr	r3, [pc, #96]	@ (8002460 <HAL_ADC_Init+0x1ac>)
 8002400:	4013      	ands	r3, r2
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	429a      	cmp	r2, r3
 8002406:	d10b      	bne.n	8002420 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800241e:	e018      	b.n	8002452 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002424:	f023 0312 	bic.w	r3, r3, #18
 8002428:	f043 0210 	orr.w	r2, r3, #16
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002440:	e007      	b.n	8002452 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002446:	f043 0210 	orr.w	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002452:	7dfb      	ldrb	r3, [r7, #23]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	ffe1f7fd 	.word	0xffe1f7fd
 8002460:	ff1f0efe 	.word	0xff1f0efe

08002464 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_ADC_Start+0x1a>
 800247a:	2302      	movs	r3, #2
 800247c:	e098      	b.n	80025b0 <HAL_ADC_Start+0x14c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 faa4 	bl	80029d4 <ADC_Enable>
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 8087 	bne.w	80025a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a41      	ldr	r2, [pc, #260]	@ (80025b8 <HAL_ADC_Start+0x154>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d105      	bne.n	80024c2 <HAL_ADC_Start+0x5e>
 80024b6:	4b41      	ldr	r3, [pc, #260]	@ (80025bc <HAL_ADC_Start+0x158>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d115      	bne.n	80024ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d026      	beq.n	800252a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ec:	e01d      	b.n	800252a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2f      	ldr	r2, [pc, #188]	@ (80025bc <HAL_ADC_Start+0x158>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d004      	beq.n	800250e <HAL_ADC_Start+0xaa>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2b      	ldr	r2, [pc, #172]	@ (80025b8 <HAL_ADC_Start+0x154>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10d      	bne.n	800252a <HAL_ADC_Start+0xc6>
 800250e:	4b2b      	ldr	r3, [pc, #172]	@ (80025bc <HAL_ADC_Start+0x158>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002522:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d006      	beq.n	8002544 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	f023 0206 	bic.w	r2, r3, #6
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002542:	e002      	b.n	800254a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0202 	mvn.w	r2, #2
 800255a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002566:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800256a:	d113      	bne.n	8002594 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002570:	4a11      	ldr	r2, [pc, #68]	@ (80025b8 <HAL_ADC_Start+0x154>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d105      	bne.n	8002582 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002576:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <HAL_ADC_Start+0x158>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	e00c      	b.n	80025ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	e003      	b.n	80025ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40012800 	.word	0x40012800
 80025bc:	40012400 	.word	0x40012400

080025c0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80025d6:	f7ff fe3f 	bl	8002258 <HAL_GetTick>
 80025da:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ee:	f043 0220 	orr.w	r2, r3, #32
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0d3      	b.n	80027aa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d131      	bne.n	8002674 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002616:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800261a:	2b00      	cmp	r3, #0
 800261c:	d12a      	bne.n	8002674 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800261e:	e021      	b.n	8002664 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002626:	d01d      	beq.n	8002664 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_ADC_PollForConversion+0x7e>
 800262e:	f7ff fe13 	bl	8002258 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d212      	bcs.n	8002664 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10b      	bne.n	8002664 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0a2      	b.n	80027aa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0d6      	beq.n	8002620 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002672:	e070      	b.n	8002756 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002674:	4b4f      	ldr	r3, [pc, #316]	@ (80027b4 <HAL_ADC_PollForConversion+0x1f4>)
 8002676:	681c      	ldr	r4, [r3, #0]
 8002678:	2002      	movs	r0, #2
 800267a:	f001 f9d3 	bl	8003a24 <HAL_RCCEx_GetPeriphCLKFreq>
 800267e:	4603      	mov	r3, r0
 8002680:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6919      	ldr	r1, [r3, #16]
 800268a:	4b4b      	ldr	r3, [pc, #300]	@ (80027b8 <HAL_ADC_PollForConversion+0x1f8>)
 800268c:	400b      	ands	r3, r1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_ADC_PollForConversion+0x104>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	4b48      	ldr	r3, [pc, #288]	@ (80027bc <HAL_ADC_PollForConversion+0x1fc>)
 800269a:	400b      	ands	r3, r1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d111      	bne.n	80026c4 <HAL_ADC_PollForConversion+0x104>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6919      	ldr	r1, [r3, #16]
 80026a6:	4b46      	ldr	r3, [pc, #280]	@ (80027c0 <HAL_ADC_PollForConversion+0x200>)
 80026a8:	400b      	ands	r3, r1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d108      	bne.n	80026c0 <HAL_ADC_PollForConversion+0x100>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	4b43      	ldr	r3, [pc, #268]	@ (80027c4 <HAL_ADC_PollForConversion+0x204>)
 80026b6:	400b      	ands	r3, r1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_PollForConversion+0x100>
 80026bc:	2314      	movs	r3, #20
 80026be:	e020      	b.n	8002702 <HAL_ADC_PollForConversion+0x142>
 80026c0:	2329      	movs	r3, #41	@ 0x29
 80026c2:	e01e      	b.n	8002702 <HAL_ADC_PollForConversion+0x142>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6919      	ldr	r1, [r3, #16]
 80026ca:	4b3d      	ldr	r3, [pc, #244]	@ (80027c0 <HAL_ADC_PollForConversion+0x200>)
 80026cc:	400b      	ands	r3, r1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_ADC_PollForConversion+0x120>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68d9      	ldr	r1, [r3, #12]
 80026d8:	4b3a      	ldr	r3, [pc, #232]	@ (80027c4 <HAL_ADC_PollForConversion+0x204>)
 80026da:	400b      	ands	r3, r1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00d      	beq.n	80026fc <HAL_ADC_PollForConversion+0x13c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	4b38      	ldr	r3, [pc, #224]	@ (80027c8 <HAL_ADC_PollForConversion+0x208>)
 80026e8:	400b      	ands	r3, r1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d108      	bne.n	8002700 <HAL_ADC_PollForConversion+0x140>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68d9      	ldr	r1, [r3, #12]
 80026f4:	4b34      	ldr	r3, [pc, #208]	@ (80027c8 <HAL_ADC_PollForConversion+0x208>)
 80026f6:	400b      	ands	r3, r1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_ADC_PollForConversion+0x140>
 80026fc:	2354      	movs	r3, #84	@ 0x54
 80026fe:	e000      	b.n	8002702 <HAL_ADC_PollForConversion+0x142>
 8002700:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002708:	e021      	b.n	800274e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002710:	d01a      	beq.n	8002748 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d007      	beq.n	8002728 <HAL_ADC_PollForConversion+0x168>
 8002718:	f7ff fd9e 	bl	8002258 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d20f      	bcs.n	8002748 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	429a      	cmp	r2, r3
 800272e:	d90b      	bls.n	8002748 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002734:	f043 0204 	orr.w	r2, r3, #4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e030      	b.n	80027aa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	429a      	cmp	r2, r3
 8002754:	d8d9      	bhi.n	800270a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f06f 0212 	mvn.w	r2, #18
 800275e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002776:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800277a:	d115      	bne.n	80027a8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d105      	bne.n	80027a8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd90      	pop	{r4, r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000060 	.word	0x20000060
 80027b8:	24924924 	.word	0x24924924
 80027bc:	00924924 	.word	0x00924924
 80027c0:	12492492 	.word	0x12492492
 80027c4:	00492492 	.word	0x00492492
 80027c8:	00249249 	.word	0x00249249

080027cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x20>
 8002800:	2302      	movs	r3, #2
 8002802:	e0dc      	b.n	80029be <HAL_ADC_ConfigChannel+0x1da>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b06      	cmp	r3, #6
 8002812:	d81c      	bhi.n	800284e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	3b05      	subs	r3, #5
 8002826:	221f      	movs	r2, #31
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	4019      	ands	r1, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	3b05      	subs	r3, #5
 8002840:	fa00 f203 	lsl.w	r2, r0, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	635a      	str	r2, [r3, #52]	@ 0x34
 800284c:	e03c      	b.n	80028c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b0c      	cmp	r3, #12
 8002854:	d81c      	bhi.n	8002890 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	3b23      	subs	r3, #35	@ 0x23
 8002868:	221f      	movs	r2, #31
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	4019      	ands	r1, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	3b23      	subs	r3, #35	@ 0x23
 8002882:	fa00 f203 	lsl.w	r2, r0, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	631a      	str	r2, [r3, #48]	@ 0x30
 800288e:	e01b      	b.n	80028c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	3b41      	subs	r3, #65	@ 0x41
 80028a2:	221f      	movs	r2, #31
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	4019      	ands	r1, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3b41      	subs	r3, #65	@ 0x41
 80028bc:	fa00 f203 	lsl.w	r2, r0, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b09      	cmp	r3, #9
 80028ce:	d91c      	bls.n	800290a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68d9      	ldr	r1, [r3, #12]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	3b1e      	subs	r3, #30
 80028e2:	2207      	movs	r2, #7
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	4019      	ands	r1, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6898      	ldr	r0, [r3, #8]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	3b1e      	subs	r3, #30
 80028fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	60da      	str	r2, [r3, #12]
 8002908:	e019      	b.n	800293e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6919      	ldr	r1, [r3, #16]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	2207      	movs	r2, #7
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	4019      	ands	r1, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6898      	ldr	r0, [r3, #8]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	fa00 f203 	lsl.w	r2, r0, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b10      	cmp	r3, #16
 8002944:	d003      	beq.n	800294e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800294a:	2b11      	cmp	r3, #17
 800294c:	d132      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1d      	ldr	r2, [pc, #116]	@ (80029c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d125      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d126      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002974:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b10      	cmp	r3, #16
 800297c:	d11a      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800297e:	4b13      	ldr	r3, [pc, #76]	@ (80029cc <HAL_ADC_ConfigChannel+0x1e8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a13      	ldr	r2, [pc, #76]	@ (80029d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	0c9a      	lsrs	r2, r3, #18
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002994:	e002      	b.n	800299c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	3b01      	subs	r3, #1
 800299a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f9      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x1b2>
 80029a2:	e007      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	40012400 	.word	0x40012400
 80029cc:	20000060 	.word	0x20000060
 80029d0:	431bde83 	.word	0x431bde83

080029d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d040      	beq.n	8002a74 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0201 	orr.w	r2, r2, #1
 8002a00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a02:	4b1f      	ldr	r3, [pc, #124]	@ (8002a80 <ADC_Enable+0xac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1f      	ldr	r2, [pc, #124]	@ (8002a84 <ADC_Enable+0xb0>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	0c9b      	lsrs	r3, r3, #18
 8002a0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a10:	e002      	b.n	8002a18 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f9      	bne.n	8002a12 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a1e:	f7ff fc1b 	bl	8002258 <HAL_GetTick>
 8002a22:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a24:	e01f      	b.n	8002a66 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a26:	f7ff fc17 	bl	8002258 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d918      	bls.n	8002a66 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d011      	beq.n	8002a66 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a46:	f043 0210 	orr.w	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e007      	b.n	8002a76 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d1d8      	bne.n	8002a26 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000060 	.word	0x20000060
 8002a84:	431bde83 	.word	0x431bde83

08002a88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d12e      	bne.n	8002b00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0201 	bic.w	r2, r2, #1
 8002ab0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ab2:	f7ff fbd1 	bl	8002258 <HAL_GetTick>
 8002ab6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ab8:	e01b      	b.n	8002af2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002aba:	f7ff fbcd 	bl	8002258 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d914      	bls.n	8002af2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d10d      	bne.n	8002af2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	f043 0210 	orr.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e007      	b.n	8002b02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d0dc      	beq.n	8002aba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	@ (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4906      	ldr	r1, [pc, #24]	@ (8002ba4 <__NVIC_EnableIRQ+0x34>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100

08002ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	6039      	str	r1, [r7, #0]
 8002bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	db0a      	blt.n	8002bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	490c      	ldr	r1, [pc, #48]	@ (8002bf4 <__NVIC_SetPriority+0x4c>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	440b      	add	r3, r1
 8002bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd0:	e00a      	b.n	8002be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4908      	ldr	r1, [pc, #32]	@ (8002bf8 <__NVIC_SetPriority+0x50>)
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	3b04      	subs	r3, #4
 8002be0:	0112      	lsls	r2, r2, #4
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	440b      	add	r3, r1
 8002be6:	761a      	strb	r2, [r3, #24]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000e100 	.word	0xe000e100
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	@ 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f1c3 0307 	rsb	r3, r3, #7
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	bf28      	it	cs
 8002c1a:	2304      	movcs	r3, #4
 8002c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3304      	adds	r3, #4
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d902      	bls.n	8002c2c <NVIC_EncodePriority+0x30>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3b03      	subs	r3, #3
 8002c2a:	e000      	b.n	8002c2e <NVIC_EncodePriority+0x32>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	401a      	ands	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	43d9      	mvns	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	4313      	orrs	r3, r2
         );
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3724      	adds	r7, #36	@ 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c84:	f7ff ff90 	bl	8002ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff2d 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ccc:	f7ff ff42 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f7ff ff90 	bl	8002bfc <NVIC_EncodePriority>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff5f 	bl	8002ba8 <__NVIC_SetPriority>
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff35 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffa2 	bl	8002c60 <SysTick_Config>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b08b      	sub	sp, #44	@ 0x2c
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d32:	2300      	movs	r3, #0
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d3a:	e169      	b.n	8003010 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	f040 8158 	bne.w	800300a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4a9a      	ldr	r2, [pc, #616]	@ (8002fc8 <HAL_GPIO_Init+0x2a0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d05e      	beq.n	8002e22 <HAL_GPIO_Init+0xfa>
 8002d64:	4a98      	ldr	r2, [pc, #608]	@ (8002fc8 <HAL_GPIO_Init+0x2a0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d875      	bhi.n	8002e56 <HAL_GPIO_Init+0x12e>
 8002d6a:	4a98      	ldr	r2, [pc, #608]	@ (8002fcc <HAL_GPIO_Init+0x2a4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d058      	beq.n	8002e22 <HAL_GPIO_Init+0xfa>
 8002d70:	4a96      	ldr	r2, [pc, #600]	@ (8002fcc <HAL_GPIO_Init+0x2a4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d86f      	bhi.n	8002e56 <HAL_GPIO_Init+0x12e>
 8002d76:	4a96      	ldr	r2, [pc, #600]	@ (8002fd0 <HAL_GPIO_Init+0x2a8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d052      	beq.n	8002e22 <HAL_GPIO_Init+0xfa>
 8002d7c:	4a94      	ldr	r2, [pc, #592]	@ (8002fd0 <HAL_GPIO_Init+0x2a8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d869      	bhi.n	8002e56 <HAL_GPIO_Init+0x12e>
 8002d82:	4a94      	ldr	r2, [pc, #592]	@ (8002fd4 <HAL_GPIO_Init+0x2ac>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d04c      	beq.n	8002e22 <HAL_GPIO_Init+0xfa>
 8002d88:	4a92      	ldr	r2, [pc, #584]	@ (8002fd4 <HAL_GPIO_Init+0x2ac>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d863      	bhi.n	8002e56 <HAL_GPIO_Init+0x12e>
 8002d8e:	4a92      	ldr	r2, [pc, #584]	@ (8002fd8 <HAL_GPIO_Init+0x2b0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d046      	beq.n	8002e22 <HAL_GPIO_Init+0xfa>
 8002d94:	4a90      	ldr	r2, [pc, #576]	@ (8002fd8 <HAL_GPIO_Init+0x2b0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d85d      	bhi.n	8002e56 <HAL_GPIO_Init+0x12e>
 8002d9a:	2b12      	cmp	r3, #18
 8002d9c:	d82a      	bhi.n	8002df4 <HAL_GPIO_Init+0xcc>
 8002d9e:	2b12      	cmp	r3, #18
 8002da0:	d859      	bhi.n	8002e56 <HAL_GPIO_Init+0x12e>
 8002da2:	a201      	add	r2, pc, #4	@ (adr r2, 8002da8 <HAL_GPIO_Init+0x80>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002e23 	.word	0x08002e23
 8002dac:	08002dfd 	.word	0x08002dfd
 8002db0:	08002e0f 	.word	0x08002e0f
 8002db4:	08002e51 	.word	0x08002e51
 8002db8:	08002e57 	.word	0x08002e57
 8002dbc:	08002e57 	.word	0x08002e57
 8002dc0:	08002e57 	.word	0x08002e57
 8002dc4:	08002e57 	.word	0x08002e57
 8002dc8:	08002e57 	.word	0x08002e57
 8002dcc:	08002e57 	.word	0x08002e57
 8002dd0:	08002e57 	.word	0x08002e57
 8002dd4:	08002e57 	.word	0x08002e57
 8002dd8:	08002e57 	.word	0x08002e57
 8002ddc:	08002e57 	.word	0x08002e57
 8002de0:	08002e57 	.word	0x08002e57
 8002de4:	08002e57 	.word	0x08002e57
 8002de8:	08002e57 	.word	0x08002e57
 8002dec:	08002e05 	.word	0x08002e05
 8002df0:	08002e19 	.word	0x08002e19
 8002df4:	4a79      	ldr	r2, [pc, #484]	@ (8002fdc <HAL_GPIO_Init+0x2b4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dfa:	e02c      	b.n	8002e56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	623b      	str	r3, [r7, #32]
          break;
 8002e02:	e029      	b.n	8002e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	623b      	str	r3, [r7, #32]
          break;
 8002e0c:	e024      	b.n	8002e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	3308      	adds	r3, #8
 8002e14:	623b      	str	r3, [r7, #32]
          break;
 8002e16:	e01f      	b.n	8002e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	623b      	str	r3, [r7, #32]
          break;
 8002e20:	e01a      	b.n	8002e58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	623b      	str	r3, [r7, #32]
          break;
 8002e2e:	e013      	b.n	8002e58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d105      	bne.n	8002e44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e38:	2308      	movs	r3, #8
 8002e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	611a      	str	r2, [r3, #16]
          break;
 8002e42:	e009      	b.n	8002e58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e44:	2308      	movs	r3, #8
 8002e46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	615a      	str	r2, [r3, #20]
          break;
 8002e4e:	e003      	b.n	8002e58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e50:	2300      	movs	r3, #0
 8002e52:	623b      	str	r3, [r7, #32]
          break;
 8002e54:	e000      	b.n	8002e58 <HAL_GPIO_Init+0x130>
          break;
 8002e56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2bff      	cmp	r3, #255	@ 0xff
 8002e5c:	d801      	bhi.n	8002e62 <HAL_GPIO_Init+0x13a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	e001      	b.n	8002e66 <HAL_GPIO_Init+0x13e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3304      	adds	r3, #4
 8002e66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2bff      	cmp	r3, #255	@ 0xff
 8002e6c:	d802      	bhi.n	8002e74 <HAL_GPIO_Init+0x14c>
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	e002      	b.n	8002e7a <HAL_GPIO_Init+0x152>
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	3b08      	subs	r3, #8
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	210f      	movs	r1, #15
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	6a39      	ldr	r1, [r7, #32]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	431a      	orrs	r2, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80b1 	beq.w	800300a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8002fe0 <HAL_GPIO_Init+0x2b8>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	4a4c      	ldr	r2, [pc, #304]	@ (8002fe0 <HAL_GPIO_Init+0x2b8>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6193      	str	r3, [r2, #24]
 8002eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe0 <HAL_GPIO_Init+0x2b8>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ec0:	4a48      	ldr	r2, [pc, #288]	@ (8002fe4 <HAL_GPIO_Init+0x2bc>)
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ecc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	220f      	movs	r2, #15
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a40      	ldr	r2, [pc, #256]	@ (8002fe8 <HAL_GPIO_Init+0x2c0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <HAL_GPIO_Init+0x1ec>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a3f      	ldr	r2, [pc, #252]	@ (8002fec <HAL_GPIO_Init+0x2c4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00d      	beq.n	8002f10 <HAL_GPIO_Init+0x1e8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ff0 <HAL_GPIO_Init+0x2c8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <HAL_GPIO_Init+0x1e4>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a3d      	ldr	r2, [pc, #244]	@ (8002ff4 <HAL_GPIO_Init+0x2cc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_GPIO_Init+0x1e0>
 8002f04:	2303      	movs	r3, #3
 8002f06:	e006      	b.n	8002f16 <HAL_GPIO_Init+0x1ee>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	e004      	b.n	8002f16 <HAL_GPIO_Init+0x1ee>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e002      	b.n	8002f16 <HAL_GPIO_Init+0x1ee>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_GPIO_Init+0x1ee>
 8002f14:	2300      	movs	r3, #0
 8002f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f18:	f002 0203 	and.w	r2, r2, #3
 8002f1c:	0092      	lsls	r2, r2, #2
 8002f1e:	4093      	lsls	r3, r2
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f26:	492f      	ldr	r1, [pc, #188]	@ (8002fe4 <HAL_GPIO_Init+0x2bc>)
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	089b      	lsrs	r3, r3, #2
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f40:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	492c      	ldr	r1, [pc, #176]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]
 8002f4c:	e006      	b.n	8002f5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	4928      	ldr	r1, [pc, #160]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d006      	beq.n	8002f76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f68:	4b23      	ldr	r3, [pc, #140]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	4922      	ldr	r1, [pc, #136]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60cb      	str	r3, [r1, #12]
 8002f74:	e006      	b.n	8002f84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f76:	4b20      	ldr	r3, [pc, #128]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	491e      	ldr	r1, [pc, #120]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d006      	beq.n	8002f9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f90:	4b19      	ldr	r3, [pc, #100]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	4918      	ldr	r1, [pc, #96]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
 8002f9c:	e006      	b.n	8002fac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f9e:	4b16      	ldr	r3, [pc, #88]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	4914      	ldr	r1, [pc, #80]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d021      	beq.n	8002ffc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	490e      	ldr	r1, [pc, #56]	@ (8002ff8 <HAL_GPIO_Init+0x2d0>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]
 8002fc4:	e021      	b.n	800300a <HAL_GPIO_Init+0x2e2>
 8002fc6:	bf00      	nop
 8002fc8:	10320000 	.word	0x10320000
 8002fcc:	10310000 	.word	0x10310000
 8002fd0:	10220000 	.word	0x10220000
 8002fd4:	10210000 	.word	0x10210000
 8002fd8:	10120000 	.word	0x10120000
 8002fdc:	10110000 	.word	0x10110000
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40010800 	.word	0x40010800
 8002fec:	40010c00 	.word	0x40010c00
 8002ff0:	40011000 	.word	0x40011000
 8002ff4:	40011400 	.word	0x40011400
 8002ff8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_GPIO_Init+0x304>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	43db      	mvns	r3, r3
 8003004:	4909      	ldr	r1, [pc, #36]	@ (800302c <HAL_GPIO_Init+0x304>)
 8003006:	4013      	ands	r3, r2
 8003008:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	3301      	adds	r3, #1
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	fa22 f303 	lsr.w	r3, r2, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	f47f ae8e 	bne.w	8002d3c <HAL_GPIO_Init+0x14>
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	372c      	adds	r7, #44	@ 0x2c
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	40010400 	.word	0x40010400

08003030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	e001      	b.n	8003052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	807b      	strh	r3, [r7, #2]
 800306a:	4613      	mov	r3, r2
 800306c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800306e:	787b      	ldrb	r3, [r7, #1]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003074:	887a      	ldrh	r2, [r7, #2]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800307a:	e003      	b.n	8003084 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800307c:	887b      	ldrh	r3, [r7, #2]
 800307e:	041a      	lsls	r2, r3, #16
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	611a      	str	r2, [r3, #16]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030a0:	887a      	ldrh	r2, [r7, #2]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	041a      	lsls	r2, r3, #16
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	43d9      	mvns	r1, r3
 80030ac:	887b      	ldrh	r3, [r7, #2]
 80030ae:	400b      	ands	r3, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	611a      	str	r2, [r3, #16]
}
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e272      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8087 	beq.w	80031ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030e0:	4b92      	ldr	r3, [pc, #584]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d00c      	beq.n	8003106 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030ec:	4b8f      	ldr	r3, [pc, #572]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d112      	bne.n	800311e <HAL_RCC_OscConfig+0x5e>
 80030f8:	4b8c      	ldr	r3, [pc, #560]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003104:	d10b      	bne.n	800311e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003106:	4b89      	ldr	r3, [pc, #548]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d06c      	beq.n	80031ec <HAL_RCC_OscConfig+0x12c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d168      	bne.n	80031ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e24c      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x76>
 8003128:	4b80      	ldr	r3, [pc, #512]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a7f      	ldr	r2, [pc, #508]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	e02e      	b.n	8003194 <HAL_RCC_OscConfig+0xd4>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x98>
 800313e:	4b7b      	ldr	r3, [pc, #492]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7a      	ldr	r2, [pc, #488]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b78      	ldr	r3, [pc, #480]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a77      	ldr	r2, [pc, #476]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003150:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e01d      	b.n	8003194 <HAL_RCC_OscConfig+0xd4>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0xbc>
 8003162:	4b72      	ldr	r3, [pc, #456]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a71      	ldr	r2, [pc, #452]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b6f      	ldr	r3, [pc, #444]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a6e      	ldr	r2, [pc, #440]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0xd4>
 800317c:	4b6b      	ldr	r3, [pc, #428]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a6a      	ldr	r2, [pc, #424]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b68      	ldr	r3, [pc, #416]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a67      	ldr	r2, [pc, #412]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 800318e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003192:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7ff f85c 	bl	8002258 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7ff f858 	bl	8002258 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	@ 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e200      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b5d      	ldr	r3, [pc, #372]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0xe4>
 80031c2:	e014      	b.n	80031ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7ff f848 	bl	8002258 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031cc:	f7ff f844 	bl	8002258 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	@ 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e1ec      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031de:	4b53      	ldr	r3, [pc, #332]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x10c>
 80031ea:	e000      	b.n	80031ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d063      	beq.n	80032c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031fa:	4b4c      	ldr	r3, [pc, #304]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003206:	4b49      	ldr	r3, [pc, #292]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b08      	cmp	r3, #8
 8003210:	d11c      	bne.n	800324c <HAL_RCC_OscConfig+0x18c>
 8003212:	4b46      	ldr	r3, [pc, #280]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d116      	bne.n	800324c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	4b43      	ldr	r3, [pc, #268]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_RCC_OscConfig+0x176>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e1c0      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b3d      	ldr	r3, [pc, #244]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4939      	ldr	r1, [pc, #228]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	e03a      	b.n	80032c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003254:	4b36      	ldr	r3, [pc, #216]	@ (8003330 <HAL_RCC_OscConfig+0x270>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fe fffd 	bl	8002258 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003262:	f7fe fff9 	bl	8002258 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e1a1      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003274:	4b2d      	ldr	r3, [pc, #180]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4b2a      	ldr	r3, [pc, #168]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4927      	ldr	r1, [pc, #156]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]
 8003294:	e015      	b.n	80032c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003296:	4b26      	ldr	r3, [pc, #152]	@ (8003330 <HAL_RCC_OscConfig+0x270>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe ffdc 	bl	8002258 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a4:	f7fe ffd8 	bl	8002258 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e180      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b6:	4b1d      	ldr	r3, [pc, #116]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d03a      	beq.n	8003344 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d019      	beq.n	800330a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d6:	4b17      	ldr	r3, [pc, #92]	@ (8003334 <HAL_RCC_OscConfig+0x274>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032dc:	f7fe ffbc 	bl	8002258 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e4:	f7fe ffb8 	bl	8002258 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e160      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <HAL_RCC_OscConfig+0x26c>)
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003302:	2001      	movs	r0, #1
 8003304:	f000 faba 	bl	800387c <RCC_Delay>
 8003308:	e01c      	b.n	8003344 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800330a:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <HAL_RCC_OscConfig+0x274>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003310:	f7fe ffa2 	bl	8002258 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003316:	e00f      	b.n	8003338 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003318:	f7fe ff9e 	bl	8002258 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d908      	bls.n	8003338 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e146      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	42420000 	.word	0x42420000
 8003334:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	4b92      	ldr	r3, [pc, #584]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e9      	bne.n	8003318 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80a6 	beq.w	800349e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003356:	4b8b      	ldr	r3, [pc, #556]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10d      	bne.n	800337e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	4b88      	ldr	r3, [pc, #544]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	4a87      	ldr	r2, [pc, #540]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800336c:	61d3      	str	r3, [r2, #28]
 800336e:	4b85      	ldr	r3, [pc, #532]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b82      	ldr	r3, [pc, #520]	@ (8003588 <HAL_RCC_OscConfig+0x4c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d118      	bne.n	80033bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338a:	4b7f      	ldr	r3, [pc, #508]	@ (8003588 <HAL_RCC_OscConfig+0x4c8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a7e      	ldr	r2, [pc, #504]	@ (8003588 <HAL_RCC_OscConfig+0x4c8>)
 8003390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003396:	f7fe ff5f 	bl	8002258 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339e:	f7fe ff5b 	bl	8002258 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b64      	cmp	r3, #100	@ 0x64
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e103      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b0:	4b75      	ldr	r3, [pc, #468]	@ (8003588 <HAL_RCC_OscConfig+0x4c8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x312>
 80033c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6213      	str	r3, [r2, #32]
 80033d0:	e02d      	b.n	800342e <HAL_RCC_OscConfig+0x36e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x334>
 80033da:	4b6a      	ldr	r3, [pc, #424]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4a69      	ldr	r2, [pc, #420]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	6213      	str	r3, [r2, #32]
 80033e6:	4b67      	ldr	r3, [pc, #412]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a66      	ldr	r2, [pc, #408]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	6213      	str	r3, [r2, #32]
 80033f2:	e01c      	b.n	800342e <HAL_RCC_OscConfig+0x36e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b05      	cmp	r3, #5
 80033fa:	d10c      	bne.n	8003416 <HAL_RCC_OscConfig+0x356>
 80033fc:	4b61      	ldr	r3, [pc, #388]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a60      	ldr	r2, [pc, #384]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	4b5e      	ldr	r3, [pc, #376]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4a5d      	ldr	r2, [pc, #372]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6213      	str	r3, [r2, #32]
 8003414:	e00b      	b.n	800342e <HAL_RCC_OscConfig+0x36e>
 8003416:	4b5b      	ldr	r3, [pc, #364]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a5a      	ldr	r2, [pc, #360]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6213      	str	r3, [r2, #32]
 8003422:	4b58      	ldr	r3, [pc, #352]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a57      	ldr	r2, [pc, #348]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d015      	beq.n	8003462 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003436:	f7fe ff0f 	bl	8002258 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fe ff0b 	bl	8002258 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e0b1      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	4b4b      	ldr	r3, [pc, #300]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0ee      	beq.n	800343e <HAL_RCC_OscConfig+0x37e>
 8003460:	e014      	b.n	800348c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003462:	f7fe fef9 	bl	8002258 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003468:	e00a      	b.n	8003480 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fe fef5 	bl	8002258 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e09b      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	4b40      	ldr	r3, [pc, #256]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1ee      	bne.n	800346a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003492:	4b3c      	ldr	r3, [pc, #240]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	4a3b      	ldr	r2, [pc, #236]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800349c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8087 	beq.w	80035b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a8:	4b36      	ldr	r3, [pc, #216]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d061      	beq.n	8003578 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d146      	bne.n	800354a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034bc:	4b33      	ldr	r3, [pc, #204]	@ (800358c <HAL_RCC_OscConfig+0x4cc>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fec9 	bl	8002258 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe fec5 	bl	8002258 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e06d      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034dc:	4b29      	ldr	r3, [pc, #164]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f0:	d108      	bne.n	8003504 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034f2:	4b24      	ldr	r3, [pc, #144]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	4921      	ldr	r1, [pc, #132]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003504:	4b1f      	ldr	r3, [pc, #124]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a19      	ldr	r1, [r3, #32]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	430b      	orrs	r3, r1
 8003516:	491b      	ldr	r1, [pc, #108]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800351c:	4b1b      	ldr	r3, [pc, #108]	@ (800358c <HAL_RCC_OscConfig+0x4cc>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003522:	f7fe fe99 	bl	8002258 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe fe95 	bl	8002258 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e03d      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800353c:	4b11      	ldr	r3, [pc, #68]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x46a>
 8003548:	e035      	b.n	80035b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <HAL_RCC_OscConfig+0x4cc>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe fe82 	bl	8002258 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fe fe7e 	bl	8002258 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e026      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800356a:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x498>
 8003576:	e01e      	b.n	80035b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e019      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
 8003584:	40021000 	.word	0x40021000
 8003588:	40007000 	.word	0x40007000
 800358c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <HAL_RCC_OscConfig+0x500>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d001      	beq.n	80035b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000

080035c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0d0      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d910      	bls.n	8003608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b67      	ldr	r3, [pc, #412]	@ (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 0207 	bic.w	r2, r3, #7
 80035ee:	4965      	ldr	r1, [pc, #404]	@ (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b63      	ldr	r3, [pc, #396]	@ (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0b8      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003620:	4b59      	ldr	r3, [pc, #356]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4a58      	ldr	r2, [pc, #352]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800362a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003638:	4b53      	ldr	r3, [pc, #332]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a52      	ldr	r2, [pc, #328]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003642:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003644:	4b50      	ldr	r3, [pc, #320]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	494d      	ldr	r1, [pc, #308]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d040      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	4b47      	ldr	r3, [pc, #284]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d115      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e07f      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003682:	4b41      	ldr	r3, [pc, #260]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e073      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003692:	4b3d      	ldr	r3, [pc, #244]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e06b      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a2:	4b39      	ldr	r3, [pc, #228]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f023 0203 	bic.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4936      	ldr	r1, [pc, #216]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b4:	f7fe fdd0 	bl	8002258 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036bc:	f7fe fdcc 	bl	8002258 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e053      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 020c 	and.w	r2, r3, #12
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d1eb      	bne.n	80036bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036e4:	4b27      	ldr	r3, [pc, #156]	@ (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d210      	bcs.n	8003714 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b24      	ldr	r3, [pc, #144]	@ (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 0207 	bic.w	r2, r3, #7
 80036fa:	4922      	ldr	r1, [pc, #136]	@ (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b20      	ldr	r3, [pc, #128]	@ (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e032      	b.n	800377a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003720:	4b19      	ldr	r3, [pc, #100]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4916      	ldr	r1, [pc, #88]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	4313      	orrs	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800373e:	4b12      	ldr	r3, [pc, #72]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	490e      	ldr	r1, [pc, #56]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003752:	f000 f821 	bl	8003798 <HAL_RCC_GetSysClockFreq>
 8003756:	4602      	mov	r2, r0
 8003758:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	490a      	ldr	r1, [pc, #40]	@ (800378c <HAL_RCC_ClockConfig+0x1c8>)
 8003764:	5ccb      	ldrb	r3, [r1, r3]
 8003766:	fa22 f303 	lsr.w	r3, r2, r3
 800376a:	4a09      	ldr	r2, [pc, #36]	@ (8003790 <HAL_RCC_ClockConfig+0x1cc>)
 800376c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800376e:	4b09      	ldr	r3, [pc, #36]	@ (8003794 <HAL_RCC_ClockConfig+0x1d0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fd2e 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40022000 	.word	0x40022000
 8003788:	40021000 	.word	0x40021000
 800378c:	080059c4 	.word	0x080059c4
 8003790:	20000060 	.word	0x20000060
 8003794:	20000228 	.word	0x20000228

08003798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	2300      	movs	r3, #0
 80037ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037b2:	4b1e      	ldr	r3, [pc, #120]	@ (800382c <HAL_RCC_GetSysClockFreq+0x94>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d002      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x30>
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d003      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x36>
 80037c6:	e027      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037c8:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ca:	613b      	str	r3, [r7, #16]
      break;
 80037cc:	e027      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	0c9b      	lsrs	r3, r3, #18
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	4a17      	ldr	r2, [pc, #92]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037d8:	5cd3      	ldrb	r3, [r2, r3]
 80037da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d010      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037e6:	4b11      	ldr	r3, [pc, #68]	@ (800382c <HAL_RCC_GetSysClockFreq+0x94>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	0c5b      	lsrs	r3, r3, #17
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	4a11      	ldr	r2, [pc, #68]	@ (8003838 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037f2:	5cd3      	ldrb	r3, [r2, r3]
 80037f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x98>)
 80037fa:	fb03 f202 	mul.w	r2, r3, r2
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e004      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a0c      	ldr	r2, [pc, #48]	@ (800383c <HAL_RCC_GetSysClockFreq+0xa4>)
 800380c:	fb02 f303 	mul.w	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	613b      	str	r3, [r7, #16]
      break;
 8003816:	e002      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003818:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x98>)
 800381a:	613b      	str	r3, [r7, #16]
      break;
 800381c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800381e:	693b      	ldr	r3, [r7, #16]
}
 8003820:	4618      	mov	r0, r3
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	007a1200 	.word	0x007a1200
 8003834:	080059dc 	.word	0x080059dc
 8003838:	080059ec 	.word	0x080059ec
 800383c:	003d0900 	.word	0x003d0900

08003840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003844:	4b02      	ldr	r3, [pc, #8]	@ (8003850 <HAL_RCC_GetHCLKFreq+0x10>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	20000060 	.word	0x20000060

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003858:	f7ff fff2 	bl	8003840 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	0adb      	lsrs	r3, r3, #11
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4903      	ldr	r1, [pc, #12]	@ (8003878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	080059d4 	.word	0x080059d4

0800387c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003884:	4b0a      	ldr	r3, [pc, #40]	@ (80038b0 <RCC_Delay+0x34>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0a      	ldr	r2, [pc, #40]	@ (80038b4 <RCC_Delay+0x38>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	0a5b      	lsrs	r3, r3, #9
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003898:	bf00      	nop
  }
  while (Delay --);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e5a      	subs	r2, r3, #1
 800389e:	60fa      	str	r2, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f9      	bne.n	8003898 <RCC_Delay+0x1c>
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	20000060 	.word	0x20000060
 80038b4:	10624dd3 	.word	0x10624dd3

080038b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d07d      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038d4:	2300      	movs	r3, #0
 80038d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10d      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e4:	4b4c      	ldr	r3, [pc, #304]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	61d3      	str	r3, [r2, #28]
 80038f0:	4b49      	ldr	r3, [pc, #292]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fc:	2301      	movs	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	4b46      	ldr	r3, [pc, #280]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d118      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800390c:	4b43      	ldr	r3, [pc, #268]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a42      	ldr	r2, [pc, #264]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003916:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003918:	f7fe fc9e 	bl	8002258 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391e:	e008      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003920:	f7fe fc9a 	bl	8002258 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	@ 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e06d      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003932:	4b3a      	ldr	r3, [pc, #232]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800393e:	4b36      	ldr	r3, [pc, #216]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003946:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d02e      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	429a      	cmp	r2, r3
 800395a:	d027      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800395c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003964:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003966:	4b2e      	ldr	r3, [pc, #184]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800396c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003972:	4a29      	ldr	r2, [pc, #164]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d014      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003982:	f7fe fc69 	bl	8002258 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003988:	e00a      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398a:	f7fe fc65 	bl	8002258 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003998:	4293      	cmp	r3, r2
 800399a:	d901      	bls.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e036      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ee      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4917      	ldr	r1, [pc, #92]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d105      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c4:	4b14      	ldr	r3, [pc, #80]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	4a13      	ldr	r2, [pc, #76]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	490b      	ldr	r1, [pc, #44]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d008      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039fa:	4b07      	ldr	r3, [pc, #28]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	4904      	ldr	r1, [pc, #16]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	42420440 	.word	0x42420440

08003a24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	f200 808a 	bhi.w	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d045      	beq.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d075      	beq.n	8003b46 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003a5a:	e082      	b.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003a5c:	4b46      	ldr	r3, [pc, #280]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a62:	4b45      	ldr	r3, [pc, #276]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d07b      	beq.n	8003b66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	0c9b      	lsrs	r3, r3, #18
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	4a41      	ldr	r2, [pc, #260]	@ (8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003a78:	5cd3      	ldrb	r3, [r2, r3]
 8003a7a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d015      	beq.n	8003ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a86:	4b3c      	ldr	r3, [pc, #240]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	0c5b      	lsrs	r3, r3, #17
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	4a3b      	ldr	r2, [pc, #236]	@ (8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003a92:	5cd3      	ldrb	r3, [r2, r3]
 8003a94:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00d      	beq.n	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003aa0:	4a38      	ldr	r2, [pc, #224]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	fb02 f303 	mul.w	r3, r2, r3
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	e004      	b.n	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4a34      	ldr	r2, [pc, #208]	@ (8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003ab6:	fb02 f303 	mul.w	r3, r2, r3
 8003aba:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003abc:	4b2e      	ldr	r3, [pc, #184]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ac8:	d102      	bne.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	61bb      	str	r3, [r7, #24]
      break;
 8003ace:	e04a      	b.n	8003b66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	61bb      	str	r3, [r7, #24]
      break;
 8003ade:	e042      	b.n	8003b66 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003ae0:	4b25      	ldr	r3, [pc, #148]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af0:	d108      	bne.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003afc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	e01f      	b.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b0e:	d109      	bne.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003b10:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003b1c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	e00f      	b.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b2e:	d11c      	bne.n	8003b6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003b30:	4b11      	ldr	r3, [pc, #68]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d016      	beq.n	8003b6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003b3c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003b40:	61bb      	str	r3, [r7, #24]
      break;
 8003b42:	e012      	b.n	8003b6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003b44:	e011      	b.n	8003b6a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003b46:	f7ff fe85 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	0b9b      	lsrs	r3, r3, #14
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	3301      	adds	r3, #1
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	61bb      	str	r3, [r7, #24]
      break;
 8003b60:	e004      	b.n	8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b62:	bf00      	nop
 8003b64:	e002      	b.n	8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b6a:	bf00      	nop
    }
  }
  return (frequency);
 8003b6c:	69bb      	ldr	r3, [r7, #24]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	080059f0 	.word	0x080059f0
 8003b80:	08005a00 	.word	0x08005a00
 8003b84:	007a1200 	.word	0x007a1200
 8003b88:	003d0900 	.word	0x003d0900
 8003b8c:	aaaaaaab 	.word	0xaaaaaaab

08003b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e041      	b.n	8003c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd fb56 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f000 fa5c 	bl	800408c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d001      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e03a      	b.n	8003cbe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a18      	ldr	r2, [pc, #96]	@ (8003cc8 <HAL_TIM_Base_Start_IT+0x98>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00e      	beq.n	8003c88 <HAL_TIM_Base_Start_IT+0x58>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c72:	d009      	beq.n	8003c88 <HAL_TIM_Base_Start_IT+0x58>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a14      	ldr	r2, [pc, #80]	@ (8003ccc <HAL_TIM_Base_Start_IT+0x9c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d004      	beq.n	8003c88 <HAL_TIM_Base_Start_IT+0x58>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a13      	ldr	r2, [pc, #76]	@ (8003cd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d111      	bne.n	8003cac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b06      	cmp	r3, #6
 8003c98:	d010      	beq.n	8003cbc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0201 	orr.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003caa:	e007      	b.n	8003cbc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	40000800 	.word	0x40000800

08003cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d020      	beq.n	8003d38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01b      	beq.n	8003d38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0202 	mvn.w	r2, #2
 8003d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f998 	bl	8004054 <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f98b 	bl	8004042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f99a 	bl	8004066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d020      	beq.n	8003d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01b      	beq.n	8003d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0204 	mvn.w	r2, #4
 8003d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f972 	bl	8004054 <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f965 	bl	8004042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f974 	bl	8004066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d020      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d01b      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0208 	mvn.w	r2, #8
 8003da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2204      	movs	r2, #4
 8003da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f94c 	bl	8004054 <HAL_TIM_IC_CaptureCallback>
 8003dbc:	e005      	b.n	8003dca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f93f 	bl	8004042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f94e 	bl	8004066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 0310 	and.w	r3, r3, #16
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d020      	beq.n	8003e1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d01b      	beq.n	8003e1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0210 	mvn.w	r2, #16
 8003dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2208      	movs	r2, #8
 8003df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f926 	bl	8004054 <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f919 	bl	8004042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f928 	bl	8004066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00c      	beq.n	8003e40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0201 	mvn.w	r2, #1
 8003e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fc ff50 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00c      	beq.n	8003e64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d007      	beq.n	8003e64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fa7f 	bl	8004362 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00c      	beq.n	8003e88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8f8 	bl	8004078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00c      	beq.n	8003eac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d007      	beq.n	8003eac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0220 	mvn.w	r2, #32
 8003ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fa52 	bl	8004350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIM_ConfigClockSource+0x1c>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e0b4      	b.n	800403a <HAL_TIM_ConfigClockSource+0x186>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f08:	d03e      	beq.n	8003f88 <HAL_TIM_ConfigClockSource+0xd4>
 8003f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f0e:	f200 8087 	bhi.w	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f16:	f000 8086 	beq.w	8004026 <HAL_TIM_ConfigClockSource+0x172>
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1e:	d87f      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f20:	2b70      	cmp	r3, #112	@ 0x70
 8003f22:	d01a      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0xa6>
 8003f24:	2b70      	cmp	r3, #112	@ 0x70
 8003f26:	d87b      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f28:	2b60      	cmp	r3, #96	@ 0x60
 8003f2a:	d050      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x11a>
 8003f2c:	2b60      	cmp	r3, #96	@ 0x60
 8003f2e:	d877      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f30:	2b50      	cmp	r3, #80	@ 0x50
 8003f32:	d03c      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0xfa>
 8003f34:	2b50      	cmp	r3, #80	@ 0x50
 8003f36:	d873      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f38:	2b40      	cmp	r3, #64	@ 0x40
 8003f3a:	d058      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x13a>
 8003f3c:	2b40      	cmp	r3, #64	@ 0x40
 8003f3e:	d86f      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f40:	2b30      	cmp	r3, #48	@ 0x30
 8003f42:	d064      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x15a>
 8003f44:	2b30      	cmp	r3, #48	@ 0x30
 8003f46:	d86b      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d060      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x15a>
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d867      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d05c      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x15a>
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d05a      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x15a>
 8003f58:	e062      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f6a:	f000 f974 	bl	8004256 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	609a      	str	r2, [r3, #8]
      break;
 8003f86:	e04f      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f98:	f000 f95d 	bl	8004256 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003faa:	609a      	str	r2, [r3, #8]
      break;
 8003fac:	e03c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f000 f8d4 	bl	8004168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2150      	movs	r1, #80	@ 0x50
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f92b 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e02c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 f8f2 	bl	80041c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2160      	movs	r1, #96	@ 0x60
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 f91b 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 8003fec:	e01c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f000 f8b4 	bl	8004168 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2140      	movs	r1, #64	@ 0x40
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f90b 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 800400c:	e00c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f000 f902 	bl	8004222 <TIM_ITRx_SetConfig>
      break;
 800401e:	e003      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      break;
 8004024:	e000      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004038:	7bfb      	ldrb	r3, [r7, #15]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
	...

0800408c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a2f      	ldr	r2, [pc, #188]	@ (800415c <TIM_Base_SetConfig+0xd0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00b      	beq.n	80040bc <TIM_Base_SetConfig+0x30>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040aa:	d007      	beq.n	80040bc <TIM_Base_SetConfig+0x30>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004160 <TIM_Base_SetConfig+0xd4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_Base_SetConfig+0x30>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004164 <TIM_Base_SetConfig+0xd8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d108      	bne.n	80040ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a22      	ldr	r2, [pc, #136]	@ (800415c <TIM_Base_SetConfig+0xd0>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00b      	beq.n	80040ee <TIM_Base_SetConfig+0x62>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040dc:	d007      	beq.n	80040ee <TIM_Base_SetConfig+0x62>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004160 <TIM_Base_SetConfig+0xd4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d003      	beq.n	80040ee <TIM_Base_SetConfig+0x62>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004164 <TIM_Base_SetConfig+0xd8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d108      	bne.n	8004100 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a0d      	ldr	r2, [pc, #52]	@ (800415c <TIM_Base_SetConfig+0xd0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d103      	bne.n	8004134 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f023 0201 	bic.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]
  }
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800

08004168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0201 	bic.w	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 030a 	bic.w	r3, r3, #10
 80041a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f023 0210 	bic.w	r2, r3, #16
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	031b      	lsls	r3, r3, #12
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004200:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004222:	b480      	push	{r7}
 8004224:	b085      	sub	sp, #20
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	f043 0307 	orr.w	r3, r3, #7
 8004244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	609a      	str	r2, [r3, #8]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr

08004256 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004256:	b480      	push	{r7}
 8004258:	b087      	sub	sp, #28
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004270:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	021a      	lsls	r2, r3, #8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	431a      	orrs	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4313      	orrs	r3, r2
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	609a      	str	r2, [r3, #8]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e046      	b.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a16      	ldr	r2, [pc, #88]	@ (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f8:	d009      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a12      	ldr	r2, [pc, #72]	@ (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a10      	ldr	r2, [pc, #64]	@ (800434c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10c      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	4313      	orrs	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40000400 	.word	0x40000400
 800434c:	40000800 	.word	0x40000800

08004350 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr

08004362 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr

08004374 <srand>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4b10      	ldr	r3, [pc, #64]	@ (80043b8 <srand+0x44>)
 8004378:	4604      	mov	r4, r0
 800437a:	681d      	ldr	r5, [r3, #0]
 800437c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800437e:	b9b3      	cbnz	r3, 80043ae <srand+0x3a>
 8004380:	2018      	movs	r0, #24
 8004382:	f000 fb79 	bl	8004a78 <malloc>
 8004386:	4602      	mov	r2, r0
 8004388:	6328      	str	r0, [r5, #48]	@ 0x30
 800438a:	b920      	cbnz	r0, 8004396 <srand+0x22>
 800438c:	2146      	movs	r1, #70	@ 0x46
 800438e:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <srand+0x48>)
 8004390:	480b      	ldr	r0, [pc, #44]	@ (80043c0 <srand+0x4c>)
 8004392:	f000 fb0b 	bl	80049ac <__assert_func>
 8004396:	490b      	ldr	r1, [pc, #44]	@ (80043c4 <srand+0x50>)
 8004398:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <srand+0x54>)
 800439a:	e9c0 1300 	strd	r1, r3, [r0]
 800439e:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <srand+0x58>)
 80043a0:	2100      	movs	r1, #0
 80043a2:	6083      	str	r3, [r0, #8]
 80043a4:	230b      	movs	r3, #11
 80043a6:	8183      	strh	r3, [r0, #12]
 80043a8:	2001      	movs	r0, #1
 80043aa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80043ae:	2200      	movs	r2, #0
 80043b0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80043b2:	611c      	str	r4, [r3, #16]
 80043b4:	615a      	str	r2, [r3, #20]
 80043b6:	bd38      	pop	{r3, r4, r5, pc}
 80043b8:	2000023c 	.word	0x2000023c
 80043bc:	08005a02 	.word	0x08005a02
 80043c0:	08005a19 	.word	0x08005a19
 80043c4:	abcd330e 	.word	0xabcd330e
 80043c8:	e66d1234 	.word	0xe66d1234
 80043cc:	0005deec 	.word	0x0005deec

080043d0 <rand>:
 80043d0:	4b16      	ldr	r3, [pc, #88]	@ (800442c <rand+0x5c>)
 80043d2:	b510      	push	{r4, lr}
 80043d4:	681c      	ldr	r4, [r3, #0]
 80043d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80043d8:	b9b3      	cbnz	r3, 8004408 <rand+0x38>
 80043da:	2018      	movs	r0, #24
 80043dc:	f000 fb4c 	bl	8004a78 <malloc>
 80043e0:	4602      	mov	r2, r0
 80043e2:	6320      	str	r0, [r4, #48]	@ 0x30
 80043e4:	b920      	cbnz	r0, 80043f0 <rand+0x20>
 80043e6:	2152      	movs	r1, #82	@ 0x52
 80043e8:	4b11      	ldr	r3, [pc, #68]	@ (8004430 <rand+0x60>)
 80043ea:	4812      	ldr	r0, [pc, #72]	@ (8004434 <rand+0x64>)
 80043ec:	f000 fade 	bl	80049ac <__assert_func>
 80043f0:	4911      	ldr	r1, [pc, #68]	@ (8004438 <rand+0x68>)
 80043f2:	4b12      	ldr	r3, [pc, #72]	@ (800443c <rand+0x6c>)
 80043f4:	e9c0 1300 	strd	r1, r3, [r0]
 80043f8:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <rand+0x70>)
 80043fa:	2100      	movs	r1, #0
 80043fc:	6083      	str	r3, [r0, #8]
 80043fe:	230b      	movs	r3, #11
 8004400:	8183      	strh	r3, [r0, #12]
 8004402:	2001      	movs	r0, #1
 8004404:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004408:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800440a:	480e      	ldr	r0, [pc, #56]	@ (8004444 <rand+0x74>)
 800440c:	690b      	ldr	r3, [r1, #16]
 800440e:	694c      	ldr	r4, [r1, #20]
 8004410:	4358      	muls	r0, r3
 8004412:	4a0d      	ldr	r2, [pc, #52]	@ (8004448 <rand+0x78>)
 8004414:	fb02 0004 	mla	r0, r2, r4, r0
 8004418:	fba3 3202 	umull	r3, r2, r3, r2
 800441c:	3301      	adds	r3, #1
 800441e:	eb40 0002 	adc.w	r0, r0, r2
 8004422:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004426:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800442a:	bd10      	pop	{r4, pc}
 800442c:	2000023c 	.word	0x2000023c
 8004430:	08005a02 	.word	0x08005a02
 8004434:	08005a19 	.word	0x08005a19
 8004438:	abcd330e 	.word	0xabcd330e
 800443c:	e66d1234 	.word	0xe66d1234
 8004440:	0005deec 	.word	0x0005deec
 8004444:	5851f42d 	.word	0x5851f42d
 8004448:	4c957f2d 	.word	0x4c957f2d

0800444c <std>:
 800444c:	2300      	movs	r3, #0
 800444e:	b510      	push	{r4, lr}
 8004450:	4604      	mov	r4, r0
 8004452:	e9c0 3300 	strd	r3, r3, [r0]
 8004456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800445a:	6083      	str	r3, [r0, #8]
 800445c:	8181      	strh	r1, [r0, #12]
 800445e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004460:	81c2      	strh	r2, [r0, #14]
 8004462:	6183      	str	r3, [r0, #24]
 8004464:	4619      	mov	r1, r3
 8004466:	2208      	movs	r2, #8
 8004468:	305c      	adds	r0, #92	@ 0x5c
 800446a:	f000 fa23 	bl	80048b4 <memset>
 800446e:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <std+0x58>)
 8004470:	6224      	str	r4, [r4, #32]
 8004472:	6263      	str	r3, [r4, #36]	@ 0x24
 8004474:	4b0c      	ldr	r3, [pc, #48]	@ (80044a8 <std+0x5c>)
 8004476:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004478:	4b0c      	ldr	r3, [pc, #48]	@ (80044ac <std+0x60>)
 800447a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800447c:	4b0c      	ldr	r3, [pc, #48]	@ (80044b0 <std+0x64>)
 800447e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004480:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <std+0x68>)
 8004482:	429c      	cmp	r4, r3
 8004484:	d006      	beq.n	8004494 <std+0x48>
 8004486:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800448a:	4294      	cmp	r4, r2
 800448c:	d002      	beq.n	8004494 <std+0x48>
 800448e:	33d0      	adds	r3, #208	@ 0xd0
 8004490:	429c      	cmp	r4, r3
 8004492:	d105      	bne.n	80044a0 <std+0x54>
 8004494:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800449c:	f000 ba82 	b.w	80049a4 <__retarget_lock_init_recursive>
 80044a0:	bd10      	pop	{r4, pc}
 80044a2:	bf00      	nop
 80044a4:	08004705 	.word	0x08004705
 80044a8:	08004727 	.word	0x08004727
 80044ac:	0800475f 	.word	0x0800475f
 80044b0:	08004783 	.word	0x08004783
 80044b4:	2000051c 	.word	0x2000051c

080044b8 <stdio_exit_handler>:
 80044b8:	4a02      	ldr	r2, [pc, #8]	@ (80044c4 <stdio_exit_handler+0xc>)
 80044ba:	4903      	ldr	r1, [pc, #12]	@ (80044c8 <stdio_exit_handler+0x10>)
 80044bc:	4803      	ldr	r0, [pc, #12]	@ (80044cc <stdio_exit_handler+0x14>)
 80044be:	f000 b869 	b.w	8004594 <_fwalk_sglue>
 80044c2:	bf00      	nop
 80044c4:	20000230 	.word	0x20000230
 80044c8:	08005535 	.word	0x08005535
 80044cc:	20000240 	.word	0x20000240

080044d0 <cleanup_stdio>:
 80044d0:	6841      	ldr	r1, [r0, #4]
 80044d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <cleanup_stdio+0x34>)
 80044d4:	b510      	push	{r4, lr}
 80044d6:	4299      	cmp	r1, r3
 80044d8:	4604      	mov	r4, r0
 80044da:	d001      	beq.n	80044e0 <cleanup_stdio+0x10>
 80044dc:	f001 f82a 	bl	8005534 <_fflush_r>
 80044e0:	68a1      	ldr	r1, [r4, #8]
 80044e2:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <cleanup_stdio+0x38>)
 80044e4:	4299      	cmp	r1, r3
 80044e6:	d002      	beq.n	80044ee <cleanup_stdio+0x1e>
 80044e8:	4620      	mov	r0, r4
 80044ea:	f001 f823 	bl	8005534 <_fflush_r>
 80044ee:	68e1      	ldr	r1, [r4, #12]
 80044f0:	4b06      	ldr	r3, [pc, #24]	@ (800450c <cleanup_stdio+0x3c>)
 80044f2:	4299      	cmp	r1, r3
 80044f4:	d004      	beq.n	8004500 <cleanup_stdio+0x30>
 80044f6:	4620      	mov	r0, r4
 80044f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044fc:	f001 b81a 	b.w	8005534 <_fflush_r>
 8004500:	bd10      	pop	{r4, pc}
 8004502:	bf00      	nop
 8004504:	2000051c 	.word	0x2000051c
 8004508:	20000584 	.word	0x20000584
 800450c:	200005ec 	.word	0x200005ec

08004510 <global_stdio_init.part.0>:
 8004510:	b510      	push	{r4, lr}
 8004512:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <global_stdio_init.part.0+0x30>)
 8004514:	4c0b      	ldr	r4, [pc, #44]	@ (8004544 <global_stdio_init.part.0+0x34>)
 8004516:	4a0c      	ldr	r2, [pc, #48]	@ (8004548 <global_stdio_init.part.0+0x38>)
 8004518:	4620      	mov	r0, r4
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	2104      	movs	r1, #4
 800451e:	2200      	movs	r2, #0
 8004520:	f7ff ff94 	bl	800444c <std>
 8004524:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004528:	2201      	movs	r2, #1
 800452a:	2109      	movs	r1, #9
 800452c:	f7ff ff8e 	bl	800444c <std>
 8004530:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004534:	2202      	movs	r2, #2
 8004536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800453a:	2112      	movs	r1, #18
 800453c:	f7ff bf86 	b.w	800444c <std>
 8004540:	20000654 	.word	0x20000654
 8004544:	2000051c 	.word	0x2000051c
 8004548:	080044b9 	.word	0x080044b9

0800454c <__sfp_lock_acquire>:
 800454c:	4801      	ldr	r0, [pc, #4]	@ (8004554 <__sfp_lock_acquire+0x8>)
 800454e:	f000 ba2a 	b.w	80049a6 <__retarget_lock_acquire_recursive>
 8004552:	bf00      	nop
 8004554:	2000065d 	.word	0x2000065d

08004558 <__sfp_lock_release>:
 8004558:	4801      	ldr	r0, [pc, #4]	@ (8004560 <__sfp_lock_release+0x8>)
 800455a:	f000 ba25 	b.w	80049a8 <__retarget_lock_release_recursive>
 800455e:	bf00      	nop
 8004560:	2000065d 	.word	0x2000065d

08004564 <__sinit>:
 8004564:	b510      	push	{r4, lr}
 8004566:	4604      	mov	r4, r0
 8004568:	f7ff fff0 	bl	800454c <__sfp_lock_acquire>
 800456c:	6a23      	ldr	r3, [r4, #32]
 800456e:	b11b      	cbz	r3, 8004578 <__sinit+0x14>
 8004570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004574:	f7ff bff0 	b.w	8004558 <__sfp_lock_release>
 8004578:	4b04      	ldr	r3, [pc, #16]	@ (800458c <__sinit+0x28>)
 800457a:	6223      	str	r3, [r4, #32]
 800457c:	4b04      	ldr	r3, [pc, #16]	@ (8004590 <__sinit+0x2c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f5      	bne.n	8004570 <__sinit+0xc>
 8004584:	f7ff ffc4 	bl	8004510 <global_stdio_init.part.0>
 8004588:	e7f2      	b.n	8004570 <__sinit+0xc>
 800458a:	bf00      	nop
 800458c:	080044d1 	.word	0x080044d1
 8004590:	20000654 	.word	0x20000654

08004594 <_fwalk_sglue>:
 8004594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004598:	4607      	mov	r7, r0
 800459a:	4688      	mov	r8, r1
 800459c:	4614      	mov	r4, r2
 800459e:	2600      	movs	r6, #0
 80045a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045a4:	f1b9 0901 	subs.w	r9, r9, #1
 80045a8:	d505      	bpl.n	80045b6 <_fwalk_sglue+0x22>
 80045aa:	6824      	ldr	r4, [r4, #0]
 80045ac:	2c00      	cmp	r4, #0
 80045ae:	d1f7      	bne.n	80045a0 <_fwalk_sglue+0xc>
 80045b0:	4630      	mov	r0, r6
 80045b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045b6:	89ab      	ldrh	r3, [r5, #12]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d907      	bls.n	80045cc <_fwalk_sglue+0x38>
 80045bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045c0:	3301      	adds	r3, #1
 80045c2:	d003      	beq.n	80045cc <_fwalk_sglue+0x38>
 80045c4:	4629      	mov	r1, r5
 80045c6:	4638      	mov	r0, r7
 80045c8:	47c0      	blx	r8
 80045ca:	4306      	orrs	r6, r0
 80045cc:	3568      	adds	r5, #104	@ 0x68
 80045ce:	e7e9      	b.n	80045a4 <_fwalk_sglue+0x10>

080045d0 <iprintf>:
 80045d0:	b40f      	push	{r0, r1, r2, r3}
 80045d2:	b507      	push	{r0, r1, r2, lr}
 80045d4:	4906      	ldr	r1, [pc, #24]	@ (80045f0 <iprintf+0x20>)
 80045d6:	ab04      	add	r3, sp, #16
 80045d8:	6808      	ldr	r0, [r1, #0]
 80045da:	f853 2b04 	ldr.w	r2, [r3], #4
 80045de:	6881      	ldr	r1, [r0, #8]
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	f000 fc7f 	bl	8004ee4 <_vfiprintf_r>
 80045e6:	b003      	add	sp, #12
 80045e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80045ec:	b004      	add	sp, #16
 80045ee:	4770      	bx	lr
 80045f0:	2000023c 	.word	0x2000023c

080045f4 <putchar>:
 80045f4:	4b02      	ldr	r3, [pc, #8]	@ (8004600 <putchar+0xc>)
 80045f6:	4601      	mov	r1, r0
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	6882      	ldr	r2, [r0, #8]
 80045fc:	f001 b835 	b.w	800566a <_putc_r>
 8004600:	2000023c 	.word	0x2000023c

08004604 <_puts_r>:
 8004604:	6a03      	ldr	r3, [r0, #32]
 8004606:	b570      	push	{r4, r5, r6, lr}
 8004608:	4605      	mov	r5, r0
 800460a:	460e      	mov	r6, r1
 800460c:	6884      	ldr	r4, [r0, #8]
 800460e:	b90b      	cbnz	r3, 8004614 <_puts_r+0x10>
 8004610:	f7ff ffa8 	bl	8004564 <__sinit>
 8004614:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004616:	07db      	lsls	r3, r3, #31
 8004618:	d405      	bmi.n	8004626 <_puts_r+0x22>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	0598      	lsls	r0, r3, #22
 800461e:	d402      	bmi.n	8004626 <_puts_r+0x22>
 8004620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004622:	f000 f9c0 	bl	80049a6 <__retarget_lock_acquire_recursive>
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	0719      	lsls	r1, r3, #28
 800462a:	d502      	bpl.n	8004632 <_puts_r+0x2e>
 800462c:	6923      	ldr	r3, [r4, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d135      	bne.n	800469e <_puts_r+0x9a>
 8004632:	4621      	mov	r1, r4
 8004634:	4628      	mov	r0, r5
 8004636:	f000 f8e7 	bl	8004808 <__swsetup_r>
 800463a:	b380      	cbz	r0, 800469e <_puts_r+0x9a>
 800463c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004640:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004642:	07da      	lsls	r2, r3, #31
 8004644:	d405      	bmi.n	8004652 <_puts_r+0x4e>
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	059b      	lsls	r3, r3, #22
 800464a:	d402      	bmi.n	8004652 <_puts_r+0x4e>
 800464c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800464e:	f000 f9ab 	bl	80049a8 <__retarget_lock_release_recursive>
 8004652:	4628      	mov	r0, r5
 8004654:	bd70      	pop	{r4, r5, r6, pc}
 8004656:	2b00      	cmp	r3, #0
 8004658:	da04      	bge.n	8004664 <_puts_r+0x60>
 800465a:	69a2      	ldr	r2, [r4, #24]
 800465c:	429a      	cmp	r2, r3
 800465e:	dc17      	bgt.n	8004690 <_puts_r+0x8c>
 8004660:	290a      	cmp	r1, #10
 8004662:	d015      	beq.n	8004690 <_puts_r+0x8c>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	6022      	str	r2, [r4, #0]
 800466a:	7019      	strb	r1, [r3, #0]
 800466c:	68a3      	ldr	r3, [r4, #8]
 800466e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004672:	3b01      	subs	r3, #1
 8004674:	60a3      	str	r3, [r4, #8]
 8004676:	2900      	cmp	r1, #0
 8004678:	d1ed      	bne.n	8004656 <_puts_r+0x52>
 800467a:	2b00      	cmp	r3, #0
 800467c:	da11      	bge.n	80046a2 <_puts_r+0x9e>
 800467e:	4622      	mov	r2, r4
 8004680:	210a      	movs	r1, #10
 8004682:	4628      	mov	r0, r5
 8004684:	f000 f881 	bl	800478a <__swbuf_r>
 8004688:	3001      	adds	r0, #1
 800468a:	d0d7      	beq.n	800463c <_puts_r+0x38>
 800468c:	250a      	movs	r5, #10
 800468e:	e7d7      	b.n	8004640 <_puts_r+0x3c>
 8004690:	4622      	mov	r2, r4
 8004692:	4628      	mov	r0, r5
 8004694:	f000 f879 	bl	800478a <__swbuf_r>
 8004698:	3001      	adds	r0, #1
 800469a:	d1e7      	bne.n	800466c <_puts_r+0x68>
 800469c:	e7ce      	b.n	800463c <_puts_r+0x38>
 800469e:	3e01      	subs	r6, #1
 80046a0:	e7e4      	b.n	800466c <_puts_r+0x68>
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	6022      	str	r2, [r4, #0]
 80046a8:	220a      	movs	r2, #10
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	e7ee      	b.n	800468c <_puts_r+0x88>
	...

080046b0 <puts>:
 80046b0:	4b02      	ldr	r3, [pc, #8]	@ (80046bc <puts+0xc>)
 80046b2:	4601      	mov	r1, r0
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	f7ff bfa5 	b.w	8004604 <_puts_r>
 80046ba:	bf00      	nop
 80046bc:	2000023c 	.word	0x2000023c

080046c0 <siprintf>:
 80046c0:	b40e      	push	{r1, r2, r3}
 80046c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046c6:	b510      	push	{r4, lr}
 80046c8:	2400      	movs	r4, #0
 80046ca:	b09d      	sub	sp, #116	@ 0x74
 80046cc:	ab1f      	add	r3, sp, #124	@ 0x7c
 80046ce:	9002      	str	r0, [sp, #8]
 80046d0:	9006      	str	r0, [sp, #24]
 80046d2:	9107      	str	r1, [sp, #28]
 80046d4:	9104      	str	r1, [sp, #16]
 80046d6:	4809      	ldr	r0, [pc, #36]	@ (80046fc <siprintf+0x3c>)
 80046d8:	4909      	ldr	r1, [pc, #36]	@ (8004700 <siprintf+0x40>)
 80046da:	f853 2b04 	ldr.w	r2, [r3], #4
 80046de:	9105      	str	r1, [sp, #20]
 80046e0:	6800      	ldr	r0, [r0, #0]
 80046e2:	a902      	add	r1, sp, #8
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80046e8:	f000 fad8 	bl	8004c9c <_svfiprintf_r>
 80046ec:	9b02      	ldr	r3, [sp, #8]
 80046ee:	701c      	strb	r4, [r3, #0]
 80046f0:	b01d      	add	sp, #116	@ 0x74
 80046f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f6:	b003      	add	sp, #12
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	2000023c 	.word	0x2000023c
 8004700:	ffff0208 	.word	0xffff0208

08004704 <__sread>:
 8004704:	b510      	push	{r4, lr}
 8004706:	460c      	mov	r4, r1
 8004708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800470c:	f000 f8fc 	bl	8004908 <_read_r>
 8004710:	2800      	cmp	r0, #0
 8004712:	bfab      	itete	ge
 8004714:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004716:	89a3      	ldrhlt	r3, [r4, #12]
 8004718:	181b      	addge	r3, r3, r0
 800471a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800471e:	bfac      	ite	ge
 8004720:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004722:	81a3      	strhlt	r3, [r4, #12]
 8004724:	bd10      	pop	{r4, pc}

08004726 <__swrite>:
 8004726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472a:	461f      	mov	r7, r3
 800472c:	898b      	ldrh	r3, [r1, #12]
 800472e:	4605      	mov	r5, r0
 8004730:	05db      	lsls	r3, r3, #23
 8004732:	460c      	mov	r4, r1
 8004734:	4616      	mov	r6, r2
 8004736:	d505      	bpl.n	8004744 <__swrite+0x1e>
 8004738:	2302      	movs	r3, #2
 800473a:	2200      	movs	r2, #0
 800473c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004740:	f000 f8d0 	bl	80048e4 <_lseek_r>
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	4632      	mov	r2, r6
 8004748:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	4628      	mov	r0, r5
 8004750:	463b      	mov	r3, r7
 8004752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800475a:	f000 b8e7 	b.w	800492c <_write_r>

0800475e <__sseek>:
 800475e:	b510      	push	{r4, lr}
 8004760:	460c      	mov	r4, r1
 8004762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004766:	f000 f8bd 	bl	80048e4 <_lseek_r>
 800476a:	1c43      	adds	r3, r0, #1
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	bf15      	itete	ne
 8004770:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004772:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004776:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800477a:	81a3      	strheq	r3, [r4, #12]
 800477c:	bf18      	it	ne
 800477e:	81a3      	strhne	r3, [r4, #12]
 8004780:	bd10      	pop	{r4, pc}

08004782 <__sclose>:
 8004782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004786:	f000 b89d 	b.w	80048c4 <_close_r>

0800478a <__swbuf_r>:
 800478a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478c:	460e      	mov	r6, r1
 800478e:	4614      	mov	r4, r2
 8004790:	4605      	mov	r5, r0
 8004792:	b118      	cbz	r0, 800479c <__swbuf_r+0x12>
 8004794:	6a03      	ldr	r3, [r0, #32]
 8004796:	b90b      	cbnz	r3, 800479c <__swbuf_r+0x12>
 8004798:	f7ff fee4 	bl	8004564 <__sinit>
 800479c:	69a3      	ldr	r3, [r4, #24]
 800479e:	60a3      	str	r3, [r4, #8]
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	071a      	lsls	r2, r3, #28
 80047a4:	d501      	bpl.n	80047aa <__swbuf_r+0x20>
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	b943      	cbnz	r3, 80047bc <__swbuf_r+0x32>
 80047aa:	4621      	mov	r1, r4
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 f82b 	bl	8004808 <__swsetup_r>
 80047b2:	b118      	cbz	r0, 80047bc <__swbuf_r+0x32>
 80047b4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80047b8:	4638      	mov	r0, r7
 80047ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	6922      	ldr	r2, [r4, #16]
 80047c0:	b2f6      	uxtb	r6, r6
 80047c2:	1a98      	subs	r0, r3, r2
 80047c4:	6963      	ldr	r3, [r4, #20]
 80047c6:	4637      	mov	r7, r6
 80047c8:	4283      	cmp	r3, r0
 80047ca:	dc05      	bgt.n	80047d8 <__swbuf_r+0x4e>
 80047cc:	4621      	mov	r1, r4
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 feb0 	bl	8005534 <_fflush_r>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d1ed      	bne.n	80047b4 <__swbuf_r+0x2a>
 80047d8:	68a3      	ldr	r3, [r4, #8]
 80047da:	3b01      	subs	r3, #1
 80047dc:	60a3      	str	r3, [r4, #8]
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	6022      	str	r2, [r4, #0]
 80047e4:	701e      	strb	r6, [r3, #0]
 80047e6:	6962      	ldr	r2, [r4, #20]
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d004      	beq.n	80047f8 <__swbuf_r+0x6e>
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	07db      	lsls	r3, r3, #31
 80047f2:	d5e1      	bpl.n	80047b8 <__swbuf_r+0x2e>
 80047f4:	2e0a      	cmp	r6, #10
 80047f6:	d1df      	bne.n	80047b8 <__swbuf_r+0x2e>
 80047f8:	4621      	mov	r1, r4
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 fe9a 	bl	8005534 <_fflush_r>
 8004800:	2800      	cmp	r0, #0
 8004802:	d0d9      	beq.n	80047b8 <__swbuf_r+0x2e>
 8004804:	e7d6      	b.n	80047b4 <__swbuf_r+0x2a>
	...

08004808 <__swsetup_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4b29      	ldr	r3, [pc, #164]	@ (80048b0 <__swsetup_r+0xa8>)
 800480c:	4605      	mov	r5, r0
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	460c      	mov	r4, r1
 8004812:	b118      	cbz	r0, 800481c <__swsetup_r+0x14>
 8004814:	6a03      	ldr	r3, [r0, #32]
 8004816:	b90b      	cbnz	r3, 800481c <__swsetup_r+0x14>
 8004818:	f7ff fea4 	bl	8004564 <__sinit>
 800481c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004820:	0719      	lsls	r1, r3, #28
 8004822:	d422      	bmi.n	800486a <__swsetup_r+0x62>
 8004824:	06da      	lsls	r2, r3, #27
 8004826:	d407      	bmi.n	8004838 <__swsetup_r+0x30>
 8004828:	2209      	movs	r2, #9
 800482a:	602a      	str	r2, [r5, #0]
 800482c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004834:	81a3      	strh	r3, [r4, #12]
 8004836:	e033      	b.n	80048a0 <__swsetup_r+0x98>
 8004838:	0758      	lsls	r0, r3, #29
 800483a:	d512      	bpl.n	8004862 <__swsetup_r+0x5a>
 800483c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800483e:	b141      	cbz	r1, 8004852 <__swsetup_r+0x4a>
 8004840:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004844:	4299      	cmp	r1, r3
 8004846:	d002      	beq.n	800484e <__swsetup_r+0x46>
 8004848:	4628      	mov	r0, r5
 800484a:	f000 f8cd 	bl	80049e8 <_free_r>
 800484e:	2300      	movs	r3, #0
 8004850:	6363      	str	r3, [r4, #52]	@ 0x34
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	2300      	movs	r3, #0
 800485c:	6063      	str	r3, [r4, #4]
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	89a3      	ldrh	r3, [r4, #12]
 8004864:	f043 0308 	orr.w	r3, r3, #8
 8004868:	81a3      	strh	r3, [r4, #12]
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	b94b      	cbnz	r3, 8004882 <__swsetup_r+0x7a>
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004878:	d003      	beq.n	8004882 <__swsetup_r+0x7a>
 800487a:	4621      	mov	r1, r4
 800487c:	4628      	mov	r0, r5
 800487e:	f000 feb8 	bl	80055f2 <__smakebuf_r>
 8004882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004886:	f013 0201 	ands.w	r2, r3, #1
 800488a:	d00a      	beq.n	80048a2 <__swsetup_r+0x9a>
 800488c:	2200      	movs	r2, #0
 800488e:	60a2      	str	r2, [r4, #8]
 8004890:	6962      	ldr	r2, [r4, #20]
 8004892:	4252      	negs	r2, r2
 8004894:	61a2      	str	r2, [r4, #24]
 8004896:	6922      	ldr	r2, [r4, #16]
 8004898:	b942      	cbnz	r2, 80048ac <__swsetup_r+0xa4>
 800489a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800489e:	d1c5      	bne.n	800482c <__swsetup_r+0x24>
 80048a0:	bd38      	pop	{r3, r4, r5, pc}
 80048a2:	0799      	lsls	r1, r3, #30
 80048a4:	bf58      	it	pl
 80048a6:	6962      	ldrpl	r2, [r4, #20]
 80048a8:	60a2      	str	r2, [r4, #8]
 80048aa:	e7f4      	b.n	8004896 <__swsetup_r+0x8e>
 80048ac:	2000      	movs	r0, #0
 80048ae:	e7f7      	b.n	80048a0 <__swsetup_r+0x98>
 80048b0:	2000023c 	.word	0x2000023c

080048b4 <memset>:
 80048b4:	4603      	mov	r3, r0
 80048b6:	4402      	add	r2, r0
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d100      	bne.n	80048be <memset+0xa>
 80048bc:	4770      	bx	lr
 80048be:	f803 1b01 	strb.w	r1, [r3], #1
 80048c2:	e7f9      	b.n	80048b8 <memset+0x4>

080048c4 <_close_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	2300      	movs	r3, #0
 80048c8:	4d05      	ldr	r5, [pc, #20]	@ (80048e0 <_close_r+0x1c>)
 80048ca:	4604      	mov	r4, r0
 80048cc:	4608      	mov	r0, r1
 80048ce:	602b      	str	r3, [r5, #0]
 80048d0:	f7fc fd7f 	bl	80013d2 <_close>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d102      	bne.n	80048de <_close_r+0x1a>
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	b103      	cbz	r3, 80048de <_close_r+0x1a>
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	20000658 	.word	0x20000658

080048e4 <_lseek_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4604      	mov	r4, r0
 80048e8:	4608      	mov	r0, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	2200      	movs	r2, #0
 80048ee:	4d05      	ldr	r5, [pc, #20]	@ (8004904 <_lseek_r+0x20>)
 80048f0:	602a      	str	r2, [r5, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	f7fc fd91 	bl	800141a <_lseek>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d102      	bne.n	8004902 <_lseek_r+0x1e>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	b103      	cbz	r3, 8004902 <_lseek_r+0x1e>
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	20000658 	.word	0x20000658

08004908 <_read_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4604      	mov	r4, r0
 800490c:	4608      	mov	r0, r1
 800490e:	4611      	mov	r1, r2
 8004910:	2200      	movs	r2, #0
 8004912:	4d05      	ldr	r5, [pc, #20]	@ (8004928 <_read_r+0x20>)
 8004914:	602a      	str	r2, [r5, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	f7fc fd22 	bl	8001360 <_read>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_read_r+0x1e>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_read_r+0x1e>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	20000658 	.word	0x20000658

0800492c <_write_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4604      	mov	r4, r0
 8004930:	4608      	mov	r0, r1
 8004932:	4611      	mov	r1, r2
 8004934:	2200      	movs	r2, #0
 8004936:	4d05      	ldr	r5, [pc, #20]	@ (800494c <_write_r+0x20>)
 8004938:	602a      	str	r2, [r5, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f7fc fd2d 	bl	800139a <_write>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d102      	bne.n	800494a <_write_r+0x1e>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	b103      	cbz	r3, 800494a <_write_r+0x1e>
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	20000658 	.word	0x20000658

08004950 <__errno>:
 8004950:	4b01      	ldr	r3, [pc, #4]	@ (8004958 <__errno+0x8>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	2000023c 	.word	0x2000023c

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	2600      	movs	r6, #0
 8004960:	4d0c      	ldr	r5, [pc, #48]	@ (8004994 <__libc_init_array+0x38>)
 8004962:	4c0d      	ldr	r4, [pc, #52]	@ (8004998 <__libc_init_array+0x3c>)
 8004964:	1b64      	subs	r4, r4, r5
 8004966:	10a4      	asrs	r4, r4, #2
 8004968:	42a6      	cmp	r6, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	f000 ff9c 	bl	80058a8 <_init>
 8004970:	2600      	movs	r6, #0
 8004972:	4d0a      	ldr	r5, [pc, #40]	@ (800499c <__libc_init_array+0x40>)
 8004974:	4c0a      	ldr	r4, [pc, #40]	@ (80049a0 <__libc_init_array+0x44>)
 8004976:	1b64      	subs	r4, r4, r5
 8004978:	10a4      	asrs	r4, r4, #2
 800497a:	42a6      	cmp	r6, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f855 3b04 	ldr.w	r3, [r5], #4
 8004984:	4798      	blx	r3
 8004986:	3601      	adds	r6, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f855 3b04 	ldr.w	r3, [r5], #4
 800498e:	4798      	blx	r3
 8004990:	3601      	adds	r6, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	08005ae0 	.word	0x08005ae0
 8004998:	08005ae0 	.word	0x08005ae0
 800499c:	08005ae0 	.word	0x08005ae0
 80049a0:	08005ae4 	.word	0x08005ae4

080049a4 <__retarget_lock_init_recursive>:
 80049a4:	4770      	bx	lr

080049a6 <__retarget_lock_acquire_recursive>:
 80049a6:	4770      	bx	lr

080049a8 <__retarget_lock_release_recursive>:
 80049a8:	4770      	bx	lr
	...

080049ac <__assert_func>:
 80049ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049ae:	4614      	mov	r4, r2
 80049b0:	461a      	mov	r2, r3
 80049b2:	4b09      	ldr	r3, [pc, #36]	@ (80049d8 <__assert_func+0x2c>)
 80049b4:	4605      	mov	r5, r0
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68d8      	ldr	r0, [r3, #12]
 80049ba:	b14c      	cbz	r4, 80049d0 <__assert_func+0x24>
 80049bc:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <__assert_func+0x30>)
 80049be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049c2:	9100      	str	r1, [sp, #0]
 80049c4:	462b      	mov	r3, r5
 80049c6:	4906      	ldr	r1, [pc, #24]	@ (80049e0 <__assert_func+0x34>)
 80049c8:	f000 fddc 	bl	8005584 <fiprintf>
 80049cc:	f000 feea 	bl	80057a4 <abort>
 80049d0:	4b04      	ldr	r3, [pc, #16]	@ (80049e4 <__assert_func+0x38>)
 80049d2:	461c      	mov	r4, r3
 80049d4:	e7f3      	b.n	80049be <__assert_func+0x12>
 80049d6:	bf00      	nop
 80049d8:	2000023c 	.word	0x2000023c
 80049dc:	08005a71 	.word	0x08005a71
 80049e0:	08005a7e 	.word	0x08005a7e
 80049e4:	08005aac 	.word	0x08005aac

080049e8 <_free_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4605      	mov	r5, r0
 80049ec:	2900      	cmp	r1, #0
 80049ee:	d040      	beq.n	8004a72 <_free_r+0x8a>
 80049f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049f4:	1f0c      	subs	r4, r1, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	bfb8      	it	lt
 80049fa:	18e4      	addlt	r4, r4, r3
 80049fc:	f000 f8e6 	bl	8004bcc <__malloc_lock>
 8004a00:	4a1c      	ldr	r2, [pc, #112]	@ (8004a74 <_free_r+0x8c>)
 8004a02:	6813      	ldr	r3, [r2, #0]
 8004a04:	b933      	cbnz	r3, 8004a14 <_free_r+0x2c>
 8004a06:	6063      	str	r3, [r4, #4]
 8004a08:	6014      	str	r4, [r2, #0]
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a10:	f000 b8e2 	b.w	8004bd8 <__malloc_unlock>
 8004a14:	42a3      	cmp	r3, r4
 8004a16:	d908      	bls.n	8004a2a <_free_r+0x42>
 8004a18:	6820      	ldr	r0, [r4, #0]
 8004a1a:	1821      	adds	r1, r4, r0
 8004a1c:	428b      	cmp	r3, r1
 8004a1e:	bf01      	itttt	eq
 8004a20:	6819      	ldreq	r1, [r3, #0]
 8004a22:	685b      	ldreq	r3, [r3, #4]
 8004a24:	1809      	addeq	r1, r1, r0
 8004a26:	6021      	streq	r1, [r4, #0]
 8004a28:	e7ed      	b.n	8004a06 <_free_r+0x1e>
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	b10b      	cbz	r3, 8004a34 <_free_r+0x4c>
 8004a30:	42a3      	cmp	r3, r4
 8004a32:	d9fa      	bls.n	8004a2a <_free_r+0x42>
 8004a34:	6811      	ldr	r1, [r2, #0]
 8004a36:	1850      	adds	r0, r2, r1
 8004a38:	42a0      	cmp	r0, r4
 8004a3a:	d10b      	bne.n	8004a54 <_free_r+0x6c>
 8004a3c:	6820      	ldr	r0, [r4, #0]
 8004a3e:	4401      	add	r1, r0
 8004a40:	1850      	adds	r0, r2, r1
 8004a42:	4283      	cmp	r3, r0
 8004a44:	6011      	str	r1, [r2, #0]
 8004a46:	d1e0      	bne.n	8004a0a <_free_r+0x22>
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4408      	add	r0, r1
 8004a4e:	6010      	str	r0, [r2, #0]
 8004a50:	6053      	str	r3, [r2, #4]
 8004a52:	e7da      	b.n	8004a0a <_free_r+0x22>
 8004a54:	d902      	bls.n	8004a5c <_free_r+0x74>
 8004a56:	230c      	movs	r3, #12
 8004a58:	602b      	str	r3, [r5, #0]
 8004a5a:	e7d6      	b.n	8004a0a <_free_r+0x22>
 8004a5c:	6820      	ldr	r0, [r4, #0]
 8004a5e:	1821      	adds	r1, r4, r0
 8004a60:	428b      	cmp	r3, r1
 8004a62:	bf01      	itttt	eq
 8004a64:	6819      	ldreq	r1, [r3, #0]
 8004a66:	685b      	ldreq	r3, [r3, #4]
 8004a68:	1809      	addeq	r1, r1, r0
 8004a6a:	6021      	streq	r1, [r4, #0]
 8004a6c:	6063      	str	r3, [r4, #4]
 8004a6e:	6054      	str	r4, [r2, #4]
 8004a70:	e7cb      	b.n	8004a0a <_free_r+0x22>
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	20000664 	.word	0x20000664

08004a78 <malloc>:
 8004a78:	4b02      	ldr	r3, [pc, #8]	@ (8004a84 <malloc+0xc>)
 8004a7a:	4601      	mov	r1, r0
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	f000 b825 	b.w	8004acc <_malloc_r>
 8004a82:	bf00      	nop
 8004a84:	2000023c 	.word	0x2000023c

08004a88 <sbrk_aligned>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ac8 <sbrk_aligned+0x40>)
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	6831      	ldr	r1, [r6, #0]
 8004a90:	4605      	mov	r5, r0
 8004a92:	b911      	cbnz	r1, 8004a9a <sbrk_aligned+0x12>
 8004a94:	f000 fe5a 	bl	800574c <_sbrk_r>
 8004a98:	6030      	str	r0, [r6, #0]
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f000 fe55 	bl	800574c <_sbrk_r>
 8004aa2:	1c43      	adds	r3, r0, #1
 8004aa4:	d103      	bne.n	8004aae <sbrk_aligned+0x26>
 8004aa6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004aaa:	4620      	mov	r0, r4
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
 8004aae:	1cc4      	adds	r4, r0, #3
 8004ab0:	f024 0403 	bic.w	r4, r4, #3
 8004ab4:	42a0      	cmp	r0, r4
 8004ab6:	d0f8      	beq.n	8004aaa <sbrk_aligned+0x22>
 8004ab8:	1a21      	subs	r1, r4, r0
 8004aba:	4628      	mov	r0, r5
 8004abc:	f000 fe46 	bl	800574c <_sbrk_r>
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d1f2      	bne.n	8004aaa <sbrk_aligned+0x22>
 8004ac4:	e7ef      	b.n	8004aa6 <sbrk_aligned+0x1e>
 8004ac6:	bf00      	nop
 8004ac8:	20000660 	.word	0x20000660

08004acc <_malloc_r>:
 8004acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ad0:	1ccd      	adds	r5, r1, #3
 8004ad2:	f025 0503 	bic.w	r5, r5, #3
 8004ad6:	3508      	adds	r5, #8
 8004ad8:	2d0c      	cmp	r5, #12
 8004ada:	bf38      	it	cc
 8004adc:	250c      	movcc	r5, #12
 8004ade:	2d00      	cmp	r5, #0
 8004ae0:	4606      	mov	r6, r0
 8004ae2:	db01      	blt.n	8004ae8 <_malloc_r+0x1c>
 8004ae4:	42a9      	cmp	r1, r5
 8004ae6:	d904      	bls.n	8004af2 <_malloc_r+0x26>
 8004ae8:	230c      	movs	r3, #12
 8004aea:	6033      	str	r3, [r6, #0]
 8004aec:	2000      	movs	r0, #0
 8004aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004af2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bc8 <_malloc_r+0xfc>
 8004af6:	f000 f869 	bl	8004bcc <__malloc_lock>
 8004afa:	f8d8 3000 	ldr.w	r3, [r8]
 8004afe:	461c      	mov	r4, r3
 8004b00:	bb44      	cbnz	r4, 8004b54 <_malloc_r+0x88>
 8004b02:	4629      	mov	r1, r5
 8004b04:	4630      	mov	r0, r6
 8004b06:	f7ff ffbf 	bl	8004a88 <sbrk_aligned>
 8004b0a:	1c43      	adds	r3, r0, #1
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	d158      	bne.n	8004bc2 <_malloc_r+0xf6>
 8004b10:	f8d8 4000 	ldr.w	r4, [r8]
 8004b14:	4627      	mov	r7, r4
 8004b16:	2f00      	cmp	r7, #0
 8004b18:	d143      	bne.n	8004ba2 <_malloc_r+0xd6>
 8004b1a:	2c00      	cmp	r4, #0
 8004b1c:	d04b      	beq.n	8004bb6 <_malloc_r+0xea>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	4639      	mov	r1, r7
 8004b22:	4630      	mov	r0, r6
 8004b24:	eb04 0903 	add.w	r9, r4, r3
 8004b28:	f000 fe10 	bl	800574c <_sbrk_r>
 8004b2c:	4581      	cmp	r9, r0
 8004b2e:	d142      	bne.n	8004bb6 <_malloc_r+0xea>
 8004b30:	6821      	ldr	r1, [r4, #0]
 8004b32:	4630      	mov	r0, r6
 8004b34:	1a6d      	subs	r5, r5, r1
 8004b36:	4629      	mov	r1, r5
 8004b38:	f7ff ffa6 	bl	8004a88 <sbrk_aligned>
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d03a      	beq.n	8004bb6 <_malloc_r+0xea>
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	442b      	add	r3, r5
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	f8d8 3000 	ldr.w	r3, [r8]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	bb62      	cbnz	r2, 8004ba8 <_malloc_r+0xdc>
 8004b4e:	f8c8 7000 	str.w	r7, [r8]
 8004b52:	e00f      	b.n	8004b74 <_malloc_r+0xa8>
 8004b54:	6822      	ldr	r2, [r4, #0]
 8004b56:	1b52      	subs	r2, r2, r5
 8004b58:	d420      	bmi.n	8004b9c <_malloc_r+0xd0>
 8004b5a:	2a0b      	cmp	r2, #11
 8004b5c:	d917      	bls.n	8004b8e <_malloc_r+0xc2>
 8004b5e:	1961      	adds	r1, r4, r5
 8004b60:	42a3      	cmp	r3, r4
 8004b62:	6025      	str	r5, [r4, #0]
 8004b64:	bf18      	it	ne
 8004b66:	6059      	strne	r1, [r3, #4]
 8004b68:	6863      	ldr	r3, [r4, #4]
 8004b6a:	bf08      	it	eq
 8004b6c:	f8c8 1000 	streq.w	r1, [r8]
 8004b70:	5162      	str	r2, [r4, r5]
 8004b72:	604b      	str	r3, [r1, #4]
 8004b74:	4630      	mov	r0, r6
 8004b76:	f000 f82f 	bl	8004bd8 <__malloc_unlock>
 8004b7a:	f104 000b 	add.w	r0, r4, #11
 8004b7e:	1d23      	adds	r3, r4, #4
 8004b80:	f020 0007 	bic.w	r0, r0, #7
 8004b84:	1ac2      	subs	r2, r0, r3
 8004b86:	bf1c      	itt	ne
 8004b88:	1a1b      	subne	r3, r3, r0
 8004b8a:	50a3      	strne	r3, [r4, r2]
 8004b8c:	e7af      	b.n	8004aee <_malloc_r+0x22>
 8004b8e:	6862      	ldr	r2, [r4, #4]
 8004b90:	42a3      	cmp	r3, r4
 8004b92:	bf0c      	ite	eq
 8004b94:	f8c8 2000 	streq.w	r2, [r8]
 8004b98:	605a      	strne	r2, [r3, #4]
 8004b9a:	e7eb      	b.n	8004b74 <_malloc_r+0xa8>
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	6864      	ldr	r4, [r4, #4]
 8004ba0:	e7ae      	b.n	8004b00 <_malloc_r+0x34>
 8004ba2:	463c      	mov	r4, r7
 8004ba4:	687f      	ldr	r7, [r7, #4]
 8004ba6:	e7b6      	b.n	8004b16 <_malloc_r+0x4a>
 8004ba8:	461a      	mov	r2, r3
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	d1fb      	bne.n	8004ba8 <_malloc_r+0xdc>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6053      	str	r3, [r2, #4]
 8004bb4:	e7de      	b.n	8004b74 <_malloc_r+0xa8>
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	4630      	mov	r0, r6
 8004bba:	6033      	str	r3, [r6, #0]
 8004bbc:	f000 f80c 	bl	8004bd8 <__malloc_unlock>
 8004bc0:	e794      	b.n	8004aec <_malloc_r+0x20>
 8004bc2:	6005      	str	r5, [r0, #0]
 8004bc4:	e7d6      	b.n	8004b74 <_malloc_r+0xa8>
 8004bc6:	bf00      	nop
 8004bc8:	20000664 	.word	0x20000664

08004bcc <__malloc_lock>:
 8004bcc:	4801      	ldr	r0, [pc, #4]	@ (8004bd4 <__malloc_lock+0x8>)
 8004bce:	f7ff beea 	b.w	80049a6 <__retarget_lock_acquire_recursive>
 8004bd2:	bf00      	nop
 8004bd4:	2000065c 	.word	0x2000065c

08004bd8 <__malloc_unlock>:
 8004bd8:	4801      	ldr	r0, [pc, #4]	@ (8004be0 <__malloc_unlock+0x8>)
 8004bda:	f7ff bee5 	b.w	80049a8 <__retarget_lock_release_recursive>
 8004bde:	bf00      	nop
 8004be0:	2000065c 	.word	0x2000065c

08004be4 <__ssputs_r>:
 8004be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be8:	461f      	mov	r7, r3
 8004bea:	688e      	ldr	r6, [r1, #8]
 8004bec:	4682      	mov	sl, r0
 8004bee:	42be      	cmp	r6, r7
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	4690      	mov	r8, r2
 8004bf4:	680b      	ldr	r3, [r1, #0]
 8004bf6:	d82d      	bhi.n	8004c54 <__ssputs_r+0x70>
 8004bf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c00:	d026      	beq.n	8004c50 <__ssputs_r+0x6c>
 8004c02:	6965      	ldr	r5, [r4, #20]
 8004c04:	6909      	ldr	r1, [r1, #16]
 8004c06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c0a:	eba3 0901 	sub.w	r9, r3, r1
 8004c0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c12:	1c7b      	adds	r3, r7, #1
 8004c14:	444b      	add	r3, r9
 8004c16:	106d      	asrs	r5, r5, #1
 8004c18:	429d      	cmp	r5, r3
 8004c1a:	bf38      	it	cc
 8004c1c:	461d      	movcc	r5, r3
 8004c1e:	0553      	lsls	r3, r2, #21
 8004c20:	d527      	bpl.n	8004c72 <__ssputs_r+0x8e>
 8004c22:	4629      	mov	r1, r5
 8004c24:	f7ff ff52 	bl	8004acc <_malloc_r>
 8004c28:	4606      	mov	r6, r0
 8004c2a:	b360      	cbz	r0, 8004c86 <__ssputs_r+0xa2>
 8004c2c:	464a      	mov	r2, r9
 8004c2e:	6921      	ldr	r1, [r4, #16]
 8004c30:	f000 fdaa 	bl	8005788 <memcpy>
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c3e:	81a3      	strh	r3, [r4, #12]
 8004c40:	6126      	str	r6, [r4, #16]
 8004c42:	444e      	add	r6, r9
 8004c44:	6026      	str	r6, [r4, #0]
 8004c46:	463e      	mov	r6, r7
 8004c48:	6165      	str	r5, [r4, #20]
 8004c4a:	eba5 0509 	sub.w	r5, r5, r9
 8004c4e:	60a5      	str	r5, [r4, #8]
 8004c50:	42be      	cmp	r6, r7
 8004c52:	d900      	bls.n	8004c56 <__ssputs_r+0x72>
 8004c54:	463e      	mov	r6, r7
 8004c56:	4632      	mov	r2, r6
 8004c58:	4641      	mov	r1, r8
 8004c5a:	6820      	ldr	r0, [r4, #0]
 8004c5c:	f000 fd39 	bl	80056d2 <memmove>
 8004c60:	2000      	movs	r0, #0
 8004c62:	68a3      	ldr	r3, [r4, #8]
 8004c64:	1b9b      	subs	r3, r3, r6
 8004c66:	60a3      	str	r3, [r4, #8]
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	4433      	add	r3, r6
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c72:	462a      	mov	r2, r5
 8004c74:	f000 fd9d 	bl	80057b2 <_realloc_r>
 8004c78:	4606      	mov	r6, r0
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d1e0      	bne.n	8004c40 <__ssputs_r+0x5c>
 8004c7e:	4650      	mov	r0, sl
 8004c80:	6921      	ldr	r1, [r4, #16]
 8004c82:	f7ff feb1 	bl	80049e8 <_free_r>
 8004c86:	230c      	movs	r3, #12
 8004c88:	f8ca 3000 	str.w	r3, [sl]
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	e7e9      	b.n	8004c6e <__ssputs_r+0x8a>
	...

08004c9c <_svfiprintf_r>:
 8004c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca0:	4698      	mov	r8, r3
 8004ca2:	898b      	ldrh	r3, [r1, #12]
 8004ca4:	4607      	mov	r7, r0
 8004ca6:	061b      	lsls	r3, r3, #24
 8004ca8:	460d      	mov	r5, r1
 8004caa:	4614      	mov	r4, r2
 8004cac:	b09d      	sub	sp, #116	@ 0x74
 8004cae:	d510      	bpl.n	8004cd2 <_svfiprintf_r+0x36>
 8004cb0:	690b      	ldr	r3, [r1, #16]
 8004cb2:	b973      	cbnz	r3, 8004cd2 <_svfiprintf_r+0x36>
 8004cb4:	2140      	movs	r1, #64	@ 0x40
 8004cb6:	f7ff ff09 	bl	8004acc <_malloc_r>
 8004cba:	6028      	str	r0, [r5, #0]
 8004cbc:	6128      	str	r0, [r5, #16]
 8004cbe:	b930      	cbnz	r0, 8004cce <_svfiprintf_r+0x32>
 8004cc0:	230c      	movs	r3, #12
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cc8:	b01d      	add	sp, #116	@ 0x74
 8004cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cce:	2340      	movs	r3, #64	@ 0x40
 8004cd0:	616b      	str	r3, [r5, #20]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cdc:	2330      	movs	r3, #48	@ 0x30
 8004cde:	f04f 0901 	mov.w	r9, #1
 8004ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ce6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004e80 <_svfiprintf_r+0x1e4>
 8004cea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cee:	4623      	mov	r3, r4
 8004cf0:	469a      	mov	sl, r3
 8004cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cf6:	b10a      	cbz	r2, 8004cfc <_svfiprintf_r+0x60>
 8004cf8:	2a25      	cmp	r2, #37	@ 0x25
 8004cfa:	d1f9      	bne.n	8004cf0 <_svfiprintf_r+0x54>
 8004cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8004d00:	d00b      	beq.n	8004d1a <_svfiprintf_r+0x7e>
 8004d02:	465b      	mov	r3, fp
 8004d04:	4622      	mov	r2, r4
 8004d06:	4629      	mov	r1, r5
 8004d08:	4638      	mov	r0, r7
 8004d0a:	f7ff ff6b 	bl	8004be4 <__ssputs_r>
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f000 80a7 	beq.w	8004e62 <_svfiprintf_r+0x1c6>
 8004d14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d16:	445a      	add	r2, fp
 8004d18:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 809f 	beq.w	8004e62 <_svfiprintf_r+0x1c6>
 8004d24:	2300      	movs	r3, #0
 8004d26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d2e:	f10a 0a01 	add.w	sl, sl, #1
 8004d32:	9304      	str	r3, [sp, #16]
 8004d34:	9307      	str	r3, [sp, #28]
 8004d36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d3c:	4654      	mov	r4, sl
 8004d3e:	2205      	movs	r2, #5
 8004d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d44:	484e      	ldr	r0, [pc, #312]	@ (8004e80 <_svfiprintf_r+0x1e4>)
 8004d46:	f000 fd11 	bl	800576c <memchr>
 8004d4a:	9a04      	ldr	r2, [sp, #16]
 8004d4c:	b9d8      	cbnz	r0, 8004d86 <_svfiprintf_r+0xea>
 8004d4e:	06d0      	lsls	r0, r2, #27
 8004d50:	bf44      	itt	mi
 8004d52:	2320      	movmi	r3, #32
 8004d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d58:	0711      	lsls	r1, r2, #28
 8004d5a:	bf44      	itt	mi
 8004d5c:	232b      	movmi	r3, #43	@ 0x2b
 8004d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d62:	f89a 3000 	ldrb.w	r3, [sl]
 8004d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d68:	d015      	beq.n	8004d96 <_svfiprintf_r+0xfa>
 8004d6a:	4654      	mov	r4, sl
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	f04f 0c0a 	mov.w	ip, #10
 8004d72:	9a07      	ldr	r2, [sp, #28]
 8004d74:	4621      	mov	r1, r4
 8004d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d7a:	3b30      	subs	r3, #48	@ 0x30
 8004d7c:	2b09      	cmp	r3, #9
 8004d7e:	d94b      	bls.n	8004e18 <_svfiprintf_r+0x17c>
 8004d80:	b1b0      	cbz	r0, 8004db0 <_svfiprintf_r+0x114>
 8004d82:	9207      	str	r2, [sp, #28]
 8004d84:	e014      	b.n	8004db0 <_svfiprintf_r+0x114>
 8004d86:	eba0 0308 	sub.w	r3, r0, r8
 8004d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	46a2      	mov	sl, r4
 8004d92:	9304      	str	r3, [sp, #16]
 8004d94:	e7d2      	b.n	8004d3c <_svfiprintf_r+0xa0>
 8004d96:	9b03      	ldr	r3, [sp, #12]
 8004d98:	1d19      	adds	r1, r3, #4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	9103      	str	r1, [sp, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bfbb      	ittet	lt
 8004da2:	425b      	neglt	r3, r3
 8004da4:	f042 0202 	orrlt.w	r2, r2, #2
 8004da8:	9307      	strge	r3, [sp, #28]
 8004daa:	9307      	strlt	r3, [sp, #28]
 8004dac:	bfb8      	it	lt
 8004dae:	9204      	strlt	r2, [sp, #16]
 8004db0:	7823      	ldrb	r3, [r4, #0]
 8004db2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004db4:	d10a      	bne.n	8004dcc <_svfiprintf_r+0x130>
 8004db6:	7863      	ldrb	r3, [r4, #1]
 8004db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dba:	d132      	bne.n	8004e22 <_svfiprintf_r+0x186>
 8004dbc:	9b03      	ldr	r3, [sp, #12]
 8004dbe:	3402      	adds	r4, #2
 8004dc0:	1d1a      	adds	r2, r3, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	9203      	str	r2, [sp, #12]
 8004dc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004dca:	9305      	str	r3, [sp, #20]
 8004dcc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004e84 <_svfiprintf_r+0x1e8>
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	4650      	mov	r0, sl
 8004dd4:	7821      	ldrb	r1, [r4, #0]
 8004dd6:	f000 fcc9 	bl	800576c <memchr>
 8004dda:	b138      	cbz	r0, 8004dec <_svfiprintf_r+0x150>
 8004ddc:	2240      	movs	r2, #64	@ 0x40
 8004dde:	9b04      	ldr	r3, [sp, #16]
 8004de0:	eba0 000a 	sub.w	r0, r0, sl
 8004de4:	4082      	lsls	r2, r0
 8004de6:	4313      	orrs	r3, r2
 8004de8:	3401      	adds	r4, #1
 8004dea:	9304      	str	r3, [sp, #16]
 8004dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df0:	2206      	movs	r2, #6
 8004df2:	4825      	ldr	r0, [pc, #148]	@ (8004e88 <_svfiprintf_r+0x1ec>)
 8004df4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004df8:	f000 fcb8 	bl	800576c <memchr>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d036      	beq.n	8004e6e <_svfiprintf_r+0x1d2>
 8004e00:	4b22      	ldr	r3, [pc, #136]	@ (8004e8c <_svfiprintf_r+0x1f0>)
 8004e02:	bb1b      	cbnz	r3, 8004e4c <_svfiprintf_r+0x1b0>
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	3307      	adds	r3, #7
 8004e08:	f023 0307 	bic.w	r3, r3, #7
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	9303      	str	r3, [sp, #12]
 8004e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e12:	4433      	add	r3, r6
 8004e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e16:	e76a      	b.n	8004cee <_svfiprintf_r+0x52>
 8004e18:	460c      	mov	r4, r1
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e20:	e7a8      	b.n	8004d74 <_svfiprintf_r+0xd8>
 8004e22:	2300      	movs	r3, #0
 8004e24:	f04f 0c0a 	mov.w	ip, #10
 8004e28:	4619      	mov	r1, r3
 8004e2a:	3401      	adds	r4, #1
 8004e2c:	9305      	str	r3, [sp, #20]
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e34:	3a30      	subs	r2, #48	@ 0x30
 8004e36:	2a09      	cmp	r2, #9
 8004e38:	d903      	bls.n	8004e42 <_svfiprintf_r+0x1a6>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0c6      	beq.n	8004dcc <_svfiprintf_r+0x130>
 8004e3e:	9105      	str	r1, [sp, #20]
 8004e40:	e7c4      	b.n	8004dcc <_svfiprintf_r+0x130>
 8004e42:	4604      	mov	r4, r0
 8004e44:	2301      	movs	r3, #1
 8004e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e4a:	e7f0      	b.n	8004e2e <_svfiprintf_r+0x192>
 8004e4c:	ab03      	add	r3, sp, #12
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	462a      	mov	r2, r5
 8004e52:	4638      	mov	r0, r7
 8004e54:	4b0e      	ldr	r3, [pc, #56]	@ (8004e90 <_svfiprintf_r+0x1f4>)
 8004e56:	a904      	add	r1, sp, #16
 8004e58:	f3af 8000 	nop.w
 8004e5c:	1c42      	adds	r2, r0, #1
 8004e5e:	4606      	mov	r6, r0
 8004e60:	d1d6      	bne.n	8004e10 <_svfiprintf_r+0x174>
 8004e62:	89ab      	ldrh	r3, [r5, #12]
 8004e64:	065b      	lsls	r3, r3, #25
 8004e66:	f53f af2d 	bmi.w	8004cc4 <_svfiprintf_r+0x28>
 8004e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e6c:	e72c      	b.n	8004cc8 <_svfiprintf_r+0x2c>
 8004e6e:	ab03      	add	r3, sp, #12
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	462a      	mov	r2, r5
 8004e74:	4638      	mov	r0, r7
 8004e76:	4b06      	ldr	r3, [pc, #24]	@ (8004e90 <_svfiprintf_r+0x1f4>)
 8004e78:	a904      	add	r1, sp, #16
 8004e7a:	f000 f9bd 	bl	80051f8 <_printf_i>
 8004e7e:	e7ed      	b.n	8004e5c <_svfiprintf_r+0x1c0>
 8004e80:	08005aad 	.word	0x08005aad
 8004e84:	08005ab3 	.word	0x08005ab3
 8004e88:	08005ab7 	.word	0x08005ab7
 8004e8c:	00000000 	.word	0x00000000
 8004e90:	08004be5 	.word	0x08004be5

08004e94 <__sfputc_r>:
 8004e94:	6893      	ldr	r3, [r2, #8]
 8004e96:	b410      	push	{r4}
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	6093      	str	r3, [r2, #8]
 8004e9e:	da07      	bge.n	8004eb0 <__sfputc_r+0x1c>
 8004ea0:	6994      	ldr	r4, [r2, #24]
 8004ea2:	42a3      	cmp	r3, r4
 8004ea4:	db01      	blt.n	8004eaa <__sfputc_r+0x16>
 8004ea6:	290a      	cmp	r1, #10
 8004ea8:	d102      	bne.n	8004eb0 <__sfputc_r+0x1c>
 8004eaa:	bc10      	pop	{r4}
 8004eac:	f7ff bc6d 	b.w	800478a <__swbuf_r>
 8004eb0:	6813      	ldr	r3, [r2, #0]
 8004eb2:	1c58      	adds	r0, r3, #1
 8004eb4:	6010      	str	r0, [r2, #0]
 8004eb6:	7019      	strb	r1, [r3, #0]
 8004eb8:	4608      	mov	r0, r1
 8004eba:	bc10      	pop	{r4}
 8004ebc:	4770      	bx	lr

08004ebe <__sfputs_r>:
 8004ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec0:	4606      	mov	r6, r0
 8004ec2:	460f      	mov	r7, r1
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	18d5      	adds	r5, r2, r3
 8004ec8:	42ac      	cmp	r4, r5
 8004eca:	d101      	bne.n	8004ed0 <__sfputs_r+0x12>
 8004ecc:	2000      	movs	r0, #0
 8004ece:	e007      	b.n	8004ee0 <__sfputs_r+0x22>
 8004ed0:	463a      	mov	r2, r7
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed8:	f7ff ffdc 	bl	8004e94 <__sfputc_r>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d1f3      	bne.n	8004ec8 <__sfputs_r+0xa>
 8004ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ee4 <_vfiprintf_r>:
 8004ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee8:	460d      	mov	r5, r1
 8004eea:	4614      	mov	r4, r2
 8004eec:	4698      	mov	r8, r3
 8004eee:	4606      	mov	r6, r0
 8004ef0:	b09d      	sub	sp, #116	@ 0x74
 8004ef2:	b118      	cbz	r0, 8004efc <_vfiprintf_r+0x18>
 8004ef4:	6a03      	ldr	r3, [r0, #32]
 8004ef6:	b90b      	cbnz	r3, 8004efc <_vfiprintf_r+0x18>
 8004ef8:	f7ff fb34 	bl	8004564 <__sinit>
 8004efc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004efe:	07d9      	lsls	r1, r3, #31
 8004f00:	d405      	bmi.n	8004f0e <_vfiprintf_r+0x2a>
 8004f02:	89ab      	ldrh	r3, [r5, #12]
 8004f04:	059a      	lsls	r2, r3, #22
 8004f06:	d402      	bmi.n	8004f0e <_vfiprintf_r+0x2a>
 8004f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f0a:	f7ff fd4c 	bl	80049a6 <__retarget_lock_acquire_recursive>
 8004f0e:	89ab      	ldrh	r3, [r5, #12]
 8004f10:	071b      	lsls	r3, r3, #28
 8004f12:	d501      	bpl.n	8004f18 <_vfiprintf_r+0x34>
 8004f14:	692b      	ldr	r3, [r5, #16]
 8004f16:	b99b      	cbnz	r3, 8004f40 <_vfiprintf_r+0x5c>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7ff fc74 	bl	8004808 <__swsetup_r>
 8004f20:	b170      	cbz	r0, 8004f40 <_vfiprintf_r+0x5c>
 8004f22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f24:	07dc      	lsls	r4, r3, #31
 8004f26:	d504      	bpl.n	8004f32 <_vfiprintf_r+0x4e>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f2c:	b01d      	add	sp, #116	@ 0x74
 8004f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	0598      	lsls	r0, r3, #22
 8004f36:	d4f7      	bmi.n	8004f28 <_vfiprintf_r+0x44>
 8004f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f3a:	f7ff fd35 	bl	80049a8 <__retarget_lock_release_recursive>
 8004f3e:	e7f3      	b.n	8004f28 <_vfiprintf_r+0x44>
 8004f40:	2300      	movs	r3, #0
 8004f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f44:	2320      	movs	r3, #32
 8004f46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f4a:	2330      	movs	r3, #48	@ 0x30
 8004f4c:	f04f 0901 	mov.w	r9, #1
 8004f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f54:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005100 <_vfiprintf_r+0x21c>
 8004f58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f5c:	4623      	mov	r3, r4
 8004f5e:	469a      	mov	sl, r3
 8004f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f64:	b10a      	cbz	r2, 8004f6a <_vfiprintf_r+0x86>
 8004f66:	2a25      	cmp	r2, #37	@ 0x25
 8004f68:	d1f9      	bne.n	8004f5e <_vfiprintf_r+0x7a>
 8004f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8004f6e:	d00b      	beq.n	8004f88 <_vfiprintf_r+0xa4>
 8004f70:	465b      	mov	r3, fp
 8004f72:	4622      	mov	r2, r4
 8004f74:	4629      	mov	r1, r5
 8004f76:	4630      	mov	r0, r6
 8004f78:	f7ff ffa1 	bl	8004ebe <__sfputs_r>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	f000 80a7 	beq.w	80050d0 <_vfiprintf_r+0x1ec>
 8004f82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f84:	445a      	add	r2, fp
 8004f86:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f88:	f89a 3000 	ldrb.w	r3, [sl]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 809f 	beq.w	80050d0 <_vfiprintf_r+0x1ec>
 8004f92:	2300      	movs	r3, #0
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f9c:	f10a 0a01 	add.w	sl, sl, #1
 8004fa0:	9304      	str	r3, [sp, #16]
 8004fa2:	9307      	str	r3, [sp, #28]
 8004fa4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fa8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004faa:	4654      	mov	r4, sl
 8004fac:	2205      	movs	r2, #5
 8004fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fb2:	4853      	ldr	r0, [pc, #332]	@ (8005100 <_vfiprintf_r+0x21c>)
 8004fb4:	f000 fbda 	bl	800576c <memchr>
 8004fb8:	9a04      	ldr	r2, [sp, #16]
 8004fba:	b9d8      	cbnz	r0, 8004ff4 <_vfiprintf_r+0x110>
 8004fbc:	06d1      	lsls	r1, r2, #27
 8004fbe:	bf44      	itt	mi
 8004fc0:	2320      	movmi	r3, #32
 8004fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fc6:	0713      	lsls	r3, r2, #28
 8004fc8:	bf44      	itt	mi
 8004fca:	232b      	movmi	r3, #43	@ 0x2b
 8004fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fd6:	d015      	beq.n	8005004 <_vfiprintf_r+0x120>
 8004fd8:	4654      	mov	r4, sl
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f04f 0c0a 	mov.w	ip, #10
 8004fe0:	9a07      	ldr	r2, [sp, #28]
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fe8:	3b30      	subs	r3, #48	@ 0x30
 8004fea:	2b09      	cmp	r3, #9
 8004fec:	d94b      	bls.n	8005086 <_vfiprintf_r+0x1a2>
 8004fee:	b1b0      	cbz	r0, 800501e <_vfiprintf_r+0x13a>
 8004ff0:	9207      	str	r2, [sp, #28]
 8004ff2:	e014      	b.n	800501e <_vfiprintf_r+0x13a>
 8004ff4:	eba0 0308 	sub.w	r3, r0, r8
 8004ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	46a2      	mov	sl, r4
 8005000:	9304      	str	r3, [sp, #16]
 8005002:	e7d2      	b.n	8004faa <_vfiprintf_r+0xc6>
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	1d19      	adds	r1, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	9103      	str	r1, [sp, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	bfbb      	ittet	lt
 8005010:	425b      	neglt	r3, r3
 8005012:	f042 0202 	orrlt.w	r2, r2, #2
 8005016:	9307      	strge	r3, [sp, #28]
 8005018:	9307      	strlt	r3, [sp, #28]
 800501a:	bfb8      	it	lt
 800501c:	9204      	strlt	r2, [sp, #16]
 800501e:	7823      	ldrb	r3, [r4, #0]
 8005020:	2b2e      	cmp	r3, #46	@ 0x2e
 8005022:	d10a      	bne.n	800503a <_vfiprintf_r+0x156>
 8005024:	7863      	ldrb	r3, [r4, #1]
 8005026:	2b2a      	cmp	r3, #42	@ 0x2a
 8005028:	d132      	bne.n	8005090 <_vfiprintf_r+0x1ac>
 800502a:	9b03      	ldr	r3, [sp, #12]
 800502c:	3402      	adds	r4, #2
 800502e:	1d1a      	adds	r2, r3, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	9203      	str	r2, [sp, #12]
 8005034:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005038:	9305      	str	r3, [sp, #20]
 800503a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005104 <_vfiprintf_r+0x220>
 800503e:	2203      	movs	r2, #3
 8005040:	4650      	mov	r0, sl
 8005042:	7821      	ldrb	r1, [r4, #0]
 8005044:	f000 fb92 	bl	800576c <memchr>
 8005048:	b138      	cbz	r0, 800505a <_vfiprintf_r+0x176>
 800504a:	2240      	movs	r2, #64	@ 0x40
 800504c:	9b04      	ldr	r3, [sp, #16]
 800504e:	eba0 000a 	sub.w	r0, r0, sl
 8005052:	4082      	lsls	r2, r0
 8005054:	4313      	orrs	r3, r2
 8005056:	3401      	adds	r4, #1
 8005058:	9304      	str	r3, [sp, #16]
 800505a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505e:	2206      	movs	r2, #6
 8005060:	4829      	ldr	r0, [pc, #164]	@ (8005108 <_vfiprintf_r+0x224>)
 8005062:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005066:	f000 fb81 	bl	800576c <memchr>
 800506a:	2800      	cmp	r0, #0
 800506c:	d03f      	beq.n	80050ee <_vfiprintf_r+0x20a>
 800506e:	4b27      	ldr	r3, [pc, #156]	@ (800510c <_vfiprintf_r+0x228>)
 8005070:	bb1b      	cbnz	r3, 80050ba <_vfiprintf_r+0x1d6>
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	3307      	adds	r3, #7
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	3308      	adds	r3, #8
 800507c:	9303      	str	r3, [sp, #12]
 800507e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005080:	443b      	add	r3, r7
 8005082:	9309      	str	r3, [sp, #36]	@ 0x24
 8005084:	e76a      	b.n	8004f5c <_vfiprintf_r+0x78>
 8005086:	460c      	mov	r4, r1
 8005088:	2001      	movs	r0, #1
 800508a:	fb0c 3202 	mla	r2, ip, r2, r3
 800508e:	e7a8      	b.n	8004fe2 <_vfiprintf_r+0xfe>
 8005090:	2300      	movs	r3, #0
 8005092:	f04f 0c0a 	mov.w	ip, #10
 8005096:	4619      	mov	r1, r3
 8005098:	3401      	adds	r4, #1
 800509a:	9305      	str	r3, [sp, #20]
 800509c:	4620      	mov	r0, r4
 800509e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a2:	3a30      	subs	r2, #48	@ 0x30
 80050a4:	2a09      	cmp	r2, #9
 80050a6:	d903      	bls.n	80050b0 <_vfiprintf_r+0x1cc>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0c6      	beq.n	800503a <_vfiprintf_r+0x156>
 80050ac:	9105      	str	r1, [sp, #20]
 80050ae:	e7c4      	b.n	800503a <_vfiprintf_r+0x156>
 80050b0:	4604      	mov	r4, r0
 80050b2:	2301      	movs	r3, #1
 80050b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80050b8:	e7f0      	b.n	800509c <_vfiprintf_r+0x1b8>
 80050ba:	ab03      	add	r3, sp, #12
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	462a      	mov	r2, r5
 80050c0:	4630      	mov	r0, r6
 80050c2:	4b13      	ldr	r3, [pc, #76]	@ (8005110 <_vfiprintf_r+0x22c>)
 80050c4:	a904      	add	r1, sp, #16
 80050c6:	f3af 8000 	nop.w
 80050ca:	4607      	mov	r7, r0
 80050cc:	1c78      	adds	r0, r7, #1
 80050ce:	d1d6      	bne.n	800507e <_vfiprintf_r+0x19a>
 80050d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050d2:	07d9      	lsls	r1, r3, #31
 80050d4:	d405      	bmi.n	80050e2 <_vfiprintf_r+0x1fe>
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	059a      	lsls	r2, r3, #22
 80050da:	d402      	bmi.n	80050e2 <_vfiprintf_r+0x1fe>
 80050dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050de:	f7ff fc63 	bl	80049a8 <__retarget_lock_release_recursive>
 80050e2:	89ab      	ldrh	r3, [r5, #12]
 80050e4:	065b      	lsls	r3, r3, #25
 80050e6:	f53f af1f 	bmi.w	8004f28 <_vfiprintf_r+0x44>
 80050ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050ec:	e71e      	b.n	8004f2c <_vfiprintf_r+0x48>
 80050ee:	ab03      	add	r3, sp, #12
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	462a      	mov	r2, r5
 80050f4:	4630      	mov	r0, r6
 80050f6:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <_vfiprintf_r+0x22c>)
 80050f8:	a904      	add	r1, sp, #16
 80050fa:	f000 f87d 	bl	80051f8 <_printf_i>
 80050fe:	e7e4      	b.n	80050ca <_vfiprintf_r+0x1e6>
 8005100:	08005aad 	.word	0x08005aad
 8005104:	08005ab3 	.word	0x08005ab3
 8005108:	08005ab7 	.word	0x08005ab7
 800510c:	00000000 	.word	0x00000000
 8005110:	08004ebf 	.word	0x08004ebf

08005114 <_printf_common>:
 8005114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	4616      	mov	r6, r2
 800511a:	4698      	mov	r8, r3
 800511c:	688a      	ldr	r2, [r1, #8]
 800511e:	690b      	ldr	r3, [r1, #16]
 8005120:	4607      	mov	r7, r0
 8005122:	4293      	cmp	r3, r2
 8005124:	bfb8      	it	lt
 8005126:	4613      	movlt	r3, r2
 8005128:	6033      	str	r3, [r6, #0]
 800512a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800512e:	460c      	mov	r4, r1
 8005130:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005134:	b10a      	cbz	r2, 800513a <_printf_common+0x26>
 8005136:	3301      	adds	r3, #1
 8005138:	6033      	str	r3, [r6, #0]
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	0699      	lsls	r1, r3, #26
 800513e:	bf42      	ittt	mi
 8005140:	6833      	ldrmi	r3, [r6, #0]
 8005142:	3302      	addmi	r3, #2
 8005144:	6033      	strmi	r3, [r6, #0]
 8005146:	6825      	ldr	r5, [r4, #0]
 8005148:	f015 0506 	ands.w	r5, r5, #6
 800514c:	d106      	bne.n	800515c <_printf_common+0x48>
 800514e:	f104 0a19 	add.w	sl, r4, #25
 8005152:	68e3      	ldr	r3, [r4, #12]
 8005154:	6832      	ldr	r2, [r6, #0]
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	42ab      	cmp	r3, r5
 800515a:	dc2b      	bgt.n	80051b4 <_printf_common+0xa0>
 800515c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005160:	6822      	ldr	r2, [r4, #0]
 8005162:	3b00      	subs	r3, #0
 8005164:	bf18      	it	ne
 8005166:	2301      	movne	r3, #1
 8005168:	0692      	lsls	r2, r2, #26
 800516a:	d430      	bmi.n	80051ce <_printf_common+0xba>
 800516c:	4641      	mov	r1, r8
 800516e:	4638      	mov	r0, r7
 8005170:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005174:	47c8      	blx	r9
 8005176:	3001      	adds	r0, #1
 8005178:	d023      	beq.n	80051c2 <_printf_common+0xae>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	6922      	ldr	r2, [r4, #16]
 800517e:	f003 0306 	and.w	r3, r3, #6
 8005182:	2b04      	cmp	r3, #4
 8005184:	bf14      	ite	ne
 8005186:	2500      	movne	r5, #0
 8005188:	6833      	ldreq	r3, [r6, #0]
 800518a:	f04f 0600 	mov.w	r6, #0
 800518e:	bf08      	it	eq
 8005190:	68e5      	ldreq	r5, [r4, #12]
 8005192:	f104 041a 	add.w	r4, r4, #26
 8005196:	bf08      	it	eq
 8005198:	1aed      	subeq	r5, r5, r3
 800519a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800519e:	bf08      	it	eq
 80051a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a4:	4293      	cmp	r3, r2
 80051a6:	bfc4      	itt	gt
 80051a8:	1a9b      	subgt	r3, r3, r2
 80051aa:	18ed      	addgt	r5, r5, r3
 80051ac:	42b5      	cmp	r5, r6
 80051ae:	d11a      	bne.n	80051e6 <_printf_common+0xd2>
 80051b0:	2000      	movs	r0, #0
 80051b2:	e008      	b.n	80051c6 <_printf_common+0xb2>
 80051b4:	2301      	movs	r3, #1
 80051b6:	4652      	mov	r2, sl
 80051b8:	4641      	mov	r1, r8
 80051ba:	4638      	mov	r0, r7
 80051bc:	47c8      	blx	r9
 80051be:	3001      	adds	r0, #1
 80051c0:	d103      	bne.n	80051ca <_printf_common+0xb6>
 80051c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ca:	3501      	adds	r5, #1
 80051cc:	e7c1      	b.n	8005152 <_printf_common+0x3e>
 80051ce:	2030      	movs	r0, #48	@ 0x30
 80051d0:	18e1      	adds	r1, r4, r3
 80051d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051dc:	4422      	add	r2, r4
 80051de:	3302      	adds	r3, #2
 80051e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051e4:	e7c2      	b.n	800516c <_printf_common+0x58>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4622      	mov	r2, r4
 80051ea:	4641      	mov	r1, r8
 80051ec:	4638      	mov	r0, r7
 80051ee:	47c8      	blx	r9
 80051f0:	3001      	adds	r0, #1
 80051f2:	d0e6      	beq.n	80051c2 <_printf_common+0xae>
 80051f4:	3601      	adds	r6, #1
 80051f6:	e7d9      	b.n	80051ac <_printf_common+0x98>

080051f8 <_printf_i>:
 80051f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051fc:	7e0f      	ldrb	r7, [r1, #24]
 80051fe:	4691      	mov	r9, r2
 8005200:	2f78      	cmp	r7, #120	@ 0x78
 8005202:	4680      	mov	r8, r0
 8005204:	460c      	mov	r4, r1
 8005206:	469a      	mov	sl, r3
 8005208:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800520a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800520e:	d807      	bhi.n	8005220 <_printf_i+0x28>
 8005210:	2f62      	cmp	r7, #98	@ 0x62
 8005212:	d80a      	bhi.n	800522a <_printf_i+0x32>
 8005214:	2f00      	cmp	r7, #0
 8005216:	f000 80d1 	beq.w	80053bc <_printf_i+0x1c4>
 800521a:	2f58      	cmp	r7, #88	@ 0x58
 800521c:	f000 80b8 	beq.w	8005390 <_printf_i+0x198>
 8005220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005228:	e03a      	b.n	80052a0 <_printf_i+0xa8>
 800522a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800522e:	2b15      	cmp	r3, #21
 8005230:	d8f6      	bhi.n	8005220 <_printf_i+0x28>
 8005232:	a101      	add	r1, pc, #4	@ (adr r1, 8005238 <_printf_i+0x40>)
 8005234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005238:	08005291 	.word	0x08005291
 800523c:	080052a5 	.word	0x080052a5
 8005240:	08005221 	.word	0x08005221
 8005244:	08005221 	.word	0x08005221
 8005248:	08005221 	.word	0x08005221
 800524c:	08005221 	.word	0x08005221
 8005250:	080052a5 	.word	0x080052a5
 8005254:	08005221 	.word	0x08005221
 8005258:	08005221 	.word	0x08005221
 800525c:	08005221 	.word	0x08005221
 8005260:	08005221 	.word	0x08005221
 8005264:	080053a3 	.word	0x080053a3
 8005268:	080052cf 	.word	0x080052cf
 800526c:	0800535d 	.word	0x0800535d
 8005270:	08005221 	.word	0x08005221
 8005274:	08005221 	.word	0x08005221
 8005278:	080053c5 	.word	0x080053c5
 800527c:	08005221 	.word	0x08005221
 8005280:	080052cf 	.word	0x080052cf
 8005284:	08005221 	.word	0x08005221
 8005288:	08005221 	.word	0x08005221
 800528c:	08005365 	.word	0x08005365
 8005290:	6833      	ldr	r3, [r6, #0]
 8005292:	1d1a      	adds	r2, r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6032      	str	r2, [r6, #0]
 8005298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800529c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052a0:	2301      	movs	r3, #1
 80052a2:	e09c      	b.n	80053de <_printf_i+0x1e6>
 80052a4:	6833      	ldr	r3, [r6, #0]
 80052a6:	6820      	ldr	r0, [r4, #0]
 80052a8:	1d19      	adds	r1, r3, #4
 80052aa:	6031      	str	r1, [r6, #0]
 80052ac:	0606      	lsls	r6, r0, #24
 80052ae:	d501      	bpl.n	80052b4 <_printf_i+0xbc>
 80052b0:	681d      	ldr	r5, [r3, #0]
 80052b2:	e003      	b.n	80052bc <_printf_i+0xc4>
 80052b4:	0645      	lsls	r5, r0, #25
 80052b6:	d5fb      	bpl.n	80052b0 <_printf_i+0xb8>
 80052b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052bc:	2d00      	cmp	r5, #0
 80052be:	da03      	bge.n	80052c8 <_printf_i+0xd0>
 80052c0:	232d      	movs	r3, #45	@ 0x2d
 80052c2:	426d      	negs	r5, r5
 80052c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052c8:	230a      	movs	r3, #10
 80052ca:	4858      	ldr	r0, [pc, #352]	@ (800542c <_printf_i+0x234>)
 80052cc:	e011      	b.n	80052f2 <_printf_i+0xfa>
 80052ce:	6821      	ldr	r1, [r4, #0]
 80052d0:	6833      	ldr	r3, [r6, #0]
 80052d2:	0608      	lsls	r0, r1, #24
 80052d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80052d8:	d402      	bmi.n	80052e0 <_printf_i+0xe8>
 80052da:	0649      	lsls	r1, r1, #25
 80052dc:	bf48      	it	mi
 80052de:	b2ad      	uxthmi	r5, r5
 80052e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80052e2:	6033      	str	r3, [r6, #0]
 80052e4:	bf14      	ite	ne
 80052e6:	230a      	movne	r3, #10
 80052e8:	2308      	moveq	r3, #8
 80052ea:	4850      	ldr	r0, [pc, #320]	@ (800542c <_printf_i+0x234>)
 80052ec:	2100      	movs	r1, #0
 80052ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052f2:	6866      	ldr	r6, [r4, #4]
 80052f4:	2e00      	cmp	r6, #0
 80052f6:	60a6      	str	r6, [r4, #8]
 80052f8:	db05      	blt.n	8005306 <_printf_i+0x10e>
 80052fa:	6821      	ldr	r1, [r4, #0]
 80052fc:	432e      	orrs	r6, r5
 80052fe:	f021 0104 	bic.w	r1, r1, #4
 8005302:	6021      	str	r1, [r4, #0]
 8005304:	d04b      	beq.n	800539e <_printf_i+0x1a6>
 8005306:	4616      	mov	r6, r2
 8005308:	fbb5 f1f3 	udiv	r1, r5, r3
 800530c:	fb03 5711 	mls	r7, r3, r1, r5
 8005310:	5dc7      	ldrb	r7, [r0, r7]
 8005312:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005316:	462f      	mov	r7, r5
 8005318:	42bb      	cmp	r3, r7
 800531a:	460d      	mov	r5, r1
 800531c:	d9f4      	bls.n	8005308 <_printf_i+0x110>
 800531e:	2b08      	cmp	r3, #8
 8005320:	d10b      	bne.n	800533a <_printf_i+0x142>
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	07df      	lsls	r7, r3, #31
 8005326:	d508      	bpl.n	800533a <_printf_i+0x142>
 8005328:	6923      	ldr	r3, [r4, #16]
 800532a:	6861      	ldr	r1, [r4, #4]
 800532c:	4299      	cmp	r1, r3
 800532e:	bfde      	ittt	le
 8005330:	2330      	movle	r3, #48	@ 0x30
 8005332:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005336:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800533a:	1b92      	subs	r2, r2, r6
 800533c:	6122      	str	r2, [r4, #16]
 800533e:	464b      	mov	r3, r9
 8005340:	4621      	mov	r1, r4
 8005342:	4640      	mov	r0, r8
 8005344:	f8cd a000 	str.w	sl, [sp]
 8005348:	aa03      	add	r2, sp, #12
 800534a:	f7ff fee3 	bl	8005114 <_printf_common>
 800534e:	3001      	adds	r0, #1
 8005350:	d14a      	bne.n	80053e8 <_printf_i+0x1f0>
 8005352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005356:	b004      	add	sp, #16
 8005358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	f043 0320 	orr.w	r3, r3, #32
 8005362:	6023      	str	r3, [r4, #0]
 8005364:	2778      	movs	r7, #120	@ 0x78
 8005366:	4832      	ldr	r0, [pc, #200]	@ (8005430 <_printf_i+0x238>)
 8005368:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	6831      	ldr	r1, [r6, #0]
 8005370:	061f      	lsls	r7, r3, #24
 8005372:	f851 5b04 	ldr.w	r5, [r1], #4
 8005376:	d402      	bmi.n	800537e <_printf_i+0x186>
 8005378:	065f      	lsls	r7, r3, #25
 800537a:	bf48      	it	mi
 800537c:	b2ad      	uxthmi	r5, r5
 800537e:	6031      	str	r1, [r6, #0]
 8005380:	07d9      	lsls	r1, r3, #31
 8005382:	bf44      	itt	mi
 8005384:	f043 0320 	orrmi.w	r3, r3, #32
 8005388:	6023      	strmi	r3, [r4, #0]
 800538a:	b11d      	cbz	r5, 8005394 <_printf_i+0x19c>
 800538c:	2310      	movs	r3, #16
 800538e:	e7ad      	b.n	80052ec <_printf_i+0xf4>
 8005390:	4826      	ldr	r0, [pc, #152]	@ (800542c <_printf_i+0x234>)
 8005392:	e7e9      	b.n	8005368 <_printf_i+0x170>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	f023 0320 	bic.w	r3, r3, #32
 800539a:	6023      	str	r3, [r4, #0]
 800539c:	e7f6      	b.n	800538c <_printf_i+0x194>
 800539e:	4616      	mov	r6, r2
 80053a0:	e7bd      	b.n	800531e <_printf_i+0x126>
 80053a2:	6833      	ldr	r3, [r6, #0]
 80053a4:	6825      	ldr	r5, [r4, #0]
 80053a6:	1d18      	adds	r0, r3, #4
 80053a8:	6961      	ldr	r1, [r4, #20]
 80053aa:	6030      	str	r0, [r6, #0]
 80053ac:	062e      	lsls	r6, r5, #24
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	d501      	bpl.n	80053b6 <_printf_i+0x1be>
 80053b2:	6019      	str	r1, [r3, #0]
 80053b4:	e002      	b.n	80053bc <_printf_i+0x1c4>
 80053b6:	0668      	lsls	r0, r5, #25
 80053b8:	d5fb      	bpl.n	80053b2 <_printf_i+0x1ba>
 80053ba:	8019      	strh	r1, [r3, #0]
 80053bc:	2300      	movs	r3, #0
 80053be:	4616      	mov	r6, r2
 80053c0:	6123      	str	r3, [r4, #16]
 80053c2:	e7bc      	b.n	800533e <_printf_i+0x146>
 80053c4:	6833      	ldr	r3, [r6, #0]
 80053c6:	2100      	movs	r1, #0
 80053c8:	1d1a      	adds	r2, r3, #4
 80053ca:	6032      	str	r2, [r6, #0]
 80053cc:	681e      	ldr	r6, [r3, #0]
 80053ce:	6862      	ldr	r2, [r4, #4]
 80053d0:	4630      	mov	r0, r6
 80053d2:	f000 f9cb 	bl	800576c <memchr>
 80053d6:	b108      	cbz	r0, 80053dc <_printf_i+0x1e4>
 80053d8:	1b80      	subs	r0, r0, r6
 80053da:	6060      	str	r0, [r4, #4]
 80053dc:	6863      	ldr	r3, [r4, #4]
 80053de:	6123      	str	r3, [r4, #16]
 80053e0:	2300      	movs	r3, #0
 80053e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053e6:	e7aa      	b.n	800533e <_printf_i+0x146>
 80053e8:	4632      	mov	r2, r6
 80053ea:	4649      	mov	r1, r9
 80053ec:	4640      	mov	r0, r8
 80053ee:	6923      	ldr	r3, [r4, #16]
 80053f0:	47d0      	blx	sl
 80053f2:	3001      	adds	r0, #1
 80053f4:	d0ad      	beq.n	8005352 <_printf_i+0x15a>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	079b      	lsls	r3, r3, #30
 80053fa:	d413      	bmi.n	8005424 <_printf_i+0x22c>
 80053fc:	68e0      	ldr	r0, [r4, #12]
 80053fe:	9b03      	ldr	r3, [sp, #12]
 8005400:	4298      	cmp	r0, r3
 8005402:	bfb8      	it	lt
 8005404:	4618      	movlt	r0, r3
 8005406:	e7a6      	b.n	8005356 <_printf_i+0x15e>
 8005408:	2301      	movs	r3, #1
 800540a:	4632      	mov	r2, r6
 800540c:	4649      	mov	r1, r9
 800540e:	4640      	mov	r0, r8
 8005410:	47d0      	blx	sl
 8005412:	3001      	adds	r0, #1
 8005414:	d09d      	beq.n	8005352 <_printf_i+0x15a>
 8005416:	3501      	adds	r5, #1
 8005418:	68e3      	ldr	r3, [r4, #12]
 800541a:	9903      	ldr	r1, [sp, #12]
 800541c:	1a5b      	subs	r3, r3, r1
 800541e:	42ab      	cmp	r3, r5
 8005420:	dcf2      	bgt.n	8005408 <_printf_i+0x210>
 8005422:	e7eb      	b.n	80053fc <_printf_i+0x204>
 8005424:	2500      	movs	r5, #0
 8005426:	f104 0619 	add.w	r6, r4, #25
 800542a:	e7f5      	b.n	8005418 <_printf_i+0x220>
 800542c:	08005abe 	.word	0x08005abe
 8005430:	08005acf 	.word	0x08005acf

08005434 <__sflush_r>:
 8005434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	0716      	lsls	r6, r2, #28
 800543c:	4605      	mov	r5, r0
 800543e:	460c      	mov	r4, r1
 8005440:	d454      	bmi.n	80054ec <__sflush_r+0xb8>
 8005442:	684b      	ldr	r3, [r1, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	dc02      	bgt.n	800544e <__sflush_r+0x1a>
 8005448:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	dd48      	ble.n	80054e0 <__sflush_r+0xac>
 800544e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005450:	2e00      	cmp	r6, #0
 8005452:	d045      	beq.n	80054e0 <__sflush_r+0xac>
 8005454:	2300      	movs	r3, #0
 8005456:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800545a:	682f      	ldr	r7, [r5, #0]
 800545c:	6a21      	ldr	r1, [r4, #32]
 800545e:	602b      	str	r3, [r5, #0]
 8005460:	d030      	beq.n	80054c4 <__sflush_r+0x90>
 8005462:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	0759      	lsls	r1, r3, #29
 8005468:	d505      	bpl.n	8005476 <__sflush_r+0x42>
 800546a:	6863      	ldr	r3, [r4, #4]
 800546c:	1ad2      	subs	r2, r2, r3
 800546e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005470:	b10b      	cbz	r3, 8005476 <__sflush_r+0x42>
 8005472:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005474:	1ad2      	subs	r2, r2, r3
 8005476:	2300      	movs	r3, #0
 8005478:	4628      	mov	r0, r5
 800547a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800547c:	6a21      	ldr	r1, [r4, #32]
 800547e:	47b0      	blx	r6
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	89a3      	ldrh	r3, [r4, #12]
 8005484:	d106      	bne.n	8005494 <__sflush_r+0x60>
 8005486:	6829      	ldr	r1, [r5, #0]
 8005488:	291d      	cmp	r1, #29
 800548a:	d82b      	bhi.n	80054e4 <__sflush_r+0xb0>
 800548c:	4a28      	ldr	r2, [pc, #160]	@ (8005530 <__sflush_r+0xfc>)
 800548e:	40ca      	lsrs	r2, r1
 8005490:	07d6      	lsls	r6, r2, #31
 8005492:	d527      	bpl.n	80054e4 <__sflush_r+0xb0>
 8005494:	2200      	movs	r2, #0
 8005496:	6062      	str	r2, [r4, #4]
 8005498:	6922      	ldr	r2, [r4, #16]
 800549a:	04d9      	lsls	r1, r3, #19
 800549c:	6022      	str	r2, [r4, #0]
 800549e:	d504      	bpl.n	80054aa <__sflush_r+0x76>
 80054a0:	1c42      	adds	r2, r0, #1
 80054a2:	d101      	bne.n	80054a8 <__sflush_r+0x74>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b903      	cbnz	r3, 80054aa <__sflush_r+0x76>
 80054a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80054aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054ac:	602f      	str	r7, [r5, #0]
 80054ae:	b1b9      	cbz	r1, 80054e0 <__sflush_r+0xac>
 80054b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054b4:	4299      	cmp	r1, r3
 80054b6:	d002      	beq.n	80054be <__sflush_r+0x8a>
 80054b8:	4628      	mov	r0, r5
 80054ba:	f7ff fa95 	bl	80049e8 <_free_r>
 80054be:	2300      	movs	r3, #0
 80054c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80054c2:	e00d      	b.n	80054e0 <__sflush_r+0xac>
 80054c4:	2301      	movs	r3, #1
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b0      	blx	r6
 80054ca:	4602      	mov	r2, r0
 80054cc:	1c50      	adds	r0, r2, #1
 80054ce:	d1c9      	bne.n	8005464 <__sflush_r+0x30>
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0c6      	beq.n	8005464 <__sflush_r+0x30>
 80054d6:	2b1d      	cmp	r3, #29
 80054d8:	d001      	beq.n	80054de <__sflush_r+0xaa>
 80054da:	2b16      	cmp	r3, #22
 80054dc:	d11d      	bne.n	800551a <__sflush_r+0xe6>
 80054de:	602f      	str	r7, [r5, #0]
 80054e0:	2000      	movs	r0, #0
 80054e2:	e021      	b.n	8005528 <__sflush_r+0xf4>
 80054e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054e8:	b21b      	sxth	r3, r3
 80054ea:	e01a      	b.n	8005522 <__sflush_r+0xee>
 80054ec:	690f      	ldr	r7, [r1, #16]
 80054ee:	2f00      	cmp	r7, #0
 80054f0:	d0f6      	beq.n	80054e0 <__sflush_r+0xac>
 80054f2:	0793      	lsls	r3, r2, #30
 80054f4:	bf18      	it	ne
 80054f6:	2300      	movne	r3, #0
 80054f8:	680e      	ldr	r6, [r1, #0]
 80054fa:	bf08      	it	eq
 80054fc:	694b      	ldreq	r3, [r1, #20]
 80054fe:	1bf6      	subs	r6, r6, r7
 8005500:	600f      	str	r7, [r1, #0]
 8005502:	608b      	str	r3, [r1, #8]
 8005504:	2e00      	cmp	r6, #0
 8005506:	ddeb      	ble.n	80054e0 <__sflush_r+0xac>
 8005508:	4633      	mov	r3, r6
 800550a:	463a      	mov	r2, r7
 800550c:	4628      	mov	r0, r5
 800550e:	6a21      	ldr	r1, [r4, #32]
 8005510:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005514:	47e0      	blx	ip
 8005516:	2800      	cmp	r0, #0
 8005518:	dc07      	bgt.n	800552a <__sflush_r+0xf6>
 800551a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800551e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005522:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005526:	81a3      	strh	r3, [r4, #12]
 8005528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800552a:	4407      	add	r7, r0
 800552c:	1a36      	subs	r6, r6, r0
 800552e:	e7e9      	b.n	8005504 <__sflush_r+0xd0>
 8005530:	20400001 	.word	0x20400001

08005534 <_fflush_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	690b      	ldr	r3, [r1, #16]
 8005538:	4605      	mov	r5, r0
 800553a:	460c      	mov	r4, r1
 800553c:	b913      	cbnz	r3, 8005544 <_fflush_r+0x10>
 800553e:	2500      	movs	r5, #0
 8005540:	4628      	mov	r0, r5
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	b118      	cbz	r0, 800554e <_fflush_r+0x1a>
 8005546:	6a03      	ldr	r3, [r0, #32]
 8005548:	b90b      	cbnz	r3, 800554e <_fflush_r+0x1a>
 800554a:	f7ff f80b 	bl	8004564 <__sinit>
 800554e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f3      	beq.n	800553e <_fflush_r+0xa>
 8005556:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005558:	07d0      	lsls	r0, r2, #31
 800555a:	d404      	bmi.n	8005566 <_fflush_r+0x32>
 800555c:	0599      	lsls	r1, r3, #22
 800555e:	d402      	bmi.n	8005566 <_fflush_r+0x32>
 8005560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005562:	f7ff fa20 	bl	80049a6 <__retarget_lock_acquire_recursive>
 8005566:	4628      	mov	r0, r5
 8005568:	4621      	mov	r1, r4
 800556a:	f7ff ff63 	bl	8005434 <__sflush_r>
 800556e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005570:	4605      	mov	r5, r0
 8005572:	07da      	lsls	r2, r3, #31
 8005574:	d4e4      	bmi.n	8005540 <_fflush_r+0xc>
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	059b      	lsls	r3, r3, #22
 800557a:	d4e1      	bmi.n	8005540 <_fflush_r+0xc>
 800557c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800557e:	f7ff fa13 	bl	80049a8 <__retarget_lock_release_recursive>
 8005582:	e7dd      	b.n	8005540 <_fflush_r+0xc>

08005584 <fiprintf>:
 8005584:	b40e      	push	{r1, r2, r3}
 8005586:	b503      	push	{r0, r1, lr}
 8005588:	4601      	mov	r1, r0
 800558a:	ab03      	add	r3, sp, #12
 800558c:	4805      	ldr	r0, [pc, #20]	@ (80055a4 <fiprintf+0x20>)
 800558e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005592:	6800      	ldr	r0, [r0, #0]
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	f7ff fca5 	bl	8004ee4 <_vfiprintf_r>
 800559a:	b002      	add	sp, #8
 800559c:	f85d eb04 	ldr.w	lr, [sp], #4
 80055a0:	b003      	add	sp, #12
 80055a2:	4770      	bx	lr
 80055a4:	2000023c 	.word	0x2000023c

080055a8 <__swhatbuf_r>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	460c      	mov	r4, r1
 80055ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b0:	4615      	mov	r5, r2
 80055b2:	2900      	cmp	r1, #0
 80055b4:	461e      	mov	r6, r3
 80055b6:	b096      	sub	sp, #88	@ 0x58
 80055b8:	da0c      	bge.n	80055d4 <__swhatbuf_r+0x2c>
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	2100      	movs	r1, #0
 80055be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055c2:	bf14      	ite	ne
 80055c4:	2340      	movne	r3, #64	@ 0x40
 80055c6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055ca:	2000      	movs	r0, #0
 80055cc:	6031      	str	r1, [r6, #0]
 80055ce:	602b      	str	r3, [r5, #0]
 80055d0:	b016      	add	sp, #88	@ 0x58
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	466a      	mov	r2, sp
 80055d6:	f000 f897 	bl	8005708 <_fstat_r>
 80055da:	2800      	cmp	r0, #0
 80055dc:	dbed      	blt.n	80055ba <__swhatbuf_r+0x12>
 80055de:	9901      	ldr	r1, [sp, #4]
 80055e0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80055e4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80055e8:	4259      	negs	r1, r3
 80055ea:	4159      	adcs	r1, r3
 80055ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055f0:	e7eb      	b.n	80055ca <__swhatbuf_r+0x22>

080055f2 <__smakebuf_r>:
 80055f2:	898b      	ldrh	r3, [r1, #12]
 80055f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055f6:	079d      	lsls	r5, r3, #30
 80055f8:	4606      	mov	r6, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	d507      	bpl.n	800560e <__smakebuf_r+0x1c>
 80055fe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005602:	6023      	str	r3, [r4, #0]
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	2301      	movs	r3, #1
 8005608:	6163      	str	r3, [r4, #20]
 800560a:	b003      	add	sp, #12
 800560c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800560e:	466a      	mov	r2, sp
 8005610:	ab01      	add	r3, sp, #4
 8005612:	f7ff ffc9 	bl	80055a8 <__swhatbuf_r>
 8005616:	9f00      	ldr	r7, [sp, #0]
 8005618:	4605      	mov	r5, r0
 800561a:	4639      	mov	r1, r7
 800561c:	4630      	mov	r0, r6
 800561e:	f7ff fa55 	bl	8004acc <_malloc_r>
 8005622:	b948      	cbnz	r0, 8005638 <__smakebuf_r+0x46>
 8005624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005628:	059a      	lsls	r2, r3, #22
 800562a:	d4ee      	bmi.n	800560a <__smakebuf_r+0x18>
 800562c:	f023 0303 	bic.w	r3, r3, #3
 8005630:	f043 0302 	orr.w	r3, r3, #2
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	e7e2      	b.n	80055fe <__smakebuf_r+0xc>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800563e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	9b01      	ldr	r3, [sp, #4]
 8005646:	6020      	str	r0, [r4, #0]
 8005648:	b15b      	cbz	r3, 8005662 <__smakebuf_r+0x70>
 800564a:	4630      	mov	r0, r6
 800564c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005650:	f000 f86c 	bl	800572c <_isatty_r>
 8005654:	b128      	cbz	r0, 8005662 <__smakebuf_r+0x70>
 8005656:	89a3      	ldrh	r3, [r4, #12]
 8005658:	f023 0303 	bic.w	r3, r3, #3
 800565c:	f043 0301 	orr.w	r3, r3, #1
 8005660:	81a3      	strh	r3, [r4, #12]
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	431d      	orrs	r5, r3
 8005666:	81a5      	strh	r5, [r4, #12]
 8005668:	e7cf      	b.n	800560a <__smakebuf_r+0x18>

0800566a <_putc_r>:
 800566a:	b570      	push	{r4, r5, r6, lr}
 800566c:	460d      	mov	r5, r1
 800566e:	4614      	mov	r4, r2
 8005670:	4606      	mov	r6, r0
 8005672:	b118      	cbz	r0, 800567c <_putc_r+0x12>
 8005674:	6a03      	ldr	r3, [r0, #32]
 8005676:	b90b      	cbnz	r3, 800567c <_putc_r+0x12>
 8005678:	f7fe ff74 	bl	8004564 <__sinit>
 800567c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800567e:	07d8      	lsls	r0, r3, #31
 8005680:	d405      	bmi.n	800568e <_putc_r+0x24>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	0599      	lsls	r1, r3, #22
 8005686:	d402      	bmi.n	800568e <_putc_r+0x24>
 8005688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800568a:	f7ff f98c 	bl	80049a6 <__retarget_lock_acquire_recursive>
 800568e:	68a3      	ldr	r3, [r4, #8]
 8005690:	3b01      	subs	r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	da05      	bge.n	80056a4 <_putc_r+0x3a>
 8005698:	69a2      	ldr	r2, [r4, #24]
 800569a:	4293      	cmp	r3, r2
 800569c:	db12      	blt.n	80056c4 <_putc_r+0x5a>
 800569e:	b2eb      	uxtb	r3, r5
 80056a0:	2b0a      	cmp	r3, #10
 80056a2:	d00f      	beq.n	80056c4 <_putc_r+0x5a>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	6022      	str	r2, [r4, #0]
 80056aa:	701d      	strb	r5, [r3, #0]
 80056ac:	b2ed      	uxtb	r5, r5
 80056ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056b0:	07da      	lsls	r2, r3, #31
 80056b2:	d405      	bmi.n	80056c0 <_putc_r+0x56>
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	059b      	lsls	r3, r3, #22
 80056b8:	d402      	bmi.n	80056c0 <_putc_r+0x56>
 80056ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056bc:	f7ff f974 	bl	80049a8 <__retarget_lock_release_recursive>
 80056c0:	4628      	mov	r0, r5
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	4629      	mov	r1, r5
 80056c6:	4622      	mov	r2, r4
 80056c8:	4630      	mov	r0, r6
 80056ca:	f7ff f85e 	bl	800478a <__swbuf_r>
 80056ce:	4605      	mov	r5, r0
 80056d0:	e7ed      	b.n	80056ae <_putc_r+0x44>

080056d2 <memmove>:
 80056d2:	4288      	cmp	r0, r1
 80056d4:	b510      	push	{r4, lr}
 80056d6:	eb01 0402 	add.w	r4, r1, r2
 80056da:	d902      	bls.n	80056e2 <memmove+0x10>
 80056dc:	4284      	cmp	r4, r0
 80056de:	4623      	mov	r3, r4
 80056e0:	d807      	bhi.n	80056f2 <memmove+0x20>
 80056e2:	1e43      	subs	r3, r0, #1
 80056e4:	42a1      	cmp	r1, r4
 80056e6:	d008      	beq.n	80056fa <memmove+0x28>
 80056e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056f0:	e7f8      	b.n	80056e4 <memmove+0x12>
 80056f2:	4601      	mov	r1, r0
 80056f4:	4402      	add	r2, r0
 80056f6:	428a      	cmp	r2, r1
 80056f8:	d100      	bne.n	80056fc <memmove+0x2a>
 80056fa:	bd10      	pop	{r4, pc}
 80056fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005700:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005704:	e7f7      	b.n	80056f6 <memmove+0x24>
	...

08005708 <_fstat_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	2300      	movs	r3, #0
 800570c:	4d06      	ldr	r5, [pc, #24]	@ (8005728 <_fstat_r+0x20>)
 800570e:	4604      	mov	r4, r0
 8005710:	4608      	mov	r0, r1
 8005712:	4611      	mov	r1, r2
 8005714:	602b      	str	r3, [r5, #0]
 8005716:	f7fb fe67 	bl	80013e8 <_fstat>
 800571a:	1c43      	adds	r3, r0, #1
 800571c:	d102      	bne.n	8005724 <_fstat_r+0x1c>
 800571e:	682b      	ldr	r3, [r5, #0]
 8005720:	b103      	cbz	r3, 8005724 <_fstat_r+0x1c>
 8005722:	6023      	str	r3, [r4, #0]
 8005724:	bd38      	pop	{r3, r4, r5, pc}
 8005726:	bf00      	nop
 8005728:	20000658 	.word	0x20000658

0800572c <_isatty_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	2300      	movs	r3, #0
 8005730:	4d05      	ldr	r5, [pc, #20]	@ (8005748 <_isatty_r+0x1c>)
 8005732:	4604      	mov	r4, r0
 8005734:	4608      	mov	r0, r1
 8005736:	602b      	str	r3, [r5, #0]
 8005738:	f7fb fe65 	bl	8001406 <_isatty>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d102      	bne.n	8005746 <_isatty_r+0x1a>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	b103      	cbz	r3, 8005746 <_isatty_r+0x1a>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	20000658 	.word	0x20000658

0800574c <_sbrk_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	2300      	movs	r3, #0
 8005750:	4d05      	ldr	r5, [pc, #20]	@ (8005768 <_sbrk_r+0x1c>)
 8005752:	4604      	mov	r4, r0
 8005754:	4608      	mov	r0, r1
 8005756:	602b      	str	r3, [r5, #0]
 8005758:	f7fb fe6c 	bl	8001434 <_sbrk>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d102      	bne.n	8005766 <_sbrk_r+0x1a>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	b103      	cbz	r3, 8005766 <_sbrk_r+0x1a>
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	20000658 	.word	0x20000658

0800576c <memchr>:
 800576c:	4603      	mov	r3, r0
 800576e:	b510      	push	{r4, lr}
 8005770:	b2c9      	uxtb	r1, r1
 8005772:	4402      	add	r2, r0
 8005774:	4293      	cmp	r3, r2
 8005776:	4618      	mov	r0, r3
 8005778:	d101      	bne.n	800577e <memchr+0x12>
 800577a:	2000      	movs	r0, #0
 800577c:	e003      	b.n	8005786 <memchr+0x1a>
 800577e:	7804      	ldrb	r4, [r0, #0]
 8005780:	3301      	adds	r3, #1
 8005782:	428c      	cmp	r4, r1
 8005784:	d1f6      	bne.n	8005774 <memchr+0x8>
 8005786:	bd10      	pop	{r4, pc}

08005788 <memcpy>:
 8005788:	440a      	add	r2, r1
 800578a:	4291      	cmp	r1, r2
 800578c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005790:	d100      	bne.n	8005794 <memcpy+0xc>
 8005792:	4770      	bx	lr
 8005794:	b510      	push	{r4, lr}
 8005796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800579a:	4291      	cmp	r1, r2
 800579c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057a0:	d1f9      	bne.n	8005796 <memcpy+0xe>
 80057a2:	bd10      	pop	{r4, pc}

080057a4 <abort>:
 80057a4:	2006      	movs	r0, #6
 80057a6:	b508      	push	{r3, lr}
 80057a8:	f000 f85a 	bl	8005860 <raise>
 80057ac:	2001      	movs	r0, #1
 80057ae:	f7fb fdcc 	bl	800134a <_exit>

080057b2 <_realloc_r>:
 80057b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b6:	4607      	mov	r7, r0
 80057b8:	4614      	mov	r4, r2
 80057ba:	460d      	mov	r5, r1
 80057bc:	b921      	cbnz	r1, 80057c8 <_realloc_r+0x16>
 80057be:	4611      	mov	r1, r2
 80057c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057c4:	f7ff b982 	b.w	8004acc <_malloc_r>
 80057c8:	b92a      	cbnz	r2, 80057d6 <_realloc_r+0x24>
 80057ca:	f7ff f90d 	bl	80049e8 <_free_r>
 80057ce:	4625      	mov	r5, r4
 80057d0:	4628      	mov	r0, r5
 80057d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d6:	f000 f85f 	bl	8005898 <_malloc_usable_size_r>
 80057da:	4284      	cmp	r4, r0
 80057dc:	4606      	mov	r6, r0
 80057de:	d802      	bhi.n	80057e6 <_realloc_r+0x34>
 80057e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057e4:	d8f4      	bhi.n	80057d0 <_realloc_r+0x1e>
 80057e6:	4621      	mov	r1, r4
 80057e8:	4638      	mov	r0, r7
 80057ea:	f7ff f96f 	bl	8004acc <_malloc_r>
 80057ee:	4680      	mov	r8, r0
 80057f0:	b908      	cbnz	r0, 80057f6 <_realloc_r+0x44>
 80057f2:	4645      	mov	r5, r8
 80057f4:	e7ec      	b.n	80057d0 <_realloc_r+0x1e>
 80057f6:	42b4      	cmp	r4, r6
 80057f8:	4622      	mov	r2, r4
 80057fa:	4629      	mov	r1, r5
 80057fc:	bf28      	it	cs
 80057fe:	4632      	movcs	r2, r6
 8005800:	f7ff ffc2 	bl	8005788 <memcpy>
 8005804:	4629      	mov	r1, r5
 8005806:	4638      	mov	r0, r7
 8005808:	f7ff f8ee 	bl	80049e8 <_free_r>
 800580c:	e7f1      	b.n	80057f2 <_realloc_r+0x40>

0800580e <_raise_r>:
 800580e:	291f      	cmp	r1, #31
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4605      	mov	r5, r0
 8005814:	460c      	mov	r4, r1
 8005816:	d904      	bls.n	8005822 <_raise_r+0x14>
 8005818:	2316      	movs	r3, #22
 800581a:	6003      	str	r3, [r0, #0]
 800581c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005820:	bd38      	pop	{r3, r4, r5, pc}
 8005822:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005824:	b112      	cbz	r2, 800582c <_raise_r+0x1e>
 8005826:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800582a:	b94b      	cbnz	r3, 8005840 <_raise_r+0x32>
 800582c:	4628      	mov	r0, r5
 800582e:	f000 f831 	bl	8005894 <_getpid_r>
 8005832:	4622      	mov	r2, r4
 8005834:	4601      	mov	r1, r0
 8005836:	4628      	mov	r0, r5
 8005838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800583c:	f000 b818 	b.w	8005870 <_kill_r>
 8005840:	2b01      	cmp	r3, #1
 8005842:	d00a      	beq.n	800585a <_raise_r+0x4c>
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	d103      	bne.n	8005850 <_raise_r+0x42>
 8005848:	2316      	movs	r3, #22
 800584a:	6003      	str	r3, [r0, #0]
 800584c:	2001      	movs	r0, #1
 800584e:	e7e7      	b.n	8005820 <_raise_r+0x12>
 8005850:	2100      	movs	r1, #0
 8005852:	4620      	mov	r0, r4
 8005854:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005858:	4798      	blx	r3
 800585a:	2000      	movs	r0, #0
 800585c:	e7e0      	b.n	8005820 <_raise_r+0x12>
	...

08005860 <raise>:
 8005860:	4b02      	ldr	r3, [pc, #8]	@ (800586c <raise+0xc>)
 8005862:	4601      	mov	r1, r0
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	f7ff bfd2 	b.w	800580e <_raise_r>
 800586a:	bf00      	nop
 800586c:	2000023c 	.word	0x2000023c

08005870 <_kill_r>:
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	2300      	movs	r3, #0
 8005874:	4d06      	ldr	r5, [pc, #24]	@ (8005890 <_kill_r+0x20>)
 8005876:	4604      	mov	r4, r0
 8005878:	4608      	mov	r0, r1
 800587a:	4611      	mov	r1, r2
 800587c:	602b      	str	r3, [r5, #0]
 800587e:	f7fb fd54 	bl	800132a <_kill>
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	d102      	bne.n	800588c <_kill_r+0x1c>
 8005886:	682b      	ldr	r3, [r5, #0]
 8005888:	b103      	cbz	r3, 800588c <_kill_r+0x1c>
 800588a:	6023      	str	r3, [r4, #0]
 800588c:	bd38      	pop	{r3, r4, r5, pc}
 800588e:	bf00      	nop
 8005890:	20000658 	.word	0x20000658

08005894 <_getpid_r>:
 8005894:	f7fb bd42 	b.w	800131c <_getpid>

08005898 <_malloc_usable_size_r>:
 8005898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800589c:	1f18      	subs	r0, r3, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bfbc      	itt	lt
 80058a2:	580b      	ldrlt	r3, [r1, r0]
 80058a4:	18c0      	addlt	r0, r0, r3
 80058a6:	4770      	bx	lr

080058a8 <_init>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr

080058b4 <_fini>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	bf00      	nop
 80058b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ba:	bc08      	pop	{r3}
 80058bc:	469e      	mov	lr, r3
 80058be:	4770      	bx	lr
