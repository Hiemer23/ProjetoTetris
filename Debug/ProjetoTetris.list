
ProjetoTetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c44  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08003d50  08003d50  00004d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f38  08003f38  00005254  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003f38  08003f38  00005254  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003f38  08003f38  00005254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f38  08003f38  00004f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f3c  08003f3c  00004f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  08003f40  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000254  08004194  00005254  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  200005b8  08004194  000055b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005254  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099cf  00000000  00000000  0000527d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002080  00000000  00000000  0000ec4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00010cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e3  00000000  00000000  00011878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eda  00000000  00000000  0001215b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbed  00000000  00000000  0002b035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a556  00000000  00000000  00037c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2178  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003910  00000000  00000000  000c21bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c5acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000254 	.word	0x20000254
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d38 	.word	0x08003d38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000258 	.word	0x20000258
 8000148:	08003d38 	.word	0x08003d38

0800014c <lcd_Task>:

#include "LCD_Manager.h"

estados_LCD estadoLCD = TELA1;

void lcd_Task(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	//4 estados na máquina de estados

	switch (estadoLCD) {
 8000150:	4b1c      	ldr	r3, [pc, #112]	@ (80001c4 <lcd_Task+0x78>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b03      	cmp	r3, #3
 8000156:	d80b      	bhi.n	8000170 <lcd_Task+0x24>
 8000158:	a201      	add	r2, pc, #4	@ (adr r2, 8000160 <lcd_Task+0x14>)
 800015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800015e:	bf00      	nop
 8000160:	08000177 	.word	0x08000177
 8000164:	08000189 	.word	0x08000189
 8000168:	0800019b 	.word	0x0800019b
 800016c:	080001ad 	.word	0x080001ad
	default:
		estadoLCD = TELA1;
 8000170:	4b14      	ldr	r3, [pc, #80]	@ (80001c4 <lcd_Task+0x78>)
 8000172:	2200      	movs	r2, #0
 8000174:	701a      	strb	r2, [r3, #0]
	case TELA1:
		change_Message(0, ">>Start Game");
 8000176:	4914      	ldr	r1, [pc, #80]	@ (80001c8 <lcd_Task+0x7c>)
 8000178:	2000      	movs	r0, #0
 800017a:	f000 f9eb 	bl	8000554 <change_Message>
		change_Message(1, "Recorde Atual");
 800017e:	4913      	ldr	r1, [pc, #76]	@ (80001cc <lcd_Task+0x80>)
 8000180:	2001      	movs	r0, #1
 8000182:	f000 f9e7 	bl	8000554 <change_Message>
		break;
 8000186:	e01a      	b.n	80001be <lcd_Task+0x72>
	case TELA2:
		change_Message(0, ">>Recorde Atual");
 8000188:	4911      	ldr	r1, [pc, #68]	@ (80001d0 <lcd_Task+0x84>)
 800018a:	2000      	movs	r0, #0
 800018c:	f000 f9e2 	bl	8000554 <change_Message>
		change_Message(1, "Gravar Nome");
 8000190:	4910      	ldr	r1, [pc, #64]	@ (80001d4 <lcd_Task+0x88>)
 8000192:	2001      	movs	r0, #1
 8000194:	f000 f9de 	bl	8000554 <change_Message>
		break;
 8000198:	e011      	b.n	80001be <lcd_Task+0x72>
	case TELA3:
		change_Message(0, ">>Gravar Nome");
 800019a:	490f      	ldr	r1, [pc, #60]	@ (80001d8 <lcd_Task+0x8c>)
 800019c:	2000      	movs	r0, #0
 800019e:	f000 f9d9 	bl	8000554 <change_Message>
		change_Message(1, "Limpar Recorde");
 80001a2:	490e      	ldr	r1, [pc, #56]	@ (80001dc <lcd_Task+0x90>)
 80001a4:	2001      	movs	r0, #1
 80001a6:	f000 f9d5 	bl	8000554 <change_Message>
		break;
 80001aa:	e008      	b.n	80001be <lcd_Task+0x72>
	case TELA4:
		change_Message(0, ">>Limpar Recorde");
 80001ac:	490c      	ldr	r1, [pc, #48]	@ (80001e0 <lcd_Task+0x94>)
 80001ae:	2000      	movs	r0, #0
 80001b0:	f000 f9d0 	bl	8000554 <change_Message>
		change_Message(1, "Start Game");
 80001b4:	490b      	ldr	r1, [pc, #44]	@ (80001e4 <lcd_Task+0x98>)
 80001b6:	2001      	movs	r0, #1
 80001b8:	f000 f9cc 	bl	8000554 <change_Message>
		break;
 80001bc:	bf00      	nop
	}
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	20000270 	.word	0x20000270
 80001c8:	08003d50 	.word	0x08003d50
 80001cc:	08003d60 	.word	0x08003d60
 80001d0:	08003d70 	.word	0x08003d70
 80001d4:	08003d80 	.word	0x08003d80
 80001d8:	08003d8c 	.word	0x08003d8c
 80001dc:	08003d9c 	.word	0x08003d9c
 80001e0:	08003dac 	.word	0x08003dac
 80001e4:	08003dc0 	.word	0x08003dc0

080001e8 <initGame>:
static int linha = 0, coluna = 0, peca_atual = 0;                // Posição inicial da peça
PecaTetris peca;


void initGame(void)
{
 80001e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001ea:	b091      	sub	sp, #68	@ 0x44
 80001ec:	af0e      	add	r7, sp, #56	@ 0x38
	peca_atual = number_aleatory_peace(); // Gera a primeira peça aleatória
 80001ee:	f000 ff9b 	bl	8001128 <number_aleatory_peace>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000268 <initGame+0x80>)
 80001f6:	6013      	str	r3, [r2, #0]
    peca = pecas[peca_atual];
 80001f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000268 <initGame+0x80>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	491b      	ldr	r1, [pc, #108]	@ (800026c <initGame+0x84>)
 80001fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000270 <initGame+0x88>)
 8000200:	019b      	lsls	r3, r3, #6
 8000202:	4413      	add	r3, r2
 8000204:	460c      	mov	r4, r1
 8000206:	461d      	mov	r5, r3
 8000208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800020e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000214:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    linha = 0;
 800021c:	4b15      	ldr	r3, [pc, #84]	@ (8000274 <initGame+0x8c>)
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
    coluna = 3;
 8000222:	4b15      	ldr	r3, [pc, #84]	@ (8000278 <initGame+0x90>)
 8000224:	2203      	movs	r2, #3
 8000226:	601a      	str	r2, [r3, #0]
	init_game();
 8000228:	f000 fdcc 	bl	8000dc4 <init_game>

    place_piece(linha, coluna, peca);
 800022c:	4b11      	ldr	r3, [pc, #68]	@ (8000274 <initGame+0x8c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	4b11      	ldr	r3, [pc, #68]	@ (8000278 <initGame+0x90>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	603a      	str	r2, [r7, #0]
 8000238:	4e0c      	ldr	r6, [pc, #48]	@ (800026c <initGame+0x84>)
 800023a:	466d      	mov	r5, sp
 800023c:	f106 0408 	add.w	r4, r6, #8
 8000240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800024a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800024c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000250:	e885 0003 	stmia.w	r5, {r0, r1}
 8000254:	e896 000c 	ldmia.w	r6, {r2, r3}
 8000258:	6839      	ldr	r1, [r7, #0]
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f000 fdf2 	bl	8000e44 <place_piece>
    //limpaTela();
    //draw_board();

}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000268:	2000027c 	.word	0x2000027c
 800026c:	20000280 	.word	0x20000280
 8000270:	2000002c 	.word	0x2000002c
 8000274:	20000274 	.word	0x20000274
 8000278:	20000278 	.word	0x20000278

0800027c <taskTetris>:

void taskTetris(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
    if (game_over()) // Verifica se o jogo acabou
 8000280:	f001 f912 	bl	80014a8 <game_over>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d106      	bne.n	8000298 <taskTetris+0x1c>
    {
        return;
    }

    update_game(&linha, &coluna, &peca, &peca_atual);
 800028a:	4b04      	ldr	r3, [pc, #16]	@ (800029c <taskTetris+0x20>)
 800028c:	4a04      	ldr	r2, [pc, #16]	@ (80002a0 <taskTetris+0x24>)
 800028e:	4905      	ldr	r1, [pc, #20]	@ (80002a4 <taskTetris+0x28>)
 8000290:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <taskTetris+0x2c>)
 8000292:	f001 f8a1 	bl	80013d8 <update_game>
 8000296:	e000      	b.n	800029a <taskTetris+0x1e>
        return;
 8000298:	bf00      	nop
}
 800029a:	bd80      	pop	{r7, pc}
 800029c:	2000027c 	.word	0x2000027c
 80002a0:	20000280 	.word	0x20000280
 80002a4:	20000278 	.word	0x20000278
 80002a8:	20000274 	.word	0x20000274

080002ac <taskMatrizLed>:
#include "MatrizLed.h"

volatile MatrizLED_t MatrizLed = {0};

void taskMatrizLed(void) //150us de execucao
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
    static volatile uint8_t line = 0;
    static volatile uint16_t line_m = 0b1000000000000000;

    volatile uint16_t aux_line = 0x00;
 80002b2:	2300      	movs	r3, #0
 80002b4:	80fb      	strh	r3, [r7, #6]
    volatile uint8_t aux_line2 = 0x00;
 80002b6:	2300      	movs	r3, #0
 80002b8:	717b      	strb	r3, [r7, #5]

    line++;
 80002ba:	4b53      	ldr	r3, [pc, #332]	@ (8000408 <taskMatrizLed+0x15c>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	3301      	adds	r3, #1
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	4b50      	ldr	r3, [pc, #320]	@ (8000408 <taskMatrizLed+0x15c>)
 80002c6:	701a      	strb	r2, [r3, #0]
    if (line == 16)
 80002c8:	4b4f      	ldr	r3, [pc, #316]	@ (8000408 <taskMatrizLed+0x15c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b10      	cmp	r3, #16
 80002d0:	d102      	bne.n	80002d8 <taskMatrizLed+0x2c>
        line = 0;
 80002d2:	4b4d      	ldr	r3, [pc, #308]	@ (8000408 <taskMatrizLed+0x15c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
    aux_line = (line_m >> line) | (line_m << (15 - line));
 80002d8:	4b4c      	ldr	r3, [pc, #304]	@ (800040c <taskMatrizLed+0x160>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	b29b      	uxth	r3, r3
 80002de:	461a      	mov	r2, r3
 80002e0:	4b49      	ldr	r3, [pc, #292]	@ (8000408 <taskMatrizLed+0x15c>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	fa42 f303 	asr.w	r3, r2, r3
 80002ea:	b21a      	sxth	r2, r3
 80002ec:	4b47      	ldr	r3, [pc, #284]	@ (800040c <taskMatrizLed+0x160>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	4619      	mov	r1, r3
 80002f4:	4b44      	ldr	r3, [pc, #272]	@ (8000408 <taskMatrizLed+0x15c>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	f1c3 030f 	rsb	r3, r3, #15
 80002fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000302:	b21b      	sxth	r3, r3
 8000304:	4313      	orrs	r3, r2
 8000306:	b21b      	sxth	r3, r3
 8000308:	b29b      	uxth	r3, r3
 800030a:	80fb      	strh	r3, [r7, #6]

    for (int i = 0; i < 8; i++)
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	e02e      	b.n	8000370 <taskMatrizLed+0xc4>
    {
        if (MatrizLed[line][7 - i] == 0)
 8000312:	4b3d      	ldr	r3, [pc, #244]	@ (8000408 <taskMatrizLed+0x15c>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	461a      	mov	r2, r3
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	f1c3 0307 	rsb	r3, r3, #7
 8000320:	493b      	ldr	r1, [pc, #236]	@ (8000410 <taskMatrizLed+0x164>)
 8000322:	00d2      	lsls	r2, r2, #3
 8000324:	440a      	add	r2, r1
 8000326:	4413      	add	r3, r2
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b00      	cmp	r3, #0
 800032e:	d106      	bne.n	800033e <taskMatrizLed+0x92>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000336:	4837      	ldr	r0, [pc, #220]	@ (8000414 <taskMatrizLed+0x168>)
 8000338:	f001 fc76 	bl	8001c28 <HAL_GPIO_WritePin>
 800033c:	e005      	b.n	800034a <taskMatrizLed+0x9e>
        else
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000344:	4833      	ldr	r0, [pc, #204]	@ (8000414 <taskMatrizLed+0x168>)
 8000346:	f001 fc6f 	bl	8001c28 <HAL_GPIO_WritePin>

        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 800034a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800034e:	4831      	ldr	r0, [pc, #196]	@ (8000414 <taskMatrizLed+0x168>)
 8000350:	f001 fc82 	bl	8001c58 <HAL_GPIO_TogglePin>
        DWT_Delay_us(1);
 8000354:	2001      	movs	r0, #1
 8000356:	f000 fa27 	bl	80007a8 <DWT_Delay_us>
        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 800035a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800035e:	482d      	ldr	r0, [pc, #180]	@ (8000414 <taskMatrizLed+0x168>)
 8000360:	f001 fc7a 	bl	8001c58 <HAL_GPIO_TogglePin>
        DWT_Delay_us(1);
 8000364:	2001      	movs	r0, #1
 8000366:	f000 fa1f 	bl	80007a8 <DWT_Delay_us>
    for (int i = 0; i < 8; i++)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	3301      	adds	r3, #1
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	2b07      	cmp	r3, #7
 8000374:	ddcd      	ble.n	8000312 <taskMatrizLed+0x66>
    }
    for (int i = 0; i < 16; i++)
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	e02e      	b.n	80003da <taskMatrizLed+0x12e>
    {
        aux_line2 = (aux_line >> i) & 0x0001;
 800037c:	88fb      	ldrh	r3, [r7, #6]
 800037e:	b29b      	uxth	r3, r3
 8000380:	461a      	mov	r2, r3
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	fa42 f303 	asr.w	r3, r2, r3
 8000388:	b2db      	uxtb	r3, r3
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	b2db      	uxtb	r3, r3
 8000390:	717b      	strb	r3, [r7, #5]
        if (aux_line2 == 0)
 8000392:	797b      	ldrb	r3, [r7, #5]
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2b00      	cmp	r3, #0
 8000398:	d106      	bne.n	80003a8 <taskMatrizLed+0xfc>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003a0:	481c      	ldr	r0, [pc, #112]	@ (8000414 <taskMatrizLed+0x168>)
 80003a2:	f001 fc41 	bl	8001c28 <HAL_GPIO_WritePin>
 80003a6:	e005      	b.n	80003b4 <taskMatrizLed+0x108>
        else
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ae:	4819      	ldr	r0, [pc, #100]	@ (8000414 <taskMatrizLed+0x168>)
 80003b0:	f001 fc3a 	bl	8001c28 <HAL_GPIO_WritePin>

        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 80003b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003b8:	4816      	ldr	r0, [pc, #88]	@ (8000414 <taskMatrizLed+0x168>)
 80003ba:	f001 fc4d 	bl	8001c58 <HAL_GPIO_TogglePin>

        DWT_Delay_us(1);
 80003be:	2001      	movs	r0, #1
 80003c0:	f000 f9f2 	bl	80007a8 <DWT_Delay_us>
        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 80003c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c8:	4812      	ldr	r0, [pc, #72]	@ (8000414 <taskMatrizLed+0x168>)
 80003ca:	f001 fc45 	bl	8001c58 <HAL_GPIO_TogglePin>

        DWT_Delay_us(1);
 80003ce:	2001      	movs	r0, #1
 80003d0:	f000 f9ea 	bl	80007a8 <DWT_Delay_us>
    for (int i = 0; i < 16; i++)
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	3301      	adds	r3, #1
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	2b0f      	cmp	r3, #15
 80003de:	ddcd      	ble.n	800037c <taskMatrizLed+0xd0>
    }
    HAL_GPIO_TogglePin(CLK2_GPIO_Port, CLK2_Pin);
 80003e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003e4:	480b      	ldr	r0, [pc, #44]	@ (8000414 <taskMatrizLed+0x168>)
 80003e6:	f001 fc37 	bl	8001c58 <HAL_GPIO_TogglePin>
    DWT_Delay_us(1);
 80003ea:	2001      	movs	r0, #1
 80003ec:	f000 f9dc 	bl	80007a8 <DWT_Delay_us>
    HAL_GPIO_TogglePin(CLK2_GPIO_Port, CLK2_Pin);
 80003f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003f4:	4807      	ldr	r0, [pc, #28]	@ (8000414 <taskMatrizLed+0x168>)
 80003f6:	f001 fc2f 	bl	8001c58 <HAL_GPIO_TogglePin>
    DWT_Delay_us(1);
 80003fa:	2001      	movs	r0, #1
 80003fc:	f000 f9d4 	bl	80007a8 <DWT_Delay_us>
}
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000340 	.word	0x20000340
 800040c:	20000000 	.word	0x20000000
 8000410:	200002c0 	.word	0x200002c0
 8000414:	40010c00 	.word	0x40010c00

08000418 <changeMatriz>:

void changeMatriz(MatrizLED_t newMatriz)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < LinhasMatriz; i++)
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	e01a      	b.n	800045c <changeMatriz+0x44>
    {
        for (int j = 0; j < ColunasMatriz; j++)
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	e011      	b.n	8000450 <changeMatriz+0x38>
        {
            MatrizLed[i][j] = newMatriz[i][j];
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	441a      	add	r2, r3
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	4413      	add	r3, r2
 8000438:	7819      	ldrb	r1, [r3, #0]
 800043a:	4a0d      	ldr	r2, [pc, #52]	@ (8000470 <changeMatriz+0x58>)
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	00db      	lsls	r3, r3, #3
 8000440:	441a      	add	r2, r3
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	4413      	add	r3, r2
 8000446:	460a      	mov	r2, r1
 8000448:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < ColunasMatriz; j++)
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	3301      	adds	r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	2b07      	cmp	r3, #7
 8000454:	ddea      	ble.n	800042c <changeMatriz+0x14>
    for (int i = 0; i < LinhasMatriz; i++)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3301      	adds	r3, #1
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	2b0f      	cmp	r3, #15
 8000460:	dde1      	ble.n	8000426 <changeMatriz+0xe>
        }
    }
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	200002c0 	.word	0x200002c0

08000474 <register_EN>:
uint8_t position_String = 0;
uint8_t linha_LCD = 0;

void lcd_send_data(uint8_t data);

void register_EN(void) {
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
    EN_HIGH;
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800047e:	4808      	ldr	r0, [pc, #32]	@ (80004a0 <register_EN+0x2c>)
 8000480:	f001 fbd2 	bl	8001c28 <HAL_GPIO_WritePin>
    LCD_delay_us(1);
 8000484:	2001      	movs	r0, #1
 8000486:	f000 f98f 	bl	80007a8 <DWT_Delay_us>
    EN_LOW;
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000490:	4803      	ldr	r0, [pc, #12]	@ (80004a0 <register_EN+0x2c>)
 8000492:	f001 fbc9 	bl	8001c28 <HAL_GPIO_WritePin>
    LCD_delay_us(40);
 8000496:	2028      	movs	r0, #40	@ 0x28
 8000498:	f000 f986 	bl	80007a8 <DWT_Delay_us>
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40011000 	.word	0x40011000

080004a4 <Write_Display>:
//    DB1_HIGH;
//    DB0_LOW;
//    register_EN();
//}

void Write_Display() {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0

    if (position_String < 16) {
 80004a8:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <Write_Display+0x64>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b0f      	cmp	r3, #15
 80004ae:	d816      	bhi.n	80004de <Write_Display+0x3a>
        Write_caracter(message[linha_LCD][position_String]);
 80004b0:	4b16      	ldr	r3, [pc, #88]	@ (800050c <Write_Display+0x68>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <Write_Display+0x64>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <Write_Display+0x6c>)
 80004be:	460b      	mov	r3, r1
 80004c0:	011b      	lsls	r3, r3, #4
 80004c2:	440b      	add	r3, r1
 80004c4:	4413      	add	r3, r2
 80004c6:	4403      	add	r3, r0
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 f822 	bl	8000514 <Write_caracter>
        position_String++;
 80004d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000508 <Write_Display+0x64>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	3301      	adds	r3, #1
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <Write_Display+0x64>)
 80004da:	701a      	strb	r2, [r3, #0]
        position_String = 0;
        (linha_LCD == 0) ? (linha_LCD = 1) : (linha_LCD = 0);
        Set_Line(linha_LCD);
    }

}
 80004dc:	e012      	b.n	8000504 <Write_Display+0x60>
        position_String = 0;
 80004de:	4b0a      	ldr	r3, [pc, #40]	@ (8000508 <Write_Display+0x64>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
        (linha_LCD == 0) ? (linha_LCD = 1) : (linha_LCD = 0);
 80004e4:	4b09      	ldr	r3, [pc, #36]	@ (800050c <Write_Display+0x68>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d103      	bne.n	80004f4 <Write_Display+0x50>
 80004ec:	4b07      	ldr	r3, [pc, #28]	@ (800050c <Write_Display+0x68>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	701a      	strb	r2, [r3, #0]
 80004f2:	e002      	b.n	80004fa <Write_Display+0x56>
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <Write_Display+0x68>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
        Set_Line(linha_LCD);
 80004fa:	4b04      	ldr	r3, [pc, #16]	@ (800050c <Write_Display+0x68>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 f815 	bl	800052e <Set_Line>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000341 	.word	0x20000341
 800050c:	20000342 	.word	0x20000342
 8000510:	20000004 	.word	0x20000004

08000514 <Write_caracter>:

void Write_caracter(uint8_t c) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	lcd_send_data(c);
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4618      	mov	r0, r3
 8000522:	f000 f8d3 	bl	80006cc <lcd_send_data>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <Set_Line>:
    EN_LOW;
    LCD_delay_us(1);
    RS_LOW;
}

void Set_Line(char line) {
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
 8000534:	4603      	mov	r3, r0
 8000536:	71fb      	strb	r3, [r7, #7]
	if (line == 0)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d103      	bne.n	8000546 <Set_Line+0x18>
	        lcd_send_command(0x80);  // linha 1
 800053e:	2080      	movs	r0, #128	@ 0x80
 8000540:	f000 f8a2 	bl	8000688 <lcd_send_command>
	    else
	        lcd_send_command(0xC0);  // linha 2
}
 8000544:	e002      	b.n	800054c <Set_Line+0x1e>
	        lcd_send_command(0xC0);  // linha 2
 8000546:	20c0      	movs	r0, #192	@ 0xc0
 8000548:	f000 f89e 	bl	8000688 <lcd_send_command>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <change_Message>:

void change_Message(uint8_t line, char *new_Text) {
 8000554:	b490      	push	{r4, r7}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	73fb      	strb	r3, [r7, #15]
    //Verifica onde acaba a string enviada
    while (new_Text[i] != '\0' && i < 16) {
 8000564:	e01f      	b.n	80005a6 <change_Message+0x52>

        if (message[line][i] != new_Text[i]) {
 8000566:	79fa      	ldrb	r2, [r7, #7]
 8000568:	7bf9      	ldrb	r1, [r7, #15]
 800056a:	481f      	ldr	r0, [pc, #124]	@ (80005e8 <change_Message+0x94>)
 800056c:	4613      	mov	r3, r2
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	4413      	add	r3, r2
 8000572:	4403      	add	r3, r0
 8000574:	440b      	add	r3, r1
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	6839      	ldr	r1, [r7, #0]
 800057c:	440b      	add	r3, r1
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	429a      	cmp	r2, r3
 8000582:	d00d      	beq.n	80005a0 <change_Message+0x4c>
                message[line][i] = new_Text[i];
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	683a      	ldr	r2, [r7, #0]
 8000588:	4413      	add	r3, r2
 800058a:	79fa      	ldrb	r2, [r7, #7]
 800058c:	7bf9      	ldrb	r1, [r7, #15]
 800058e:	781c      	ldrb	r4, [r3, #0]
 8000590:	4815      	ldr	r0, [pc, #84]	@ (80005e8 <change_Message+0x94>)
 8000592:	4613      	mov	r3, r2
 8000594:	011b      	lsls	r3, r3, #4
 8000596:	4413      	add	r3, r2
 8000598:	4403      	add	r3, r0
 800059a:	440b      	add	r3, r1
 800059c:	4622      	mov	r2, r4
 800059e:	701a      	strb	r2, [r3, #0]
            }
        i++;
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	3301      	adds	r3, #1
 80005a4:	73fb      	strb	r3, [r7, #15]
    while (new_Text[i] != '\0' && i < 16) {
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d010      	beq.n	80005d4 <change_Message+0x80>
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	d9d6      	bls.n	8000566 <change_Message+0x12>
    }
    for (i = i; i < 16; i++) {
 80005b8:	e00c      	b.n	80005d4 <change_Message+0x80>
        message[line][i] = ' ';
 80005ba:	79fa      	ldrb	r2, [r7, #7]
 80005bc:	7bf9      	ldrb	r1, [r7, #15]
 80005be:	480a      	ldr	r0, [pc, #40]	@ (80005e8 <change_Message+0x94>)
 80005c0:	4613      	mov	r3, r2
 80005c2:	011b      	lsls	r3, r3, #4
 80005c4:	4413      	add	r3, r2
 80005c6:	4403      	add	r3, r0
 80005c8:	440b      	add	r3, r1
 80005ca:	2220      	movs	r2, #32
 80005cc:	701a      	strb	r2, [r3, #0]
    for (i = i; i < 16; i++) {
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	3301      	adds	r3, #1
 80005d2:	73fb      	strb	r3, [r7, #15]
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b0f      	cmp	r3, #15
 80005d8:	d9ef      	bls.n	80005ba <change_Message+0x66>
    }
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc90      	pop	{r4, r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000004 	.word	0x20000004

080005ec <send_nibble>:

void send_nibble(uint8_t nibble) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
    (nibble & 0x08) ? DB7_HIGH : DB7_LOW;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d005      	beq.n	800060c <send_nibble+0x20>
 8000600:	2201      	movs	r2, #1
 8000602:	2140      	movs	r1, #64	@ 0x40
 8000604:	481f      	ldr	r0, [pc, #124]	@ (8000684 <send_nibble+0x98>)
 8000606:	f001 fb0f 	bl	8001c28 <HAL_GPIO_WritePin>
 800060a:	e004      	b.n	8000616 <send_nibble+0x2a>
 800060c:	2200      	movs	r2, #0
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	481c      	ldr	r0, [pc, #112]	@ (8000684 <send_nibble+0x98>)
 8000612:	f001 fb09 	bl	8001c28 <HAL_GPIO_WritePin>
    (nibble & 0x04) ? DB6_HIGH : DB6_LOW;
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <send_nibble+0x40>
 8000620:	2201      	movs	r2, #1
 8000622:	2120      	movs	r1, #32
 8000624:	4817      	ldr	r0, [pc, #92]	@ (8000684 <send_nibble+0x98>)
 8000626:	f001 faff 	bl	8001c28 <HAL_GPIO_WritePin>
 800062a:	e004      	b.n	8000636 <send_nibble+0x4a>
 800062c:	2200      	movs	r2, #0
 800062e:	2120      	movs	r1, #32
 8000630:	4814      	ldr	r0, [pc, #80]	@ (8000684 <send_nibble+0x98>)
 8000632:	f001 faf9 	bl	8001c28 <HAL_GPIO_WritePin>
    (nibble & 0x02) ? DB5_HIGH : DB5_LOW;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 0302 	and.w	r3, r3, #2
 800063c:	2b00      	cmp	r3, #0
 800063e:	d005      	beq.n	800064c <send_nibble+0x60>
 8000640:	2201      	movs	r2, #1
 8000642:	2110      	movs	r1, #16
 8000644:	480f      	ldr	r0, [pc, #60]	@ (8000684 <send_nibble+0x98>)
 8000646:	f001 faef 	bl	8001c28 <HAL_GPIO_WritePin>
 800064a:	e004      	b.n	8000656 <send_nibble+0x6a>
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <send_nibble+0x98>)
 8000652:	f001 fae9 	bl	8001c28 <HAL_GPIO_WritePin>
    (nibble & 0x01) ? DB4_HIGH : DB4_LOW;
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	2b00      	cmp	r3, #0
 800065e:	d005      	beq.n	800066c <send_nibble+0x80>
 8000660:	2201      	movs	r2, #1
 8000662:	2108      	movs	r1, #8
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <send_nibble+0x98>)
 8000666:	f001 fadf 	bl	8001c28 <HAL_GPIO_WritePin>
 800066a:	e004      	b.n	8000676 <send_nibble+0x8a>
 800066c:	2200      	movs	r2, #0
 800066e:	2108      	movs	r1, #8
 8000670:	4804      	ldr	r0, [pc, #16]	@ (8000684 <send_nibble+0x98>)
 8000672:	f001 fad9 	bl	8001c28 <HAL_GPIO_WritePin>

    register_EN();
 8000676:	f7ff fefd 	bl	8000474 <register_EN>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40010800 	.word	0x40010800

08000688 <lcd_send_command>:

void lcd_send_command(uint8_t cmd) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
    RS_LOW;
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000698:	480b      	ldr	r0, [pc, #44]	@ (80006c8 <lcd_send_command+0x40>)
 800069a:	f001 fac5 	bl	8001c28 <HAL_GPIO_WritePin>
    send_nibble(cmd >> 4);  // parte alta
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	091b      	lsrs	r3, r3, #4
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffa1 	bl	80005ec <send_nibble>
    send_nibble(cmd & 0x0F); // parte baixa
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff9a 	bl	80005ec <send_nibble>
    LCD_delay_us(40);
 80006b8:	2028      	movs	r0, #40	@ 0x28
 80006ba:	f000 f875 	bl	80007a8 <DWT_Delay_us>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40011000 	.word	0x40011000

080006cc <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
    RS_HIGH;
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006dc:	480b      	ldr	r0, [pc, #44]	@ (800070c <lcd_send_data+0x40>)
 80006de:	f001 faa3 	bl	8001c28 <HAL_GPIO_WritePin>
    send_nibble(data >> 4);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	091b      	lsrs	r3, r3, #4
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff7f 	bl	80005ec <send_nibble>
    send_nibble(data & 0x0F);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 030f 	and.w	r3, r3, #15
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff78 	bl	80005ec <send_nibble>
    LCD_delay_us(40);
 80006fc:	2028      	movs	r0, #40	@ 0x28
 80006fe:	f000 f853 	bl	80007a8 <DWT_Delay_us>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40011000 	.word	0x40011000

08000710 <initialize_LCD>:

void initialize_LCD(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
    LCD_delay_ms(15); // tempo mínimo de boot
 8000714:	200f      	movs	r0, #15
 8000716:	f000 ffd1 	bl	80016bc <HAL_Delay>

    // Inicialização especial para 4 bits
    send_nibble(0x03);  // função set 8 bits (3)
 800071a:	2003      	movs	r0, #3
 800071c:	f7ff ff66 	bl	80005ec <send_nibble>
    LCD_delay_ms(5);
 8000720:	2005      	movs	r0, #5
 8000722:	f000 ffcb 	bl	80016bc <HAL_Delay>
    send_nibble(0x03);
 8000726:	2003      	movs	r0, #3
 8000728:	f7ff ff60 	bl	80005ec <send_nibble>
    LCD_delay_us(150);
 800072c:	2096      	movs	r0, #150	@ 0x96
 800072e:	f000 f83b 	bl	80007a8 <DWT_Delay_us>
    send_nibble(0x03);
 8000732:	2003      	movs	r0, #3
 8000734:	f7ff ff5a 	bl	80005ec <send_nibble>
    LCD_delay_us(150);
 8000738:	2096      	movs	r0, #150	@ 0x96
 800073a:	f000 f835 	bl	80007a8 <DWT_Delay_us>
    send_nibble(0x02);  // função set para 4 bits
 800073e:	2002      	movs	r0, #2
 8000740:	f7ff ff54 	bl	80005ec <send_nibble>
    LCD_delay_us(150);
 8000744:	2096      	movs	r0, #150	@ 0x96
 8000746:	f000 f82f 	bl	80007a8 <DWT_Delay_us>

    lcd_send_command(0x28); // function set: 4 bits, 2 linhas, 5x8
 800074a:	2028      	movs	r0, #40	@ 0x28
 800074c:	f7ff ff9c 	bl	8000688 <lcd_send_command>
    lcd_send_command(0x08); // display OFF
 8000750:	2008      	movs	r0, #8
 8000752:	f7ff ff99 	bl	8000688 <lcd_send_command>
    lcd_send_command(0x01); // clear display
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff ff96 	bl	8000688 <lcd_send_command>
    LCD_delay_ms(2);
 800075c:	2002      	movs	r0, #2
 800075e:	f000 ffad 	bl	80016bc <HAL_Delay>
    lcd_send_command(0x06); // entry mode set
 8000762:	2006      	movs	r0, #6
 8000764:	f7ff ff90 	bl	8000688 <lcd_send_command>
    lcd_send_command(0x0C); // display ON, cursor OFF
 8000768:	200c      	movs	r0, #12
 800076a:	f7ff ff8d 	bl	8000688 <lcd_send_command>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <DWT_Delay_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void DWT_Delay_Init(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <DWT_Delay_Init+0x2c>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <DWT_Delay_Init+0x2c>)
 800077e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000782:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <DWT_Delay_Init+0x30>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <DWT_Delay_Init+0x30>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a05      	ldr	r2, [pc, #20]	@ (80007a4 <DWT_Delay_Init+0x30>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6013      	str	r3, [r2, #0]
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000edf0 	.word	0xe000edf0
 80007a4:	e0001000 	.word	0xe0001000

080007a8 <DWT_Delay_us>:

void DWT_Delay_us(uint32_t us)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <DWT_Delay_us+0x40>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000);
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <DWT_Delay_us+0x44>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <DWT_Delay_us+0x48>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	0c9a      	lsrs	r2, r3, #18
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	fb02 f303 	mul.w	r3, r2, r3
 80007c8:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks)
 80007ca:	bf00      	nop
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <DWT_Delay_us+0x40>)
 80007ce:	685a      	ldr	r2, [r3, #4]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d8f8      	bhi.n	80007cc <DWT_Delay_us+0x24>
        ;
}
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e0001000 	.word	0xe0001000
 80007ec:	20000028 	.word	0x20000028
 80007f0:	431bde83 	.word	0x431bde83

080007f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000804:	d10e      	bne.n	8000824 <HAL_TIM_PeriodElapsedCallback+0x30>
    {
        flag1ms = TRUE;
 8000806:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
        count100ms++;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000816:	701a      	strb	r2, [r3, #0]
        count1000ms++;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000822:	801a      	strh	r2, [r3, #0]
    }
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	2000038c 	.word	0x2000038c
 8000834:	2000038d 	.word	0x2000038d
 8000838:	2000038e 	.word	0x2000038e

0800083c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000842:	f000 fed9 	bl	80015f8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000846:	f000 f841 	bl	80008cc <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800084a:	f000 f8d1 	bl	80009f0 <MX_GPIO_Init>
    MX_TIM2_Init();
 800084e:	f000 f883 	bl	8000958 <MX_TIM2_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim2);
 8000852:	4819      	ldr	r0, [pc, #100]	@ (80008b8 <main+0x7c>)
 8000854:	f001 fe48 	bl	80024e8 <HAL_TIM_Base_Start_IT>
    DWT_Delay_Init();
 8000858:	f7ff ff8c 	bl	8000774 <DWT_Delay_Init>
    initialize_LCD();
 800085c:	f7ff ff58 	bl	8000710 <initialize_LCD>

    srand(HAL_GetTick());
 8000860:	f000 ff22 	bl	80016a8 <HAL_GetTick>
 8000864:	4603      	mov	r3, r0
 8000866:	4618      	mov	r0, r3
 8000868:	f002 f9e0 	bl	8002c2c <srand>

    estados_LCD estadoTeste = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	71fb      	strb	r3, [r7, #7]
    //uint8_t flagTest = FALSE;

    initGame();
 8000870:	f7ff fcba 	bl	80001e8 <initGame>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (flag1ms)
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <main+0x80>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d00b      	beq.n	8000894 <main+0x58>
        {
            flag1ms = FALSE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <main+0x80>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
            Write_Display();
 8000882:	f7ff fe0f 	bl	80004a4 <Write_Display>
            taskMatrizLed();
 8000886:	f7ff fd11 	bl	80002ac <taskMatrizLed>
            taskTetris();
 800088a:	f7ff fcf7 	bl	800027c <taskTetris>
            changeMatriz(board);
 800088e:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <main+0x84>)
 8000890:	f7ff fdc2 	bl	8000418 <changeMatriz>
        }

        if (count100ms >= 100)
 8000894:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <main+0x88>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b63      	cmp	r3, #99	@ 0x63
 800089a:	d904      	bls.n	80008a6 <main+0x6a>
        {

            count100ms = 0;
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <main+0x88>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
            // flagTest == TRUE ? changeMatriz(MatrizLedB) : changeMatriz(MatrizLedA);
            // flagTest = flagTest == TRUE ? 0 : 1;
            lcd_Task();
 80008a2:	f7ff fc53 	bl	800014c <lcd_Task>
        }

        if (count1000ms >= 1000)
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <main+0x8c>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008ae:	d3e1      	bcc.n	8000874 <main+0x38>
        {
            count1000ms = 0;
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <main+0x8c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	801a      	strh	r2, [r3, #0]
        if (flag1ms)
 80008b6:	e7dd      	b.n	8000874 <main+0x38>
 80008b8:	20000344 	.word	0x20000344
 80008bc:	2000038c 	.word	0x2000038c
 80008c0:	20000394 	.word	0x20000394
 80008c4:	2000038d 	.word	0x2000038d
 80008c8:	2000038e 	.word	0x2000038e

080008cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b090      	sub	sp, #64	@ 0x40
 80008d0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0318 	add.w	r3, r7, #24
 80008d6:	2228      	movs	r2, #40	@ 0x28
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fc1c 	bl	8003118 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008f6:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fc:	2301      	movs	r3, #1
 80008fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000900:	2302      	movs	r3, #2
 8000902:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000904:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000908:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800090a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800090e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	f107 0318 	add.w	r3, r7, #24
 8000914:	4618      	mov	r0, r3
 8000916:	f001 f9b9 	bl	8001c8c <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x58>
    {
        Error_Handler();
 8000920:	f000 f8f6 	bl	8000b10 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000924:	230f      	movs	r3, #15
 8000926:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000928:	2302      	movs	r3, #2
 800092a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000934:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093a:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2102      	movs	r1, #2
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fc25 	bl	8002190 <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x84>
    {
        Error_Handler();
 800094c:	f000 f8e0 	bl	8000b10 <Error_Handler>
    }
}
 8000950:	bf00      	nop
 8000952:	3740      	adds	r7, #64	@ 0x40
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8000974:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_TIM2_Init+0x94>)
 8000976:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800097a:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 7199;
 800097c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ec <MX_TIM2_Init+0x94>)
 800097e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000982:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <MX_TIM2_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 9;
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <MX_TIM2_Init+0x94>)
 800098c:	2209      	movs	r2, #9
 800098e:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <MX_TIM2_Init+0x94>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MX_TIM2_Init+0x94>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800099c:	4813      	ldr	r0, [pc, #76]	@ (80009ec <MX_TIM2_Init+0x94>)
 800099e:	f001 fd53 	bl	8002448 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM2_Init+0x54>
    {
        Error_Handler();
 80009a8:	f000 f8b2 	bl	8000b10 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b0:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4619      	mov	r1, r3
 80009b8:	480c      	ldr	r0, [pc, #48]	@ (80009ec <MX_TIM2_Init+0x94>)
 80009ba:	f001 fed7 	bl	800276c <HAL_TIM_ConfigClockSource>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0x70>
    {
        Error_Handler();
 80009c4:	f000 f8a4 	bl	8000b10 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_TIM2_Init+0x94>)
 80009d6:	f002 f8b9 	bl	8002b4c <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0x8c>
    {
        Error_Handler();
 80009e0:	f000 f896 	bl	8000b10 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 80009e4:	bf00      	nop
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000344 	.word	0x20000344

080009f0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a04:	4b3e      	ldr	r3, [pc, #248]	@ (8000b00 <MX_GPIO_Init+0x110>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a3d      	ldr	r2, [pc, #244]	@ (8000b00 <MX_GPIO_Init+0x110>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b3b      	ldr	r3, [pc, #236]	@ (8000b00 <MX_GPIO_Init+0x110>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0310 	and.w	r3, r3, #16
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1c:	4b38      	ldr	r3, [pc, #224]	@ (8000b00 <MX_GPIO_Init+0x110>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a37      	ldr	r2, [pc, #220]	@ (8000b00 <MX_GPIO_Init+0x110>)
 8000a22:	f043 0320 	orr.w	r3, r3, #32
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b35      	ldr	r3, [pc, #212]	@ (8000b00 <MX_GPIO_Init+0x110>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0320 	and.w	r3, r3, #32
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b32      	ldr	r3, [pc, #200]	@ (8000b00 <MX_GPIO_Init+0x110>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a31      	ldr	r2, [pc, #196]	@ (8000b00 <MX_GPIO_Init+0x110>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b2f      	ldr	r3, [pc, #188]	@ (8000b00 <MX_GPIO_Init+0x110>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b00 <MX_GPIO_Init+0x110>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a2b      	ldr	r2, [pc, #172]	@ (8000b00 <MX_GPIO_Init+0x110>)
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <MX_GPIO_Init+0x110>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0308 	and.w	r3, r3, #8
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin | LCD_E_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000a6a:	4826      	ldr	r0, [pc, #152]	@ (8000b04 <MX_GPIO_Init+0x114>)
 8000a6c:	f001 f8dc 	bl	8001c28 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2178      	movs	r1, #120	@ 0x78
 8000a74:	4824      	ldr	r0, [pc, #144]	@ (8000b08 <MX_GPIO_Init+0x118>)
 8000a76:	f001 f8d7 	bl	8001c28 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, D_Pin | CLK1_Pin | CLK2_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000a80:	4822      	ldr	r0, [pc, #136]	@ (8000b0c <MX_GPIO_Init+0x11c>)
 8000a82:	f001 f8d1 	bl	8001c28 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin */
    GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_E_Pin;
 8000a86:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4819      	ldr	r0, [pc, #100]	@ (8000b04 <MX_GPIO_Init+0x114>)
 8000aa0:	f000 ff3e 	bl	8001920 <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
    GPIO_InitStruct.Pin = LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 8000aa4:	2378      	movs	r3, #120	@ 0x78
 8000aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4813      	ldr	r0, [pc, #76]	@ (8000b08 <MX_GPIO_Init+0x118>)
 8000abc:	f000 ff30 	bl	8001920 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOTAO_Pin */
    GPIO_InitStruct.Pin = BOTAO_Pin;
 8000ac0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <MX_GPIO_Init+0x11c>)
 8000ad6:	f000 ff23 	bl	8001920 <HAL_GPIO_Init>

    /*Configure GPIO pins : D_Pin CLK1_Pin CLK2_Pin */
    GPIO_InitStruct.Pin = D_Pin | CLK1_Pin | CLK2_Pin;
 8000ada:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4619      	mov	r1, r3
 8000af2:	4806      	ldr	r0, [pc, #24]	@ (8000b0c <MX_GPIO_Init+0x11c>)
 8000af4:	f000 ff14 	bl	8001920 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000af8:	bf00      	nop
 8000afa:	3720      	adds	r7, #32
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40011000 	.word	0x40011000
 8000b08:	40010800 	.word	0x40010800
 8000b0c:	40010c00 	.word	0x40010c00

08000b10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <HAL_MspInit+0x5c>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <HAL_MspInit+0x5c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <HAL_MspInit+0x5c>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <HAL_MspInit+0x5c>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b78 <HAL_MspInit+0x5c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <HAL_MspInit+0x5c>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_MspInit+0x60>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <HAL_MspInit+0x60>)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010000 	.word	0x40010000

08000b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b90:	d113      	bne.n	8000bba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b92:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <HAL_TIM_Base_MspInit+0x44>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc4 <HAL_TIM_Base_MspInit+0x44>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HAL_TIM_Base_MspInit+0x44>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	201c      	movs	r0, #28
 8000bb0:	f000 fe7f 	bl	80018b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bb4:	201c      	movs	r0, #28
 8000bb6:	f000 fe98 	bl	80018ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <MemManage_Handler+0x4>

08000be0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <UsageFault_Handler+0x4>

08000bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 fd34 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <TIM2_IRQHandler+0x10>)
 8000c26:	f001 fcb1 	bl	800258c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000344 	.word	0x20000344

08000c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return 1;
 8000c38:	2301      	movs	r3, #1
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <_kill>:

int _kill(int pid, int sig)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c4c:	f002 fab2 	bl	80031b4 <__errno>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2216      	movs	r2, #22
 8000c54:	601a      	str	r2, [r3, #0]
  return -1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_exit>:

void _exit (int status)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c6a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffe7 	bl	8000c42 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <_exit+0x12>

08000c78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e00a      	b.n	8000ca0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c8a:	f3af 8000 	nop.w
 8000c8e:	4601      	mov	r1, r0
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	b2ca      	uxtb	r2, r1
 8000c98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	dbf0      	blt.n	8000c8a <_read+0x12>
  }

  return len;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	e009      	b.n	8000cd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf1      	blt.n	8000cc4 <_write+0x12>
  }
  return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_close>:

int _close(int file)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d10:	605a      	str	r2, [r3, #4]
  return 0;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <_isatty>:

int _isatty(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
	...

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	@ (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f002 fa1a 	bl	80031b4 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20005000 	.word	0x20005000
 8000dac:	00000500 	.word	0x00000500
 8000db0:	20000390 	.word	0x20000390
 8000db4:	200005b8 	.word	0x200005b8

08000db8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <init_game>:
 * Esta função preenche o tabuleiro com zeros, garantindo que todas as
 * posições estejam vazias no início do jogo. Também inicializa a próxima peça
 * a partir de um número aleatório.
 */
void init_game()
{
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
    //printf("Iniciando Tetris...\n");

    for (int i = 0; i < ROWS; i++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	e013      	b.n	8000df8 <init_game+0x34>
    {
        for (int j = 0; j < COLS; j++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	e00a      	b.n	8000dec <init_game+0x28>
        {
            board[i][j] = 0;
 8000dd6:	4a17      	ldr	r2, [pc, #92]	@ (8000e34 <init_game+0x70>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	441a      	add	r2, r3
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	4413      	add	r3, r2
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < COLS; j++)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	2b07      	cmp	r3, #7
 8000df0:	ddf1      	ble.n	8000dd6 <init_game+0x12>
    for (int i = 0; i < ROWS; i++)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3301      	adds	r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b0f      	cmp	r3, #15
 8000dfc:	dde8      	ble.n	8000dd0 <init_game+0xc>
        }
    }
    next_number = number_aleatory_peace();
 8000dfe:	f000 f993 	bl	8001128 <number_aleatory_peace>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a0c      	ldr	r2, [pc, #48]	@ (8000e38 <init_game+0x74>)
 8000e06:	6013      	str	r3, [r2, #0]
    next_peace = pecas[next_number];
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <init_game+0x74>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	490b      	ldr	r1, [pc, #44]	@ (8000e3c <init_game+0x78>)
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e40 <init_game+0x7c>)
 8000e10:	019b      	lsls	r3, r3, #6
 8000e12:	4413      	add	r3, r2
 8000e14:	460c      	mov	r4, r1
 8000e16:	461d      	mov	r5, r3
 8000e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bdb0      	pop	{r4, r5, r7, pc}
 8000e34:	20000394 	.word	0x20000394
 8000e38:	20000424 	.word	0x20000424
 8000e3c:	20000428 	.word	0x20000428
 8000e40:	2000002c 	.word	0x2000002c

08000e44 <place_piece>:
 * @param coluna  Posição inicial da peça no eixo horizontal.
 * @param peca    Estrutura contendo o formato da peça.
 */

void place_piece(int linha, int coluna, PecaTetris peca)
{
 8000e44:	b082      	sub	sp, #8
 8000e46:	b480      	push	{r7}
 8000e48:	b087      	sub	sp, #28
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
 8000e50:	f107 0120 	add.w	r1, r7, #32
 8000e54:	e881 000c 	stmia.w	r1, {r2, r3}

    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e031      	b.n	8000ec2 <place_piece+0x7e>
    {
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	e028      	b.n	8000eb6 <place_piece+0x72>
        {
            if (peca.shape[i][j] == 1)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	009a      	lsls	r2, r3, #2
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	f107 0220 	add.w	r2, r7, #32
 8000e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d11b      	bne.n	8000eb0 <place_piece+0x6c>
            {
                int board_linha = linha + i;
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4413      	add	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha >= 0 && board_linha < ROWS && board_coluna >= 0 && board_coluna < COLS)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db10      	blt.n	8000eb0 <place_piece+0x6c>
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	dc0d      	bgt.n	8000eb0 <place_piece+0x6c>
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0a      	blt.n	8000eb0 <place_piece+0x6c>
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2b07      	cmp	r3, #7
 8000e9e:	dc07      	bgt.n	8000eb0 <place_piece+0x6c>
                {
                    board[board_linha][board_coluna] = 1;
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <place_piece+0x94>)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	441a      	add	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4413      	add	r3, r2
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	ddd3      	ble.n	8000e64 <place_piece+0x20>
    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	ddca      	ble.n	8000e5e <place_piece+0x1a>
                }
            }
        }
    }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	b002      	add	sp, #8
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000394 	.word	0x20000394

08000edc <remove_piece>:
 * @param coluna  Posição inicial da peça no eixo horizontal.
 * @param peca    Estrutura contendo o formato da peça.
 */

void remove_piece(int linha, int coluna, PecaTetris peca)
{
 8000edc:	b082      	sub	sp, #8
 8000ede:	b480      	push	{r7}
 8000ee0:	b087      	sub	sp, #28
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
 8000ee8:	f107 0120 	add.w	r1, r7, #32
 8000eec:	e881 000c 	stmia.w	r1, {r2, r3}
    for (int i = 0; i < 4; i++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	e031      	b.n	8000f5a <remove_piece+0x7e>
    {
        for (int j = 0; j < 4; j++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	e028      	b.n	8000f4e <remove_piece+0x72>
        {
            if (peca.shape[i][j] == 1)
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	009a      	lsls	r2, r3, #2
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4413      	add	r3, r2
 8000f04:	f107 0220 	add.w	r2, r7, #32
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d11b      	bne.n	8000f48 <remove_piece+0x6c>
            {
                int board_linha = linha + i;
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	4413      	add	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha >= 0 && board_linha < ROWS && board_coluna >= 0 && board_coluna < COLS)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db10      	blt.n	8000f48 <remove_piece+0x6c>
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	dc0d      	bgt.n	8000f48 <remove_piece+0x6c>
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0a      	blt.n	8000f48 <remove_piece+0x6c>
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2b07      	cmp	r3, #7
 8000f36:	dc07      	bgt.n	8000f48 <remove_piece+0x6c>
                {
                    board[board_linha][board_coluna] = 0;
 8000f38:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <remove_piece+0x94>)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	441a      	add	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4413      	add	r3, r2
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	ddd3      	ble.n	8000efc <remove_piece+0x20>
    for (int i = 0; i < 4; i++)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	ddca      	ble.n	8000ef6 <remove_piece+0x1a>
                }
            }
        }
    }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	b002      	add	sp, #8
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000394 	.word	0x20000394

08000f74 <can_move>:
 * @param peca    Estrutura contendo o formato da peça.
 * @return        1 se o movimento for válido, 0 caso contrário.
 */

int can_move(int linha, int coluna, PecaTetris peca)
{
 8000f74:	b082      	sub	sp, #8
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
 8000f80:	f107 0120 	add.w	r1, r7, #32
 8000f84:	e881 000c 	stmia.w	r1, {r2, r3}

    for (int i = 0; i < 4; i++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e03c      	b.n	8001008 <can_move+0x94>
    {
        for (int j = 0; j < 4; j++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	e033      	b.n	8000ffc <can_move+0x88>
        {
            if (peca.shape[i][j] == 1)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	009a      	lsls	r2, r3, #2
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f107 0220 	add.w	r2, r7, #32
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d126      	bne.n	8000ff6 <can_move+0x82>
            {
                int board_linha = linha + i;
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	4413      	add	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha < 0 || board_linha >= ROWS || board_coluna < 0 || board_coluna >= COLS)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db08      	blt.n	8000fd0 <can_move+0x5c>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	dc05      	bgt.n	8000fd0 <can_move+0x5c>
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db02      	blt.n	8000fd0 <can_move+0x5c>
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b07      	cmp	r3, #7
 8000fce:	dd04      	ble.n	8000fda <can_move+0x66>
                {
#ifdef DEBUG
                    printf("\nMovimento Invalido\n");
 8000fd0:	4813      	ldr	r0, [pc, #76]	@ (8001020 <can_move+0xac>)
 8000fd2:	f001 ffc1 	bl	8002f58 <puts>
#endif
                    return 0; // Movimento inválido
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e01a      	b.n	8001010 <can_move+0x9c>
                }

                // Verifica se a posição está ocupada
                if (board[board_linha][board_coluna] == 2)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <can_move+0xb0>)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	441a      	add	r2, r3
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d104      	bne.n	8000ff6 <can_move+0x82>
                {
#ifdef DEBUG
                    printf("\nMovimento Invalido\n");
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <can_move+0xac>)
 8000fee:	f001 ffb3 	bl	8002f58 <puts>
#endif
                    return 0; // Movimento inválido
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e00c      	b.n	8001010 <can_move+0x9c>
        for (int j = 0; j < 4; j++)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	ddc8      	ble.n	8000f94 <can_move+0x20>
    for (int i = 0; i < 4; i++)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b03      	cmp	r3, #3
 800100c:	ddbf      	ble.n	8000f8e <can_move+0x1a>
                }
            }
        }
    }

    return 1; // Movimento válido
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800101a:	b002      	add	sp, #8
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	08003dec 	.word	0x08003dec
 8001024:	20000394 	.word	0x20000394

08001028 <move_piece_down>:
 * @param peca        Ponteiro para a estrutura da peça que está em jogo.
 * @param peca_atual  Ponteiro para o índice da peça atual.
 * @return            Retorna 0 se a peça continuar descendo e 1 se ela foi fixada.
 */
int move_piece_down(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b097      	sub	sp, #92	@ 0x5c
 800102c:	af0e      	add	r7, sp, #56	@ 0x38
 800102e:	6178      	str	r0, [r7, #20]
 8001030:	6139      	str	r1, [r7, #16]
 8001032:	60fa      	str	r2, [r7, #12]
 8001034:	60bb      	str	r3, [r7, #8]
    int nova_linha = *linha + 1;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	61fb      	str	r3, [r7, #28]

    // Verifica se a peça pode se mover para baixo (se a linha não está fora do tabuleiro e não há outra peça no caminho)
    if (can_move(nova_linha, *coluna, *peca)) // A função can_move agora verifica se a nova posição é válida
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	68fe      	ldr	r6, [r7, #12]
 8001046:	466d      	mov	r5, sp
 8001048:	f106 0408 	add.w	r4, r6, #8
 800104c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001058:	e894 0003 	ldmia.w	r4, {r0, r1}
 800105c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001060:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	69f8      	ldr	r0, [r7, #28]
 8001068:	f7ff ff84 	bl	8000f74 <can_move>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d038      	beq.n	80010e4 <move_piece_down+0xbc>
    {
        // Apaga a peça da posição atual
        remove_piece(*linha, *coluna, *peca);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	603a      	str	r2, [r7, #0]
 800107e:	68fe      	ldr	r6, [r7, #12]
 8001080:	466d      	mov	r5, sp
 8001082:	f106 0408 	add.w	r4, r6, #8
 8001086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800108a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800108c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800108e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001092:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001096:	e885 0003 	stmia.w	r5, {r0, r1}
 800109a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800109e:	6839      	ldr	r1, [r7, #0]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff1b 	bl	8000edc <remove_piece>

        // Atualiza a posição da peça
        *linha = nova_linha;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	601a      	str	r2, [r3, #0]

        // Coloca a peça na nova posição
        place_piece(*linha, *coluna, *peca);
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	603a      	str	r2, [r7, #0]
 80010b8:	68fe      	ldr	r6, [r7, #12]
 80010ba:	466d      	mov	r5, sp
 80010bc:	f106 0408 	add.w	r4, r6, #8
 80010c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010d4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff feb2 	bl	8000e44 <place_piece>
        return 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e01c      	b.n	800111e <move_piece_down+0xf6>
    }
    else
    {
        fix_piece(linha, coluna, *peca);
 80010e4:	68fe      	ldr	r6, [r7, #12]
 80010e6:	466d      	mov	r5, sp
 80010e8:	f106 0408 	add.w	r4, r6, #8
 80010ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001100:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001104:	6939      	ldr	r1, [r7, #16]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f000 f8b0 	bl	800126c <fix_piece>
        remove_full_lines();
 800110c:	f000 f8ec 	bl	80012e8 <remove_full_lines>
        generate_next_piece(linha, coluna, peca, peca_atual);
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	6939      	ldr	r1, [r7, #16]
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f000 f864 	bl	80011e4 <generate_next_piece>
        return 1;
 800111c:	2301      	movs	r3, #1
    }
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	@ 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001128 <number_aleatory_peace>:
 *
 * @return       Um número entre 0 e 6, representando o tipo da peça aleatória.
 */

int number_aleatory_peace()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
    return rand() % 7; // Gera um número entre 0 e 6
 800112c:	f001 fdac 	bl	8002c88 <rand>
 8001130:	4602      	mov	r2, r0
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <number_aleatory_peace+0x28>)
 8001134:	fb83 1302 	smull	r1, r3, r3, r2
 8001138:	4413      	add	r3, r2
 800113a:	1099      	asrs	r1, r3, #2
 800113c:	17d3      	asrs	r3, r2, #31
 800113e:	1ac9      	subs	r1, r1, r3
 8001140:	460b      	mov	r3, r1
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	1a5b      	subs	r3, r3, r1
 8001146:	1ad1      	subs	r1, r2, r3
 8001148:	460b      	mov	r3, r1
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	92492493 	.word	0x92492493

08001154 <check_piece_at_bottom>:
 *
 * @return 1 se a peça atingiu o fundo ou colidiu com outra peça; 0 caso contrário.
 */

int check_piece_at_bottom(int *linha, int *coluna, PecaTetris peca)
{
 8001154:	b082      	sub	sp, #8
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
 8001160:	f107 0118 	add.w	r1, r7, #24
 8001164:	e881 000c 	stmia.w	r1, {r2, r3}

    // Verifique se há outra peça abaixo dela (posição da peça no tabuleiro)
    for (int i = 0; i < 4; i++)
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	e02d      	b.n	80011ca <check_piece_at_bottom+0x76>
    {
        for (int j = 0; j < 4; j++)
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	e024      	b.n	80011be <check_piece_at_bottom+0x6a>
        {
            if (peca.shape[i][j] == 1)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	009a      	lsls	r2, r3, #2
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4413      	add	r3, r2
 800117c:	f107 0218 	add.w	r2, r7, #24
 8001180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d117      	bne.n	80011b8 <check_piece_at_bottom+0x64>
            {
                if (board[*linha + i + 1][*coluna + j] == 2 || (*linha + i) >= 15) // Se houver uma peça fixa abaixo
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	6819      	ldr	r1, [r3, #0]
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	440b      	add	r3, r1
 800119a:	4911      	ldr	r1, [pc, #68]	@ (80011e0 <check_piece_at_bottom+0x8c>)
 800119c:	00d2      	lsls	r2, r2, #3
 800119e:	440a      	add	r2, r1
 80011a0:	4413      	add	r3, r2
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d005      	beq.n	80011b4 <check_piece_at_bottom+0x60>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	2b0e      	cmp	r3, #14
 80011b2:	dd01      	ble.n	80011b8 <check_piece_at_bottom+0x64>
                {
                    return 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e00c      	b.n	80011d2 <check_piece_at_bottom+0x7e>
        for (int j = 0; j < 4; j++)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	3301      	adds	r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	ddd7      	ble.n	8001174 <check_piece_at_bottom+0x20>
    for (int i = 0; i < 4; i++)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3301      	adds	r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	ddce      	ble.n	800116e <check_piece_at_bottom+0x1a>
                }
            }
        }
    }

    return 0; // A peça não atingiu o fundo
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	b002      	add	sp, #8
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000394 	.word	0x20000394

080011e4 <generate_next_piece>:
 * @param peca        Ponteiro para a estrutura da peça que será colocada no tabuleiro.
 * @param peca_atual  Ponteiro para armazenar o índice da peça atual.
 */

void generate_next_piece(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	603b      	str	r3, [r7, #0]
    *peca_atual = next_number;
 80011f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <generate_next_piece+0x7c>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	601a      	str	r2, [r3, #0]
    *peca = pecas[*peca_atual];
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4a18      	ldr	r2, [pc, #96]	@ (8001264 <generate_next_piece+0x80>)
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	4413      	add	r3, r2
 8001206:	460c      	mov	r4, r1
 8001208:	461d      	mov	r5, r3
 800120a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001216:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800121a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    next_number = number_aleatory_peace();
 800121e:	f7ff ff83 	bl	8001128 <number_aleatory_peace>
 8001222:	4603      	mov	r3, r0
 8001224:	4a0e      	ldr	r2, [pc, #56]	@ (8001260 <generate_next_piece+0x7c>)
 8001226:	6013      	str	r3, [r2, #0]
    next_peace = pecas[next_number];
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <generate_next_piece+0x7c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	490e      	ldr	r1, [pc, #56]	@ (8001268 <generate_next_piece+0x84>)
 800122e:	4a0d      	ldr	r2, [pc, #52]	@ (8001264 <generate_next_piece+0x80>)
 8001230:	019b      	lsls	r3, r3, #6
 8001232:	4413      	add	r3, r2
 8001234:	460c      	mov	r4, r1
 8001236:	461d      	mov	r5, r3
 8001238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001244:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Define a posição inicial da nova peça
    *linha = 0;  // Começa do topo
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
    *coluna = 3; // Começa no meio do tabuleiro
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2203      	movs	r2, #3
 8001256:	601a      	str	r2, [r3, #0]
}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bdb0      	pop	{r4, r5, r7, pc}
 8001260:	20000424 	.word	0x20000424
 8001264:	2000002c 	.word	0x2000002c
 8001268:	20000428 	.word	0x20000428

0800126c <fix_piece>:
 * @param coluna A coluna onde a peça está atualmente posicionada no tabuleiro.
 * @param peca   A peça que deve ser fixada no tabuleiro.
 */

void fix_piece(int *linha, int *coluna, PecaTetris peca)
{
 800126c:	b082      	sub	sp, #8
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
 8001278:	f107 0118 	add.w	r1, r7, #24
 800127c:	e881 000c 	stmia.w	r1, {r2, r3}
    // Adiciona a peça no tabuleiro, tornando-a fixa
    for (int i = 0; i < 4; i++)
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	e023      	b.n	80012ce <fix_piece+0x62>
    {
        for (int j = 0; j < 4; j++)
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	e01a      	b.n	80012c2 <fix_piece+0x56>
        {
            if (peca.shape[i][j] == 1)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	009a      	lsls	r2, r3, #2
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4413      	add	r3, r2
 8001294:	f107 0218 	add.w	r2, r7, #24
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d10d      	bne.n	80012bc <fix_piece+0x50>
            {
                board[*linha + i][*coluna + j] = 2; // Marca a posição com 2, indicando que está fixa
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	441a      	add	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	6819      	ldr	r1, [r3, #0]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	440b      	add	r3, r1
 80012b0:	490c      	ldr	r1, [pc, #48]	@ (80012e4 <fix_piece+0x78>)
 80012b2:	00d2      	lsls	r2, r2, #3
 80012b4:	440a      	add	r2, r1
 80012b6:	4413      	add	r3, r2
 80012b8:	2202      	movs	r2, #2
 80012ba:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3301      	adds	r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	dde1      	ble.n	800128c <fix_piece+0x20>
    for (int i = 0; i < 4; i++)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	ddd8      	ble.n	8001286 <fix_piece+0x1a>
            }
        }
    }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	b002      	add	sp, #8
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000394 	.word	0x20000394

080012e8 <remove_full_lines>:
 * acima dela são deslocadas para baixo. A primeira linha do tabuleiro é então limpa.
 * Caso uma ou mais linhas sejam removidas, a pontuação e o nível do jogador são atualizados.
 */

void remove_full_lines()
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0

    int linhas_removidas = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]

    for (int i = ROWS - 1; i >= 0; i--) // Começa da última linha e vai subindo
 80012f2:	230f      	movs	r3, #15
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	e052      	b.n	800139e <remove_full_lines+0xb6>
    {
        int complete = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]

        // Verifica se a linha está completa
        for (int j = 0; j < COLS; j++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	e00e      	b.n	8001320 <remove_full_lines+0x38>
        {
            if (board[i][j] != 2) // Se qualquer célula não for preenchida
 8001302:	4a31      	ldr	r2, [pc, #196]	@ (80013c8 <remove_full_lines+0xe0>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	441a      	add	r2, r3
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d002      	beq.n	800131a <remove_full_lines+0x32>
            {
                complete = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
                break; // Se a linha não estiver completa, sai do loop
 8001318:	e005      	b.n	8001326 <remove_full_lines+0x3e>
        for (int j = 0; j < COLS; j++)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	3301      	adds	r3, #1
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	2b07      	cmp	r3, #7
 8001324:	dded      	ble.n	8001302 <remove_full_lines+0x1a>
            }
        }

        // Se a linha estiver completa, removemos a linha e deslocamos as linhas acima
        if (complete)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d035      	beq.n	8001398 <remove_full_lines+0xb0>
        {

            linhas_removidas++;
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	3301      	adds	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]

            // Desloca todas as linhas acima uma posição para baixo
            for (int k = i; k > 0; k--)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	e01b      	b.n	8001370 <remove_full_lines+0x88>
            {
                for (int j = 0; j < COLS; j++)
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	e012      	b.n	8001364 <remove_full_lines+0x7c>
                {
                    board[k][j] = board[k - 1][j];
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3b01      	subs	r3, #1
 8001342:	4a21      	ldr	r2, [pc, #132]	@ (80013c8 <remove_full_lines+0xe0>)
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	441a      	add	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4413      	add	r3, r2
 800134c:	7819      	ldrb	r1, [r3, #0]
 800134e:	4a1e      	ldr	r2, [pc, #120]	@ (80013c8 <remove_full_lines+0xe0>)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	441a      	add	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	460a      	mov	r2, r1
 800135c:	701a      	strb	r2, [r3, #0]
                for (int j = 0; j < COLS; j++)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3301      	adds	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b07      	cmp	r3, #7
 8001368:	dde9      	ble.n	800133e <remove_full_lines+0x56>
            for (int k = i; k > 0; k--)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3b01      	subs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	dce0      	bgt.n	8001338 <remove_full_lines+0x50>
                }
            }

            // Limpa a primeira linha (agora vazia)
            for (int j = 0; j < COLS; j++)
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	e007      	b.n	800138c <remove_full_lines+0xa4>
            {
                board[0][j] = 0;
 800137c:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <remove_full_lines+0xe0>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < COLS; j++)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3301      	adds	r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b07      	cmp	r3, #7
 8001390:	ddf4      	ble.n	800137c <remove_full_lines+0x94>
            }

            // Como movemos as linhas para baixo, não precisamos verificar a linha removida novamente
            i++; // Reanalisa a linha atual, pois ela pode ter se tornado completa após o deslocamento
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	3301      	adds	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
    for (int i = ROWS - 1; i >= 0; i--) // Começa da última linha e vai subindo
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	3b01      	subs	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	daa9      	bge.n	80012f8 <remove_full_lines+0x10>
        }
    }
    if (linhas_removidas > 0)
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	dd0a      	ble.n	80013c0 <remove_full_lines+0xd8>
    {
        atualizar_pontuacao(linhas_removidas);
 80013aa:	69f8      	ldr	r0, [r7, #28]
 80013ac:	f000 f898 	bl	80014e0 <atualizar_pontuacao>

#ifdef DEBUG
        printf("Pontuação: %d   Nível: %d\n", pontuacao, nivel);
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <remove_full_lines+0xe4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a06      	ldr	r2, [pc, #24]	@ (80013d0 <remove_full_lines+0xe8>)
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	4806      	ldr	r0, [pc, #24]	@ (80013d4 <remove_full_lines+0xec>)
 80013bc:	f001 fd64 	bl	8002e88 <iprintf>
#endif
    }
}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000394 	.word	0x20000394
 80013cc:	20000418 	.word	0x20000418
 80013d0:	2000041c 	.word	0x2000041c
 80013d4:	08003e00 	.word	0x08003e00

080013d8 <update_game>:
 * @param coluna     Ponteiro para a posição horizontal da peça no tabuleiro.
 * @param peca       Ponteiro para a estrutura da peça atual.
 * @param peca_atual Ponteiro para o índice da peça atual.
 */
void update_game(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	b093      	sub	sp, #76	@ 0x4c
 80013dc:	af0e      	add	r7, sp, #56	@ 0x38
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]

    incrementTime();
 80013e6:	f000 f851 	bl	800148c <incrementTime>

    // Se o tempo acumulado atingir o limiar, move a peça para baixo
    if (timer_counter >= TEMPO_BASE / multiplicador_tempo)
 80013ea:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <update_game+0xac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80013f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <update_game+0xb0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d83c      	bhi.n	800147a <update_game+0xa2>
    {

        if (check_piece_at_bottom(linha, coluna, *peca) == 1)
 8001400:	687e      	ldr	r6, [r7, #4]
 8001402:	466d      	mov	r5, sp
 8001404:	f106 0408 	add.w	r4, r6, #8
 8001408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001414:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001418:	e885 0003 	stmia.w	r5, {r0, r1}
 800141c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f7ff fe96 	bl	8001154 <check_piece_at_bottom>
 8001428:	4603      	mov	r3, r0
 800142a:	2b01      	cmp	r3, #1
 800142c:	d11c      	bne.n	8001468 <update_game+0x90>
        {
            fix_piece(linha, coluna, *peca);
 800142e:	687e      	ldr	r6, [r7, #4]
 8001430:	466d      	mov	r5, sp
 8001432:	f106 0408 	add.w	r4, r6, #8
 8001436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001442:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001446:	e885 0003 	stmia.w	r5, {r0, r1}
 800144a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800144e:	68b9      	ldr	r1, [r7, #8]
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f7ff ff0b 	bl	800126c <fix_piece>
            remove_full_lines();
 8001456:	f7ff ff47 	bl	80012e8 <remove_full_lines>
            generate_next_piece(linha, coluna, peca, peca_atual);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f7ff febf 	bl	80011e4 <generate_next_piece>
 8001466:	e005      	b.n	8001474 <update_game+0x9c>
        }
        else
        {
            move_piece_down(linha, coluna, peca, peca_atual);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f7ff fdda 	bl	8001028 <move_piece_down>
        }

        timer_counter = 0; // Reinicia o contador
 8001474:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <update_game+0xb0>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
    }

    //draw_board();
}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001482:	bf00      	nop
 8001484:	200001ec 	.word	0x200001ec
 8001488:	20000414 	.word	0x20000414

0800148c <incrementTime>:
 *
 * Esta função é chamada a cada milissegundo para atualizar o contador
 * responsável por controlar a gravidade do jogo.
 */
void incrementTime()
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
    // Chamada de 1 ms aqui
    timer_counter++;
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <incrementTime+0x18>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	4a03      	ldr	r2, [pc, #12]	@ (80014a4 <incrementTime+0x18>)
 8001498:	6013      	str	r3, [r2, #0]
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000414 	.word	0x20000414

080014a8 <game_over>:
 * e o jogo deve terminar.
 *
 * @return      Retorna 1 se o jogo acabou (fim de jogo), ou 0 caso contrário.
 */
int game_over()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
    for (int j = 0; j < COLS; j++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	e00a      	b.n	80014ca <game_over+0x22>
    {
        if (board[0][j] == 2)
 80014b4:	4a09      	ldr	r2, [pc, #36]	@ (80014dc <game_over+0x34>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d101      	bne.n	80014c4 <game_over+0x1c>
        {
            return 1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e006      	b.n	80014d2 <game_over+0x2a>
    for (int j = 0; j < COLS; j++)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3301      	adds	r3, #1
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b07      	cmp	r3, #7
 80014ce:	ddf1      	ble.n	80014b4 <game_over+0xc>
        }
    }
    return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000394 	.word	0x20000394

080014e0 <atualizar_pontuacao>:
 *   - 4 linhas: 1200 * (nivel+1)
 *
 * @param linhas_removidas Número de linhas removidas de uma vez.
 */
void atualizar_pontuacao(int linhas_removidas)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    int pontos = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
    switch (linhas_removidas)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d82e      	bhi.n	8001552 <atualizar_pontuacao+0x72>
 80014f4:	a201      	add	r2, pc, #4	@ (adr r2, 80014fc <atualizar_pontuacao+0x1c>)
 80014f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fa:	bf00      	nop
 80014fc:	0800150d 	.word	0x0800150d
 8001500:	0800151f 	.word	0x0800151f
 8001504:	0800152f 	.word	0x0800152f
 8001508:	08001541 	.word	0x08001541
    {
    case 1:
        pontos = 40 * (nivel + 1);
 800150c:	4b23      	ldr	r3, [pc, #140]	@ (800159c <atualizar_pontuacao+0xbc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	60fb      	str	r3, [r7, #12]
        break;
 800151c:	e01a      	b.n	8001554 <atualizar_pontuacao+0x74>
    case 2:
        pontos = 100 * (nivel + 1);
 800151e:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <atualizar_pontuacao+0xbc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	2264      	movs	r2, #100	@ 0x64
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	60fb      	str	r3, [r7, #12]
        break;
 800152c:	e012      	b.n	8001554 <atualizar_pontuacao+0x74>
    case 3:
        pontos = 300 * (nivel + 1);
 800152e:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <atualizar_pontuacao+0xbc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	60fb      	str	r3, [r7, #12]
        break;
 800153e:	e009      	b.n	8001554 <atualizar_pontuacao+0x74>
    case 4:
        pontos = 1200 * (nivel + 1);
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <atualizar_pontuacao+0xbc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	60fb      	str	r3, [r7, #12]
        break;
 8001550:	e000      	b.n	8001554 <atualizar_pontuacao+0x74>
    default:
        break;
 8001552:	bf00      	nop
    }
    pontuacao += pontos;
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <atualizar_pontuacao+0xc0>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	4a10      	ldr	r2, [pc, #64]	@ (80015a0 <atualizar_pontuacao+0xc0>)
 800155e:	6013      	str	r3, [r2, #0]
    linhas_totais += linhas_removidas;
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <atualizar_pontuacao+0xc4>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	4a0e      	ldr	r2, [pc, #56]	@ (80015a4 <atualizar_pontuacao+0xc4>)
 800156a:	6013      	str	r3, [r2, #0]

    // Atualiza o nível se atingir o limite
    if (linhas_totais >= LINHAS_POR_NIVEL)
 800156c:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <atualizar_pontuacao+0xc4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b09      	cmp	r3, #9
 8001572:	dd0e      	ble.n	8001592 <atualizar_pontuacao+0xb2>
    {
        nivel++;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <atualizar_pontuacao+0xbc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	4a08      	ldr	r2, [pc, #32]	@ (800159c <atualizar_pontuacao+0xbc>)
 800157c:	6013      	str	r3, [r2, #0]
        linhas_totais = linhas_totais - LINHAS_POR_NIVEL; // Ou zere e acumule com pontos extras se desejar
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <atualizar_pontuacao+0xc4>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3b0a      	subs	r3, #10
 8001584:	4a07      	ldr	r2, [pc, #28]	@ (80015a4 <atualizar_pontuacao+0xc4>)
 8001586:	6013      	str	r3, [r2, #0]
        // Ajuste a velocidade do jogo, por exemplo:
        multiplicador_tempo++; // Ou reduza o tempo base
 8001588:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <atualizar_pontuacao+0xc8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	4a06      	ldr	r2, [pc, #24]	@ (80015a8 <atualizar_pontuacao+0xc8>)
 8001590:	6013      	str	r3, [r2, #0]
        //printf("\nNível aumentado! Agora é o nível %d\n", nivel);
    }
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	2000041c 	.word	0x2000041c
 80015a0:	20000418 	.word	0x20000418
 80015a4:	20000420 	.word	0x20000420
 80015a8:	200001ec 	.word	0x200001ec

080015ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015ac:	f7ff fc04 	bl	8000db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b0:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015b2:	490c      	ldr	r1, [pc, #48]	@ (80015e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015b4:	4a0c      	ldr	r2, [pc, #48]	@ (80015e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015c8:	4c09      	ldr	r4, [pc, #36]	@ (80015f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d6:	f001 fdf3 	bl	80031c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015da:	f7ff f92f 	bl	800083c <main>
  bx lr
 80015de:	4770      	bx	lr
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80015e8:	08003f40 	.word	0x08003f40
  ldr r2, =_sbss
 80015ec:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 80015f0:	200005b8 	.word	0x200005b8

080015f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC1_2_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <HAL_Init+0x28>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	@ (8001620 <HAL_Init+0x28>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f947 	bl	800189c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fa82 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f95f 	bl	8001906 <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001660:	f000 f927 	bl	80018b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000028 	.word	0x20000028
 800167c:	200001f4 	.word	0x200001f4
 8001680:	200001f0 	.word	0x200001f0

08001684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <HAL_IncTick+0x1c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <HAL_IncTick+0x20>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a03      	ldr	r2, [pc, #12]	@ (80016a4 <HAL_IncTick+0x20>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	200001f4 	.word	0x200001f4
 80016a4:	20000468 	.word	0x20000468

080016a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b02      	ldr	r3, [pc, #8]	@ (80016b8 <HAL_GetTick+0x10>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000468 	.word	0x20000468

080016bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff fff0 	bl	80016a8 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016d4:	d005      	beq.n	80016e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <HAL_Delay+0x44>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e2:	bf00      	nop
 80016e4:	f7ff ffe0 	bl	80016a8 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d8f7      	bhi.n	80016e4 <HAL_Delay+0x28>
  {
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200001f4 	.word	0x200001f4

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4906      	ldr	r1, [pc, #24]	@ (800179c <__NVIC_EnableIRQ+0x34>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	@ (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	@ (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	@ 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	@ 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001868:	d301      	bcc.n	800186e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <SysTick_Config+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001876:	210f      	movs	r1, #15
 8001878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800187c:	f7ff ff90 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <SysTick_Config+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001886:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <SysTick_Config+0x40>)
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff2d 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff42 	bl	800174c <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff90 	bl	80017f4 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5f 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff35 	bl	8001768 <__NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffa2 	bl	8001858 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001920:	b480      	push	{r7}
 8001922:	b08b      	sub	sp, #44	@ 0x2c
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001932:	e169      	b.n	8001c08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001934:	2201      	movs	r2, #1
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	429a      	cmp	r2, r3
 800194e:	f040 8158 	bne.w	8001c02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4a9a      	ldr	r2, [pc, #616]	@ (8001bc0 <HAL_GPIO_Init+0x2a0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d05e      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 800195c:	4a98      	ldr	r2, [pc, #608]	@ (8001bc0 <HAL_GPIO_Init+0x2a0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d875      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 8001962:	4a98      	ldr	r2, [pc, #608]	@ (8001bc4 <HAL_GPIO_Init+0x2a4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d058      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 8001968:	4a96      	ldr	r2, [pc, #600]	@ (8001bc4 <HAL_GPIO_Init+0x2a4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d86f      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 800196e:	4a96      	ldr	r2, [pc, #600]	@ (8001bc8 <HAL_GPIO_Init+0x2a8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d052      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 8001974:	4a94      	ldr	r2, [pc, #592]	@ (8001bc8 <HAL_GPIO_Init+0x2a8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d869      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 800197a:	4a94      	ldr	r2, [pc, #592]	@ (8001bcc <HAL_GPIO_Init+0x2ac>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d04c      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 8001980:	4a92      	ldr	r2, [pc, #584]	@ (8001bcc <HAL_GPIO_Init+0x2ac>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d863      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 8001986:	4a92      	ldr	r2, [pc, #584]	@ (8001bd0 <HAL_GPIO_Init+0x2b0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d046      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
 800198c:	4a90      	ldr	r2, [pc, #576]	@ (8001bd0 <HAL_GPIO_Init+0x2b0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d85d      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 8001992:	2b12      	cmp	r3, #18
 8001994:	d82a      	bhi.n	80019ec <HAL_GPIO_Init+0xcc>
 8001996:	2b12      	cmp	r3, #18
 8001998:	d859      	bhi.n	8001a4e <HAL_GPIO_Init+0x12e>
 800199a:	a201      	add	r2, pc, #4	@ (adr r2, 80019a0 <HAL_GPIO_Init+0x80>)
 800199c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a0:	08001a1b 	.word	0x08001a1b
 80019a4:	080019f5 	.word	0x080019f5
 80019a8:	08001a07 	.word	0x08001a07
 80019ac:	08001a49 	.word	0x08001a49
 80019b0:	08001a4f 	.word	0x08001a4f
 80019b4:	08001a4f 	.word	0x08001a4f
 80019b8:	08001a4f 	.word	0x08001a4f
 80019bc:	08001a4f 	.word	0x08001a4f
 80019c0:	08001a4f 	.word	0x08001a4f
 80019c4:	08001a4f 	.word	0x08001a4f
 80019c8:	08001a4f 	.word	0x08001a4f
 80019cc:	08001a4f 	.word	0x08001a4f
 80019d0:	08001a4f 	.word	0x08001a4f
 80019d4:	08001a4f 	.word	0x08001a4f
 80019d8:	08001a4f 	.word	0x08001a4f
 80019dc:	08001a4f 	.word	0x08001a4f
 80019e0:	08001a4f 	.word	0x08001a4f
 80019e4:	080019fd 	.word	0x080019fd
 80019e8:	08001a11 	.word	0x08001a11
 80019ec:	4a79      	ldr	r2, [pc, #484]	@ (8001bd4 <HAL_GPIO_Init+0x2b4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d013      	beq.n	8001a1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019f2:	e02c      	b.n	8001a4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e029      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	3304      	adds	r3, #4
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e024      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	623b      	str	r3, [r7, #32]
          break;
 8001a0e:	e01f      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	330c      	adds	r3, #12
 8001a16:	623b      	str	r3, [r7, #32]
          break;
 8001a18:	e01a      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a22:	2304      	movs	r3, #4
 8001a24:	623b      	str	r3, [r7, #32]
          break;
 8001a26:	e013      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d105      	bne.n	8001a3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a30:	2308      	movs	r3, #8
 8001a32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	611a      	str	r2, [r3, #16]
          break;
 8001a3a:	e009      	b.n	8001a50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	615a      	str	r2, [r3, #20]
          break;
 8001a46:	e003      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
          break;
 8001a4c:	e000      	b.n	8001a50 <HAL_GPIO_Init+0x130>
          break;
 8001a4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2bff      	cmp	r3, #255	@ 0xff
 8001a54:	d801      	bhi.n	8001a5a <HAL_GPIO_Init+0x13a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	e001      	b.n	8001a5e <HAL_GPIO_Init+0x13e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2bff      	cmp	r3, #255	@ 0xff
 8001a64:	d802      	bhi.n	8001a6c <HAL_GPIO_Init+0x14c>
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	e002      	b.n	8001a72 <HAL_GPIO_Init+0x152>
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	3b08      	subs	r3, #8
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	210f      	movs	r1, #15
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	401a      	ands	r2, r3
 8001a84:	6a39      	ldr	r1, [r7, #32]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80b1 	beq.w	8001c02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	4a4c      	ldr	r2, [pc, #304]	@ (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6193      	str	r3, [r2, #24]
 8001aac:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd8 <HAL_GPIO_Init+0x2b8>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ab8:	4a48      	ldr	r2, [pc, #288]	@ (8001bdc <HAL_GPIO_Init+0x2bc>)
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a40      	ldr	r2, [pc, #256]	@ (8001be0 <HAL_GPIO_Init+0x2c0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d013      	beq.n	8001b0c <HAL_GPIO_Init+0x1ec>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8001be4 <HAL_GPIO_Init+0x2c4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d00d      	beq.n	8001b08 <HAL_GPIO_Init+0x1e8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a3e      	ldr	r2, [pc, #248]	@ (8001be8 <HAL_GPIO_Init+0x2c8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d007      	beq.n	8001b04 <HAL_GPIO_Init+0x1e4>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a3d      	ldr	r2, [pc, #244]	@ (8001bec <HAL_GPIO_Init+0x2cc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d101      	bne.n	8001b00 <HAL_GPIO_Init+0x1e0>
 8001afc:	2303      	movs	r3, #3
 8001afe:	e006      	b.n	8001b0e <HAL_GPIO_Init+0x1ee>
 8001b00:	2304      	movs	r3, #4
 8001b02:	e004      	b.n	8001b0e <HAL_GPIO_Init+0x1ee>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e002      	b.n	8001b0e <HAL_GPIO_Init+0x1ee>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <HAL_GPIO_Init+0x1ee>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b10:	f002 0203 	and.w	r2, r2, #3
 8001b14:	0092      	lsls	r2, r2, #2
 8001b16:	4093      	lsls	r3, r2
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b1e:	492f      	ldr	r1, [pc, #188]	@ (8001bdc <HAL_GPIO_Init+0x2bc>)
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b38:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	492c      	ldr	r1, [pc, #176]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b46:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4928      	ldr	r1, [pc, #160]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b60:	4b23      	ldr	r3, [pc, #140]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	4922      	ldr	r1, [pc, #136]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60cb      	str	r3, [r1, #12]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b6e:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	491e      	ldr	r1, [pc, #120]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b88:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4918      	ldr	r1, [pc, #96]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b96:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4914      	ldr	r1, [pc, #80]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d021      	beq.n	8001bf4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	490e      	ldr	r1, [pc, #56]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
 8001bbc:	e021      	b.n	8001c02 <HAL_GPIO_Init+0x2e2>
 8001bbe:	bf00      	nop
 8001bc0:	10320000 	.word	0x10320000
 8001bc4:	10310000 	.word	0x10310000
 8001bc8:	10220000 	.word	0x10220000
 8001bcc:	10210000 	.word	0x10210000
 8001bd0:	10120000 	.word	0x10120000
 8001bd4:	10110000 	.word	0x10110000
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	40010800 	.word	0x40010800
 8001be4:	40010c00 	.word	0x40010c00
 8001be8:	40011000 	.word	0x40011000
 8001bec:	40011400 	.word	0x40011400
 8001bf0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <HAL_GPIO_Init+0x304>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	4909      	ldr	r1, [pc, #36]	@ (8001c24 <HAL_GPIO_Init+0x304>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	3301      	adds	r3, #1
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f47f ae8e 	bne.w	8001934 <HAL_GPIO_Init+0x14>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	372c      	adds	r7, #44	@ 0x2c
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	40010400 	.word	0x40010400

08001c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]
 8001c34:	4613      	mov	r3, r2
 8001c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c38:	787b      	ldrb	r3, [r7, #1]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c44:	e003      	b.n	8001c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c46:	887b      	ldrh	r3, [r7, #2]
 8001c48:	041a      	lsls	r2, r3, #16
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	611a      	str	r2, [r3, #16]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	041a      	lsls	r2, r3, #16
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	43d9      	mvns	r1, r3
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	400b      	ands	r3, r1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	611a      	str	r2, [r3, #16]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e272      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 8087 	beq.w	8001dba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cac:	4b92      	ldr	r3, [pc, #584]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb8:	4b8f      	ldr	r3, [pc, #572]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d112      	bne.n	8001cea <HAL_RCC_OscConfig+0x5e>
 8001cc4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd0:	d10b      	bne.n	8001cea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd2:	4b89      	ldr	r3, [pc, #548]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d06c      	beq.n	8001db8 <HAL_RCC_OscConfig+0x12c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d168      	bne.n	8001db8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e24c      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x76>
 8001cf4:	4b80      	ldr	r3, [pc, #512]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e02e      	b.n	8001d60 <HAL_RCC_OscConfig+0xd4>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x98>
 8001d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a7a      	ldr	r2, [pc, #488]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b78      	ldr	r3, [pc, #480]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a77      	ldr	r2, [pc, #476]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e01d      	b.n	8001d60 <HAL_RCC_OscConfig+0xd4>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0xbc>
 8001d2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a71      	ldr	r2, [pc, #452]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0xd4>
 8001d48:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b68      	ldr	r3, [pc, #416]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a67      	ldr	r2, [pc, #412]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fc9e 	bl	80016a8 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff fc9a 	bl	80016a8 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	@ 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e200      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0xe4>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fc8a 	bl	80016a8 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fc86 	bl	80016a8 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	@ 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1ec      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x10c>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d063      	beq.n	8001e8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dd2:	4b49      	ldr	r3, [pc, #292]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d11c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x18c>
 8001dde:	4b46      	ldr	r3, [pc, #280]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d116      	bne.n	8001e18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	4b43      	ldr	r3, [pc, #268]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x176>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e1c0      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4939      	ldr	r1, [pc, #228]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	e03a      	b.n	8001e8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d020      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e20:	4b36      	ldr	r3, [pc, #216]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff fc3f 	bl	80016a8 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fc3b 	bl	80016a8 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e1a1      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4927      	ldr	r1, [pc, #156]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]
 8001e60:	e015      	b.n	8001e8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e62:	4b26      	ldr	r3, [pc, #152]	@ (8001efc <HAL_RCC_OscConfig+0x270>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fc1e 	bl	80016a8 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e70:	f7ff fc1a 	bl	80016a8 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e180      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d03a      	beq.n	8001f10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d019      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea2:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fbfe 	bl	80016a8 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fbfa 	bl	80016a8 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e160      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f000 fa9c 	bl	800240c <RCC_Delay>
 8001ed4:	e01c      	b.n	8001f10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001edc:	f7ff fbe4 	bl	80016a8 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee2:	e00f      	b.n	8001f04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fbe0 	bl	80016a8 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d908      	bls.n	8001f04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e146      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	42420000 	.word	0x42420000
 8001f00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	4b92      	ldr	r3, [pc, #584]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e9      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80a6 	beq.w	800206a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f22:	4b8b      	ldr	r3, [pc, #556]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10d      	bne.n	8001f4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b88      	ldr	r3, [pc, #544]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a87      	ldr	r2, [pc, #540]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b85      	ldr	r3, [pc, #532]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f46:	2301      	movs	r3, #1
 8001f48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4a:	4b82      	ldr	r3, [pc, #520]	@ (8002154 <HAL_RCC_OscConfig+0x4c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d118      	bne.n	8001f88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f56:	4b7f      	ldr	r3, [pc, #508]	@ (8002154 <HAL_RCC_OscConfig+0x4c8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002154 <HAL_RCC_OscConfig+0x4c8>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fba1 	bl	80016a8 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6a:	f7ff fb9d 	bl	80016a8 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b64      	cmp	r3, #100	@ 0x64
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e103      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	4b75      	ldr	r3, [pc, #468]	@ (8002154 <HAL_RCC_OscConfig+0x4c8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x312>
 8001f90:	4b6f      	ldr	r3, [pc, #444]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a6e      	ldr	r2, [pc, #440]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6213      	str	r3, [r2, #32]
 8001f9c:	e02d      	b.n	8001ffa <HAL_RCC_OscConfig+0x36e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x334>
 8001fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4a69      	ldr	r2, [pc, #420]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6213      	str	r3, [r2, #32]
 8001fb2:	4b67      	ldr	r3, [pc, #412]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a66      	ldr	r2, [pc, #408]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	f023 0304 	bic.w	r3, r3, #4
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	e01c      	b.n	8001ffa <HAL_RCC_OscConfig+0x36e>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x356>
 8001fc8:	4b61      	ldr	r3, [pc, #388]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	4a60      	ldr	r2, [pc, #384]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6213      	str	r3, [r2, #32]
 8001fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4a5d      	ldr	r2, [pc, #372]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6213      	str	r3, [r2, #32]
 8001fe0:	e00b      	b.n	8001ffa <HAL_RCC_OscConfig+0x36e>
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6213      	str	r3, [r2, #32]
 8001fee:	4b58      	ldr	r3, [pc, #352]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a57      	ldr	r2, [pc, #348]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d015      	beq.n	800202e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002002:	f7ff fb51 	bl	80016a8 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7ff fb4d 	bl	80016a8 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e0b1      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	4b4b      	ldr	r3, [pc, #300]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ee      	beq.n	800200a <HAL_RCC_OscConfig+0x37e>
 800202c:	e014      	b.n	8002058 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7ff fb3b 	bl	80016a8 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7ff fb37 	bl	80016a8 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e09b      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204c:	4b40      	ldr	r3, [pc, #256]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ee      	bne.n	8002036 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d105      	bne.n	800206a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205e:	4b3c      	ldr	r3, [pc, #240]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a3b      	ldr	r2, [pc, #236]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002068:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8087 	beq.w	8002182 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002074:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b08      	cmp	r3, #8
 800207e:	d061      	beq.n	8002144 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d146      	bne.n	8002116 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002088:	4b33      	ldr	r3, [pc, #204]	@ (8002158 <HAL_RCC_OscConfig+0x4cc>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7ff fb0b 	bl	80016a8 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7ff fb07 	bl	80016a8 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e06d      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a8:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f0      	bne.n	8002096 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020bc:	d108      	bne.n	80020d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020be:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	4921      	ldr	r1, [pc, #132]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a19      	ldr	r1, [r3, #32]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	430b      	orrs	r3, r1
 80020e2:	491b      	ldr	r1, [pc, #108]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_RCC_OscConfig+0x4cc>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff fadb 	bl	80016a8 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f6:	f7ff fad7 	bl	80016a8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e03d      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x46a>
 8002114:	e035      	b.n	8002182 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <HAL_RCC_OscConfig+0x4cc>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fac4 	bl	80016a8 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff fac0 	bl	80016a8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e026      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x498>
 8002142:	e01e      	b.n	8002182 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d107      	bne.n	800215c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e019      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
 8002158:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_RCC_OscConfig+0x500>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0d0      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d910      	bls.n	80021d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b67      	ldr	r3, [pc, #412]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0207 	bic.w	r2, r3, #7
 80021ba:	4965      	ldr	r1, [pc, #404]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b63      	ldr	r3, [pc, #396]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0b8      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ec:	4b59      	ldr	r3, [pc, #356]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a58      	ldr	r2, [pc, #352]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002204:	4b53      	ldr	r3, [pc, #332]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a52      	ldr	r2, [pc, #328]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800220e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002210:	4b50      	ldr	r3, [pc, #320]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	494d      	ldr	r1, [pc, #308]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d040      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b47      	ldr	r3, [pc, #284]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d115      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e07f      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224e:	4b41      	ldr	r3, [pc, #260]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e073      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225e:	4b3d      	ldr	r3, [pc, #244]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e06b      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226e:	4b39      	ldr	r3, [pc, #228]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f023 0203 	bic.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4936      	ldr	r1, [pc, #216]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002280:	f7ff fa12 	bl	80016a8 <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	e00a      	b.n	800229e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002288:	f7ff fa0e 	bl	80016a8 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e053      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	4b2d      	ldr	r3, [pc, #180]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 020c 	and.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d1eb      	bne.n	8002288 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b0:	4b27      	ldr	r3, [pc, #156]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d210      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b24      	ldr	r3, [pc, #144]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4922      	ldr	r1, [pc, #136]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b20      	ldr	r3, [pc, #128]	@ (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e032      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ec:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4916      	ldr	r1, [pc, #88]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800230a:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	490e      	ldr	r1, [pc, #56]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800231e:	f000 f821 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8002322:	4602      	mov	r2, r0
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	490a      	ldr	r1, [pc, #40]	@ (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	5ccb      	ldrb	r3, [r1, r3]
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	4a09      	ldr	r2, [pc, #36]	@ (800235c <HAL_RCC_ClockConfig+0x1cc>)
 8002338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800233a:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_RCC_ClockConfig+0x1d0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff f970 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40022000 	.word	0x40022000
 8002354:	40021000 	.word	0x40021000
 8002358:	08003e38 	.word	0x08003e38
 800235c:	20000028 	.word	0x20000028
 8002360:	200001f0 	.word	0x200001f0

08002364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800237e:	4b1e      	ldr	r3, [pc, #120]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b04      	cmp	r3, #4
 800238c:	d002      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x30>
 800238e:	2b08      	cmp	r3, #8
 8002390:	d003      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x36>
 8002392:	e027      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002396:	613b      	str	r3, [r7, #16]
      break;
 8002398:	e027      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	0c9b      	lsrs	r3, r3, #18
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	4a17      	ldr	r2, [pc, #92]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023a4:	5cd3      	ldrb	r3, [r2, r3]
 80023a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d010      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023b2:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	0c5b      	lsrs	r3, r3, #17
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	4a11      	ldr	r2, [pc, #68]	@ (8002404 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x98>)
 80023c6:	fb03 f202 	mul.w	r2, r3, r2
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	e004      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002408 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	613b      	str	r3, [r7, #16]
      break;
 80023e2:	e002      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x98>)
 80023e6:	613b      	str	r3, [r7, #16]
      break;
 80023e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ea:	693b      	ldr	r3, [r7, #16]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	007a1200 	.word	0x007a1200
 8002400:	08003e48 	.word	0x08003e48
 8002404:	08003e58 	.word	0x08003e58
 8002408:	003d0900 	.word	0x003d0900

0800240c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002414:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <RCC_Delay+0x34>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <RCC_Delay+0x38>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a5b      	lsrs	r3, r3, #9
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002428:	bf00      	nop
  }
  while (Delay --);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	60fa      	str	r2, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f9      	bne.n	8002428 <RCC_Delay+0x1c>
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000028 	.word	0x20000028
 8002444:	10624dd3 	.word	0x10624dd3

08002448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e041      	b.n	80024de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fb86 	bl	8000b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3304      	adds	r3, #4
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f000 fa5c 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d001      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e03a      	b.n	8002576 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a18      	ldr	r2, [pc, #96]	@ (8002580 <HAL_TIM_Base_Start_IT+0x98>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00e      	beq.n	8002540 <HAL_TIM_Base_Start_IT+0x58>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800252a:	d009      	beq.n	8002540 <HAL_TIM_Base_Start_IT+0x58>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a14      	ldr	r2, [pc, #80]	@ (8002584 <HAL_TIM_Base_Start_IT+0x9c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d004      	beq.n	8002540 <HAL_TIM_Base_Start_IT+0x58>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a13      	ldr	r2, [pc, #76]	@ (8002588 <HAL_TIM_Base_Start_IT+0xa0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d111      	bne.n	8002564 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b06      	cmp	r3, #6
 8002550:	d010      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002562:	e007      	b.n	8002574 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400
 8002588:	40000800 	.word	0x40000800

0800258c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d020      	beq.n	80025f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01b      	beq.n	80025f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0202 	mvn.w	r2, #2
 80025c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f998 	bl	800290c <HAL_TIM_IC_CaptureCallback>
 80025dc:	e005      	b.n	80025ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f98b 	bl	80028fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f99a 	bl	800291e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d020      	beq.n	800263c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01b      	beq.n	800263c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0204 	mvn.w	r2, #4
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f972 	bl	800290c <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f965 	bl	80028fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f974 	bl	800291e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d020      	beq.n	8002688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01b      	beq.n	8002688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0208 	mvn.w	r2, #8
 8002658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2204      	movs	r2, #4
 800265e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f94c 	bl	800290c <HAL_TIM_IC_CaptureCallback>
 8002674:	e005      	b.n	8002682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f93f 	bl	80028fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f94e 	bl	800291e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d020      	beq.n	80026d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f003 0310 	and.w	r3, r3, #16
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01b      	beq.n	80026d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0210 	mvn.w	r2, #16
 80026a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2208      	movs	r2, #8
 80026aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f926 	bl	800290c <HAL_TIM_IC_CaptureCallback>
 80026c0:	e005      	b.n	80026ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f919 	bl	80028fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f928 	bl	800291e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00c      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0201 	mvn.w	r2, #1
 80026f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe f87e 	bl	80007f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fa7f 	bl	8002c1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00c      	beq.n	8002740 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f8f8 	bl	8002930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0220 	mvn.w	r2, #32
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa52 	bl	8002c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_TIM_ConfigClockSource+0x1c>
 8002784:	2302      	movs	r3, #2
 8002786:	e0b4      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x186>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c0:	d03e      	beq.n	8002840 <HAL_TIM_ConfigClockSource+0xd4>
 80027c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c6:	f200 8087 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ce:	f000 8086 	beq.w	80028de <HAL_TIM_ConfigClockSource+0x172>
 80027d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d6:	d87f      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b70      	cmp	r3, #112	@ 0x70
 80027da:	d01a      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0xa6>
 80027dc:	2b70      	cmp	r3, #112	@ 0x70
 80027de:	d87b      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b60      	cmp	r3, #96	@ 0x60
 80027e2:	d050      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x11a>
 80027e4:	2b60      	cmp	r3, #96	@ 0x60
 80027e6:	d877      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b50      	cmp	r3, #80	@ 0x50
 80027ea:	d03c      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0xfa>
 80027ec:	2b50      	cmp	r3, #80	@ 0x50
 80027ee:	d873      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b40      	cmp	r3, #64	@ 0x40
 80027f2:	d058      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0x13a>
 80027f4:	2b40      	cmp	r3, #64	@ 0x40
 80027f6:	d86f      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b30      	cmp	r3, #48	@ 0x30
 80027fa:	d064      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 80027fc:	2b30      	cmp	r3, #48	@ 0x30
 80027fe:	d86b      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002800:	2b20      	cmp	r3, #32
 8002802:	d060      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002804:	2b20      	cmp	r3, #32
 8002806:	d867      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05c      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 800280c:	2b10      	cmp	r3, #16
 800280e:	d05a      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15a>
 8002810:	e062      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002822:	f000 f974 	bl	8002b0e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	609a      	str	r2, [r3, #8]
      break;
 800283e:	e04f      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002850:	f000 f95d 	bl	8002b0e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002862:	609a      	str	r2, [r3, #8]
      break;
 8002864:	e03c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002872:	461a      	mov	r2, r3
 8002874:	f000 f8d4 	bl	8002a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2150      	movs	r1, #80	@ 0x50
 800287e:	4618      	mov	r0, r3
 8002880:	f000 f92b 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 8002884:	e02c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002892:	461a      	mov	r2, r3
 8002894:	f000 f8f2 	bl	8002a7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2160      	movs	r1, #96	@ 0x60
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f91b 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 80028a4:	e01c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b2:	461a      	mov	r2, r3
 80028b4:	f000 f8b4 	bl	8002a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2140      	movs	r1, #64	@ 0x40
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f90b 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 80028c4:	e00c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4610      	mov	r0, r2
 80028d2:	f000 f902 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 80028d6:	e003      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e000      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
	...

08002944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a2f      	ldr	r2, [pc, #188]	@ (8002a14 <TIM_Base_SetConfig+0xd0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00b      	beq.n	8002974 <TIM_Base_SetConfig+0x30>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002962:	d007      	beq.n	8002974 <TIM_Base_SetConfig+0x30>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a2c      	ldr	r2, [pc, #176]	@ (8002a18 <TIM_Base_SetConfig+0xd4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <TIM_Base_SetConfig+0x30>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a1c <TIM_Base_SetConfig+0xd8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d108      	bne.n	8002986 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800297a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a22      	ldr	r2, [pc, #136]	@ (8002a14 <TIM_Base_SetConfig+0xd0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00b      	beq.n	80029a6 <TIM_Base_SetConfig+0x62>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002994:	d007      	beq.n	80029a6 <TIM_Base_SetConfig+0x62>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a1f      	ldr	r2, [pc, #124]	@ (8002a18 <TIM_Base_SetConfig+0xd4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d003      	beq.n	80029a6 <TIM_Base_SetConfig+0x62>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a1c <TIM_Base_SetConfig+0xd8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d108      	bne.n	80029b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a0d      	ldr	r2, [pc, #52]	@ (8002a14 <TIM_Base_SetConfig+0xd0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d103      	bne.n	80029ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f023 0201 	bic.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	611a      	str	r2, [r3, #16]
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800

08002a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f023 0201 	bic.w	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f023 030a 	bic.w	r3, r3, #10
 8002a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	621a      	str	r2, [r3, #32]
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	f023 0210 	bic.w	r2, r3, #16
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	031b      	lsls	r3, r3, #12
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	621a      	str	r2, [r3, #32]
}
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f043 0307 	orr.w	r3, r3, #7
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b087      	sub	sp, #28
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	021a      	lsls	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	609a      	str	r2, [r3, #8]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e046      	b.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a16      	ldr	r2, [pc, #88]	@ (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb0:	d009      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a12      	ldr	r2, [pc, #72]	@ (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a10      	ldr	r2, [pc, #64]	@ (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10c      	bne.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800

08002c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <srand>:
 8002c2c:	b538      	push	{r3, r4, r5, lr}
 8002c2e:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <srand+0x44>)
 8002c30:	4604      	mov	r4, r0
 8002c32:	681d      	ldr	r5, [r3, #0]
 8002c34:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002c36:	b9b3      	cbnz	r3, 8002c66 <srand+0x3a>
 8002c38:	2018      	movs	r0, #24
 8002c3a:	f000 fb4f 	bl	80032dc <malloc>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	6328      	str	r0, [r5, #48]	@ 0x30
 8002c42:	b920      	cbnz	r0, 8002c4e <srand+0x22>
 8002c44:	2146      	movs	r1, #70	@ 0x46
 8002c46:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <srand+0x48>)
 8002c48:	480b      	ldr	r0, [pc, #44]	@ (8002c78 <srand+0x4c>)
 8002c4a:	f000 fae1 	bl	8003210 <__assert_func>
 8002c4e:	490b      	ldr	r1, [pc, #44]	@ (8002c7c <srand+0x50>)
 8002c50:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <srand+0x54>)
 8002c52:	e9c0 1300 	strd	r1, r3, [r0]
 8002c56:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <srand+0x58>)
 8002c58:	2100      	movs	r1, #0
 8002c5a:	6083      	str	r3, [r0, #8]
 8002c5c:	230b      	movs	r3, #11
 8002c5e:	8183      	strh	r3, [r0, #12]
 8002c60:	2001      	movs	r0, #1
 8002c62:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002c66:	2200      	movs	r2, #0
 8002c68:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002c6a:	611c      	str	r4, [r3, #16]
 8002c6c:	615a      	str	r2, [r3, #20]
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}
 8002c70:	20000204 	.word	0x20000204
 8002c74:	08003e5a 	.word	0x08003e5a
 8002c78:	08003e71 	.word	0x08003e71
 8002c7c:	abcd330e 	.word	0xabcd330e
 8002c80:	e66d1234 	.word	0xe66d1234
 8002c84:	0005deec 	.word	0x0005deec

08002c88 <rand>:
 8002c88:	4b16      	ldr	r3, [pc, #88]	@ (8002ce4 <rand+0x5c>)
 8002c8a:	b510      	push	{r4, lr}
 8002c8c:	681c      	ldr	r4, [r3, #0]
 8002c8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002c90:	b9b3      	cbnz	r3, 8002cc0 <rand+0x38>
 8002c92:	2018      	movs	r0, #24
 8002c94:	f000 fb22 	bl	80032dc <malloc>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6320      	str	r0, [r4, #48]	@ 0x30
 8002c9c:	b920      	cbnz	r0, 8002ca8 <rand+0x20>
 8002c9e:	2152      	movs	r1, #82	@ 0x52
 8002ca0:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <rand+0x60>)
 8002ca2:	4812      	ldr	r0, [pc, #72]	@ (8002cec <rand+0x64>)
 8002ca4:	f000 fab4 	bl	8003210 <__assert_func>
 8002ca8:	4911      	ldr	r1, [pc, #68]	@ (8002cf0 <rand+0x68>)
 8002caa:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <rand+0x6c>)
 8002cac:	e9c0 1300 	strd	r1, r3, [r0]
 8002cb0:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <rand+0x70>)
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	6083      	str	r3, [r0, #8]
 8002cb6:	230b      	movs	r3, #11
 8002cb8:	8183      	strh	r3, [r0, #12]
 8002cba:	2001      	movs	r0, #1
 8002cbc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002cc0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002cc2:	480e      	ldr	r0, [pc, #56]	@ (8002cfc <rand+0x74>)
 8002cc4:	690b      	ldr	r3, [r1, #16]
 8002cc6:	694c      	ldr	r4, [r1, #20]
 8002cc8:	4358      	muls	r0, r3
 8002cca:	4a0d      	ldr	r2, [pc, #52]	@ (8002d00 <rand+0x78>)
 8002ccc:	fb02 0004 	mla	r0, r2, r4, r0
 8002cd0:	fba3 3202 	umull	r3, r2, r3, r2
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	eb40 0002 	adc.w	r0, r0, r2
 8002cda:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002cde:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002ce2:	bd10      	pop	{r4, pc}
 8002ce4:	20000204 	.word	0x20000204
 8002ce8:	08003e5a 	.word	0x08003e5a
 8002cec:	08003e71 	.word	0x08003e71
 8002cf0:	abcd330e 	.word	0xabcd330e
 8002cf4:	e66d1234 	.word	0xe66d1234
 8002cf8:	0005deec 	.word	0x0005deec
 8002cfc:	5851f42d 	.word	0x5851f42d
 8002d00:	4c957f2d 	.word	0x4c957f2d

08002d04 <std>:
 8002d04:	2300      	movs	r3, #0
 8002d06:	b510      	push	{r4, lr}
 8002d08:	4604      	mov	r4, r0
 8002d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d12:	6083      	str	r3, [r0, #8]
 8002d14:	8181      	strh	r1, [r0, #12]
 8002d16:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d18:	81c2      	strh	r2, [r0, #14]
 8002d1a:	6183      	str	r3, [r0, #24]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2208      	movs	r2, #8
 8002d20:	305c      	adds	r0, #92	@ 0x5c
 8002d22:	f000 f9f9 	bl	8003118 <memset>
 8002d26:	4b0d      	ldr	r3, [pc, #52]	@ (8002d5c <std+0x58>)
 8002d28:	6224      	str	r4, [r4, #32]
 8002d2a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d60 <std+0x5c>)
 8002d2e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d30:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <std+0x60>)
 8002d32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <std+0x64>)
 8002d36:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d38:	4b0c      	ldr	r3, [pc, #48]	@ (8002d6c <std+0x68>)
 8002d3a:	429c      	cmp	r4, r3
 8002d3c:	d006      	beq.n	8002d4c <std+0x48>
 8002d3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d42:	4294      	cmp	r4, r2
 8002d44:	d002      	beq.n	8002d4c <std+0x48>
 8002d46:	33d0      	adds	r3, #208	@ 0xd0
 8002d48:	429c      	cmp	r4, r3
 8002d4a:	d105      	bne.n	8002d58 <std+0x54>
 8002d4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d54:	f000 ba58 	b.w	8003208 <__retarget_lock_init_recursive>
 8002d58:	bd10      	pop	{r4, pc}
 8002d5a:	bf00      	nop
 8002d5c:	08002f69 	.word	0x08002f69
 8002d60:	08002f8b 	.word	0x08002f8b
 8002d64:	08002fc3 	.word	0x08002fc3
 8002d68:	08002fe7 	.word	0x08002fe7
 8002d6c:	2000046c 	.word	0x2000046c

08002d70 <stdio_exit_handler>:
 8002d70:	4a02      	ldr	r2, [pc, #8]	@ (8002d7c <stdio_exit_handler+0xc>)
 8002d72:	4903      	ldr	r1, [pc, #12]	@ (8002d80 <stdio_exit_handler+0x10>)
 8002d74:	4803      	ldr	r0, [pc, #12]	@ (8002d84 <stdio_exit_handler+0x14>)
 8002d76:	f000 b869 	b.w	8002e4c <_fwalk_sglue>
 8002d7a:	bf00      	nop
 8002d7c:	200001f8 	.word	0x200001f8
 8002d80:	08003ae9 	.word	0x08003ae9
 8002d84:	20000208 	.word	0x20000208

08002d88 <cleanup_stdio>:
 8002d88:	6841      	ldr	r1, [r0, #4]
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <cleanup_stdio+0x34>)
 8002d8c:	b510      	push	{r4, lr}
 8002d8e:	4299      	cmp	r1, r3
 8002d90:	4604      	mov	r4, r0
 8002d92:	d001      	beq.n	8002d98 <cleanup_stdio+0x10>
 8002d94:	f000 fea8 	bl	8003ae8 <_fflush_r>
 8002d98:	68a1      	ldr	r1, [r4, #8]
 8002d9a:	4b09      	ldr	r3, [pc, #36]	@ (8002dc0 <cleanup_stdio+0x38>)
 8002d9c:	4299      	cmp	r1, r3
 8002d9e:	d002      	beq.n	8002da6 <cleanup_stdio+0x1e>
 8002da0:	4620      	mov	r0, r4
 8002da2:	f000 fea1 	bl	8003ae8 <_fflush_r>
 8002da6:	68e1      	ldr	r1, [r4, #12]
 8002da8:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <cleanup_stdio+0x3c>)
 8002daa:	4299      	cmp	r1, r3
 8002dac:	d004      	beq.n	8002db8 <cleanup_stdio+0x30>
 8002dae:	4620      	mov	r0, r4
 8002db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002db4:	f000 be98 	b.w	8003ae8 <_fflush_r>
 8002db8:	bd10      	pop	{r4, pc}
 8002dba:	bf00      	nop
 8002dbc:	2000046c 	.word	0x2000046c
 8002dc0:	200004d4 	.word	0x200004d4
 8002dc4:	2000053c 	.word	0x2000053c

08002dc8 <global_stdio_init.part.0>:
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <global_stdio_init.part.0+0x30>)
 8002dcc:	4c0b      	ldr	r4, [pc, #44]	@ (8002dfc <global_stdio_init.part.0+0x34>)
 8002dce:	4a0c      	ldr	r2, [pc, #48]	@ (8002e00 <global_stdio_init.part.0+0x38>)
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	2104      	movs	r1, #4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f7ff ff94 	bl	8002d04 <std>
 8002ddc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002de0:	2201      	movs	r2, #1
 8002de2:	2109      	movs	r1, #9
 8002de4:	f7ff ff8e 	bl	8002d04 <std>
 8002de8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002dec:	2202      	movs	r2, #2
 8002dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df2:	2112      	movs	r1, #18
 8002df4:	f7ff bf86 	b.w	8002d04 <std>
 8002df8:	200005a4 	.word	0x200005a4
 8002dfc:	2000046c 	.word	0x2000046c
 8002e00:	08002d71 	.word	0x08002d71

08002e04 <__sfp_lock_acquire>:
 8002e04:	4801      	ldr	r0, [pc, #4]	@ (8002e0c <__sfp_lock_acquire+0x8>)
 8002e06:	f000 ba00 	b.w	800320a <__retarget_lock_acquire_recursive>
 8002e0a:	bf00      	nop
 8002e0c:	200005ad 	.word	0x200005ad

08002e10 <__sfp_lock_release>:
 8002e10:	4801      	ldr	r0, [pc, #4]	@ (8002e18 <__sfp_lock_release+0x8>)
 8002e12:	f000 b9fb 	b.w	800320c <__retarget_lock_release_recursive>
 8002e16:	bf00      	nop
 8002e18:	200005ad 	.word	0x200005ad

08002e1c <__sinit>:
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	4604      	mov	r4, r0
 8002e20:	f7ff fff0 	bl	8002e04 <__sfp_lock_acquire>
 8002e24:	6a23      	ldr	r3, [r4, #32]
 8002e26:	b11b      	cbz	r3, 8002e30 <__sinit+0x14>
 8002e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e2c:	f7ff bff0 	b.w	8002e10 <__sfp_lock_release>
 8002e30:	4b04      	ldr	r3, [pc, #16]	@ (8002e44 <__sinit+0x28>)
 8002e32:	6223      	str	r3, [r4, #32]
 8002e34:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <__sinit+0x2c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f5      	bne.n	8002e28 <__sinit+0xc>
 8002e3c:	f7ff ffc4 	bl	8002dc8 <global_stdio_init.part.0>
 8002e40:	e7f2      	b.n	8002e28 <__sinit+0xc>
 8002e42:	bf00      	nop
 8002e44:	08002d89 	.word	0x08002d89
 8002e48:	200005a4 	.word	0x200005a4

08002e4c <_fwalk_sglue>:
 8002e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e50:	4607      	mov	r7, r0
 8002e52:	4688      	mov	r8, r1
 8002e54:	4614      	mov	r4, r2
 8002e56:	2600      	movs	r6, #0
 8002e58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e5c:	f1b9 0901 	subs.w	r9, r9, #1
 8002e60:	d505      	bpl.n	8002e6e <_fwalk_sglue+0x22>
 8002e62:	6824      	ldr	r4, [r4, #0]
 8002e64:	2c00      	cmp	r4, #0
 8002e66:	d1f7      	bne.n	8002e58 <_fwalk_sglue+0xc>
 8002e68:	4630      	mov	r0, r6
 8002e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e6e:	89ab      	ldrh	r3, [r5, #12]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d907      	bls.n	8002e84 <_fwalk_sglue+0x38>
 8002e74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	d003      	beq.n	8002e84 <_fwalk_sglue+0x38>
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	4638      	mov	r0, r7
 8002e80:	47c0      	blx	r8
 8002e82:	4306      	orrs	r6, r0
 8002e84:	3568      	adds	r5, #104	@ 0x68
 8002e86:	e7e9      	b.n	8002e5c <_fwalk_sglue+0x10>

08002e88 <iprintf>:
 8002e88:	b40f      	push	{r0, r1, r2, r3}
 8002e8a:	b507      	push	{r0, r1, r2, lr}
 8002e8c:	4906      	ldr	r1, [pc, #24]	@ (8002ea8 <iprintf+0x20>)
 8002e8e:	ab04      	add	r3, sp, #16
 8002e90:	6808      	ldr	r0, [r1, #0]
 8002e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e96:	6881      	ldr	r1, [r0, #8]
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	f000 fafd 	bl	8003498 <_vfiprintf_r>
 8002e9e:	b003      	add	sp, #12
 8002ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ea4:	b004      	add	sp, #16
 8002ea6:	4770      	bx	lr
 8002ea8:	20000204 	.word	0x20000204

08002eac <_puts_r>:
 8002eac:	6a03      	ldr	r3, [r0, #32]
 8002eae:	b570      	push	{r4, r5, r6, lr}
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	460e      	mov	r6, r1
 8002eb4:	6884      	ldr	r4, [r0, #8]
 8002eb6:	b90b      	cbnz	r3, 8002ebc <_puts_r+0x10>
 8002eb8:	f7ff ffb0 	bl	8002e1c <__sinit>
 8002ebc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ebe:	07db      	lsls	r3, r3, #31
 8002ec0:	d405      	bmi.n	8002ece <_puts_r+0x22>
 8002ec2:	89a3      	ldrh	r3, [r4, #12]
 8002ec4:	0598      	lsls	r0, r3, #22
 8002ec6:	d402      	bmi.n	8002ece <_puts_r+0x22>
 8002ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002eca:	f000 f99e 	bl	800320a <__retarget_lock_acquire_recursive>
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	0719      	lsls	r1, r3, #28
 8002ed2:	d502      	bpl.n	8002eda <_puts_r+0x2e>
 8002ed4:	6923      	ldr	r3, [r4, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d135      	bne.n	8002f46 <_puts_r+0x9a>
 8002eda:	4621      	mov	r1, r4
 8002edc:	4628      	mov	r0, r5
 8002ede:	f000 f8c5 	bl	800306c <__swsetup_r>
 8002ee2:	b380      	cbz	r0, 8002f46 <_puts_r+0x9a>
 8002ee4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002ee8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002eea:	07da      	lsls	r2, r3, #31
 8002eec:	d405      	bmi.n	8002efa <_puts_r+0x4e>
 8002eee:	89a3      	ldrh	r3, [r4, #12]
 8002ef0:	059b      	lsls	r3, r3, #22
 8002ef2:	d402      	bmi.n	8002efa <_puts_r+0x4e>
 8002ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ef6:	f000 f989 	bl	800320c <__retarget_lock_release_recursive>
 8002efa:	4628      	mov	r0, r5
 8002efc:	bd70      	pop	{r4, r5, r6, pc}
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	da04      	bge.n	8002f0c <_puts_r+0x60>
 8002f02:	69a2      	ldr	r2, [r4, #24]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	dc17      	bgt.n	8002f38 <_puts_r+0x8c>
 8002f08:	290a      	cmp	r1, #10
 8002f0a:	d015      	beq.n	8002f38 <_puts_r+0x8c>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	6022      	str	r2, [r4, #0]
 8002f12:	7019      	strb	r1, [r3, #0]
 8002f14:	68a3      	ldr	r3, [r4, #8]
 8002f16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	60a3      	str	r3, [r4, #8]
 8002f1e:	2900      	cmp	r1, #0
 8002f20:	d1ed      	bne.n	8002efe <_puts_r+0x52>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	da11      	bge.n	8002f4a <_puts_r+0x9e>
 8002f26:	4622      	mov	r2, r4
 8002f28:	210a      	movs	r1, #10
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	f000 f85f 	bl	8002fee <__swbuf_r>
 8002f30:	3001      	adds	r0, #1
 8002f32:	d0d7      	beq.n	8002ee4 <_puts_r+0x38>
 8002f34:	250a      	movs	r5, #10
 8002f36:	e7d7      	b.n	8002ee8 <_puts_r+0x3c>
 8002f38:	4622      	mov	r2, r4
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	f000 f857 	bl	8002fee <__swbuf_r>
 8002f40:	3001      	adds	r0, #1
 8002f42:	d1e7      	bne.n	8002f14 <_puts_r+0x68>
 8002f44:	e7ce      	b.n	8002ee4 <_puts_r+0x38>
 8002f46:	3e01      	subs	r6, #1
 8002f48:	e7e4      	b.n	8002f14 <_puts_r+0x68>
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	6022      	str	r2, [r4, #0]
 8002f50:	220a      	movs	r2, #10
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	e7ee      	b.n	8002f34 <_puts_r+0x88>
	...

08002f58 <puts>:
 8002f58:	4b02      	ldr	r3, [pc, #8]	@ (8002f64 <puts+0xc>)
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	f7ff bfa5 	b.w	8002eac <_puts_r>
 8002f62:	bf00      	nop
 8002f64:	20000204 	.word	0x20000204

08002f68 <__sread>:
 8002f68:	b510      	push	{r4, lr}
 8002f6a:	460c      	mov	r4, r1
 8002f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f70:	f000 f8fc 	bl	800316c <_read_r>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	bfab      	itete	ge
 8002f78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8002f7c:	181b      	addge	r3, r3, r0
 8002f7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f82:	bfac      	ite	ge
 8002f84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f86:	81a3      	strhlt	r3, [r4, #12]
 8002f88:	bd10      	pop	{r4, pc}

08002f8a <__swrite>:
 8002f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f8e:	461f      	mov	r7, r3
 8002f90:	898b      	ldrh	r3, [r1, #12]
 8002f92:	4605      	mov	r5, r0
 8002f94:	05db      	lsls	r3, r3, #23
 8002f96:	460c      	mov	r4, r1
 8002f98:	4616      	mov	r6, r2
 8002f9a:	d505      	bpl.n	8002fa8 <__swrite+0x1e>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fa4:	f000 f8d0 	bl	8003148 <_lseek_r>
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	4632      	mov	r2, r6
 8002fac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fb0:	81a3      	strh	r3, [r4, #12]
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fbe:	f000 b8e7 	b.w	8003190 <_write_r>

08002fc2 <__sseek>:
 8002fc2:	b510      	push	{r4, lr}
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fca:	f000 f8bd 	bl	8003148 <_lseek_r>
 8002fce:	1c43      	adds	r3, r0, #1
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	bf15      	itete	ne
 8002fd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002fd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002fda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002fde:	81a3      	strheq	r3, [r4, #12]
 8002fe0:	bf18      	it	ne
 8002fe2:	81a3      	strhne	r3, [r4, #12]
 8002fe4:	bd10      	pop	{r4, pc}

08002fe6 <__sclose>:
 8002fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fea:	f000 b89d 	b.w	8003128 <_close_r>

08002fee <__swbuf_r>:
 8002fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff0:	460e      	mov	r6, r1
 8002ff2:	4614      	mov	r4, r2
 8002ff4:	4605      	mov	r5, r0
 8002ff6:	b118      	cbz	r0, 8003000 <__swbuf_r+0x12>
 8002ff8:	6a03      	ldr	r3, [r0, #32]
 8002ffa:	b90b      	cbnz	r3, 8003000 <__swbuf_r+0x12>
 8002ffc:	f7ff ff0e 	bl	8002e1c <__sinit>
 8003000:	69a3      	ldr	r3, [r4, #24]
 8003002:	60a3      	str	r3, [r4, #8]
 8003004:	89a3      	ldrh	r3, [r4, #12]
 8003006:	071a      	lsls	r2, r3, #28
 8003008:	d501      	bpl.n	800300e <__swbuf_r+0x20>
 800300a:	6923      	ldr	r3, [r4, #16]
 800300c:	b943      	cbnz	r3, 8003020 <__swbuf_r+0x32>
 800300e:	4621      	mov	r1, r4
 8003010:	4628      	mov	r0, r5
 8003012:	f000 f82b 	bl	800306c <__swsetup_r>
 8003016:	b118      	cbz	r0, 8003020 <__swbuf_r+0x32>
 8003018:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800301c:	4638      	mov	r0, r7
 800301e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	6922      	ldr	r2, [r4, #16]
 8003024:	b2f6      	uxtb	r6, r6
 8003026:	1a98      	subs	r0, r3, r2
 8003028:	6963      	ldr	r3, [r4, #20]
 800302a:	4637      	mov	r7, r6
 800302c:	4283      	cmp	r3, r0
 800302e:	dc05      	bgt.n	800303c <__swbuf_r+0x4e>
 8003030:	4621      	mov	r1, r4
 8003032:	4628      	mov	r0, r5
 8003034:	f000 fd58 	bl	8003ae8 <_fflush_r>
 8003038:	2800      	cmp	r0, #0
 800303a:	d1ed      	bne.n	8003018 <__swbuf_r+0x2a>
 800303c:	68a3      	ldr	r3, [r4, #8]
 800303e:	3b01      	subs	r3, #1
 8003040:	60a3      	str	r3, [r4, #8]
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	6022      	str	r2, [r4, #0]
 8003048:	701e      	strb	r6, [r3, #0]
 800304a:	6962      	ldr	r2, [r4, #20]
 800304c:	1c43      	adds	r3, r0, #1
 800304e:	429a      	cmp	r2, r3
 8003050:	d004      	beq.n	800305c <__swbuf_r+0x6e>
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	07db      	lsls	r3, r3, #31
 8003056:	d5e1      	bpl.n	800301c <__swbuf_r+0x2e>
 8003058:	2e0a      	cmp	r6, #10
 800305a:	d1df      	bne.n	800301c <__swbuf_r+0x2e>
 800305c:	4621      	mov	r1, r4
 800305e:	4628      	mov	r0, r5
 8003060:	f000 fd42 	bl	8003ae8 <_fflush_r>
 8003064:	2800      	cmp	r0, #0
 8003066:	d0d9      	beq.n	800301c <__swbuf_r+0x2e>
 8003068:	e7d6      	b.n	8003018 <__swbuf_r+0x2a>
	...

0800306c <__swsetup_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4b29      	ldr	r3, [pc, #164]	@ (8003114 <__swsetup_r+0xa8>)
 8003070:	4605      	mov	r5, r0
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	460c      	mov	r4, r1
 8003076:	b118      	cbz	r0, 8003080 <__swsetup_r+0x14>
 8003078:	6a03      	ldr	r3, [r0, #32]
 800307a:	b90b      	cbnz	r3, 8003080 <__swsetup_r+0x14>
 800307c:	f7ff fece 	bl	8002e1c <__sinit>
 8003080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003084:	0719      	lsls	r1, r3, #28
 8003086:	d422      	bmi.n	80030ce <__swsetup_r+0x62>
 8003088:	06da      	lsls	r2, r3, #27
 800308a:	d407      	bmi.n	800309c <__swsetup_r+0x30>
 800308c:	2209      	movs	r2, #9
 800308e:	602a      	str	r2, [r5, #0]
 8003090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003098:	81a3      	strh	r3, [r4, #12]
 800309a:	e033      	b.n	8003104 <__swsetup_r+0x98>
 800309c:	0758      	lsls	r0, r3, #29
 800309e:	d512      	bpl.n	80030c6 <__swsetup_r+0x5a>
 80030a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80030a2:	b141      	cbz	r1, 80030b6 <__swsetup_r+0x4a>
 80030a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030a8:	4299      	cmp	r1, r3
 80030aa:	d002      	beq.n	80030b2 <__swsetup_r+0x46>
 80030ac:	4628      	mov	r0, r5
 80030ae:	f000 f8cd 	bl	800324c <_free_r>
 80030b2:	2300      	movs	r3, #0
 80030b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80030b6:	89a3      	ldrh	r3, [r4, #12]
 80030b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80030bc:	81a3      	strh	r3, [r4, #12]
 80030be:	2300      	movs	r3, #0
 80030c0:	6063      	str	r3, [r4, #4]
 80030c2:	6923      	ldr	r3, [r4, #16]
 80030c4:	6023      	str	r3, [r4, #0]
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	81a3      	strh	r3, [r4, #12]
 80030ce:	6923      	ldr	r3, [r4, #16]
 80030d0:	b94b      	cbnz	r3, 80030e6 <__swsetup_r+0x7a>
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80030d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030dc:	d003      	beq.n	80030e6 <__swsetup_r+0x7a>
 80030de:	4621      	mov	r1, r4
 80030e0:	4628      	mov	r0, r5
 80030e2:	f000 fd60 	bl	8003ba6 <__smakebuf_r>
 80030e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ea:	f013 0201 	ands.w	r2, r3, #1
 80030ee:	d00a      	beq.n	8003106 <__swsetup_r+0x9a>
 80030f0:	2200      	movs	r2, #0
 80030f2:	60a2      	str	r2, [r4, #8]
 80030f4:	6962      	ldr	r2, [r4, #20]
 80030f6:	4252      	negs	r2, r2
 80030f8:	61a2      	str	r2, [r4, #24]
 80030fa:	6922      	ldr	r2, [r4, #16]
 80030fc:	b942      	cbnz	r2, 8003110 <__swsetup_r+0xa4>
 80030fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003102:	d1c5      	bne.n	8003090 <__swsetup_r+0x24>
 8003104:	bd38      	pop	{r3, r4, r5, pc}
 8003106:	0799      	lsls	r1, r3, #30
 8003108:	bf58      	it	pl
 800310a:	6962      	ldrpl	r2, [r4, #20]
 800310c:	60a2      	str	r2, [r4, #8]
 800310e:	e7f4      	b.n	80030fa <__swsetup_r+0x8e>
 8003110:	2000      	movs	r0, #0
 8003112:	e7f7      	b.n	8003104 <__swsetup_r+0x98>
 8003114:	20000204 	.word	0x20000204

08003118 <memset>:
 8003118:	4603      	mov	r3, r0
 800311a:	4402      	add	r2, r0
 800311c:	4293      	cmp	r3, r2
 800311e:	d100      	bne.n	8003122 <memset+0xa>
 8003120:	4770      	bx	lr
 8003122:	f803 1b01 	strb.w	r1, [r3], #1
 8003126:	e7f9      	b.n	800311c <memset+0x4>

08003128 <_close_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	2300      	movs	r3, #0
 800312c:	4d05      	ldr	r5, [pc, #20]	@ (8003144 <_close_r+0x1c>)
 800312e:	4604      	mov	r4, r0
 8003130:	4608      	mov	r0, r1
 8003132:	602b      	str	r3, [r5, #0]
 8003134:	f7fd fdd9 	bl	8000cea <_close>
 8003138:	1c43      	adds	r3, r0, #1
 800313a:	d102      	bne.n	8003142 <_close_r+0x1a>
 800313c:	682b      	ldr	r3, [r5, #0]
 800313e:	b103      	cbz	r3, 8003142 <_close_r+0x1a>
 8003140:	6023      	str	r3, [r4, #0]
 8003142:	bd38      	pop	{r3, r4, r5, pc}
 8003144:	200005a8 	.word	0x200005a8

08003148 <_lseek_r>:
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	4604      	mov	r4, r0
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	2200      	movs	r2, #0
 8003152:	4d05      	ldr	r5, [pc, #20]	@ (8003168 <_lseek_r+0x20>)
 8003154:	602a      	str	r2, [r5, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	f7fd fdeb 	bl	8000d32 <_lseek>
 800315c:	1c43      	adds	r3, r0, #1
 800315e:	d102      	bne.n	8003166 <_lseek_r+0x1e>
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	b103      	cbz	r3, 8003166 <_lseek_r+0x1e>
 8003164:	6023      	str	r3, [r4, #0]
 8003166:	bd38      	pop	{r3, r4, r5, pc}
 8003168:	200005a8 	.word	0x200005a8

0800316c <_read_r>:
 800316c:	b538      	push	{r3, r4, r5, lr}
 800316e:	4604      	mov	r4, r0
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	2200      	movs	r2, #0
 8003176:	4d05      	ldr	r5, [pc, #20]	@ (800318c <_read_r+0x20>)
 8003178:	602a      	str	r2, [r5, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	f7fd fd7c 	bl	8000c78 <_read>
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	d102      	bne.n	800318a <_read_r+0x1e>
 8003184:	682b      	ldr	r3, [r5, #0]
 8003186:	b103      	cbz	r3, 800318a <_read_r+0x1e>
 8003188:	6023      	str	r3, [r4, #0]
 800318a:	bd38      	pop	{r3, r4, r5, pc}
 800318c:	200005a8 	.word	0x200005a8

08003190 <_write_r>:
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	4604      	mov	r4, r0
 8003194:	4608      	mov	r0, r1
 8003196:	4611      	mov	r1, r2
 8003198:	2200      	movs	r2, #0
 800319a:	4d05      	ldr	r5, [pc, #20]	@ (80031b0 <_write_r+0x20>)
 800319c:	602a      	str	r2, [r5, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	f7fd fd87 	bl	8000cb2 <_write>
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	d102      	bne.n	80031ae <_write_r+0x1e>
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	b103      	cbz	r3, 80031ae <_write_r+0x1e>
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	bd38      	pop	{r3, r4, r5, pc}
 80031b0:	200005a8 	.word	0x200005a8

080031b4 <__errno>:
 80031b4:	4b01      	ldr	r3, [pc, #4]	@ (80031bc <__errno+0x8>)
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	20000204 	.word	0x20000204

080031c0 <__libc_init_array>:
 80031c0:	b570      	push	{r4, r5, r6, lr}
 80031c2:	2600      	movs	r6, #0
 80031c4:	4d0c      	ldr	r5, [pc, #48]	@ (80031f8 <__libc_init_array+0x38>)
 80031c6:	4c0d      	ldr	r4, [pc, #52]	@ (80031fc <__libc_init_array+0x3c>)
 80031c8:	1b64      	subs	r4, r4, r5
 80031ca:	10a4      	asrs	r4, r4, #2
 80031cc:	42a6      	cmp	r6, r4
 80031ce:	d109      	bne.n	80031e4 <__libc_init_array+0x24>
 80031d0:	f000 fdb2 	bl	8003d38 <_init>
 80031d4:	2600      	movs	r6, #0
 80031d6:	4d0a      	ldr	r5, [pc, #40]	@ (8003200 <__libc_init_array+0x40>)
 80031d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003204 <__libc_init_array+0x44>)
 80031da:	1b64      	subs	r4, r4, r5
 80031dc:	10a4      	asrs	r4, r4, #2
 80031de:	42a6      	cmp	r6, r4
 80031e0:	d105      	bne.n	80031ee <__libc_init_array+0x2e>
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
 80031e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e8:	4798      	blx	r3
 80031ea:	3601      	adds	r6, #1
 80031ec:	e7ee      	b.n	80031cc <__libc_init_array+0xc>
 80031ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f2:	4798      	blx	r3
 80031f4:	3601      	adds	r6, #1
 80031f6:	e7f2      	b.n	80031de <__libc_init_array+0x1e>
 80031f8:	08003f38 	.word	0x08003f38
 80031fc:	08003f38 	.word	0x08003f38
 8003200:	08003f38 	.word	0x08003f38
 8003204:	08003f3c 	.word	0x08003f3c

08003208 <__retarget_lock_init_recursive>:
 8003208:	4770      	bx	lr

0800320a <__retarget_lock_acquire_recursive>:
 800320a:	4770      	bx	lr

0800320c <__retarget_lock_release_recursive>:
 800320c:	4770      	bx	lr
	...

08003210 <__assert_func>:
 8003210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003212:	4614      	mov	r4, r2
 8003214:	461a      	mov	r2, r3
 8003216:	4b09      	ldr	r3, [pc, #36]	@ (800323c <__assert_func+0x2c>)
 8003218:	4605      	mov	r5, r0
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68d8      	ldr	r0, [r3, #12]
 800321e:	b14c      	cbz	r4, 8003234 <__assert_func+0x24>
 8003220:	4b07      	ldr	r3, [pc, #28]	@ (8003240 <__assert_func+0x30>)
 8003222:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003226:	9100      	str	r1, [sp, #0]
 8003228:	462b      	mov	r3, r5
 800322a:	4906      	ldr	r1, [pc, #24]	@ (8003244 <__assert_func+0x34>)
 800322c:	f000 fc84 	bl	8003b38 <fiprintf>
 8003230:	f000 fd36 	bl	8003ca0 <abort>
 8003234:	4b04      	ldr	r3, [pc, #16]	@ (8003248 <__assert_func+0x38>)
 8003236:	461c      	mov	r4, r3
 8003238:	e7f3      	b.n	8003222 <__assert_func+0x12>
 800323a:	bf00      	nop
 800323c:	20000204 	.word	0x20000204
 8003240:	08003ec9 	.word	0x08003ec9
 8003244:	08003ed6 	.word	0x08003ed6
 8003248:	08003f04 	.word	0x08003f04

0800324c <_free_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	4605      	mov	r5, r0
 8003250:	2900      	cmp	r1, #0
 8003252:	d040      	beq.n	80032d6 <_free_r+0x8a>
 8003254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003258:	1f0c      	subs	r4, r1, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	bfb8      	it	lt
 800325e:	18e4      	addlt	r4, r4, r3
 8003260:	f000 f8e6 	bl	8003430 <__malloc_lock>
 8003264:	4a1c      	ldr	r2, [pc, #112]	@ (80032d8 <_free_r+0x8c>)
 8003266:	6813      	ldr	r3, [r2, #0]
 8003268:	b933      	cbnz	r3, 8003278 <_free_r+0x2c>
 800326a:	6063      	str	r3, [r4, #4]
 800326c:	6014      	str	r4, [r2, #0]
 800326e:	4628      	mov	r0, r5
 8003270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003274:	f000 b8e2 	b.w	800343c <__malloc_unlock>
 8003278:	42a3      	cmp	r3, r4
 800327a:	d908      	bls.n	800328e <_free_r+0x42>
 800327c:	6820      	ldr	r0, [r4, #0]
 800327e:	1821      	adds	r1, r4, r0
 8003280:	428b      	cmp	r3, r1
 8003282:	bf01      	itttt	eq
 8003284:	6819      	ldreq	r1, [r3, #0]
 8003286:	685b      	ldreq	r3, [r3, #4]
 8003288:	1809      	addeq	r1, r1, r0
 800328a:	6021      	streq	r1, [r4, #0]
 800328c:	e7ed      	b.n	800326a <_free_r+0x1e>
 800328e:	461a      	mov	r2, r3
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	b10b      	cbz	r3, 8003298 <_free_r+0x4c>
 8003294:	42a3      	cmp	r3, r4
 8003296:	d9fa      	bls.n	800328e <_free_r+0x42>
 8003298:	6811      	ldr	r1, [r2, #0]
 800329a:	1850      	adds	r0, r2, r1
 800329c:	42a0      	cmp	r0, r4
 800329e:	d10b      	bne.n	80032b8 <_free_r+0x6c>
 80032a0:	6820      	ldr	r0, [r4, #0]
 80032a2:	4401      	add	r1, r0
 80032a4:	1850      	adds	r0, r2, r1
 80032a6:	4283      	cmp	r3, r0
 80032a8:	6011      	str	r1, [r2, #0]
 80032aa:	d1e0      	bne.n	800326e <_free_r+0x22>
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4408      	add	r0, r1
 80032b2:	6010      	str	r0, [r2, #0]
 80032b4:	6053      	str	r3, [r2, #4]
 80032b6:	e7da      	b.n	800326e <_free_r+0x22>
 80032b8:	d902      	bls.n	80032c0 <_free_r+0x74>
 80032ba:	230c      	movs	r3, #12
 80032bc:	602b      	str	r3, [r5, #0]
 80032be:	e7d6      	b.n	800326e <_free_r+0x22>
 80032c0:	6820      	ldr	r0, [r4, #0]
 80032c2:	1821      	adds	r1, r4, r0
 80032c4:	428b      	cmp	r3, r1
 80032c6:	bf01      	itttt	eq
 80032c8:	6819      	ldreq	r1, [r3, #0]
 80032ca:	685b      	ldreq	r3, [r3, #4]
 80032cc:	1809      	addeq	r1, r1, r0
 80032ce:	6021      	streq	r1, [r4, #0]
 80032d0:	6063      	str	r3, [r4, #4]
 80032d2:	6054      	str	r4, [r2, #4]
 80032d4:	e7cb      	b.n	800326e <_free_r+0x22>
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
 80032d8:	200005b4 	.word	0x200005b4

080032dc <malloc>:
 80032dc:	4b02      	ldr	r3, [pc, #8]	@ (80032e8 <malloc+0xc>)
 80032de:	4601      	mov	r1, r0
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	f000 b825 	b.w	8003330 <_malloc_r>
 80032e6:	bf00      	nop
 80032e8:	20000204 	.word	0x20000204

080032ec <sbrk_aligned>:
 80032ec:	b570      	push	{r4, r5, r6, lr}
 80032ee:	4e0f      	ldr	r6, [pc, #60]	@ (800332c <sbrk_aligned+0x40>)
 80032f0:	460c      	mov	r4, r1
 80032f2:	6831      	ldr	r1, [r6, #0]
 80032f4:	4605      	mov	r5, r0
 80032f6:	b911      	cbnz	r1, 80032fe <sbrk_aligned+0x12>
 80032f8:	f000 fcb4 	bl	8003c64 <_sbrk_r>
 80032fc:	6030      	str	r0, [r6, #0]
 80032fe:	4621      	mov	r1, r4
 8003300:	4628      	mov	r0, r5
 8003302:	f000 fcaf 	bl	8003c64 <_sbrk_r>
 8003306:	1c43      	adds	r3, r0, #1
 8003308:	d103      	bne.n	8003312 <sbrk_aligned+0x26>
 800330a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800330e:	4620      	mov	r0, r4
 8003310:	bd70      	pop	{r4, r5, r6, pc}
 8003312:	1cc4      	adds	r4, r0, #3
 8003314:	f024 0403 	bic.w	r4, r4, #3
 8003318:	42a0      	cmp	r0, r4
 800331a:	d0f8      	beq.n	800330e <sbrk_aligned+0x22>
 800331c:	1a21      	subs	r1, r4, r0
 800331e:	4628      	mov	r0, r5
 8003320:	f000 fca0 	bl	8003c64 <_sbrk_r>
 8003324:	3001      	adds	r0, #1
 8003326:	d1f2      	bne.n	800330e <sbrk_aligned+0x22>
 8003328:	e7ef      	b.n	800330a <sbrk_aligned+0x1e>
 800332a:	bf00      	nop
 800332c:	200005b0 	.word	0x200005b0

08003330 <_malloc_r>:
 8003330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003334:	1ccd      	adds	r5, r1, #3
 8003336:	f025 0503 	bic.w	r5, r5, #3
 800333a:	3508      	adds	r5, #8
 800333c:	2d0c      	cmp	r5, #12
 800333e:	bf38      	it	cc
 8003340:	250c      	movcc	r5, #12
 8003342:	2d00      	cmp	r5, #0
 8003344:	4606      	mov	r6, r0
 8003346:	db01      	blt.n	800334c <_malloc_r+0x1c>
 8003348:	42a9      	cmp	r1, r5
 800334a:	d904      	bls.n	8003356 <_malloc_r+0x26>
 800334c:	230c      	movs	r3, #12
 800334e:	6033      	str	r3, [r6, #0]
 8003350:	2000      	movs	r0, #0
 8003352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003356:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800342c <_malloc_r+0xfc>
 800335a:	f000 f869 	bl	8003430 <__malloc_lock>
 800335e:	f8d8 3000 	ldr.w	r3, [r8]
 8003362:	461c      	mov	r4, r3
 8003364:	bb44      	cbnz	r4, 80033b8 <_malloc_r+0x88>
 8003366:	4629      	mov	r1, r5
 8003368:	4630      	mov	r0, r6
 800336a:	f7ff ffbf 	bl	80032ec <sbrk_aligned>
 800336e:	1c43      	adds	r3, r0, #1
 8003370:	4604      	mov	r4, r0
 8003372:	d158      	bne.n	8003426 <_malloc_r+0xf6>
 8003374:	f8d8 4000 	ldr.w	r4, [r8]
 8003378:	4627      	mov	r7, r4
 800337a:	2f00      	cmp	r7, #0
 800337c:	d143      	bne.n	8003406 <_malloc_r+0xd6>
 800337e:	2c00      	cmp	r4, #0
 8003380:	d04b      	beq.n	800341a <_malloc_r+0xea>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	4639      	mov	r1, r7
 8003386:	4630      	mov	r0, r6
 8003388:	eb04 0903 	add.w	r9, r4, r3
 800338c:	f000 fc6a 	bl	8003c64 <_sbrk_r>
 8003390:	4581      	cmp	r9, r0
 8003392:	d142      	bne.n	800341a <_malloc_r+0xea>
 8003394:	6821      	ldr	r1, [r4, #0]
 8003396:	4630      	mov	r0, r6
 8003398:	1a6d      	subs	r5, r5, r1
 800339a:	4629      	mov	r1, r5
 800339c:	f7ff ffa6 	bl	80032ec <sbrk_aligned>
 80033a0:	3001      	adds	r0, #1
 80033a2:	d03a      	beq.n	800341a <_malloc_r+0xea>
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	442b      	add	r3, r5
 80033a8:	6023      	str	r3, [r4, #0]
 80033aa:	f8d8 3000 	ldr.w	r3, [r8]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	bb62      	cbnz	r2, 800340c <_malloc_r+0xdc>
 80033b2:	f8c8 7000 	str.w	r7, [r8]
 80033b6:	e00f      	b.n	80033d8 <_malloc_r+0xa8>
 80033b8:	6822      	ldr	r2, [r4, #0]
 80033ba:	1b52      	subs	r2, r2, r5
 80033bc:	d420      	bmi.n	8003400 <_malloc_r+0xd0>
 80033be:	2a0b      	cmp	r2, #11
 80033c0:	d917      	bls.n	80033f2 <_malloc_r+0xc2>
 80033c2:	1961      	adds	r1, r4, r5
 80033c4:	42a3      	cmp	r3, r4
 80033c6:	6025      	str	r5, [r4, #0]
 80033c8:	bf18      	it	ne
 80033ca:	6059      	strne	r1, [r3, #4]
 80033cc:	6863      	ldr	r3, [r4, #4]
 80033ce:	bf08      	it	eq
 80033d0:	f8c8 1000 	streq.w	r1, [r8]
 80033d4:	5162      	str	r2, [r4, r5]
 80033d6:	604b      	str	r3, [r1, #4]
 80033d8:	4630      	mov	r0, r6
 80033da:	f000 f82f 	bl	800343c <__malloc_unlock>
 80033de:	f104 000b 	add.w	r0, r4, #11
 80033e2:	1d23      	adds	r3, r4, #4
 80033e4:	f020 0007 	bic.w	r0, r0, #7
 80033e8:	1ac2      	subs	r2, r0, r3
 80033ea:	bf1c      	itt	ne
 80033ec:	1a1b      	subne	r3, r3, r0
 80033ee:	50a3      	strne	r3, [r4, r2]
 80033f0:	e7af      	b.n	8003352 <_malloc_r+0x22>
 80033f2:	6862      	ldr	r2, [r4, #4]
 80033f4:	42a3      	cmp	r3, r4
 80033f6:	bf0c      	ite	eq
 80033f8:	f8c8 2000 	streq.w	r2, [r8]
 80033fc:	605a      	strne	r2, [r3, #4]
 80033fe:	e7eb      	b.n	80033d8 <_malloc_r+0xa8>
 8003400:	4623      	mov	r3, r4
 8003402:	6864      	ldr	r4, [r4, #4]
 8003404:	e7ae      	b.n	8003364 <_malloc_r+0x34>
 8003406:	463c      	mov	r4, r7
 8003408:	687f      	ldr	r7, [r7, #4]
 800340a:	e7b6      	b.n	800337a <_malloc_r+0x4a>
 800340c:	461a      	mov	r2, r3
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	42a3      	cmp	r3, r4
 8003412:	d1fb      	bne.n	800340c <_malloc_r+0xdc>
 8003414:	2300      	movs	r3, #0
 8003416:	6053      	str	r3, [r2, #4]
 8003418:	e7de      	b.n	80033d8 <_malloc_r+0xa8>
 800341a:	230c      	movs	r3, #12
 800341c:	4630      	mov	r0, r6
 800341e:	6033      	str	r3, [r6, #0]
 8003420:	f000 f80c 	bl	800343c <__malloc_unlock>
 8003424:	e794      	b.n	8003350 <_malloc_r+0x20>
 8003426:	6005      	str	r5, [r0, #0]
 8003428:	e7d6      	b.n	80033d8 <_malloc_r+0xa8>
 800342a:	bf00      	nop
 800342c:	200005b4 	.word	0x200005b4

08003430 <__malloc_lock>:
 8003430:	4801      	ldr	r0, [pc, #4]	@ (8003438 <__malloc_lock+0x8>)
 8003432:	f7ff beea 	b.w	800320a <__retarget_lock_acquire_recursive>
 8003436:	bf00      	nop
 8003438:	200005ac 	.word	0x200005ac

0800343c <__malloc_unlock>:
 800343c:	4801      	ldr	r0, [pc, #4]	@ (8003444 <__malloc_unlock+0x8>)
 800343e:	f7ff bee5 	b.w	800320c <__retarget_lock_release_recursive>
 8003442:	bf00      	nop
 8003444:	200005ac 	.word	0x200005ac

08003448 <__sfputc_r>:
 8003448:	6893      	ldr	r3, [r2, #8]
 800344a:	b410      	push	{r4}
 800344c:	3b01      	subs	r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	6093      	str	r3, [r2, #8]
 8003452:	da07      	bge.n	8003464 <__sfputc_r+0x1c>
 8003454:	6994      	ldr	r4, [r2, #24]
 8003456:	42a3      	cmp	r3, r4
 8003458:	db01      	blt.n	800345e <__sfputc_r+0x16>
 800345a:	290a      	cmp	r1, #10
 800345c:	d102      	bne.n	8003464 <__sfputc_r+0x1c>
 800345e:	bc10      	pop	{r4}
 8003460:	f7ff bdc5 	b.w	8002fee <__swbuf_r>
 8003464:	6813      	ldr	r3, [r2, #0]
 8003466:	1c58      	adds	r0, r3, #1
 8003468:	6010      	str	r0, [r2, #0]
 800346a:	7019      	strb	r1, [r3, #0]
 800346c:	4608      	mov	r0, r1
 800346e:	bc10      	pop	{r4}
 8003470:	4770      	bx	lr

08003472 <__sfputs_r>:
 8003472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003474:	4606      	mov	r6, r0
 8003476:	460f      	mov	r7, r1
 8003478:	4614      	mov	r4, r2
 800347a:	18d5      	adds	r5, r2, r3
 800347c:	42ac      	cmp	r4, r5
 800347e:	d101      	bne.n	8003484 <__sfputs_r+0x12>
 8003480:	2000      	movs	r0, #0
 8003482:	e007      	b.n	8003494 <__sfputs_r+0x22>
 8003484:	463a      	mov	r2, r7
 8003486:	4630      	mov	r0, r6
 8003488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800348c:	f7ff ffdc 	bl	8003448 <__sfputc_r>
 8003490:	1c43      	adds	r3, r0, #1
 8003492:	d1f3      	bne.n	800347c <__sfputs_r+0xa>
 8003494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003498 <_vfiprintf_r>:
 8003498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800349c:	460d      	mov	r5, r1
 800349e:	4614      	mov	r4, r2
 80034a0:	4698      	mov	r8, r3
 80034a2:	4606      	mov	r6, r0
 80034a4:	b09d      	sub	sp, #116	@ 0x74
 80034a6:	b118      	cbz	r0, 80034b0 <_vfiprintf_r+0x18>
 80034a8:	6a03      	ldr	r3, [r0, #32]
 80034aa:	b90b      	cbnz	r3, 80034b0 <_vfiprintf_r+0x18>
 80034ac:	f7ff fcb6 	bl	8002e1c <__sinit>
 80034b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034b2:	07d9      	lsls	r1, r3, #31
 80034b4:	d405      	bmi.n	80034c2 <_vfiprintf_r+0x2a>
 80034b6:	89ab      	ldrh	r3, [r5, #12]
 80034b8:	059a      	lsls	r2, r3, #22
 80034ba:	d402      	bmi.n	80034c2 <_vfiprintf_r+0x2a>
 80034bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034be:	f7ff fea4 	bl	800320a <__retarget_lock_acquire_recursive>
 80034c2:	89ab      	ldrh	r3, [r5, #12]
 80034c4:	071b      	lsls	r3, r3, #28
 80034c6:	d501      	bpl.n	80034cc <_vfiprintf_r+0x34>
 80034c8:	692b      	ldr	r3, [r5, #16]
 80034ca:	b99b      	cbnz	r3, 80034f4 <_vfiprintf_r+0x5c>
 80034cc:	4629      	mov	r1, r5
 80034ce:	4630      	mov	r0, r6
 80034d0:	f7ff fdcc 	bl	800306c <__swsetup_r>
 80034d4:	b170      	cbz	r0, 80034f4 <_vfiprintf_r+0x5c>
 80034d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034d8:	07dc      	lsls	r4, r3, #31
 80034da:	d504      	bpl.n	80034e6 <_vfiprintf_r+0x4e>
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034e0:	b01d      	add	sp, #116	@ 0x74
 80034e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034e6:	89ab      	ldrh	r3, [r5, #12]
 80034e8:	0598      	lsls	r0, r3, #22
 80034ea:	d4f7      	bmi.n	80034dc <_vfiprintf_r+0x44>
 80034ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034ee:	f7ff fe8d 	bl	800320c <__retarget_lock_release_recursive>
 80034f2:	e7f3      	b.n	80034dc <_vfiprintf_r+0x44>
 80034f4:	2300      	movs	r3, #0
 80034f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80034f8:	2320      	movs	r3, #32
 80034fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034fe:	2330      	movs	r3, #48	@ 0x30
 8003500:	f04f 0901 	mov.w	r9, #1
 8003504:	f8cd 800c 	str.w	r8, [sp, #12]
 8003508:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80036b4 <_vfiprintf_r+0x21c>
 800350c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003510:	4623      	mov	r3, r4
 8003512:	469a      	mov	sl, r3
 8003514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003518:	b10a      	cbz	r2, 800351e <_vfiprintf_r+0x86>
 800351a:	2a25      	cmp	r2, #37	@ 0x25
 800351c:	d1f9      	bne.n	8003512 <_vfiprintf_r+0x7a>
 800351e:	ebba 0b04 	subs.w	fp, sl, r4
 8003522:	d00b      	beq.n	800353c <_vfiprintf_r+0xa4>
 8003524:	465b      	mov	r3, fp
 8003526:	4622      	mov	r2, r4
 8003528:	4629      	mov	r1, r5
 800352a:	4630      	mov	r0, r6
 800352c:	f7ff ffa1 	bl	8003472 <__sfputs_r>
 8003530:	3001      	adds	r0, #1
 8003532:	f000 80a7 	beq.w	8003684 <_vfiprintf_r+0x1ec>
 8003536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003538:	445a      	add	r2, fp
 800353a:	9209      	str	r2, [sp, #36]	@ 0x24
 800353c:	f89a 3000 	ldrb.w	r3, [sl]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 809f 	beq.w	8003684 <_vfiprintf_r+0x1ec>
 8003546:	2300      	movs	r3, #0
 8003548:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800354c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003550:	f10a 0a01 	add.w	sl, sl, #1
 8003554:	9304      	str	r3, [sp, #16]
 8003556:	9307      	str	r3, [sp, #28]
 8003558:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800355c:	931a      	str	r3, [sp, #104]	@ 0x68
 800355e:	4654      	mov	r4, sl
 8003560:	2205      	movs	r2, #5
 8003562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003566:	4853      	ldr	r0, [pc, #332]	@ (80036b4 <_vfiprintf_r+0x21c>)
 8003568:	f000 fb8c 	bl	8003c84 <memchr>
 800356c:	9a04      	ldr	r2, [sp, #16]
 800356e:	b9d8      	cbnz	r0, 80035a8 <_vfiprintf_r+0x110>
 8003570:	06d1      	lsls	r1, r2, #27
 8003572:	bf44      	itt	mi
 8003574:	2320      	movmi	r3, #32
 8003576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800357a:	0713      	lsls	r3, r2, #28
 800357c:	bf44      	itt	mi
 800357e:	232b      	movmi	r3, #43	@ 0x2b
 8003580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003584:	f89a 3000 	ldrb.w	r3, [sl]
 8003588:	2b2a      	cmp	r3, #42	@ 0x2a
 800358a:	d015      	beq.n	80035b8 <_vfiprintf_r+0x120>
 800358c:	4654      	mov	r4, sl
 800358e:	2000      	movs	r0, #0
 8003590:	f04f 0c0a 	mov.w	ip, #10
 8003594:	9a07      	ldr	r2, [sp, #28]
 8003596:	4621      	mov	r1, r4
 8003598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800359c:	3b30      	subs	r3, #48	@ 0x30
 800359e:	2b09      	cmp	r3, #9
 80035a0:	d94b      	bls.n	800363a <_vfiprintf_r+0x1a2>
 80035a2:	b1b0      	cbz	r0, 80035d2 <_vfiprintf_r+0x13a>
 80035a4:	9207      	str	r2, [sp, #28]
 80035a6:	e014      	b.n	80035d2 <_vfiprintf_r+0x13a>
 80035a8:	eba0 0308 	sub.w	r3, r0, r8
 80035ac:	fa09 f303 	lsl.w	r3, r9, r3
 80035b0:	4313      	orrs	r3, r2
 80035b2:	46a2      	mov	sl, r4
 80035b4:	9304      	str	r3, [sp, #16]
 80035b6:	e7d2      	b.n	800355e <_vfiprintf_r+0xc6>
 80035b8:	9b03      	ldr	r3, [sp, #12]
 80035ba:	1d19      	adds	r1, r3, #4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	9103      	str	r1, [sp, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bfbb      	ittet	lt
 80035c4:	425b      	neglt	r3, r3
 80035c6:	f042 0202 	orrlt.w	r2, r2, #2
 80035ca:	9307      	strge	r3, [sp, #28]
 80035cc:	9307      	strlt	r3, [sp, #28]
 80035ce:	bfb8      	it	lt
 80035d0:	9204      	strlt	r2, [sp, #16]
 80035d2:	7823      	ldrb	r3, [r4, #0]
 80035d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80035d6:	d10a      	bne.n	80035ee <_vfiprintf_r+0x156>
 80035d8:	7863      	ldrb	r3, [r4, #1]
 80035da:	2b2a      	cmp	r3, #42	@ 0x2a
 80035dc:	d132      	bne.n	8003644 <_vfiprintf_r+0x1ac>
 80035de:	9b03      	ldr	r3, [sp, #12]
 80035e0:	3402      	adds	r4, #2
 80035e2:	1d1a      	adds	r2, r3, #4
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	9203      	str	r2, [sp, #12]
 80035e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035ec:	9305      	str	r3, [sp, #20]
 80035ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80036b8 <_vfiprintf_r+0x220>
 80035f2:	2203      	movs	r2, #3
 80035f4:	4650      	mov	r0, sl
 80035f6:	7821      	ldrb	r1, [r4, #0]
 80035f8:	f000 fb44 	bl	8003c84 <memchr>
 80035fc:	b138      	cbz	r0, 800360e <_vfiprintf_r+0x176>
 80035fe:	2240      	movs	r2, #64	@ 0x40
 8003600:	9b04      	ldr	r3, [sp, #16]
 8003602:	eba0 000a 	sub.w	r0, r0, sl
 8003606:	4082      	lsls	r2, r0
 8003608:	4313      	orrs	r3, r2
 800360a:	3401      	adds	r4, #1
 800360c:	9304      	str	r3, [sp, #16]
 800360e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003612:	2206      	movs	r2, #6
 8003614:	4829      	ldr	r0, [pc, #164]	@ (80036bc <_vfiprintf_r+0x224>)
 8003616:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800361a:	f000 fb33 	bl	8003c84 <memchr>
 800361e:	2800      	cmp	r0, #0
 8003620:	d03f      	beq.n	80036a2 <_vfiprintf_r+0x20a>
 8003622:	4b27      	ldr	r3, [pc, #156]	@ (80036c0 <_vfiprintf_r+0x228>)
 8003624:	bb1b      	cbnz	r3, 800366e <_vfiprintf_r+0x1d6>
 8003626:	9b03      	ldr	r3, [sp, #12]
 8003628:	3307      	adds	r3, #7
 800362a:	f023 0307 	bic.w	r3, r3, #7
 800362e:	3308      	adds	r3, #8
 8003630:	9303      	str	r3, [sp, #12]
 8003632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003634:	443b      	add	r3, r7
 8003636:	9309      	str	r3, [sp, #36]	@ 0x24
 8003638:	e76a      	b.n	8003510 <_vfiprintf_r+0x78>
 800363a:	460c      	mov	r4, r1
 800363c:	2001      	movs	r0, #1
 800363e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003642:	e7a8      	b.n	8003596 <_vfiprintf_r+0xfe>
 8003644:	2300      	movs	r3, #0
 8003646:	f04f 0c0a 	mov.w	ip, #10
 800364a:	4619      	mov	r1, r3
 800364c:	3401      	adds	r4, #1
 800364e:	9305      	str	r3, [sp, #20]
 8003650:	4620      	mov	r0, r4
 8003652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003656:	3a30      	subs	r2, #48	@ 0x30
 8003658:	2a09      	cmp	r2, #9
 800365a:	d903      	bls.n	8003664 <_vfiprintf_r+0x1cc>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0c6      	beq.n	80035ee <_vfiprintf_r+0x156>
 8003660:	9105      	str	r1, [sp, #20]
 8003662:	e7c4      	b.n	80035ee <_vfiprintf_r+0x156>
 8003664:	4604      	mov	r4, r0
 8003666:	2301      	movs	r3, #1
 8003668:	fb0c 2101 	mla	r1, ip, r1, r2
 800366c:	e7f0      	b.n	8003650 <_vfiprintf_r+0x1b8>
 800366e:	ab03      	add	r3, sp, #12
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	462a      	mov	r2, r5
 8003674:	4630      	mov	r0, r6
 8003676:	4b13      	ldr	r3, [pc, #76]	@ (80036c4 <_vfiprintf_r+0x22c>)
 8003678:	a904      	add	r1, sp, #16
 800367a:	f3af 8000 	nop.w
 800367e:	4607      	mov	r7, r0
 8003680:	1c78      	adds	r0, r7, #1
 8003682:	d1d6      	bne.n	8003632 <_vfiprintf_r+0x19a>
 8003684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003686:	07d9      	lsls	r1, r3, #31
 8003688:	d405      	bmi.n	8003696 <_vfiprintf_r+0x1fe>
 800368a:	89ab      	ldrh	r3, [r5, #12]
 800368c:	059a      	lsls	r2, r3, #22
 800368e:	d402      	bmi.n	8003696 <_vfiprintf_r+0x1fe>
 8003690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003692:	f7ff fdbb 	bl	800320c <__retarget_lock_release_recursive>
 8003696:	89ab      	ldrh	r3, [r5, #12]
 8003698:	065b      	lsls	r3, r3, #25
 800369a:	f53f af1f 	bmi.w	80034dc <_vfiprintf_r+0x44>
 800369e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036a0:	e71e      	b.n	80034e0 <_vfiprintf_r+0x48>
 80036a2:	ab03      	add	r3, sp, #12
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	462a      	mov	r2, r5
 80036a8:	4630      	mov	r0, r6
 80036aa:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <_vfiprintf_r+0x22c>)
 80036ac:	a904      	add	r1, sp, #16
 80036ae:	f000 f87d 	bl	80037ac <_printf_i>
 80036b2:	e7e4      	b.n	800367e <_vfiprintf_r+0x1e6>
 80036b4:	08003f05 	.word	0x08003f05
 80036b8:	08003f0b 	.word	0x08003f0b
 80036bc:	08003f0f 	.word	0x08003f0f
 80036c0:	00000000 	.word	0x00000000
 80036c4:	08003473 	.word	0x08003473

080036c8 <_printf_common>:
 80036c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036cc:	4616      	mov	r6, r2
 80036ce:	4698      	mov	r8, r3
 80036d0:	688a      	ldr	r2, [r1, #8]
 80036d2:	690b      	ldr	r3, [r1, #16]
 80036d4:	4607      	mov	r7, r0
 80036d6:	4293      	cmp	r3, r2
 80036d8:	bfb8      	it	lt
 80036da:	4613      	movlt	r3, r2
 80036dc:	6033      	str	r3, [r6, #0]
 80036de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036e2:	460c      	mov	r4, r1
 80036e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036e8:	b10a      	cbz	r2, 80036ee <_printf_common+0x26>
 80036ea:	3301      	adds	r3, #1
 80036ec:	6033      	str	r3, [r6, #0]
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	0699      	lsls	r1, r3, #26
 80036f2:	bf42      	ittt	mi
 80036f4:	6833      	ldrmi	r3, [r6, #0]
 80036f6:	3302      	addmi	r3, #2
 80036f8:	6033      	strmi	r3, [r6, #0]
 80036fa:	6825      	ldr	r5, [r4, #0]
 80036fc:	f015 0506 	ands.w	r5, r5, #6
 8003700:	d106      	bne.n	8003710 <_printf_common+0x48>
 8003702:	f104 0a19 	add.w	sl, r4, #25
 8003706:	68e3      	ldr	r3, [r4, #12]
 8003708:	6832      	ldr	r2, [r6, #0]
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	42ab      	cmp	r3, r5
 800370e:	dc2b      	bgt.n	8003768 <_printf_common+0xa0>
 8003710:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003714:	6822      	ldr	r2, [r4, #0]
 8003716:	3b00      	subs	r3, #0
 8003718:	bf18      	it	ne
 800371a:	2301      	movne	r3, #1
 800371c:	0692      	lsls	r2, r2, #26
 800371e:	d430      	bmi.n	8003782 <_printf_common+0xba>
 8003720:	4641      	mov	r1, r8
 8003722:	4638      	mov	r0, r7
 8003724:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003728:	47c8      	blx	r9
 800372a:	3001      	adds	r0, #1
 800372c:	d023      	beq.n	8003776 <_printf_common+0xae>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	6922      	ldr	r2, [r4, #16]
 8003732:	f003 0306 	and.w	r3, r3, #6
 8003736:	2b04      	cmp	r3, #4
 8003738:	bf14      	ite	ne
 800373a:	2500      	movne	r5, #0
 800373c:	6833      	ldreq	r3, [r6, #0]
 800373e:	f04f 0600 	mov.w	r6, #0
 8003742:	bf08      	it	eq
 8003744:	68e5      	ldreq	r5, [r4, #12]
 8003746:	f104 041a 	add.w	r4, r4, #26
 800374a:	bf08      	it	eq
 800374c:	1aed      	subeq	r5, r5, r3
 800374e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003752:	bf08      	it	eq
 8003754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003758:	4293      	cmp	r3, r2
 800375a:	bfc4      	itt	gt
 800375c:	1a9b      	subgt	r3, r3, r2
 800375e:	18ed      	addgt	r5, r5, r3
 8003760:	42b5      	cmp	r5, r6
 8003762:	d11a      	bne.n	800379a <_printf_common+0xd2>
 8003764:	2000      	movs	r0, #0
 8003766:	e008      	b.n	800377a <_printf_common+0xb2>
 8003768:	2301      	movs	r3, #1
 800376a:	4652      	mov	r2, sl
 800376c:	4641      	mov	r1, r8
 800376e:	4638      	mov	r0, r7
 8003770:	47c8      	blx	r9
 8003772:	3001      	adds	r0, #1
 8003774:	d103      	bne.n	800377e <_printf_common+0xb6>
 8003776:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800377a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377e:	3501      	adds	r5, #1
 8003780:	e7c1      	b.n	8003706 <_printf_common+0x3e>
 8003782:	2030      	movs	r0, #48	@ 0x30
 8003784:	18e1      	adds	r1, r4, r3
 8003786:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003790:	4422      	add	r2, r4
 8003792:	3302      	adds	r3, #2
 8003794:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003798:	e7c2      	b.n	8003720 <_printf_common+0x58>
 800379a:	2301      	movs	r3, #1
 800379c:	4622      	mov	r2, r4
 800379e:	4641      	mov	r1, r8
 80037a0:	4638      	mov	r0, r7
 80037a2:	47c8      	blx	r9
 80037a4:	3001      	adds	r0, #1
 80037a6:	d0e6      	beq.n	8003776 <_printf_common+0xae>
 80037a8:	3601      	adds	r6, #1
 80037aa:	e7d9      	b.n	8003760 <_printf_common+0x98>

080037ac <_printf_i>:
 80037ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037b0:	7e0f      	ldrb	r7, [r1, #24]
 80037b2:	4691      	mov	r9, r2
 80037b4:	2f78      	cmp	r7, #120	@ 0x78
 80037b6:	4680      	mov	r8, r0
 80037b8:	460c      	mov	r4, r1
 80037ba:	469a      	mov	sl, r3
 80037bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037c2:	d807      	bhi.n	80037d4 <_printf_i+0x28>
 80037c4:	2f62      	cmp	r7, #98	@ 0x62
 80037c6:	d80a      	bhi.n	80037de <_printf_i+0x32>
 80037c8:	2f00      	cmp	r7, #0
 80037ca:	f000 80d1 	beq.w	8003970 <_printf_i+0x1c4>
 80037ce:	2f58      	cmp	r7, #88	@ 0x58
 80037d0:	f000 80b8 	beq.w	8003944 <_printf_i+0x198>
 80037d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037dc:	e03a      	b.n	8003854 <_printf_i+0xa8>
 80037de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037e2:	2b15      	cmp	r3, #21
 80037e4:	d8f6      	bhi.n	80037d4 <_printf_i+0x28>
 80037e6:	a101      	add	r1, pc, #4	@ (adr r1, 80037ec <_printf_i+0x40>)
 80037e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037ec:	08003845 	.word	0x08003845
 80037f0:	08003859 	.word	0x08003859
 80037f4:	080037d5 	.word	0x080037d5
 80037f8:	080037d5 	.word	0x080037d5
 80037fc:	080037d5 	.word	0x080037d5
 8003800:	080037d5 	.word	0x080037d5
 8003804:	08003859 	.word	0x08003859
 8003808:	080037d5 	.word	0x080037d5
 800380c:	080037d5 	.word	0x080037d5
 8003810:	080037d5 	.word	0x080037d5
 8003814:	080037d5 	.word	0x080037d5
 8003818:	08003957 	.word	0x08003957
 800381c:	08003883 	.word	0x08003883
 8003820:	08003911 	.word	0x08003911
 8003824:	080037d5 	.word	0x080037d5
 8003828:	080037d5 	.word	0x080037d5
 800382c:	08003979 	.word	0x08003979
 8003830:	080037d5 	.word	0x080037d5
 8003834:	08003883 	.word	0x08003883
 8003838:	080037d5 	.word	0x080037d5
 800383c:	080037d5 	.word	0x080037d5
 8003840:	08003919 	.word	0x08003919
 8003844:	6833      	ldr	r3, [r6, #0]
 8003846:	1d1a      	adds	r2, r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6032      	str	r2, [r6, #0]
 800384c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003850:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003854:	2301      	movs	r3, #1
 8003856:	e09c      	b.n	8003992 <_printf_i+0x1e6>
 8003858:	6833      	ldr	r3, [r6, #0]
 800385a:	6820      	ldr	r0, [r4, #0]
 800385c:	1d19      	adds	r1, r3, #4
 800385e:	6031      	str	r1, [r6, #0]
 8003860:	0606      	lsls	r6, r0, #24
 8003862:	d501      	bpl.n	8003868 <_printf_i+0xbc>
 8003864:	681d      	ldr	r5, [r3, #0]
 8003866:	e003      	b.n	8003870 <_printf_i+0xc4>
 8003868:	0645      	lsls	r5, r0, #25
 800386a:	d5fb      	bpl.n	8003864 <_printf_i+0xb8>
 800386c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003870:	2d00      	cmp	r5, #0
 8003872:	da03      	bge.n	800387c <_printf_i+0xd0>
 8003874:	232d      	movs	r3, #45	@ 0x2d
 8003876:	426d      	negs	r5, r5
 8003878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800387c:	230a      	movs	r3, #10
 800387e:	4858      	ldr	r0, [pc, #352]	@ (80039e0 <_printf_i+0x234>)
 8003880:	e011      	b.n	80038a6 <_printf_i+0xfa>
 8003882:	6821      	ldr	r1, [r4, #0]
 8003884:	6833      	ldr	r3, [r6, #0]
 8003886:	0608      	lsls	r0, r1, #24
 8003888:	f853 5b04 	ldr.w	r5, [r3], #4
 800388c:	d402      	bmi.n	8003894 <_printf_i+0xe8>
 800388e:	0649      	lsls	r1, r1, #25
 8003890:	bf48      	it	mi
 8003892:	b2ad      	uxthmi	r5, r5
 8003894:	2f6f      	cmp	r7, #111	@ 0x6f
 8003896:	6033      	str	r3, [r6, #0]
 8003898:	bf14      	ite	ne
 800389a:	230a      	movne	r3, #10
 800389c:	2308      	moveq	r3, #8
 800389e:	4850      	ldr	r0, [pc, #320]	@ (80039e0 <_printf_i+0x234>)
 80038a0:	2100      	movs	r1, #0
 80038a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038a6:	6866      	ldr	r6, [r4, #4]
 80038a8:	2e00      	cmp	r6, #0
 80038aa:	60a6      	str	r6, [r4, #8]
 80038ac:	db05      	blt.n	80038ba <_printf_i+0x10e>
 80038ae:	6821      	ldr	r1, [r4, #0]
 80038b0:	432e      	orrs	r6, r5
 80038b2:	f021 0104 	bic.w	r1, r1, #4
 80038b6:	6021      	str	r1, [r4, #0]
 80038b8:	d04b      	beq.n	8003952 <_printf_i+0x1a6>
 80038ba:	4616      	mov	r6, r2
 80038bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80038c0:	fb03 5711 	mls	r7, r3, r1, r5
 80038c4:	5dc7      	ldrb	r7, [r0, r7]
 80038c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038ca:	462f      	mov	r7, r5
 80038cc:	42bb      	cmp	r3, r7
 80038ce:	460d      	mov	r5, r1
 80038d0:	d9f4      	bls.n	80038bc <_printf_i+0x110>
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d10b      	bne.n	80038ee <_printf_i+0x142>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	07df      	lsls	r7, r3, #31
 80038da:	d508      	bpl.n	80038ee <_printf_i+0x142>
 80038dc:	6923      	ldr	r3, [r4, #16]
 80038de:	6861      	ldr	r1, [r4, #4]
 80038e0:	4299      	cmp	r1, r3
 80038e2:	bfde      	ittt	le
 80038e4:	2330      	movle	r3, #48	@ 0x30
 80038e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038ea:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80038ee:	1b92      	subs	r2, r2, r6
 80038f0:	6122      	str	r2, [r4, #16]
 80038f2:	464b      	mov	r3, r9
 80038f4:	4621      	mov	r1, r4
 80038f6:	4640      	mov	r0, r8
 80038f8:	f8cd a000 	str.w	sl, [sp]
 80038fc:	aa03      	add	r2, sp, #12
 80038fe:	f7ff fee3 	bl	80036c8 <_printf_common>
 8003902:	3001      	adds	r0, #1
 8003904:	d14a      	bne.n	800399c <_printf_i+0x1f0>
 8003906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800390a:	b004      	add	sp, #16
 800390c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	f043 0320 	orr.w	r3, r3, #32
 8003916:	6023      	str	r3, [r4, #0]
 8003918:	2778      	movs	r7, #120	@ 0x78
 800391a:	4832      	ldr	r0, [pc, #200]	@ (80039e4 <_printf_i+0x238>)
 800391c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	6831      	ldr	r1, [r6, #0]
 8003924:	061f      	lsls	r7, r3, #24
 8003926:	f851 5b04 	ldr.w	r5, [r1], #4
 800392a:	d402      	bmi.n	8003932 <_printf_i+0x186>
 800392c:	065f      	lsls	r7, r3, #25
 800392e:	bf48      	it	mi
 8003930:	b2ad      	uxthmi	r5, r5
 8003932:	6031      	str	r1, [r6, #0]
 8003934:	07d9      	lsls	r1, r3, #31
 8003936:	bf44      	itt	mi
 8003938:	f043 0320 	orrmi.w	r3, r3, #32
 800393c:	6023      	strmi	r3, [r4, #0]
 800393e:	b11d      	cbz	r5, 8003948 <_printf_i+0x19c>
 8003940:	2310      	movs	r3, #16
 8003942:	e7ad      	b.n	80038a0 <_printf_i+0xf4>
 8003944:	4826      	ldr	r0, [pc, #152]	@ (80039e0 <_printf_i+0x234>)
 8003946:	e7e9      	b.n	800391c <_printf_i+0x170>
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	f023 0320 	bic.w	r3, r3, #32
 800394e:	6023      	str	r3, [r4, #0]
 8003950:	e7f6      	b.n	8003940 <_printf_i+0x194>
 8003952:	4616      	mov	r6, r2
 8003954:	e7bd      	b.n	80038d2 <_printf_i+0x126>
 8003956:	6833      	ldr	r3, [r6, #0]
 8003958:	6825      	ldr	r5, [r4, #0]
 800395a:	1d18      	adds	r0, r3, #4
 800395c:	6961      	ldr	r1, [r4, #20]
 800395e:	6030      	str	r0, [r6, #0]
 8003960:	062e      	lsls	r6, r5, #24
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	d501      	bpl.n	800396a <_printf_i+0x1be>
 8003966:	6019      	str	r1, [r3, #0]
 8003968:	e002      	b.n	8003970 <_printf_i+0x1c4>
 800396a:	0668      	lsls	r0, r5, #25
 800396c:	d5fb      	bpl.n	8003966 <_printf_i+0x1ba>
 800396e:	8019      	strh	r1, [r3, #0]
 8003970:	2300      	movs	r3, #0
 8003972:	4616      	mov	r6, r2
 8003974:	6123      	str	r3, [r4, #16]
 8003976:	e7bc      	b.n	80038f2 <_printf_i+0x146>
 8003978:	6833      	ldr	r3, [r6, #0]
 800397a:	2100      	movs	r1, #0
 800397c:	1d1a      	adds	r2, r3, #4
 800397e:	6032      	str	r2, [r6, #0]
 8003980:	681e      	ldr	r6, [r3, #0]
 8003982:	6862      	ldr	r2, [r4, #4]
 8003984:	4630      	mov	r0, r6
 8003986:	f000 f97d 	bl	8003c84 <memchr>
 800398a:	b108      	cbz	r0, 8003990 <_printf_i+0x1e4>
 800398c:	1b80      	subs	r0, r0, r6
 800398e:	6060      	str	r0, [r4, #4]
 8003990:	6863      	ldr	r3, [r4, #4]
 8003992:	6123      	str	r3, [r4, #16]
 8003994:	2300      	movs	r3, #0
 8003996:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800399a:	e7aa      	b.n	80038f2 <_printf_i+0x146>
 800399c:	4632      	mov	r2, r6
 800399e:	4649      	mov	r1, r9
 80039a0:	4640      	mov	r0, r8
 80039a2:	6923      	ldr	r3, [r4, #16]
 80039a4:	47d0      	blx	sl
 80039a6:	3001      	adds	r0, #1
 80039a8:	d0ad      	beq.n	8003906 <_printf_i+0x15a>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	079b      	lsls	r3, r3, #30
 80039ae:	d413      	bmi.n	80039d8 <_printf_i+0x22c>
 80039b0:	68e0      	ldr	r0, [r4, #12]
 80039b2:	9b03      	ldr	r3, [sp, #12]
 80039b4:	4298      	cmp	r0, r3
 80039b6:	bfb8      	it	lt
 80039b8:	4618      	movlt	r0, r3
 80039ba:	e7a6      	b.n	800390a <_printf_i+0x15e>
 80039bc:	2301      	movs	r3, #1
 80039be:	4632      	mov	r2, r6
 80039c0:	4649      	mov	r1, r9
 80039c2:	4640      	mov	r0, r8
 80039c4:	47d0      	blx	sl
 80039c6:	3001      	adds	r0, #1
 80039c8:	d09d      	beq.n	8003906 <_printf_i+0x15a>
 80039ca:	3501      	adds	r5, #1
 80039cc:	68e3      	ldr	r3, [r4, #12]
 80039ce:	9903      	ldr	r1, [sp, #12]
 80039d0:	1a5b      	subs	r3, r3, r1
 80039d2:	42ab      	cmp	r3, r5
 80039d4:	dcf2      	bgt.n	80039bc <_printf_i+0x210>
 80039d6:	e7eb      	b.n	80039b0 <_printf_i+0x204>
 80039d8:	2500      	movs	r5, #0
 80039da:	f104 0619 	add.w	r6, r4, #25
 80039de:	e7f5      	b.n	80039cc <_printf_i+0x220>
 80039e0:	08003f16 	.word	0x08003f16
 80039e4:	08003f27 	.word	0x08003f27

080039e8 <__sflush_r>:
 80039e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ee:	0716      	lsls	r6, r2, #28
 80039f0:	4605      	mov	r5, r0
 80039f2:	460c      	mov	r4, r1
 80039f4:	d454      	bmi.n	8003aa0 <__sflush_r+0xb8>
 80039f6:	684b      	ldr	r3, [r1, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	dc02      	bgt.n	8003a02 <__sflush_r+0x1a>
 80039fc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	dd48      	ble.n	8003a94 <__sflush_r+0xac>
 8003a02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a04:	2e00      	cmp	r6, #0
 8003a06:	d045      	beq.n	8003a94 <__sflush_r+0xac>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a0e:	682f      	ldr	r7, [r5, #0]
 8003a10:	6a21      	ldr	r1, [r4, #32]
 8003a12:	602b      	str	r3, [r5, #0]
 8003a14:	d030      	beq.n	8003a78 <__sflush_r+0x90>
 8003a16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	0759      	lsls	r1, r3, #29
 8003a1c:	d505      	bpl.n	8003a2a <__sflush_r+0x42>
 8003a1e:	6863      	ldr	r3, [r4, #4]
 8003a20:	1ad2      	subs	r2, r2, r3
 8003a22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a24:	b10b      	cbz	r3, 8003a2a <__sflush_r+0x42>
 8003a26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a28:	1ad2      	subs	r2, r2, r3
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a30:	6a21      	ldr	r1, [r4, #32]
 8003a32:	47b0      	blx	r6
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	d106      	bne.n	8003a48 <__sflush_r+0x60>
 8003a3a:	6829      	ldr	r1, [r5, #0]
 8003a3c:	291d      	cmp	r1, #29
 8003a3e:	d82b      	bhi.n	8003a98 <__sflush_r+0xb0>
 8003a40:	4a28      	ldr	r2, [pc, #160]	@ (8003ae4 <__sflush_r+0xfc>)
 8003a42:	40ca      	lsrs	r2, r1
 8003a44:	07d6      	lsls	r6, r2, #31
 8003a46:	d527      	bpl.n	8003a98 <__sflush_r+0xb0>
 8003a48:	2200      	movs	r2, #0
 8003a4a:	6062      	str	r2, [r4, #4]
 8003a4c:	6922      	ldr	r2, [r4, #16]
 8003a4e:	04d9      	lsls	r1, r3, #19
 8003a50:	6022      	str	r2, [r4, #0]
 8003a52:	d504      	bpl.n	8003a5e <__sflush_r+0x76>
 8003a54:	1c42      	adds	r2, r0, #1
 8003a56:	d101      	bne.n	8003a5c <__sflush_r+0x74>
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	b903      	cbnz	r3, 8003a5e <__sflush_r+0x76>
 8003a5c:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a60:	602f      	str	r7, [r5, #0]
 8003a62:	b1b9      	cbz	r1, 8003a94 <__sflush_r+0xac>
 8003a64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a68:	4299      	cmp	r1, r3
 8003a6a:	d002      	beq.n	8003a72 <__sflush_r+0x8a>
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f7ff fbed 	bl	800324c <_free_r>
 8003a72:	2300      	movs	r3, #0
 8003a74:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a76:	e00d      	b.n	8003a94 <__sflush_r+0xac>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	47b0      	blx	r6
 8003a7e:	4602      	mov	r2, r0
 8003a80:	1c50      	adds	r0, r2, #1
 8003a82:	d1c9      	bne.n	8003a18 <__sflush_r+0x30>
 8003a84:	682b      	ldr	r3, [r5, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0c6      	beq.n	8003a18 <__sflush_r+0x30>
 8003a8a:	2b1d      	cmp	r3, #29
 8003a8c:	d001      	beq.n	8003a92 <__sflush_r+0xaa>
 8003a8e:	2b16      	cmp	r3, #22
 8003a90:	d11d      	bne.n	8003ace <__sflush_r+0xe6>
 8003a92:	602f      	str	r7, [r5, #0]
 8003a94:	2000      	movs	r0, #0
 8003a96:	e021      	b.n	8003adc <__sflush_r+0xf4>
 8003a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a9c:	b21b      	sxth	r3, r3
 8003a9e:	e01a      	b.n	8003ad6 <__sflush_r+0xee>
 8003aa0:	690f      	ldr	r7, [r1, #16]
 8003aa2:	2f00      	cmp	r7, #0
 8003aa4:	d0f6      	beq.n	8003a94 <__sflush_r+0xac>
 8003aa6:	0793      	lsls	r3, r2, #30
 8003aa8:	bf18      	it	ne
 8003aaa:	2300      	movne	r3, #0
 8003aac:	680e      	ldr	r6, [r1, #0]
 8003aae:	bf08      	it	eq
 8003ab0:	694b      	ldreq	r3, [r1, #20]
 8003ab2:	1bf6      	subs	r6, r6, r7
 8003ab4:	600f      	str	r7, [r1, #0]
 8003ab6:	608b      	str	r3, [r1, #8]
 8003ab8:	2e00      	cmp	r6, #0
 8003aba:	ddeb      	ble.n	8003a94 <__sflush_r+0xac>
 8003abc:	4633      	mov	r3, r6
 8003abe:	463a      	mov	r2, r7
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	6a21      	ldr	r1, [r4, #32]
 8003ac4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003ac8:	47e0      	blx	ip
 8003aca:	2800      	cmp	r0, #0
 8003acc:	dc07      	bgt.n	8003ade <__sflush_r+0xf6>
 8003ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ad6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ada:	81a3      	strh	r3, [r4, #12]
 8003adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ade:	4407      	add	r7, r0
 8003ae0:	1a36      	subs	r6, r6, r0
 8003ae2:	e7e9      	b.n	8003ab8 <__sflush_r+0xd0>
 8003ae4:	20400001 	.word	0x20400001

08003ae8 <_fflush_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	690b      	ldr	r3, [r1, #16]
 8003aec:	4605      	mov	r5, r0
 8003aee:	460c      	mov	r4, r1
 8003af0:	b913      	cbnz	r3, 8003af8 <_fflush_r+0x10>
 8003af2:	2500      	movs	r5, #0
 8003af4:	4628      	mov	r0, r5
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	b118      	cbz	r0, 8003b02 <_fflush_r+0x1a>
 8003afa:	6a03      	ldr	r3, [r0, #32]
 8003afc:	b90b      	cbnz	r3, 8003b02 <_fflush_r+0x1a>
 8003afe:	f7ff f98d 	bl	8002e1c <__sinit>
 8003b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f3      	beq.n	8003af2 <_fflush_r+0xa>
 8003b0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b0c:	07d0      	lsls	r0, r2, #31
 8003b0e:	d404      	bmi.n	8003b1a <_fflush_r+0x32>
 8003b10:	0599      	lsls	r1, r3, #22
 8003b12:	d402      	bmi.n	8003b1a <_fflush_r+0x32>
 8003b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b16:	f7ff fb78 	bl	800320a <__retarget_lock_acquire_recursive>
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	f7ff ff63 	bl	80039e8 <__sflush_r>
 8003b22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b24:	4605      	mov	r5, r0
 8003b26:	07da      	lsls	r2, r3, #31
 8003b28:	d4e4      	bmi.n	8003af4 <_fflush_r+0xc>
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	059b      	lsls	r3, r3, #22
 8003b2e:	d4e1      	bmi.n	8003af4 <_fflush_r+0xc>
 8003b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b32:	f7ff fb6b 	bl	800320c <__retarget_lock_release_recursive>
 8003b36:	e7dd      	b.n	8003af4 <_fflush_r+0xc>

08003b38 <fiprintf>:
 8003b38:	b40e      	push	{r1, r2, r3}
 8003b3a:	b503      	push	{r0, r1, lr}
 8003b3c:	4601      	mov	r1, r0
 8003b3e:	ab03      	add	r3, sp, #12
 8003b40:	4805      	ldr	r0, [pc, #20]	@ (8003b58 <fiprintf+0x20>)
 8003b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b46:	6800      	ldr	r0, [r0, #0]
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	f7ff fca5 	bl	8003498 <_vfiprintf_r>
 8003b4e:	b002      	add	sp, #8
 8003b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b54:	b003      	add	sp, #12
 8003b56:	4770      	bx	lr
 8003b58:	20000204 	.word	0x20000204

08003b5c <__swhatbuf_r>:
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	460c      	mov	r4, r1
 8003b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b64:	4615      	mov	r5, r2
 8003b66:	2900      	cmp	r1, #0
 8003b68:	461e      	mov	r6, r3
 8003b6a:	b096      	sub	sp, #88	@ 0x58
 8003b6c:	da0c      	bge.n	8003b88 <__swhatbuf_r+0x2c>
 8003b6e:	89a3      	ldrh	r3, [r4, #12]
 8003b70:	2100      	movs	r1, #0
 8003b72:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b76:	bf14      	ite	ne
 8003b78:	2340      	movne	r3, #64	@ 0x40
 8003b7a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b7e:	2000      	movs	r0, #0
 8003b80:	6031      	str	r1, [r6, #0]
 8003b82:	602b      	str	r3, [r5, #0]
 8003b84:	b016      	add	sp, #88	@ 0x58
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	466a      	mov	r2, sp
 8003b8a:	f000 f849 	bl	8003c20 <_fstat_r>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	dbed      	blt.n	8003b6e <__swhatbuf_r+0x12>
 8003b92:	9901      	ldr	r1, [sp, #4]
 8003b94:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b98:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b9c:	4259      	negs	r1, r3
 8003b9e:	4159      	adcs	r1, r3
 8003ba0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ba4:	e7eb      	b.n	8003b7e <__swhatbuf_r+0x22>

08003ba6 <__smakebuf_r>:
 8003ba6:	898b      	ldrh	r3, [r1, #12]
 8003ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003baa:	079d      	lsls	r5, r3, #30
 8003bac:	4606      	mov	r6, r0
 8003bae:	460c      	mov	r4, r1
 8003bb0:	d507      	bpl.n	8003bc2 <__smakebuf_r+0x1c>
 8003bb2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003bb6:	6023      	str	r3, [r4, #0]
 8003bb8:	6123      	str	r3, [r4, #16]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	6163      	str	r3, [r4, #20]
 8003bbe:	b003      	add	sp, #12
 8003bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc2:	466a      	mov	r2, sp
 8003bc4:	ab01      	add	r3, sp, #4
 8003bc6:	f7ff ffc9 	bl	8003b5c <__swhatbuf_r>
 8003bca:	9f00      	ldr	r7, [sp, #0]
 8003bcc:	4605      	mov	r5, r0
 8003bce:	4639      	mov	r1, r7
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f7ff fbad 	bl	8003330 <_malloc_r>
 8003bd6:	b948      	cbnz	r0, 8003bec <__smakebuf_r+0x46>
 8003bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bdc:	059a      	lsls	r2, r3, #22
 8003bde:	d4ee      	bmi.n	8003bbe <__smakebuf_r+0x18>
 8003be0:	f023 0303 	bic.w	r3, r3, #3
 8003be4:	f043 0302 	orr.w	r3, r3, #2
 8003be8:	81a3      	strh	r3, [r4, #12]
 8003bea:	e7e2      	b.n	8003bb2 <__smakebuf_r+0xc>
 8003bec:	89a3      	ldrh	r3, [r4, #12]
 8003bee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bf6:	81a3      	strh	r3, [r4, #12]
 8003bf8:	9b01      	ldr	r3, [sp, #4]
 8003bfa:	6020      	str	r0, [r4, #0]
 8003bfc:	b15b      	cbz	r3, 8003c16 <__smakebuf_r+0x70>
 8003bfe:	4630      	mov	r0, r6
 8003c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c04:	f000 f81e 	bl	8003c44 <_isatty_r>
 8003c08:	b128      	cbz	r0, 8003c16 <__smakebuf_r+0x70>
 8003c0a:	89a3      	ldrh	r3, [r4, #12]
 8003c0c:	f023 0303 	bic.w	r3, r3, #3
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	81a3      	strh	r3, [r4, #12]
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	431d      	orrs	r5, r3
 8003c1a:	81a5      	strh	r5, [r4, #12]
 8003c1c:	e7cf      	b.n	8003bbe <__smakebuf_r+0x18>
	...

08003c20 <_fstat_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	2300      	movs	r3, #0
 8003c24:	4d06      	ldr	r5, [pc, #24]	@ (8003c40 <_fstat_r+0x20>)
 8003c26:	4604      	mov	r4, r0
 8003c28:	4608      	mov	r0, r1
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	602b      	str	r3, [r5, #0]
 8003c2e:	f7fd f867 	bl	8000d00 <_fstat>
 8003c32:	1c43      	adds	r3, r0, #1
 8003c34:	d102      	bne.n	8003c3c <_fstat_r+0x1c>
 8003c36:	682b      	ldr	r3, [r5, #0]
 8003c38:	b103      	cbz	r3, 8003c3c <_fstat_r+0x1c>
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	bd38      	pop	{r3, r4, r5, pc}
 8003c3e:	bf00      	nop
 8003c40:	200005a8 	.word	0x200005a8

08003c44 <_isatty_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	2300      	movs	r3, #0
 8003c48:	4d05      	ldr	r5, [pc, #20]	@ (8003c60 <_isatty_r+0x1c>)
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	f7fd f865 	bl	8000d1e <_isatty>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d102      	bne.n	8003c5e <_isatty_r+0x1a>
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	b103      	cbz	r3, 8003c5e <_isatty_r+0x1a>
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	200005a8 	.word	0x200005a8

08003c64 <_sbrk_r>:
 8003c64:	b538      	push	{r3, r4, r5, lr}
 8003c66:	2300      	movs	r3, #0
 8003c68:	4d05      	ldr	r5, [pc, #20]	@ (8003c80 <_sbrk_r+0x1c>)
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	4608      	mov	r0, r1
 8003c6e:	602b      	str	r3, [r5, #0]
 8003c70:	f7fd f86c 	bl	8000d4c <_sbrk>
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	d102      	bne.n	8003c7e <_sbrk_r+0x1a>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	b103      	cbz	r3, 8003c7e <_sbrk_r+0x1a>
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	bd38      	pop	{r3, r4, r5, pc}
 8003c80:	200005a8 	.word	0x200005a8

08003c84 <memchr>:
 8003c84:	4603      	mov	r3, r0
 8003c86:	b510      	push	{r4, lr}
 8003c88:	b2c9      	uxtb	r1, r1
 8003c8a:	4402      	add	r2, r0
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	d101      	bne.n	8003c96 <memchr+0x12>
 8003c92:	2000      	movs	r0, #0
 8003c94:	e003      	b.n	8003c9e <memchr+0x1a>
 8003c96:	7804      	ldrb	r4, [r0, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	428c      	cmp	r4, r1
 8003c9c:	d1f6      	bne.n	8003c8c <memchr+0x8>
 8003c9e:	bd10      	pop	{r4, pc}

08003ca0 <abort>:
 8003ca0:	2006      	movs	r0, #6
 8003ca2:	b508      	push	{r3, lr}
 8003ca4:	f000 f82c 	bl	8003d00 <raise>
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f7fc ffda 	bl	8000c62 <_exit>

08003cae <_raise_r>:
 8003cae:	291f      	cmp	r1, #31
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4605      	mov	r5, r0
 8003cb4:	460c      	mov	r4, r1
 8003cb6:	d904      	bls.n	8003cc2 <_raise_r+0x14>
 8003cb8:	2316      	movs	r3, #22
 8003cba:	6003      	str	r3, [r0, #0]
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cc0:	bd38      	pop	{r3, r4, r5, pc}
 8003cc2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003cc4:	b112      	cbz	r2, 8003ccc <_raise_r+0x1e>
 8003cc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003cca:	b94b      	cbnz	r3, 8003ce0 <_raise_r+0x32>
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f000 f831 	bl	8003d34 <_getpid_r>
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	4601      	mov	r1, r0
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cdc:	f000 b818 	b.w	8003d10 <_kill_r>
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d00a      	beq.n	8003cfa <_raise_r+0x4c>
 8003ce4:	1c59      	adds	r1, r3, #1
 8003ce6:	d103      	bne.n	8003cf0 <_raise_r+0x42>
 8003ce8:	2316      	movs	r3, #22
 8003cea:	6003      	str	r3, [r0, #0]
 8003cec:	2001      	movs	r0, #1
 8003cee:	e7e7      	b.n	8003cc0 <_raise_r+0x12>
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003cf8:	4798      	blx	r3
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	e7e0      	b.n	8003cc0 <_raise_r+0x12>
	...

08003d00 <raise>:
 8003d00:	4b02      	ldr	r3, [pc, #8]	@ (8003d0c <raise+0xc>)
 8003d02:	4601      	mov	r1, r0
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	f7ff bfd2 	b.w	8003cae <_raise_r>
 8003d0a:	bf00      	nop
 8003d0c:	20000204 	.word	0x20000204

08003d10 <_kill_r>:
 8003d10:	b538      	push	{r3, r4, r5, lr}
 8003d12:	2300      	movs	r3, #0
 8003d14:	4d06      	ldr	r5, [pc, #24]	@ (8003d30 <_kill_r+0x20>)
 8003d16:	4604      	mov	r4, r0
 8003d18:	4608      	mov	r0, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	602b      	str	r3, [r5, #0]
 8003d1e:	f7fc ff90 	bl	8000c42 <_kill>
 8003d22:	1c43      	adds	r3, r0, #1
 8003d24:	d102      	bne.n	8003d2c <_kill_r+0x1c>
 8003d26:	682b      	ldr	r3, [r5, #0]
 8003d28:	b103      	cbz	r3, 8003d2c <_kill_r+0x1c>
 8003d2a:	6023      	str	r3, [r4, #0]
 8003d2c:	bd38      	pop	{r3, r4, r5, pc}
 8003d2e:	bf00      	nop
 8003d30:	200005a8 	.word	0x200005a8

08003d34 <_getpid_r>:
 8003d34:	f7fc bf7e 	b.w	8000c34 <_getpid>

08003d38 <_init>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr

08003d44 <_fini>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr
