
ProjetoTetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080058cc  080058cc  000068cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b10  08005b10  0000728c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005b10  08005b10  0000728c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005b10  08005b10  0000728c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b10  08005b10  00006b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b14  08005b14  00006b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000028c  20000000  08005b18  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  2000028c  08005da4  0000728c  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20000668  08005da4  00007668  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000728c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf15  00000000  00000000  000072b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c8  00000000  00000000  000131ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00015a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a52  00000000  00000000  00016828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d88  00000000  00000000  0001727a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f306  00000000  00000000  00031002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8c9  00000000  00000000  00040308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfbd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b4  00000000  00000000  000cfc14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000d3ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000028c 	.word	0x2000028c
 8000128:	00000000 	.word	0x00000000
 800012c:	080058b4 	.word	0x080058b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000290 	.word	0x20000290
 8000148:	080058b4 	.word	0x080058b4

0800014c <lcd_Task>:
    0B00000};

estados_LCD estadoLCD = TELA1;
uint8_t PecasLCD[7] = {CUSTOMT,CUSTOMZ,CUSTOMI,CUSTOML,CUSTOMJ,CUSTOMS,CUSTOMO};

void lcd_Task(void) {
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b091      	sub	sp, #68	@ 0x44
 8000150:	af00      	add	r7, sp, #0
	//4 estados na máquina de estados

	switch (estadoLCD) {
 8000152:	4b42      	ldr	r3, [pc, #264]	@ (800025c <lcd_Task+0x110>)
 8000154:	781b      	ldrb	r3, [r3, #0]
 8000156:	2b06      	cmp	r3, #6
 8000158:	d810      	bhi.n	800017c <lcd_Task+0x30>
 800015a:	a201      	add	r2, pc, #4	@ (adr r2, 8000160 <lcd_Task+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000183 	.word	0x08000183
 8000164:	08000195 	.word	0x08000195
 8000168:	080001a7 	.word	0x080001a7
 800016c:	080001b9 	.word	0x080001b9
 8000170:	08000211 	.word	0x08000211
 8000174:	0800017d 	.word	0x0800017d
 8000178:	080001cb 	.word	0x080001cb
	default:
		estadoLCD = TELA1;
 800017c:	4b37      	ldr	r3, [pc, #220]	@ (800025c <lcd_Task+0x110>)
 800017e:	2200      	movs	r2, #0
 8000180:	701a      	strb	r2, [r3, #0]
	case TELA1:
		change_Message(0, ">>Start Game");
 8000182:	4937      	ldr	r1, [pc, #220]	@ (8000260 <lcd_Task+0x114>)
 8000184:	2000      	movs	r0, #0
 8000186:	f000 fc5d 	bl	8000a44 <change_Message>
		change_Message(1, "Recorde Atual");
 800018a:	4936      	ldr	r1, [pc, #216]	@ (8000264 <lcd_Task+0x118>)
 800018c:	2001      	movs	r0, #1
 800018e:	f000 fc59 	bl	8000a44 <change_Message>
		break;
 8000192:	e05e      	b.n	8000252 <lcd_Task+0x106>
	case TELA2:
		change_Message(0, ">>Recorde Atual");
 8000194:	4934      	ldr	r1, [pc, #208]	@ (8000268 <lcd_Task+0x11c>)
 8000196:	2000      	movs	r0, #0
 8000198:	f000 fc54 	bl	8000a44 <change_Message>
		change_Message(1, "Gravar Nome");
 800019c:	4933      	ldr	r1, [pc, #204]	@ (800026c <lcd_Task+0x120>)
 800019e:	2001      	movs	r0, #1
 80001a0:	f000 fc50 	bl	8000a44 <change_Message>
		break;
 80001a4:	e055      	b.n	8000252 <lcd_Task+0x106>
	case TELA3:
		change_Message(0, ">>Gravar Nome");
 80001a6:	4932      	ldr	r1, [pc, #200]	@ (8000270 <lcd_Task+0x124>)
 80001a8:	2000      	movs	r0, #0
 80001aa:	f000 fc4b 	bl	8000a44 <change_Message>
		change_Message(1, "Limpar Recorde");
 80001ae:	4931      	ldr	r1, [pc, #196]	@ (8000274 <lcd_Task+0x128>)
 80001b0:	2001      	movs	r0, #1
 80001b2:	f000 fc47 	bl	8000a44 <change_Message>
		break;
 80001b6:	e04c      	b.n	8000252 <lcd_Task+0x106>
	case TELA4:
		change_Message(0, ">>Limpar Recorde");
 80001b8:	492f      	ldr	r1, [pc, #188]	@ (8000278 <lcd_Task+0x12c>)
 80001ba:	2000      	movs	r0, #0
 80001bc:	f000 fc42 	bl	8000a44 <change_Message>
		change_Message(1, "Start Game");
 80001c0:	492e      	ldr	r1, [pc, #184]	@ (800027c <lcd_Task+0x130>)
 80001c2:	2001      	movs	r0, #1
 80001c4:	f000 fc3e 	bl	8000a44 <change_Message>
		break;
 80001c8:	e043      	b.n	8000252 <lcd_Task+0x106>
        // sprintf(linhaTeste, "AD1: %4u", AD1);   // %4u → valor sem sinal com 4 dígitos (ajustável)
        // change_Message(0, linhaTeste);
        
        // sprintf(linhaTestes2, "AD2:%4u Bot:%1u", AD2, BotaoStatus);   // %4u → valor sem sinal com 4 dígitos (ajustável)
        // change_Message(1, linhaTestes2);
        sprintf(linhaTeste, "Y:%4u         ", AD2);   // %4u → valor sem sinal com 4 dígitos (ajustável)
 80001ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000280 <lcd_Task+0x134>)
 80001cc:	881b      	ldrh	r3, [r3, #0]
 80001ce:	461a      	mov	r2, r3
 80001d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80001d4:	492b      	ldr	r1, [pc, #172]	@ (8000284 <lcd_Task+0x138>)
 80001d6:	4618      	mov	r0, r3
 80001d8:	f004 fa78 	bl	80046cc <siprintf>
        change_Message(0, linhaTeste);
 80001dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80001e0:	4619      	mov	r1, r3
 80001e2:	2000      	movs	r0, #0
 80001e4:	f000 fc2e 	bl	8000a44 <change_Message>
        sprintf(linhaTestes2, "Cima:%u Baixo:%u ", getCima(), getBaixo());   // %4u → valor sem sinal com 4 dígitos (ajustável)
 80001e8:	f000 fb5e 	bl	80008a8 <getCima>
 80001ec:	4603      	mov	r3, r0
 80001ee:	461c      	mov	r4, r3
 80001f0:	f000 fb64 	bl	80008bc <getBaixo>
 80001f4:	4603      	mov	r3, r0
 80001f6:	f107 0020 	add.w	r0, r7, #32
 80001fa:	4622      	mov	r2, r4
 80001fc:	4922      	ldr	r1, [pc, #136]	@ (8000288 <lcd_Task+0x13c>)
 80001fe:	f004 fa65 	bl	80046cc <siprintf>
        change_Message(1, linhaTestes2);
 8000202:	f107 0320 	add.w	r3, r7, #32
 8000206:	4619      	mov	r1, r3
 8000208:	2001      	movs	r0, #1
 800020a:	f000 fc1b 	bl	8000a44 <change_Message>
        break;
 800020e:	e020      	b.n	8000252 <lcd_Task+0x106>
    case TELANEXTPIECE:
    	char linha[16] = "Proxima Peca:   ";
 8000210:	4b1e      	ldr	r3, [pc, #120]	@ (800028c <lcd_Task+0x140>)
 8000212:	f107 0410 	add.w	r4, r7, #16
 8000216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        char linha2[16];
    	linha[15] = PecasLCD[get_next_piece()];
 800021c:	f001 fdaa 	bl	8001d74 <get_next_piece>
 8000220:	4603      	mov	r3, r0
 8000222:	4a1b      	ldr	r2, [pc, #108]	@ (8000290 <lcd_Task+0x144>)
 8000224:	5cd3      	ldrb	r3, [r2, r3]
 8000226:	77fb      	strb	r3, [r7, #31]
    	change_Message(0, linha);
 8000228:	f107 0310 	add.w	r3, r7, #16
 800022c:	4619      	mov	r1, r3
 800022e:	2000      	movs	r0, #0
 8000230:	f000 fc08 	bl	8000a44 <change_Message>
        sprintf(linha2, "Pont:%4u ", get_pontuacao());   // %4u → valor sem sinal com 4 dígitos (ajustável)
 8000234:	f001 ff8c 	bl	8002150 <get_pontuacao>
 8000238:	4603      	mov	r3, r0
 800023a:	461a      	mov	r2, r3
 800023c:	463b      	mov	r3, r7
 800023e:	4915      	ldr	r1, [pc, #84]	@ (8000294 <lcd_Task+0x148>)
 8000240:	4618      	mov	r0, r3
 8000242:	f004 fa43 	bl	80046cc <siprintf>
        change_Message(1, linha2);
 8000246:	463b      	mov	r3, r7
 8000248:	4619      	mov	r1, r3
 800024a:	2001      	movs	r0, #1
 800024c:	f000 fbfa 	bl	8000a44 <change_Message>
    	break;
 8000250:	bf00      	nop
	}
}
 8000252:	bf00      	nop
 8000254:	3744      	adds	r7, #68	@ 0x44
 8000256:	46bd      	mov	sp, r7
 8000258:	bd90      	pop	{r4, r7, pc}
 800025a:	bf00      	nop
 800025c:	200002a8 	.word	0x200002a8
 8000260:	080058cc 	.word	0x080058cc
 8000264:	080058dc 	.word	0x080058dc
 8000268:	080058ec 	.word	0x080058ec
 800026c:	080058fc 	.word	0x080058fc
 8000270:	08005908 	.word	0x08005908
 8000274:	08005918 	.word	0x08005918
 8000278:	08005928 	.word	0x08005928
 800027c:	0800593c 	.word	0x0800593c
 8000280:	20000380 	.word	0x20000380
 8000284:	08005948 	.word	0x08005948
 8000288:	08005958 	.word	0x08005958
 800028c:	08005978 	.word	0x08005978
 8000290:	20000030 	.word	0x20000030
 8000294:	0800596c 	.word	0x0800596c

08000298 <changeLCDScreen>:

void changeLCDScreen(estados_LCD novaTela) {
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
	//valide que novaTela é um estado valido antes de mudar
	if (novaTela >= TELA1 && novaTela < FIM) {
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	2b04      	cmp	r3, #4
 80002a6:	d803      	bhi.n	80002b0 <changeLCDScreen+0x18>
		estadoLCD = novaTela;
 80002a8:	4a05      	ldr	r2, [pc, #20]	@ (80002c0 <changeLCDScreen+0x28>)
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	7013      	strb	r3, [r2, #0]
	} else {
		estadoLCD = TELA1; // Reset to default state if invalid
	}
}
 80002ae:	e002      	b.n	80002b6 <changeLCDScreen+0x1e>
		estadoLCD = TELA1; // Reset to default state if invalid
 80002b0:	4b03      	ldr	r3, [pc, #12]	@ (80002c0 <changeLCDScreen+0x28>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	200002a8 	.word	0x200002a8

080002c4 <initLCD>:

void initLCD(void) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
    initialize_LCD(); // Initialize the LCD
 80002c8:	f000 fc98 	bl	8000bfc <initialize_LCD>
    lcd_create_char(1, pieceO);
 80002cc:	490c      	ldr	r1, [pc, #48]	@ (8000300 <initLCD+0x3c>)
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 fcc5 	bl	8000c5e <lcd_create_char>
    lcd_create_char(2, pieceL);
 80002d4:	490b      	ldr	r1, [pc, #44]	@ (8000304 <initLCD+0x40>)
 80002d6:	2002      	movs	r0, #2
 80002d8:	f000 fcc1 	bl	8000c5e <lcd_create_char>
    lcd_create_char(3, pieceS);
 80002dc:	490a      	ldr	r1, [pc, #40]	@ (8000308 <initLCD+0x44>)
 80002de:	2003      	movs	r0, #3
 80002e0:	f000 fcbd 	bl	8000c5e <lcd_create_char>
    lcd_create_char(4, pieceZ);
 80002e4:	4909      	ldr	r1, [pc, #36]	@ (800030c <initLCD+0x48>)
 80002e6:	2004      	movs	r0, #4
 80002e8:	f000 fcb9 	bl	8000c5e <lcd_create_char>
    lcd_create_char(5, pieceT);
 80002ec:	4908      	ldr	r1, [pc, #32]	@ (8000310 <initLCD+0x4c>)
 80002ee:	2005      	movs	r0, #5
 80002f0:	f000 fcb5 	bl	8000c5e <lcd_create_char>
    lcd_create_char(6, pieceJ);
 80002f4:	4907      	ldr	r1, [pc, #28]	@ (8000314 <initLCD+0x50>)
 80002f6:	2006      	movs	r0, #6
 80002f8:	f000 fcb1 	bl	8000c5e <lcd_create_char>
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000028 	.word	0x20000028
 8000304:	20000000 	.word	0x20000000
 8000308:	20000018 	.word	0x20000018
 800030c:	20000010 	.word	0x20000010
 8000310:	20000020 	.word	0x20000020
 8000314:	20000008 	.word	0x20000008

08000318 <initGame>:
PecaTetris peca;

// Funções

void initGame(void)
{
 8000318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800031a:	b091      	sub	sp, #68	@ 0x44
 800031c:	af0e      	add	r7, sp, #56	@ 0x38
	srand(HAL_GetTick());
 800031e:	f001 ffa1 	bl	8002264 <HAL_GetTick>
 8000322:	4603      	mov	r3, r0
 8000324:	4618      	mov	r0, r3
 8000326:	f004 f82b 	bl	8004380 <srand>
    peca_atual = number_aleatory_peace(); // Gera a primeira peça aleatória
 800032a:	f001 fc81 	bl	8001c30 <number_aleatory_peace>
 800032e:	4603      	mov	r3, r0
 8000330:	4a1e      	ldr	r2, [pc, #120]	@ (80003ac <initGame+0x94>)
 8000332:	6013      	str	r3, [r2, #0]
    peca = pecas[peca_atual];
 8000334:	4b1d      	ldr	r3, [pc, #116]	@ (80003ac <initGame+0x94>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	491d      	ldr	r1, [pc, #116]	@ (80003b0 <initGame+0x98>)
 800033a:	4a1e      	ldr	r2, [pc, #120]	@ (80003b4 <initGame+0x9c>)
 800033c:	019b      	lsls	r3, r3, #6
 800033e:	4413      	add	r3, r2
 8000340:	460c      	mov	r4, r1
 8000342:	461d      	mov	r5, r3
 8000344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800034a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800034c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800034e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000350:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    linha = 0;
 8000358:	4b17      	ldr	r3, [pc, #92]	@ (80003b8 <initGame+0xa0>)
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
    coluna = 3;
 800035e:	4b17      	ldr	r3, [pc, #92]	@ (80003bc <initGame+0xa4>)
 8000360:	2203      	movs	r2, #3
 8000362:	601a      	str	r2, [r3, #0]
    init_game();
 8000364:	f001 f8c8 	bl	80014f8 <init_game>
    running = TRUE; // Inicia o jogo
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <initGame+0xa8>)
 800036a:	2201      	movs	r2, #1
 800036c:	601a      	str	r2, [r3, #0]
    place_piece(linha, coluna, peca);
 800036e:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <initGame+0xa0>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <initGame+0xa4>)
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	603a      	str	r2, [r7, #0]
 800037a:	4e0d      	ldr	r6, [pc, #52]	@ (80003b0 <initGame+0x98>)
 800037c:	466d      	mov	r5, sp
 800037e:	f106 0408 	add.w	r4, r6, #8
 8000382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800038a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800038c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800038e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000392:	e885 0003 	stmia.w	r5, {r0, r1}
 8000396:	e896 000c 	ldmia.w	r6, {r2, r3}
 800039a:	6839      	ldr	r1, [r7, #0]
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f001 f947 	bl	8001630 <place_piece>
    // limpaTela();
    // draw_board();
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003aa:	bf00      	nop
 80003ac:	200002b4 	.word	0x200002b4
 80003b0:	200002bc 	.word	0x200002bc
 80003b4:	20000064 	.word	0x20000064
 80003b8:	200002ac 	.word	0x200002ac
 80003bc:	200002b0 	.word	0x200002b0
 80003c0:	200002b8 	.word	0x200002b8

080003c4 <taskTetris>:

void taskTetris(void)
{
 80003c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003c6:	b08f      	sub	sp, #60	@ 0x3c
 80003c8:	af0e      	add	r7, sp, #56	@ 0x38
    if (game_over()) // Verifica se o jogo acabou
 80003ca:	f001 fdfb 	bl	8001fc4 <game_over>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d005      	beq.n	80003e0 <taskTetris+0x1c>
    {
        running = FALSE; // Para o jogo
 80003d4:	4b34      	ldr	r3, [pc, #208]	@ (80004a8 <taskTetris+0xe4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
        resetBotaoEvento();
 80003da:	f000 fab7 	bl	800094c <resetBotaoEvento>
        return;
 80003de:	e05f      	b.n	80004a0 <taskTetris+0xdc>
    }
    if(getDireita())
 80003e0:	f000 fa86 	bl	80008f0 <getDireita>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d017      	beq.n	800041a <taskTetris+0x56>
    {
        resetDireitaEsquerda();
 80003ea:	f000 fa9f 	bl	800092c <resetDireitaEsquerda>
        move_piece_right(&linha, &coluna, peca);
 80003ee:	4e2f      	ldr	r6, [pc, #188]	@ (80004ac <taskTetris+0xe8>)
 80003f0:	466d      	mov	r5, sp
 80003f2:	f106 0408 	add.w	r4, r6, #8
 80003f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000406:	e885 0003 	stmia.w	r5, {r0, r1}
 800040a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800040e:	4928      	ldr	r1, [pc, #160]	@ (80004b0 <taskTetris+0xec>)
 8000410:	4828      	ldr	r0, [pc, #160]	@ (80004b4 <taskTetris+0xf0>)
 8000412:	f001 f9ff 	bl	8001814 <move_piece_right>
        draw_board();
 8000416:	f001 f8af 	bl	8001578 <draw_board>
    }
    if (getEsquerda())
 800041a:	f000 fa73 	bl	8000904 <getEsquerda>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d017      	beq.n	8000454 <taskTetris+0x90>
    {
        resetDireitaEsquerda();
 8000424:	f000 fa82 	bl	800092c <resetDireitaEsquerda>
        move_piece_left(&linha, &coluna, peca);
 8000428:	4e20      	ldr	r6, [pc, #128]	@ (80004ac <taskTetris+0xe8>)
 800042a:	466d      	mov	r5, sp
 800042c:	f106 0408 	add.w	r4, r6, #8
 8000430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800043a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800043c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000440:	e885 0003 	stmia.w	r5, {r0, r1}
 8000444:	e896 000c 	ldmia.w	r6, {r2, r3}
 8000448:	4919      	ldr	r1, [pc, #100]	@ (80004b0 <taskTetris+0xec>)
 800044a:	481a      	ldr	r0, [pc, #104]	@ (80004b4 <taskTetris+0xf0>)
 800044c:	f001 fa49 	bl	80018e2 <move_piece_left>
        draw_board();
 8000450:	f001 f892 	bl	8001578 <draw_board>
    //     resetCimaBaixo();
    //     rotate_piece_right(linha, coluna, &peca);
    //     draw_board();
    // }

    if (getBaixo())
 8000454:	f000 fa32 	bl	80008bc <getBaixo>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d009      	beq.n	8000472 <taskTetris+0xae>
    {
        resetCimaBaixo();
 800045e:	f000 fa37 	bl	80008d0 <resetCimaBaixo>
        move_piece_down(&linha, &coluna, &peca, &peca_atual);
 8000462:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <taskTetris+0xf4>)
 8000464:	4a11      	ldr	r2, [pc, #68]	@ (80004ac <taskTetris+0xe8>)
 8000466:	4912      	ldr	r1, [pc, #72]	@ (80004b0 <taskTetris+0xec>)
 8000468:	4812      	ldr	r0, [pc, #72]	@ (80004b4 <taskTetris+0xf0>)
 800046a:	f001 fb62 	bl	8001b32 <move_piece_down>
        draw_board();
 800046e:	f001 f883 	bl	8001578 <draw_board>
    }
    if (getBotaoEvento())
 8000472:	f000 fa51 	bl	8000918 <getBotaoEvento>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d00b      	beq.n	8000494 <taskTetris+0xd0>
    {
        resetBotaoEvento();
 800047c:	f000 fa66 	bl	800094c <resetBotaoEvento>
        rotate_piece_right(linha, coluna, &peca);
 8000480:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <taskTetris+0xf0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a0a      	ldr	r2, [pc, #40]	@ (80004b0 <taskTetris+0xec>)
 8000486:	6811      	ldr	r1, [r2, #0]
 8000488:	4a08      	ldr	r2, [pc, #32]	@ (80004ac <taskTetris+0xe8>)
 800048a:	4618      	mov	r0, r3
 800048c:	f001 fa90 	bl	80019b0 <rotate_piece_right>
        draw_board();
 8000490:	f001 f872 	bl	8001578 <draw_board>
    }

    update_game(&linha, &coluna, &peca, &peca_atual);
 8000494:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <taskTetris+0xf4>)
 8000496:	4a05      	ldr	r2, [pc, #20]	@ (80004ac <taskTetris+0xe8>)
 8000498:	4905      	ldr	r1, [pc, #20]	@ (80004b0 <taskTetris+0xec>)
 800049a:	4806      	ldr	r0, [pc, #24]	@ (80004b4 <taskTetris+0xf0>)
 800049c:	f001 fd2a 	bl	8001ef4 <update_game>
}
 80004a0:	3704      	adds	r7, #4
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200002b8 	.word	0x200002b8
 80004ac:	200002bc 	.word	0x200002bc
 80004b0:	200002b0 	.word	0x200002b0
 80004b4:	200002ac 	.word	0x200002ac
 80004b8:	200002b4 	.word	0x200002b4

080004bc <gameRunning>:

int gameRunning(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
    return running; // Retorna o estado do jogo
 80004c0:	4b02      	ldr	r3, [pc, #8]	@ (80004cc <gameRunning+0x10>)
 80004c2:	681b      	ldr	r3, [r3, #0]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	200002b8 	.word	0x200002b8

080004d0 <taskMatrizLed>:
#include "MatrizLed.h"

volatile MatrizLED_t MatrizLed = {0};

void taskMatrizLed(void) //150us de execucao
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
    static volatile uint8_t line = 0;
    static volatile uint16_t line_m = 0b1000000000000000;

    volatile uint16_t aux_line = 0x00;
 80004d6:	2300      	movs	r3, #0
 80004d8:	80fb      	strh	r3, [r7, #6]
    volatile uint8_t aux_line2 = 0x00;
 80004da:	2300      	movs	r3, #0
 80004dc:	717b      	strb	r3, [r7, #5]

    line++;
 80004de:	4b53      	ldr	r3, [pc, #332]	@ (800062c <taskMatrizLed+0x15c>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	3301      	adds	r3, #1
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b50      	ldr	r3, [pc, #320]	@ (800062c <taskMatrizLed+0x15c>)
 80004ea:	701a      	strb	r2, [r3, #0]
    if (line == 16)
 80004ec:	4b4f      	ldr	r3, [pc, #316]	@ (800062c <taskMatrizLed+0x15c>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2b10      	cmp	r3, #16
 80004f4:	d102      	bne.n	80004fc <taskMatrizLed+0x2c>
        line = 0;
 80004f6:	4b4d      	ldr	r3, [pc, #308]	@ (800062c <taskMatrizLed+0x15c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]
    aux_line = (line_m >> line) | (line_m << (15 - line));
 80004fc:	4b4c      	ldr	r3, [pc, #304]	@ (8000630 <taskMatrizLed+0x160>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	b29b      	uxth	r3, r3
 8000502:	461a      	mov	r2, r3
 8000504:	4b49      	ldr	r3, [pc, #292]	@ (800062c <taskMatrizLed+0x15c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	fa42 f303 	asr.w	r3, r2, r3
 800050e:	b21a      	sxth	r2, r3
 8000510:	4b47      	ldr	r3, [pc, #284]	@ (8000630 <taskMatrizLed+0x160>)
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	b29b      	uxth	r3, r3
 8000516:	4619      	mov	r1, r3
 8000518:	4b44      	ldr	r3, [pc, #272]	@ (800062c <taskMatrizLed+0x15c>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	f1c3 030f 	rsb	r3, r3, #15
 8000522:	fa01 f303 	lsl.w	r3, r1, r3
 8000526:	b21b      	sxth	r3, r3
 8000528:	4313      	orrs	r3, r2
 800052a:	b21b      	sxth	r3, r3
 800052c:	b29b      	uxth	r3, r3
 800052e:	80fb      	strh	r3, [r7, #6]

    for (int i = 0; i < 8; i++)
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e02e      	b.n	8000594 <taskMatrizLed+0xc4>
    {
        if (MatrizLed[line][7 - i] == 0)
 8000536:	4b3d      	ldr	r3, [pc, #244]	@ (800062c <taskMatrizLed+0x15c>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	461a      	mov	r2, r3
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	493b      	ldr	r1, [pc, #236]	@ (8000634 <taskMatrizLed+0x164>)
 8000546:	00d2      	lsls	r2, r2, #3
 8000548:	440a      	add	r2, r1
 800054a:	4413      	add	r3, r2
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b2db      	uxtb	r3, r3
 8000550:	2b00      	cmp	r3, #0
 8000552:	d106      	bne.n	8000562 <taskMatrizLed+0x92>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800055a:	4837      	ldr	r0, [pc, #220]	@ (8000638 <taskMatrizLed+0x168>)
 800055c:	f002 fd85 	bl	800306a <HAL_GPIO_WritePin>
 8000560:	e005      	b.n	800056e <taskMatrizLed+0x9e>
        else
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000568:	4833      	ldr	r0, [pc, #204]	@ (8000638 <taskMatrizLed+0x168>)
 800056a:	f002 fd7e 	bl	800306a <HAL_GPIO_WritePin>

        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 800056e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000572:	4831      	ldr	r0, [pc, #196]	@ (8000638 <taskMatrizLed+0x168>)
 8000574:	f002 fd91 	bl	800309a <HAL_GPIO_TogglePin>
        DWT_Delay_us(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f000 fbb1 	bl	8000ce0 <DWT_Delay_us>
        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 800057e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000582:	482d      	ldr	r0, [pc, #180]	@ (8000638 <taskMatrizLed+0x168>)
 8000584:	f002 fd89 	bl	800309a <HAL_GPIO_TogglePin>
        DWT_Delay_us(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f000 fba9 	bl	8000ce0 <DWT_Delay_us>
    for (int i = 0; i < 8; i++)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	3301      	adds	r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	2b07      	cmp	r3, #7
 8000598:	ddcd      	ble.n	8000536 <taskMatrizLed+0x66>
    }
    for (int i = 0; i < 16; i++)
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	e02e      	b.n	80005fe <taskMatrizLed+0x12e>
    {
        aux_line2 = (aux_line >> i) & 0x0001;
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	fa42 f303 	asr.w	r3, r2, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	717b      	strb	r3, [r7, #5]
        if (aux_line2 == 0)
 80005b6:	797b      	ldrb	r3, [r7, #5]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d106      	bne.n	80005cc <taskMatrizLed+0xfc>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005c4:	481c      	ldr	r0, [pc, #112]	@ (8000638 <taskMatrizLed+0x168>)
 80005c6:	f002 fd50 	bl	800306a <HAL_GPIO_WritePin>
 80005ca:	e005      	b.n	80005d8 <taskMatrizLed+0x108>
        else
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d2:	4819      	ldr	r0, [pc, #100]	@ (8000638 <taskMatrizLed+0x168>)
 80005d4:	f002 fd49 	bl	800306a <HAL_GPIO_WritePin>

        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 80005d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005dc:	4816      	ldr	r0, [pc, #88]	@ (8000638 <taskMatrizLed+0x168>)
 80005de:	f002 fd5c 	bl	800309a <HAL_GPIO_TogglePin>

        DWT_Delay_us(1);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fb7c 	bl	8000ce0 <DWT_Delay_us>
        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 80005e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ec:	4812      	ldr	r0, [pc, #72]	@ (8000638 <taskMatrizLed+0x168>)
 80005ee:	f002 fd54 	bl	800309a <HAL_GPIO_TogglePin>

        DWT_Delay_us(1);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 fb74 	bl	8000ce0 <DWT_Delay_us>
    for (int i = 0; i < 16; i++)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	3301      	adds	r3, #1
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	2b0f      	cmp	r3, #15
 8000602:	ddcd      	ble.n	80005a0 <taskMatrizLed+0xd0>
    }
    HAL_GPIO_TogglePin(CLK2_GPIO_Port, CLK2_Pin);
 8000604:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000608:	480b      	ldr	r0, [pc, #44]	@ (8000638 <taskMatrizLed+0x168>)
 800060a:	f002 fd46 	bl	800309a <HAL_GPIO_TogglePin>
    DWT_Delay_us(1);
 800060e:	2001      	movs	r0, #1
 8000610:	f000 fb66 	bl	8000ce0 <DWT_Delay_us>
    HAL_GPIO_TogglePin(CLK2_GPIO_Port, CLK2_Pin);
 8000614:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000618:	4807      	ldr	r0, [pc, #28]	@ (8000638 <taskMatrizLed+0x168>)
 800061a:	f002 fd3e 	bl	800309a <HAL_GPIO_TogglePin>
    DWT_Delay_us(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 fb5e 	bl	8000ce0 <DWT_Delay_us>
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000037c 	.word	0x2000037c
 8000630:	20000038 	.word	0x20000038
 8000634:	200002fc 	.word	0x200002fc
 8000638:	40010c00 	.word	0x40010c00

0800063c <changeMatriz>:

void changeMatriz(MatrizLED_t newMatriz)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < LinhasMatriz; i++)
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	e01a      	b.n	8000680 <changeMatriz+0x44>
    {
        for (int j = 0; j < ColunasMatriz; j++)
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	e011      	b.n	8000674 <changeMatriz+0x38>
        {
            MatrizLed[i][j] = newMatriz[i][j];
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	441a      	add	r2, r3
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	4413      	add	r3, r2
 800065c:	7819      	ldrb	r1, [r3, #0]
 800065e:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <changeMatriz+0x58>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	441a      	add	r2, r3
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	4413      	add	r3, r2
 800066a:	460a      	mov	r2, r1
 800066c:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < ColunasMatriz; j++)
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	3301      	adds	r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	2b07      	cmp	r3, #7
 8000678:	ddea      	ble.n	8000650 <changeMatriz+0x14>
    for (int i = 0; i < LinhasMatriz; i++)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	3301      	adds	r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	2b0f      	cmp	r3, #15
 8000684:	dde1      	ble.n	800064a <changeMatriz+0xe>
        }
    }
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	200002fc 	.word	0x200002fc

08000698 <initInput>:
// Prototipos
void atualizaNavegacaoUpandDown(void);
void resetCimaBaixo(void);

void initInput(ADC_HandleTypeDef *hadc)
{
 8000698:	b4b0      	push	{r4, r5, r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    hadc1 = *hadc; // Copia o handle do ADC
 80006a0:	4a08      	ldr	r2, [pc, #32]	@ (80006c4 <initInput+0x2c>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4614      	mov	r4, r2
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bcb0      	pop	{r4, r5, r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000384 	.word	0x20000384

080006c8 <ler_ADC_canal>:

uint16_t ler_ADC_canal(uint8_t canal)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]

    sConfig.Channel = (canal == 0 ? (uint32_t)0 : (uint32_t)1);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80006f0:	2303      	movs	r3, #3
 80006f2:	613b      	str	r3, [r7, #16]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig); // Aponta o canal
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	4619      	mov	r1, r3
 80006fa:	480a      	ldr	r0, [pc, #40]	@ (8000724 <ler_ADC_canal+0x5c>)
 80006fc:	f002 f878 	bl	80027f0 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);                            // Inicia conversão
 8000700:	4808      	ldr	r0, [pc, #32]	@ (8000724 <ler_ADC_canal+0x5c>)
 8000702:	f001 feb5 	bl	8002470 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Espera terminar
 8000706:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800070a:	4806      	ldr	r0, [pc, #24]	@ (8000724 <ler_ADC_canal+0x5c>)
 800070c:	f001 ff5e 	bl	80025cc <HAL_ADC_PollForConversion>
    uint16_t valor = HAL_ADC_GetValue(&hadc1);        // Lê resultado
 8000710:	4804      	ldr	r0, [pc, #16]	@ (8000724 <ler_ADC_canal+0x5c>)
 8000712:	f002 f861 	bl	80027d8 <HAL_ADC_GetValue>
 8000716:	4603      	mov	r3, r0
 8000718:	82fb      	strh	r3, [r7, #22]

    return valor;
 800071a:	8afb      	ldrh	r3, [r7, #22]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000384 	.word	0x20000384

08000728 <taskLeituraAD>:

void taskLeituraAD(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
    AD1 = ler_ADC_canal(0); // Lê ADC canal 0
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff ffcb 	bl	80006c8 <ler_ADC_canal>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <taskLeituraAD+0x44>)
 8000738:	801a      	strh	r2, [r3, #0]
    AD2 = ler_ADC_canal(1); // Lê ADC canal 1
 800073a:	2001      	movs	r0, #1
 800073c:	f7ff ffc4 	bl	80006c8 <ler_ADC_canal>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <taskLeituraAD+0x48>)
 8000746:	801a      	strh	r2, [r3, #0]

    BotaoStatus = HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin); // Lê estado do botão
 8000748:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800074c:	4809      	ldr	r0, [pc, #36]	@ (8000774 <taskLeituraAD+0x4c>)
 800074e:	f002 fc75 	bl	800303c <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <taskLeituraAD+0x50>)
 8000758:	801a      	strh	r2, [r3, #0]

    atualizaNavegacaoUpandDown();
 800075a:	f000 f80f 	bl	800077c <atualizaNavegacaoUpandDown>
    atualizaBotao();
 800075e:	f000 f87d 	bl	800085c <atualizaBotao>
    atualizaNavegacaoEsquerdaDireita();
 8000762:	f000 f843 	bl	80007ec <atualizaNavegacaoEsquerdaDireita>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000037e 	.word	0x2000037e
 8000770:	20000380 	.word	0x20000380
 8000774:	40010c00 	.word	0x40010c00
 8000778:	20000382 	.word	0x20000382

0800077c <atualizaNavegacaoUpandDown>:

void atualizaNavegacaoUpandDown(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
    if (!upAndDown_locked)
 8000780:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <atualizaNavegacaoUpandDown+0x60>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d117      	bne.n	80007b8 <atualizaNavegacaoUpandDown+0x3c>
    {
        if (AD2 < AD2_THRESHOLD_LOW)
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <atualizaNavegacaoUpandDown+0x64>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	2bc7      	cmp	r3, #199	@ 0xc7
 800078e:	d806      	bhi.n	800079e <atualizaNavegacaoUpandDown+0x22>
        {
            // Desce no menu
            baixo = TRUE;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <atualizaNavegacaoUpandDown+0x68>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
            upAndDown_locked = 1;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <atualizaNavegacaoUpandDown+0x60>)
 8000798:	2201      	movs	r2, #1
 800079a:	701a      	strb	r2, [r3, #0]
        {
            upAndDown_locked = 0;
            resetCimaBaixo();
        }
    }
}
 800079c:	e01b      	b.n	80007d6 <atualizaNavegacaoUpandDown+0x5a>
        else if (AD2 > AD2_THRESHOLD_HIGH)
 800079e:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <atualizaNavegacaoUpandDown+0x64>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d915      	bls.n	80007d6 <atualizaNavegacaoUpandDown+0x5a>
            cima = TRUE;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <atualizaNavegacaoUpandDown+0x6c>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
            upAndDown_locked = 1;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <atualizaNavegacaoUpandDown+0x60>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
}
 80007b6:	e00e      	b.n	80007d6 <atualizaNavegacaoUpandDown+0x5a>
        if (AD2 > AD2_DEADZONE_MIN && AD2 < AD2_DEADZONE_MAX)
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <atualizaNavegacaoUpandDown+0x64>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80007c0:	d909      	bls.n	80007d6 <atualizaNavegacaoUpandDown+0x5a>
 80007c2:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <atualizaNavegacaoUpandDown+0x64>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80007ca:	d204      	bcs.n	80007d6 <atualizaNavegacaoUpandDown+0x5a>
            upAndDown_locked = 0;
 80007cc:	4b03      	ldr	r3, [pc, #12]	@ (80007dc <atualizaNavegacaoUpandDown+0x60>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
            resetCimaBaixo();
 80007d2:	f000 f87d 	bl	80008d0 <resetCimaBaixo>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200003b4 	.word	0x200003b4
 80007e0:	20000380 	.word	0x20000380
 80007e4:	200003b8 	.word	0x200003b8
 80007e8:	200003b6 	.word	0x200003b6

080007ec <atualizaNavegacaoEsquerdaDireita>:
void atualizaNavegacaoEsquerdaDireita(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    if (!rightAndLeft_locked)
 80007f0:	4b16      	ldr	r3, [pc, #88]	@ (800084c <atualizaNavegacaoEsquerdaDireita+0x60>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d117      	bne.n	8000828 <atualizaNavegacaoEsquerdaDireita+0x3c>
    {
        if (AD1 < AD2_THRESHOLD_LOW)
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <atualizaNavegacaoEsquerdaDireita+0x64>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80007fe:	d806      	bhi.n	800080e <atualizaNavegacaoEsquerdaDireita+0x22>
        {
            esquerda = TRUE; // Movimento para a esquerda
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <atualizaNavegacaoEsquerdaDireita+0x68>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
            rightAndLeft_locked = 1;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <atualizaNavegacaoEsquerdaDireita+0x60>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
        {
            rightAndLeft_locked = 0;
            resetDireitaEsquerda();
        }
    }
}
 800080c:	e01b      	b.n	8000846 <atualizaNavegacaoEsquerdaDireita+0x5a>
        else if (AD1 > AD2_THRESHOLD_HIGH)
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <atualizaNavegacaoEsquerdaDireita+0x64>)
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8000816:	4293      	cmp	r3, r2
 8000818:	d915      	bls.n	8000846 <atualizaNavegacaoEsquerdaDireita+0x5a>
            direita = TRUE; // Movimento para a direita
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <atualizaNavegacaoEsquerdaDireita+0x6c>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
            rightAndLeft_locked = 1;
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <atualizaNavegacaoEsquerdaDireita+0x60>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
}
 8000826:	e00e      	b.n	8000846 <atualizaNavegacaoEsquerdaDireita+0x5a>
        if (AD1 > AD2_DEADZONE_MIN && AD1 < AD2_DEADZONE_MAX)
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <atualizaNavegacaoEsquerdaDireita+0x64>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000830:	d909      	bls.n	8000846 <atualizaNavegacaoEsquerdaDireita+0x5a>
 8000832:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <atualizaNavegacaoEsquerdaDireita+0x64>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 800083a:	d204      	bcs.n	8000846 <atualizaNavegacaoEsquerdaDireita+0x5a>
            rightAndLeft_locked = 0;
 800083c:	4b03      	ldr	r3, [pc, #12]	@ (800084c <atualizaNavegacaoEsquerdaDireita+0x60>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
            resetDireitaEsquerda();
 8000842:	f000 f873 	bl	800092c <resetDireitaEsquerda>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200003b5 	.word	0x200003b5
 8000850:	2000037e 	.word	0x2000037e
 8000854:	200003b9 	.word	0x200003b9
 8000858:	200003b7 	.word	0x200003b7

0800085c <atualizaBotao>:

void atualizaBotao(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
    static uint8_t uinflagBotaoApertado = 0;
    if (BotaoStatus == GPIO_PIN_RESET && botaoEvento == 0)
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <atualizaBotao+0x40>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d106      	bne.n	8000876 <atualizaBotao+0x1a>
 8000868:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <atualizaBotao+0x44>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d102      	bne.n	8000876 <atualizaBotao+0x1a>
    {
        uinflagBotaoApertado = 1; // Marca que o evento já ocorreu
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <atualizaBotao+0x48>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
    }
    if(uinflagBotaoApertado && BotaoStatus == GPIO_PIN_SET)
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <atualizaBotao+0x48>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d009      	beq.n	8000892 <atualizaBotao+0x36>
 800087e:	4b07      	ldr	r3, [pc, #28]	@ (800089c <atualizaBotao+0x40>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d105      	bne.n	8000892 <atualizaBotao+0x36>
    {
        botaoEvento = 1; // Marca o evento do botão
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <atualizaBotao+0x44>)
 8000888:	2201      	movs	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
        uinflagBotaoApertado = 0; // Reseta a flag
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <atualizaBotao+0x48>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
    }
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	20000382 	.word	0x20000382
 80008a0:	200003ba 	.word	0x200003ba
 80008a4:	200003bb 	.word	0x200003bb

080008a8 <getCima>:

uint8_t getCima(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
    return cima;
 80008ac:	4b02      	ldr	r3, [pc, #8]	@ (80008b8 <getCima+0x10>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	200003b6 	.word	0x200003b6

080008bc <getBaixo>:
uint8_t getBaixo(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
    return baixo;
 80008c0:	4b02      	ldr	r3, [pc, #8]	@ (80008cc <getBaixo+0x10>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	200003b8 	.word	0x200003b8

080008d0 <resetCimaBaixo>:
void resetCimaBaixo(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
    cima = 0;
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <resetCimaBaixo+0x18>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
    baixo = 0;
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <resetCimaBaixo+0x1c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	200003b6 	.word	0x200003b6
 80008ec:	200003b8 	.word	0x200003b8

080008f0 <getDireita>:
uint8_t getDireita(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
    return direita;
 80008f4:	4b02      	ldr	r3, [pc, #8]	@ (8000900 <getDireita+0x10>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	200003b7 	.word	0x200003b7

08000904 <getEsquerda>:
uint8_t getEsquerda(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
    return esquerda;
 8000908:	4b02      	ldr	r3, [pc, #8]	@ (8000914 <getEsquerda+0x10>)
 800090a:	781b      	ldrb	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	200003b9 	.word	0x200003b9

08000918 <getBotaoEvento>:
uint8_t getBotaoEvento(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
    return botaoEvento;
 800091c:	4b02      	ldr	r3, [pc, #8]	@ (8000928 <getBotaoEvento+0x10>)
 800091e:	781b      	ldrb	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	200003ba 	.word	0x200003ba

0800092c <resetDireitaEsquerda>:

void resetDireitaEsquerda(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
    direita = 0;
 8000930:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <resetDireitaEsquerda+0x18>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
    esquerda = 0;
 8000936:	4b04      	ldr	r3, [pc, #16]	@ (8000948 <resetDireitaEsquerda+0x1c>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	200003b7 	.word	0x200003b7
 8000948:	200003b9 	.word	0x200003b9

0800094c <resetBotaoEvento>:

void resetBotaoEvento(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
    botaoEvento = 0; // Reseta o evento do botão
 8000950:	4b03      	ldr	r3, [pc, #12]	@ (8000960 <resetBotaoEvento+0x14>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	200003ba 	.word	0x200003ba

08000964 <register_EN>:
uint8_t position_String = 0;
uint8_t linha_LCD = 0;

void lcd_send_data(uint8_t data);

void register_EN(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
    EN_HIGH;
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800096e:	4808      	ldr	r0, [pc, #32]	@ (8000990 <register_EN+0x2c>)
 8000970:	f002 fb7b 	bl	800306a <HAL_GPIO_WritePin>
    LCD_delay_us(1);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 f9b3 	bl	8000ce0 <DWT_Delay_us>
    EN_LOW;
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000980:	4803      	ldr	r0, [pc, #12]	@ (8000990 <register_EN+0x2c>)
 8000982:	f002 fb72 	bl	800306a <HAL_GPIO_WritePin>
    LCD_delay_us(40);
 8000986:	2028      	movs	r0, #40	@ 0x28
 8000988:	f000 f9aa 	bl	8000ce0 <DWT_Delay_us>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40011000 	.word	0x40011000

08000994 <Write_Display>:
//    DB1_HIGH;
//    DB0_LOW;
//    register_EN();
//}

void Write_Display() {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

    if (position_String < 16) {
 8000998:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <Write_Display+0x64>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d816      	bhi.n	80009ce <Write_Display+0x3a>
        Write_caracter(message[linha_LCD][position_String]);
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <Write_Display+0x68>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <Write_Display+0x64>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	4a14      	ldr	r2, [pc, #80]	@ (8000a00 <Write_Display+0x6c>)
 80009ae:	460b      	mov	r3, r1
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	440b      	add	r3, r1
 80009b4:	4413      	add	r3, r2
 80009b6:	4403      	add	r3, r0
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f822 	bl	8000a04 <Write_caracter>
        position_String++;
 80009c0:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <Write_Display+0x64>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	3301      	adds	r3, #1
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <Write_Display+0x64>)
 80009ca:	701a      	strb	r2, [r3, #0]
        position_String = 0;
        (linha_LCD == 0) ? (linha_LCD = 1) : (linha_LCD = 0);
        Set_Line(linha_LCD);
    }

}
 80009cc:	e012      	b.n	80009f4 <Write_Display+0x60>
        position_String = 0;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <Write_Display+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
        (linha_LCD == 0) ? (linha_LCD = 1) : (linha_LCD = 0);
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <Write_Display+0x68>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d103      	bne.n	80009e4 <Write_Display+0x50>
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <Write_Display+0x68>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e002      	b.n	80009ea <Write_Display+0x56>
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <Write_Display+0x68>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
        Set_Line(linha_LCD);
 80009ea:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <Write_Display+0x68>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f815 	bl	8000a1e <Set_Line>
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200003bc 	.word	0x200003bc
 80009fc:	200003bd 	.word	0x200003bd
 8000a00:	2000003c 	.word	0x2000003c

08000a04 <Write_caracter>:

void Write_caracter(uint8_t c) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	lcd_send_data(c);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f8cf 	bl	8000bb4 <lcd_send_data>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <Set_Line>:
    EN_LOW;
    LCD_delay_us(1);
    RS_LOW;
}

void Set_Line(char line) {
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	71fb      	strb	r3, [r7, #7]
	if (line == 0)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d103      	bne.n	8000a36 <Set_Line+0x18>
	        lcd_send_command(0x80);  // linha 1
 8000a2e:	2080      	movs	r0, #128	@ 0x80
 8000a30:	f000 f8a2 	bl	8000b78 <lcd_send_command>
	    else
	        lcd_send_command(0xC0);  // linha 2
}
 8000a34:	e002      	b.n	8000a3c <Set_Line+0x1e>
	        lcd_send_command(0xC0);  // linha 2
 8000a36:	20c0      	movs	r0, #192	@ 0xc0
 8000a38:	f000 f89e 	bl	8000b78 <lcd_send_command>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <change_Message>:

void change_Message(uint8_t line, char *new_Text) {
 8000a44:	b490      	push	{r4, r7}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]
    //Verifica onde acaba a string enviada
    while (new_Text[i] != '\0' && i < 16) {
 8000a54:	e01f      	b.n	8000a96 <change_Message+0x52>

        if (message[line][i] != new_Text[i]) {
 8000a56:	79fa      	ldrb	r2, [r7, #7]
 8000a58:	7bf9      	ldrb	r1, [r7, #15]
 8000a5a:	481f      	ldr	r0, [pc, #124]	@ (8000ad8 <change_Message+0x94>)
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	4413      	add	r3, r2
 8000a62:	4403      	add	r3, r0
 8000a64:	440b      	add	r3, r1
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	6839      	ldr	r1, [r7, #0]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d00d      	beq.n	8000a90 <change_Message+0x4c>
                message[line][i] = new_Text[i];
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	4413      	add	r3, r2
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	7bf9      	ldrb	r1, [r7, #15]
 8000a7e:	781c      	ldrb	r4, [r3, #0]
 8000a80:	4815      	ldr	r0, [pc, #84]	@ (8000ad8 <change_Message+0x94>)
 8000a82:	4613      	mov	r3, r2
 8000a84:	011b      	lsls	r3, r3, #4
 8000a86:	4413      	add	r3, r2
 8000a88:	4403      	add	r3, r0
 8000a8a:	440b      	add	r3, r1
 8000a8c:	4622      	mov	r2, r4
 8000a8e:	701a      	strb	r2, [r3, #0]
            }
        i++;
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	3301      	adds	r3, #1
 8000a94:	73fb      	strb	r3, [r7, #15]
    while (new_Text[i] != '\0' && i < 16) {
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d010      	beq.n	8000ac4 <change_Message+0x80>
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d9d6      	bls.n	8000a56 <change_Message+0x12>
    }
    for (i = i; i < 16; i++) {
 8000aa8:	e00c      	b.n	8000ac4 <change_Message+0x80>
        message[line][i] = ' ';
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	7bf9      	ldrb	r1, [r7, #15]
 8000aae:	480a      	ldr	r0, [pc, #40]	@ (8000ad8 <change_Message+0x94>)
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	011b      	lsls	r3, r3, #4
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4403      	add	r3, r0
 8000ab8:	440b      	add	r3, r1
 8000aba:	2220      	movs	r2, #32
 8000abc:	701a      	strb	r2, [r3, #0]
    for (i = i; i < 16; i++) {
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	2b0f      	cmp	r3, #15
 8000ac8:	d9ef      	bls.n	8000aaa <change_Message+0x66>
    }
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc90      	pop	{r4, r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	2000003c 	.word	0x2000003c

08000adc <send_nibble>:

void send_nibble(uint8_t nibble) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
    (nibble & 0x08) ? DB7_HIGH : DB7_LOW;
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d005      	beq.n	8000afc <send_nibble+0x20>
 8000af0:	2201      	movs	r2, #1
 8000af2:	2140      	movs	r1, #64	@ 0x40
 8000af4:	481f      	ldr	r0, [pc, #124]	@ (8000b74 <send_nibble+0x98>)
 8000af6:	f002 fab8 	bl	800306a <HAL_GPIO_WritePin>
 8000afa:	e004      	b.n	8000b06 <send_nibble+0x2a>
 8000afc:	2200      	movs	r2, #0
 8000afe:	2140      	movs	r1, #64	@ 0x40
 8000b00:	481c      	ldr	r0, [pc, #112]	@ (8000b74 <send_nibble+0x98>)
 8000b02:	f002 fab2 	bl	800306a <HAL_GPIO_WritePin>
    (nibble & 0x04) ? DB6_HIGH : DB6_LOW;
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d005      	beq.n	8000b1c <send_nibble+0x40>
 8000b10:	2201      	movs	r2, #1
 8000b12:	2120      	movs	r1, #32
 8000b14:	4817      	ldr	r0, [pc, #92]	@ (8000b74 <send_nibble+0x98>)
 8000b16:	f002 faa8 	bl	800306a <HAL_GPIO_WritePin>
 8000b1a:	e004      	b.n	8000b26 <send_nibble+0x4a>
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2120      	movs	r1, #32
 8000b20:	4814      	ldr	r0, [pc, #80]	@ (8000b74 <send_nibble+0x98>)
 8000b22:	f002 faa2 	bl	800306a <HAL_GPIO_WritePin>
    (nibble & 0x02) ? DB5_HIGH : DB5_LOW;
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d005      	beq.n	8000b3c <send_nibble+0x60>
 8000b30:	2201      	movs	r2, #1
 8000b32:	2110      	movs	r1, #16
 8000b34:	480f      	ldr	r0, [pc, #60]	@ (8000b74 <send_nibble+0x98>)
 8000b36:	f002 fa98 	bl	800306a <HAL_GPIO_WritePin>
 8000b3a:	e004      	b.n	8000b46 <send_nibble+0x6a>
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2110      	movs	r1, #16
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <send_nibble+0x98>)
 8000b42:	f002 fa92 	bl	800306a <HAL_GPIO_WritePin>
    (nibble & 0x01) ? DB4_HIGH : DB4_LOW;
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d005      	beq.n	8000b5c <send_nibble+0x80>
 8000b50:	2201      	movs	r2, #1
 8000b52:	2108      	movs	r1, #8
 8000b54:	4807      	ldr	r0, [pc, #28]	@ (8000b74 <send_nibble+0x98>)
 8000b56:	f002 fa88 	bl	800306a <HAL_GPIO_WritePin>
 8000b5a:	e004      	b.n	8000b66 <send_nibble+0x8a>
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2108      	movs	r1, #8
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <send_nibble+0x98>)
 8000b62:	f002 fa82 	bl	800306a <HAL_GPIO_WritePin>

    register_EN();
 8000b66:	f7ff fefd 	bl	8000964 <register_EN>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010800 	.word	0x40010800

08000b78 <lcd_send_command>:

void lcd_send_command(uint8_t cmd) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
    RS_LOW;
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b88:	4809      	ldr	r0, [pc, #36]	@ (8000bb0 <lcd_send_command+0x38>)
 8000b8a:	f002 fa6e 	bl	800306a <HAL_GPIO_WritePin>
    send_nibble(cmd >> 4);  // parte alta
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	091b      	lsrs	r3, r3, #4
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ffa1 	bl	8000adc <send_nibble>
    send_nibble(cmd & 0x0F); // parte baixa
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f003 030f 	and.w	r3, r3, #15
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff9a 	bl	8000adc <send_nibble>
    //LCD_delay_us(40);
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40011000 	.word	0x40011000

08000bb4 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
    RS_HIGH;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <lcd_send_data+0x44>)
 8000bc6:	f002 fa50 	bl	800306a <HAL_GPIO_WritePin>
    //LCD_delay_us(1);
    send_nibble(data >> 4);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	091b      	lsrs	r3, r3, #4
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff83 	bl	8000adc <send_nibble>
    send_nibble(data & 0x0F);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff7c 	bl	8000adc <send_nibble>
    //LCD_delay_us(40);
    RS_LOW;
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bea:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <lcd_send_data+0x44>)
 8000bec:	f002 fa3d 	bl	800306a <HAL_GPIO_WritePin>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40011000 	.word	0x40011000

08000bfc <initialize_LCD>:

void initialize_LCD(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
    LCD_delay_ms(15); // tempo mínimo de boot
 8000c00:	200f      	movs	r0, #15
 8000c02:	f001 fb39 	bl	8002278 <HAL_Delay>

    // Inicialização especial para 4 bits
    send_nibble(0x03);  // função set 8 bits (3)
 8000c06:	2003      	movs	r0, #3
 8000c08:	f7ff ff68 	bl	8000adc <send_nibble>
    LCD_delay_ms(5);
 8000c0c:	2005      	movs	r0, #5
 8000c0e:	f001 fb33 	bl	8002278 <HAL_Delay>
    send_nibble(0x03);
 8000c12:	2003      	movs	r0, #3
 8000c14:	f7ff ff62 	bl	8000adc <send_nibble>
    LCD_delay_us(150);
 8000c18:	2096      	movs	r0, #150	@ 0x96
 8000c1a:	f000 f861 	bl	8000ce0 <DWT_Delay_us>
    send_nibble(0x03);
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f7ff ff5c 	bl	8000adc <send_nibble>
    LCD_delay_us(150);
 8000c24:	2096      	movs	r0, #150	@ 0x96
 8000c26:	f000 f85b 	bl	8000ce0 <DWT_Delay_us>
    send_nibble(0x02);  // função set para 4 bits
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f7ff ff56 	bl	8000adc <send_nibble>
    LCD_delay_us(150);
 8000c30:	2096      	movs	r0, #150	@ 0x96
 8000c32:	f000 f855 	bl	8000ce0 <DWT_Delay_us>

    lcd_send_command(0x28); // function set: 4 bits, 2 linhas, 5x8
 8000c36:	2028      	movs	r0, #40	@ 0x28
 8000c38:	f7ff ff9e 	bl	8000b78 <lcd_send_command>
    lcd_send_command(0x08); // display OFF
 8000c3c:	2008      	movs	r0, #8
 8000c3e:	f7ff ff9b 	bl	8000b78 <lcd_send_command>
    lcd_send_command(0x01); // clear display
 8000c42:	2001      	movs	r0, #1
 8000c44:	f7ff ff98 	bl	8000b78 <lcd_send_command>
    LCD_delay_ms(2);
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f001 fb15 	bl	8002278 <HAL_Delay>
    lcd_send_command(0x06); // entry mode set
 8000c4e:	2006      	movs	r0, #6
 8000c50:	f7ff ff92 	bl	8000b78 <lcd_send_command>
    lcd_send_command(0x0C); // display ON, cursor OFF
 8000c54:	200c      	movs	r0, #12
 8000c56:	f7ff ff8f 	bl	8000b78 <lcd_send_command>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <lcd_create_char>:

void lcd_create_char(uint8_t pos, uint8_t *pattern) {
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b084      	sub	sp, #16
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	6039      	str	r1, [r7, #0]
 8000c68:	71fb      	strb	r3, [r7, #7]
    // CGRAM começa em 0x40, cada caractere ocupa 8 bytes
    lcd_send_command(0x40 | (pos << 3));  // endereço CGRAM para caractere N
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff7c 	bl	8000b78 <lcd_send_command>
    for (int i = 0; i < 8; i++) {
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	e009      	b.n	8000c9a <lcd_create_char+0x3c>
        lcd_send_data(pattern[i]);   // envia cada linha do caractere
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff90 	bl	8000bb4 <lcd_send_data>
    for (int i = 0; i < 8; i++) {
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2b07      	cmp	r3, #7
 8000c9e:	ddf2      	ble.n	8000c86 <lcd_create_char+0x28>
    }
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <DWT_Delay_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void DWT_Delay_Init(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <DWT_Delay_Init+0x2c>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <DWT_Delay_Init+0x2c>)
 8000cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cba:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <DWT_Delay_Init+0x30>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <DWT_Delay_Init+0x30>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <DWT_Delay_Init+0x30>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6013      	str	r3, [r2, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000edf0 	.word	0xe000edf0
 8000cdc:	e0001000 	.word	0xe0001000

08000ce0 <DWT_Delay_us>:

void DWT_Delay_us(uint32_t us)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <DWT_Delay_us+0x40>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000);
 8000cee:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <DWT_Delay_us+0x44>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <DWT_Delay_us+0x48>)
 8000cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf8:	0c9a      	lsrs	r2, r3, #18
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	fb02 f303 	mul.w	r3, r2, r3
 8000d00:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks)
 8000d02:	bf00      	nop
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <DWT_Delay_us+0x40>)
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d8f8      	bhi.n	8000d04 <DWT_Delay_us+0x24>
        ;
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e0001000 	.word	0xe0001000
 8000d24:	20000060 	.word	0x20000060
 8000d28:	431bde83 	.word	0x431bde83

08000d2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d3c:	d10e      	bne.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x30>
    {
        flag1ms = TRUE;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
        count100ms++;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d4e:	701a      	strb	r2, [r3, #0]
        count1000ms++;
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d5a:	801a      	strh	r2, [r3, #0]
    }
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000438 	.word	0x20000438
 8000d6c:	20000439 	.word	0x20000439
 8000d70:	2000043c 	.word	0x2000043c

08000d74 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000d7a:	f001 fa1b 	bl	80021b4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000d7e:	f000 f8a1 	bl	8000ec4 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000d82:	f000 f985 	bl	8001090 <MX_GPIO_Init>
    MX_TIM2_Init();
 8000d86:	f000 f937 	bl	8000ff8 <MX_TIM2_Init>
    MX_ADC1_Init();
 8000d8a:	f000 f8f7 	bl	8000f7c <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim2);
 8000d8e:	4845      	ldr	r0, [pc, #276]	@ (8000ea4 <main+0x130>)
 8000d90:	f002 ff54 	bl	8003c3c <HAL_TIM_Base_Start_IT>
    HAL_ADC_Start(&hadc1);
 8000d94:	4844      	ldr	r0, [pc, #272]	@ (8000ea8 <main+0x134>)
 8000d96:	f001 fb6b 	bl	8002470 <HAL_ADC_Start>

    initInput(&hadc1);
 8000d9a:	4843      	ldr	r0, [pc, #268]	@ (8000ea8 <main+0x134>)
 8000d9c:	f7ff fc7c 	bl	8000698 <initInput>
    DWT_Delay_Init();
 8000da0:	f7ff ff84 	bl	8000cac <DWT_Delay_Init>
    initLCD();
 8000da4:	f7ff fa8e 	bl	80002c4 <initLCD>

    estados_LCD estadoTeste = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	71fb      	strb	r3, [r7, #7]
    editPosition = 1;
 8000dac:	4b3f      	ldr	r3, [pc, #252]	@ (8000eac <main+0x138>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	701a      	strb	r2, [r3, #0]

    
    changeLCDScreen(TELA1);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff fa70 	bl	8000298 <changeLCDScreen>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (flag1ms)
 8000db8:	4b3d      	ldr	r3, [pc, #244]	@ (8000eb0 <main+0x13c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d01e      	beq.n	8000dfe <main+0x8a>
        {
            HAL_GPIO_TogglePin(TestePin_GPIO_Port, TestePin_Pin);
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	483c      	ldr	r0, [pc, #240]	@ (8000eb4 <main+0x140>)
 8000dc4:	f002 f969 	bl	800309a <HAL_GPIO_TogglePin>
            flag1ms = FALSE;
 8000dc8:	4b39      	ldr	r3, [pc, #228]	@ (8000eb0 <main+0x13c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
            taskLeituraAD();
 8000dce:	f7ff fcab 	bl	8000728 <taskLeituraAD>

            Write_Display();
 8000dd2:	f7ff fddf 	bl	8000994 <Write_Display>
            taskMatrizLed();
 8000dd6:	f7ff fb7b 	bl	80004d0 <taskMatrizLed>
            if(gameRunning())
 8000dda:	f7ff fb6f 	bl	80004bc <gameRunning>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <main+0x76>
            {
                taskTetris();
 8000de4:	f7ff faee 	bl	80003c4 <taskTetris>
 8000de8:	e002      	b.n	8000df0 <main+0x7c>
            }
            else{
                editPosition = TRUE;
 8000dea:	4b30      	ldr	r3, [pc, #192]	@ (8000eac <main+0x138>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
            }
            
            changeMatriz(board);
 8000df0:	4831      	ldr	r0, [pc, #196]	@ (8000eb8 <main+0x144>)
 8000df2:	f7ff fc23 	bl	800063c <changeMatriz>
            HAL_GPIO_TogglePin(TestePin_GPIO_Port, TestePin_Pin);
 8000df6:	2110      	movs	r1, #16
 8000df8:	482e      	ldr	r0, [pc, #184]	@ (8000eb4 <main+0x140>)
 8000dfa:	f002 f94e 	bl	800309a <HAL_GPIO_TogglePin>
        }

        if (count100ms >= 100)
 8000dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8000ebc <main+0x148>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b63      	cmp	r3, #99	@ 0x63
 8000e04:	d944      	bls.n	8000e90 <main+0x11c>
        {
            if (editPosition)
 8000e06:	4b29      	ldr	r3, [pc, #164]	@ (8000eac <main+0x138>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d02a      	beq.n	8000e64 <main+0xf0>
            {
                count100ms = 0;
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <main+0x148>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
                if (getCima())
 8000e14:	f7ff fd48 	bl	80008a8 <getCima>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00e      	beq.n	8000e3c <main+0xc8>
                {
                    estadoTeste = estadoTeste == TELA1 ? TELA4 : estadoTeste - 1;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <main+0xb8>
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	e000      	b.n	8000e2e <main+0xba>
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	71fb      	strb	r3, [r7, #7]
                    changeLCDScreen(estadoTeste);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fa30 	bl	8000298 <changeLCDScreen>
                    resetCimaBaixo();
 8000e38:	f7ff fd4a 	bl	80008d0 <resetCimaBaixo>
                }
                if (getBaixo())
 8000e3c:	f7ff fd3e 	bl	80008bc <getBaixo>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00e      	beq.n	8000e64 <main+0xf0>
                {
                    estadoTeste = estadoTeste == TELA4 ? TELA1 : estadoTeste + 1;
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d003      	beq.n	8000e54 <main+0xe0>
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	e000      	b.n	8000e56 <main+0xe2>
 8000e54:	2300      	movs	r3, #0
 8000e56:	71fb      	strb	r3, [r7, #7]
                    changeLCDScreen(estadoTeste);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fa1c 	bl	8000298 <changeLCDScreen>
                    resetCimaBaixo();
 8000e60:	f7ff fd36 	bl	80008d0 <resetCimaBaixo>
                }
            }

            if(getBotaoEvento() && !gameRunning()){
 8000e64:	f7ff fd58 	bl	8000918 <getBotaoEvento>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00e      	beq.n	8000e8c <main+0x118>
 8000e6e:	f7ff fb25 	bl	80004bc <gameRunning>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d109      	bne.n	8000e8c <main+0x118>
                editPosition = FALSE;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <main+0x138>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
                changeLCDScreen(TELANEXTPIECE);
 8000e7e:	2004      	movs	r0, #4
 8000e80:	f7ff fa0a 	bl	8000298 <changeLCDScreen>
                initGame();
 8000e84:	f7ff fa48 	bl	8000318 <initGame>
                resetBotaoEvento();
 8000e88:	f7ff fd60 	bl	800094c <resetBotaoEvento>
            }
            lcd_Task();
 8000e8c:	f7ff f95e 	bl	800014c <lcd_Task>
        }

        if (count1000ms >= 1000)
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <main+0x14c>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e98:	d38e      	bcc.n	8000db8 <main+0x44>
        {
            count1000ms = 0;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <main+0x14c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	801a      	strh	r2, [r3, #0]
        if (flag1ms)
 8000ea0:	e78a      	b.n	8000db8 <main+0x44>
 8000ea2:	bf00      	nop
 8000ea4:	200003f0 	.word	0x200003f0
 8000ea8:	200003c0 	.word	0x200003c0
 8000eac:	2000043a 	.word	0x2000043a
 8000eb0:	20000438 	.word	0x20000438
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	20000444 	.word	0x20000444
 8000ebc:	20000439 	.word	0x20000439
 8000ec0:	2000043c 	.word	0x2000043c

08000ec4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b094      	sub	sp, #80	@ 0x50
 8000ec8:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ece:	2228      	movs	r2, #40	@ 0x28
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 fcf4 	bl	80048c0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f02:	2301      	movs	r3, #1
 8000f04:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f06:	2302      	movs	r3, #2
 8000f08:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f10:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f14:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 f8d6 	bl	80030cc <HAL_RCC_OscConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0x66>
    {
        Error_Handler();
 8000f26:	f000 f951 	bl	80011cc <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f3a:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2102      	movs	r1, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 fb42 	bl	80035d0 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x92>
    {
        Error_Handler();
 8000f52:	f000 f93b 	bl	80011cc <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f56:	2302      	movs	r3, #2
 8000f58:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f5e:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fcae 	bl	80038c4 <HAL_RCCEx_PeriphCLKConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xae>
    {
        Error_Handler();
 8000f6e:	f000 f92d 	bl	80011cc <Error_Handler>
    }
}
 8000f72:	bf00      	nop
 8000f74:	3750      	adds	r7, #80	@ 0x50
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <MX_ADC1_Init+0x74>)
 8000f8e:	4a19      	ldr	r2, [pc, #100]	@ (8000ff4 <MX_ADC1_Init+0x78>)
 8000f90:	601a      	str	r2, [r3, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f92:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <MX_ADC1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8000f98:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <MX_ADC1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	731a      	strb	r2, [r3, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <MX_ADC1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <MX_ADC1_Init+0x74>)
 8000fa6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000faa:	61da      	str	r2, [r3, #28]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fac:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <MX_ADC1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
    hadc1.Init.NbrOfConversion = 1;
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_ADC1_Init+0x74>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	611a      	str	r2, [r3, #16]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb8:	480d      	ldr	r0, [pc, #52]	@ (8000ff0 <MX_ADC1_Init+0x74>)
 8000fba:	f001 f981 	bl	80022c0 <HAL_ADC_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0x4c>
    {
        Error_Handler();
 8000fc4:	f000 f902 	bl	80011cc <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	60fb      	str	r3, [r7, #12]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_ADC1_Init+0x74>)
 8000fda:	f001 fc09 	bl	80027f0 <HAL_ADC_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_ADC1_Init+0x6c>
    {
        Error_Handler();
 8000fe4:	f000 f8f2 	bl	80011cc <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200003c0 	.word	0x200003c0
 8000ff4:	40012400 	.word	0x40012400

08000ff8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001014:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <MX_TIM2_Init+0x94>)
 8001016:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800101a:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 7199;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_TIM2_Init+0x94>)
 800101e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001022:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_TIM2_Init+0x94>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 9;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_TIM2_Init+0x94>)
 800102c:	2209      	movs	r2, #9
 800102e:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_TIM2_Init+0x94>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_TIM2_Init+0x94>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800103c:	4813      	ldr	r0, [pc, #76]	@ (800108c <MX_TIM2_Init+0x94>)
 800103e:	f002 fdad 	bl	8003b9c <HAL_TIM_Base_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM2_Init+0x54>
    {
        Error_Handler();
 8001048:	f000 f8c0 	bl	80011cc <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001050:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	4619      	mov	r1, r3
 8001058:	480c      	ldr	r0, [pc, #48]	@ (800108c <MX_TIM2_Init+0x94>)
 800105a:	f002 ff31 	bl	8003ec0 <HAL_TIM_ConfigClockSource>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM2_Init+0x70>
    {
        Error_Handler();
 8001064:	f000 f8b2 	bl	80011cc <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001068:	2300      	movs	r3, #0
 800106a:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_TIM2_Init+0x94>)
 8001076:	f003 f913 	bl	80042a0 <HAL_TIMEx_MasterConfigSynchronization>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM2_Init+0x8c>
    {
        Error_Handler();
 8001080:	f000 f8a4 	bl	80011cc <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 8001084:	bf00      	nop
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200003f0 	.word	0x200003f0

08001090 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a4:	4b45      	ldr	r3, [pc, #276]	@ (80011bc <MX_GPIO_Init+0x12c>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a44      	ldr	r2, [pc, #272]	@ (80011bc <MX_GPIO_Init+0x12c>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b42      	ldr	r3, [pc, #264]	@ (80011bc <MX_GPIO_Init+0x12c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	4b3f      	ldr	r3, [pc, #252]	@ (80011bc <MX_GPIO_Init+0x12c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a3e      	ldr	r2, [pc, #248]	@ (80011bc <MX_GPIO_Init+0x12c>)
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b3c      	ldr	r3, [pc, #240]	@ (80011bc <MX_GPIO_Init+0x12c>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b39      	ldr	r3, [pc, #228]	@ (80011bc <MX_GPIO_Init+0x12c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a38      	ldr	r2, [pc, #224]	@ (80011bc <MX_GPIO_Init+0x12c>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b36      	ldr	r3, [pc, #216]	@ (80011bc <MX_GPIO_Init+0x12c>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b33      	ldr	r3, [pc, #204]	@ (80011bc <MX_GPIO_Init+0x12c>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a32      	ldr	r2, [pc, #200]	@ (80011bc <MX_GPIO_Init+0x12c>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b30      	ldr	r3, [pc, #192]	@ (80011bc <MX_GPIO_Init+0x12c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin | LCD_E_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800110a:	482d      	ldr	r0, [pc, #180]	@ (80011c0 <MX_GPIO_Init+0x130>)
 800110c:	f001 ffad 	bl	800306a <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2178      	movs	r1, #120	@ 0x78
 8001114:	482b      	ldr	r0, [pc, #172]	@ (80011c4 <MX_GPIO_Init+0x134>)
 8001116:	f001 ffa8 	bl	800306a <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, D_Pin | CLK1_Pin | CLK2_Pin | TestePin_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f247 0110 	movw	r1, #28688	@ 0x7010
 8001120:	4829      	ldr	r0, [pc, #164]	@ (80011c8 <MX_GPIO_Init+0x138>)
 8001122:	f001 ffa2 	bl	800306a <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin */
    GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_E_Pin;
 8001126:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4619      	mov	r1, r3
 800113e:	4820      	ldr	r0, [pc, #128]	@ (80011c0 <MX_GPIO_Init+0x130>)
 8001140:	f001 fdf8 	bl	8002d34 <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
    GPIO_InitStruct.Pin = LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 8001144:	2378      	movs	r3, #120	@ 0x78
 8001146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4619      	mov	r1, r3
 800115a:	481a      	ldr	r0, [pc, #104]	@ (80011c4 <MX_GPIO_Init+0x134>)
 800115c:	f001 fdea 	bl	8002d34 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOTAO_Pin */
    GPIO_InitStruct.Pin = BOTAO_Pin;
 8001160:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001164:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4619      	mov	r1, r3
 8001174:	4814      	ldr	r0, [pc, #80]	@ (80011c8 <MX_GPIO_Init+0x138>)
 8001176:	f001 fddd 	bl	8002d34 <HAL_GPIO_Init>

    /*Configure GPIO pins : D_Pin CLK1_Pin CLK2_Pin */
    GPIO_InitStruct.Pin = D_Pin | CLK1_Pin | CLK2_Pin;
 800117a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800117e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2302      	movs	r3, #2
 800118a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4619      	mov	r1, r3
 8001192:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <MX_GPIO_Init+0x138>)
 8001194:	f001 fdce 	bl	8002d34 <HAL_GPIO_Init>

    /*Configure GPIO pin : TestePin_Pin */
    GPIO_InitStruct.Pin = TestePin_Pin;
 8001198:	2310      	movs	r3, #16
 800119a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TestePin_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <MX_GPIO_Init+0x138>)
 80011b0:	f001 fdc0 	bl	8002d34 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40011000 	.word	0x40011000
 80011c4:	40010800 	.word	0x40010800
 80011c8:	40010c00 	.word	0x40010c00

080011cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <Error_Handler+0x8>

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_MspInit+0x5c>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	4a14      	ldr	r2, [pc, #80]	@ (8001234 <HAL_MspInit+0x5c>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6193      	str	r3, [r2, #24]
 80011ea:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_MspInit+0x5c>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <HAL_MspInit+0x5c>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001234 <HAL_MspInit+0x5c>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001200:	61d3      	str	r3, [r2, #28]
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <HAL_MspInit+0x5c>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_MspInit+0x60>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <HAL_MspInit+0x60>)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000

0800123c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a14      	ldr	r2, [pc, #80]	@ (80012a8 <HAL_ADC_MspInit+0x6c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d121      	bne.n	80012a0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800125c:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <HAL_ADC_MspInit+0x70>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a12      	ldr	r2, [pc, #72]	@ (80012ac <HAL_ADC_MspInit+0x70>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b10      	ldr	r3, [pc, #64]	@ (80012ac <HAL_ADC_MspInit+0x70>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <HAL_ADC_MspInit+0x70>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a0c      	ldr	r2, [pc, #48]	@ (80012ac <HAL_ADC_MspInit+0x70>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <HAL_ADC_MspInit+0x70>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800128c:	2303      	movs	r3, #3
 800128e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001290:	2303      	movs	r3, #3
 8001292:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <HAL_ADC_MspInit+0x74>)
 800129c:	f001 fd4a 	bl	8002d34 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40012400 	.word	0x40012400
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010800 	.word	0x40010800

080012b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012c4:	d113      	bne.n	80012ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <HAL_TIM_Base_MspInit+0x44>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a0b      	ldr	r2, [pc, #44]	@ (80012f8 <HAL_TIM_Base_MspInit+0x44>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_TIM_Base_MspInit+0x44>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	201c      	movs	r0, #28
 80012e4:	f001 fcef 	bl	8002cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012e8:	201c      	movs	r0, #28
 80012ea:	f001 fd08 	bl	8002cfe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <NMI_Handler+0x4>

08001304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <HardFault_Handler+0x4>

0800130c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <MemManage_Handler+0x4>

08001314 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <UsageFault_Handler+0x4>

08001324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134c:	f000 ff78 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <TIM2_IRQHandler+0x10>)
 800135a:	f002 fcc1 	bl	8003ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200003f0 	.word	0x200003f0

08001368 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <_kill>:

int _kill(int pid, int sig)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001380:	f003 faec 	bl	800495c <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	2216      	movs	r2, #22
 8001388:	601a      	str	r2, [r3, #0]
  return -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_exit>:

void _exit (int status)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800139e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffe7 	bl	8001376 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <_exit+0x12>

080013ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e00a      	b.n	80013d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013be:	f3af 8000 	nop.w
 80013c2:	4601      	mov	r1, r0
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	60ba      	str	r2, [r7, #8]
 80013ca:	b2ca      	uxtb	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dbf0      	blt.n	80013be <_read+0x12>
  }

  return len;
 80013dc:	687b      	ldr	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	e009      	b.n	800140c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60ba      	str	r2, [r7, #8]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf1      	blt.n	80013f8 <_write+0x12>
  }
  return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_close>:

int _close(int file)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001444:	605a      	str	r2, [r3, #4]
  return 0;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <_isatty>:

int _isatty(int file)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
	...

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f003 fa54 	bl	800495c <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20005000 	.word	0x20005000
 80014e0:	00000500 	.word	0x00000500
 80014e4:	20000440 	.word	0x20000440
 80014e8:	20000668 	.word	0x20000668

080014ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <init_game>:
 * Esta função preenche o tabuleiro com zeros, garantindo que todas as
 * posições estejam vazias no início do jogo. Também inicializa a próxima peça
 * a partir de um número aleatório.
 */
void init_game()
{
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
    //printf("Iniciando Tetris...\n");

    for (int i = 0; i < ROWS; i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	e013      	b.n	800152c <init_game+0x34>
    {
        for (int j = 0; j < COLS; j++)
 8001504:	2300      	movs	r3, #0
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	e00a      	b.n	8001520 <init_game+0x28>
        {
            board[i][j] = 0;
 800150a:	4a17      	ldr	r2, [pc, #92]	@ (8001568 <init_game+0x70>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	441a      	add	r2, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	4413      	add	r3, r2
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < COLS; j++)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	2b07      	cmp	r3, #7
 8001524:	ddf1      	ble.n	800150a <init_game+0x12>
    for (int i = 0; i < ROWS; i++)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3301      	adds	r3, #1
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b0f      	cmp	r3, #15
 8001530:	dde8      	ble.n	8001504 <init_game+0xc>
        }
    }
    next_number = number_aleatory_peace();
 8001532:	f000 fb7d 	bl	8001c30 <number_aleatory_peace>
 8001536:	4603      	mov	r3, r0
 8001538:	4a0c      	ldr	r2, [pc, #48]	@ (800156c <init_game+0x74>)
 800153a:	6013      	str	r3, [r2, #0]
    next_peace = pecas[next_number];
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <init_game+0x74>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	490b      	ldr	r1, [pc, #44]	@ (8001570 <init_game+0x78>)
 8001542:	4a0c      	ldr	r2, [pc, #48]	@ (8001574 <init_game+0x7c>)
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	4413      	add	r3, r2
 8001548:	460c      	mov	r4, r1
 800154a:	461d      	mov	r5, r3
 800154c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001558:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800155c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bdb0      	pop	{r4, r5, r7, pc}
 8001568:	20000444 	.word	0x20000444
 800156c:	200004d4 	.word	0x200004d4
 8001570:	200004d8 	.word	0x200004d8
 8001574:	20000064 	.word	0x20000064

08001578 <draw_board>:
 * ativos, espaços vazios e blocos fixos de maneira visual para o jogador.
 * Também exibe a próxima peça a ser enviada.
 */

void draw_board()
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
    //printf("Tabuleiro:\n    0 1 2 3 4 5 6 7   Pontuacao: %d \n", pontuacao);
    for (int i = 0; i < ROWS; i++)
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	e040      	b.n	8001606 <draw_board+0x8e>
    {
        if (i < 10)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b09      	cmp	r3, #9
 8001588:	dc04      	bgt.n	8001594 <draw_board+0x1c>
        {
            printf("%d - ", i);
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4822      	ldr	r0, [pc, #136]	@ (8001618 <draw_board+0xa0>)
 800158e:	f003 f825 	bl	80045dc <iprintf>
 8001592:	e003      	b.n	800159c <draw_board+0x24>
        }
        else
        {
            printf("%d -", i);
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4821      	ldr	r0, [pc, #132]	@ (800161c <draw_board+0xa4>)
 8001598:	f003 f820 	bl	80045dc <iprintf>
        }

        for (int j = 0; j < COLS; j++)
 800159c:	2300      	movs	r3, #0
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	e028      	b.n	80015f4 <draw_board+0x7c>
        {
            if (board[i][j] == 1)
 80015a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001620 <draw_board+0xa8>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	441a      	add	r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d103      	bne.n	80015bc <draw_board+0x44>
            {
                printf("█ "); // Bloco preenchido
 80015b4:	481b      	ldr	r0, [pc, #108]	@ (8001624 <draw_board+0xac>)
 80015b6:	f003 f811 	bl	80045dc <iprintf>
 80015ba:	e018      	b.n	80015ee <draw_board+0x76>
            }
            else if (board[i][j] == 0)
 80015bc:	4a18      	ldr	r2, [pc, #96]	@ (8001620 <draw_board+0xa8>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	441a      	add	r2, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d103      	bne.n	80015d6 <draw_board+0x5e>
            {
                printf(". "); // Espaço vazio
 80015ce:	4816      	ldr	r0, [pc, #88]	@ (8001628 <draw_board+0xb0>)
 80015d0:	f003 f804 	bl	80045dc <iprintf>
 80015d4:	e00b      	b.n	80015ee <draw_board+0x76>
            }
            else if (board[i][j] == 2)
 80015d6:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <draw_board+0xa8>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	441a      	add	r2, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d102      	bne.n	80015ee <draw_board+0x76>
            {
                printf("[]"); // Espaço Ja preenchido e fixo
 80015e8:	4810      	ldr	r0, [pc, #64]	@ (800162c <draw_board+0xb4>)
 80015ea:	f002 fff7 	bl	80045dc <iprintf>
        for (int j = 0; j < COLS; j++)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b07      	cmp	r3, #7
 80015f8:	ddd3      	ble.n	80015a2 <draw_board+0x2a>
            }
        }
        printf("\n");
 80015fa:	200a      	movs	r0, #10
 80015fc:	f003 f800 	bl	8004600 <putchar>
    for (int i = 0; i < ROWS; i++)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3301      	adds	r3, #1
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	ddbb      	ble.n	8001584 <draw_board+0xc>
    }
    show_next_peace();
 800160c:	f000 fd5c 	bl	80020c8 <show_next_peace>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	08005988 	.word	0x08005988
 800161c:	08005990 	.word	0x08005990
 8001620:	20000444 	.word	0x20000444
 8001624:	08005998 	.word	0x08005998
 8001628:	080059a0 	.word	0x080059a0
 800162c:	080059a4 	.word	0x080059a4

08001630 <place_piece>:
 * @param coluna  Posição inicial da peça no eixo horizontal.
 * @param peca    Estrutura contendo o formato da peça.
 */

void place_piece(int linha, int coluna, PecaTetris peca)
{
 8001630:	b082      	sub	sp, #8
 8001632:	b480      	push	{r7}
 8001634:	b087      	sub	sp, #28
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
 800163c:	f107 0120 	add.w	r1, r7, #32
 8001640:	e881 000c 	stmia.w	r1, {r2, r3}

    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e031      	b.n	80016ae <place_piece+0x7e>
    {
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	e028      	b.n	80016a2 <place_piece+0x72>
        {
            if (peca.shape[i][j] == 1)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	009a      	lsls	r2, r3, #2
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4413      	add	r3, r2
 8001658:	f107 0220 	add.w	r2, r7, #32
 800165c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d11b      	bne.n	800169c <place_piece+0x6c>
            {
                int board_linha = linha + i;
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	4413      	add	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4413      	add	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha >= 0 && board_linha < ROWS && board_coluna >= 0 && board_coluna < COLS)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db10      	blt.n	800169c <place_piece+0x6c>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	dc0d      	bgt.n	800169c <place_piece+0x6c>
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db0a      	blt.n	800169c <place_piece+0x6c>
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b07      	cmp	r3, #7
 800168a:	dc07      	bgt.n	800169c <place_piece+0x6c>
                {
                    board[board_linha][board_coluna] = 1;
 800168c:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <place_piece+0x94>)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	441a      	add	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4413      	add	r3, r2
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	3301      	adds	r3, #1
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	ddd3      	ble.n	8001650 <place_piece+0x20>
    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	ddca      	ble.n	800164a <place_piece+0x1a>
                }
            }
        }
    }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	b002      	add	sp, #8
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000444 	.word	0x20000444

080016c8 <remove_piece>:
 * @param coluna  Posição inicial da peça no eixo horizontal.
 * @param peca    Estrutura contendo o formato da peça.
 */

void remove_piece(int linha, int coluna, PecaTetris peca)
{
 80016c8:	b082      	sub	sp, #8
 80016ca:	b480      	push	{r7}
 80016cc:	b087      	sub	sp, #28
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
 80016d4:	f107 0120 	add.w	r1, r7, #32
 80016d8:	e881 000c 	stmia.w	r1, {r2, r3}
    for (int i = 0; i < 4; i++)
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	e031      	b.n	8001746 <remove_piece+0x7e>
    {
        for (int j = 0; j < 4; j++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	e028      	b.n	800173a <remove_piece+0x72>
        {
            if (peca.shape[i][j] == 1)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	009a      	lsls	r2, r3, #2
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4413      	add	r3, r2
 80016f0:	f107 0220 	add.w	r2, r7, #32
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d11b      	bne.n	8001734 <remove_piece+0x6c>
            {
                int board_linha = linha + i;
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	4413      	add	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4413      	add	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha >= 0 && board_linha < ROWS && board_coluna >= 0 && board_coluna < COLS)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	db10      	blt.n	8001734 <remove_piece+0x6c>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	dc0d      	bgt.n	8001734 <remove_piece+0x6c>
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0a      	blt.n	8001734 <remove_piece+0x6c>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b07      	cmp	r3, #7
 8001722:	dc07      	bgt.n	8001734 <remove_piece+0x6c>
                {
                    board[board_linha][board_coluna] = 0;
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <remove_piece+0x94>)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	441a      	add	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4413      	add	r3, r2
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	3301      	adds	r3, #1
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2b03      	cmp	r3, #3
 800173e:	ddd3      	ble.n	80016e8 <remove_piece+0x20>
    for (int i = 0; i < 4; i++)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b03      	cmp	r3, #3
 800174a:	ddca      	ble.n	80016e2 <remove_piece+0x1a>
                }
            }
        }
    }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	371c      	adds	r7, #28
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	b002      	add	sp, #8
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000444 	.word	0x20000444

08001760 <can_move>:
 * @param peca    Estrutura contendo o formato da peça.
 * @return        1 se o movimento for válido, 0 caso contrário.
 */

int can_move(int linha, int coluna, PecaTetris peca)
{
 8001760:	b082      	sub	sp, #8
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
 800176c:	f107 0120 	add.w	r1, r7, #32
 8001770:	e881 000c 	stmia.w	r1, {r2, r3}

    for (int i = 0; i < 4; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e03c      	b.n	80017f4 <can_move+0x94>
    {
        for (int j = 0; j < 4; j++)
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	e033      	b.n	80017e8 <can_move+0x88>
        {
            if (peca.shape[i][j] == 1)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	009a      	lsls	r2, r3, #2
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4413      	add	r3, r2
 8001788:	f107 0220 	add.w	r2, r7, #32
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d126      	bne.n	80017e2 <can_move+0x82>
            {
                int board_linha = linha + i;
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	4413      	add	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4413      	add	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha < 0 || board_linha >= ROWS || board_coluna < 0 || board_coluna >= COLS)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db08      	blt.n	80017bc <can_move+0x5c>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	dc05      	bgt.n	80017bc <can_move+0x5c>
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db02      	blt.n	80017bc <can_move+0x5c>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b07      	cmp	r3, #7
 80017ba:	dd04      	ble.n	80017c6 <can_move+0x66>
                {
#ifdef DEBUG
                    printf("\nMovimento Invalido\n");
 80017bc:	4813      	ldr	r0, [pc, #76]	@ (800180c <can_move+0xac>)
 80017be:	f002 ff7d 	bl	80046bc <puts>
#endif
                    return 0; // Movimento inválido
 80017c2:	2300      	movs	r3, #0
 80017c4:	e01a      	b.n	80017fc <can_move+0x9c>
                }

                // Verifica se a posição está ocupada
                if (board[board_linha][board_coluna] == 2)
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <can_move+0xb0>)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	441a      	add	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d104      	bne.n	80017e2 <can_move+0x82>
                {
#ifdef DEBUG
                    printf("\nMovimento Invalido\n");
 80017d8:	480c      	ldr	r0, [pc, #48]	@ (800180c <can_move+0xac>)
 80017da:	f002 ff6f 	bl	80046bc <puts>
#endif
                    return 0; // Movimento inválido
 80017de:	2300      	movs	r3, #0
 80017e0:	e00c      	b.n	80017fc <can_move+0x9c>
        for (int j = 0; j < 4; j++)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	3301      	adds	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	ddc8      	ble.n	8001780 <can_move+0x20>
    for (int i = 0; i < 4; i++)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	ddbf      	ble.n	800177a <can_move+0x1a>
                }
            }
        }
    }

    return 1; // Movimento válido
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001806:	b002      	add	sp, #8
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	080059a8 	.word	0x080059a8
 8001810:	20000444 	.word	0x20000444

08001814 <move_piece_right>:
 * @param coluna  Ponteiro para a posição horizontal da peça.
 * @param peca    Estrutura contendo o formato da peça.
 */

void move_piece_right(int *linha, int *coluna, PecaTetris peca)
{
 8001814:	b082      	sub	sp, #8
 8001816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001818:	b095      	sub	sp, #84	@ 0x54
 800181a:	af0e      	add	r7, sp, #56	@ 0x38
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001824:	e881 000c 	stmia.w	r1, {r2, r3}
    int new_linha = *linha + 0;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	617b      	str	r3, [r7, #20]
    int new_coluna = *coluna + 1;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	613b      	str	r3, [r7, #16]

    if (can_move(new_linha, new_coluna, peca))
 8001836:	466d      	mov	r5, sp
 8001838:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800183c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001848:	e894 0003 	ldmia.w	r4, {r0, r1}
 800184c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001850:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001854:	cb0c      	ldmia	r3, {r2, r3}
 8001856:	6939      	ldr	r1, [r7, #16]
 8001858:	6978      	ldr	r0, [r7, #20]
 800185a:	f7ff ff81 	bl	8001760 <can_move>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d037      	beq.n	80018d4 <move_piece_right+0xc0>
    {
        // Apaga a peça da posição atual
        remove_piece(*linha, *coluna, peca);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681e      	ldr	r6, [r3, #0]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	466d      	mov	r5, sp
 8001870:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800187c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001880:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001884:	e885 0003 	stmia.w	r5, {r0, r1}
 8001888:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800188c:	ca0c      	ldmia	r2, {r2, r3}
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4630      	mov	r0, r6
 8001892:	f7ff ff19 	bl	80016c8 <remove_piece>

        // Atualiza posição
        *linha = new_linha;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	601a      	str	r2, [r3, #0]
        *coluna = new_coluna;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	601a      	str	r2, [r3, #0]

        // Coloca a peça na nova posição
        place_piece(*linha, *coluna, peca);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681e      	ldr	r6, [r3, #0]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	466d      	mov	r5, sp
 80018ae:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80018b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80018c6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80018ca:	ca0c      	ldmia	r2, {r2, r3}
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4630      	mov	r0, r6
 80018d0:	f7ff feae 	bl	8001630 <place_piece>
    }
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80018de:	b002      	add	sp, #8
 80018e0:	4770      	bx	lr

080018e2 <move_piece_left>:
 * @param coluna  Ponteiro para a posição horizontal da peça.
 * @param peca    Estrutura contendo o formato da peça.
 */

void move_piece_left(int *linha, int *coluna, PecaTetris peca)
{
 80018e2:	b082      	sub	sp, #8
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	b095      	sub	sp, #84	@ 0x54
 80018e8:	af0e      	add	r7, sp, #56	@ 0x38
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80018f2:	e881 000c 	stmia.w	r1, {r2, r3}
    int new_linha = *linha + 0;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	617b      	str	r3, [r7, #20]
    int new_coluna = *coluna - 1;
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	3b01      	subs	r3, #1
 8001902:	613b      	str	r3, [r7, #16]

    if (can_move(new_linha, new_coluna, peca))
 8001904:	466d      	mov	r5, sp
 8001906:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800190a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001916:	e894 0003 	ldmia.w	r4, {r0, r1}
 800191a:	e885 0003 	stmia.w	r5, {r0, r1}
 800191e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001922:	cb0c      	ldmia	r3, {r2, r3}
 8001924:	6939      	ldr	r1, [r7, #16]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff1a 	bl	8001760 <can_move>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d037      	beq.n	80019a2 <move_piece_left+0xc0>
    {
        // Apaga a peça da posição atual
        remove_piece(*linha, *coluna, peca);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681e      	ldr	r6, [r3, #0]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	466d      	mov	r5, sp
 800193e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001952:	e885 0003 	stmia.w	r5, {r0, r1}
 8001956:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800195a:	ca0c      	ldmia	r2, {r2, r3}
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	4630      	mov	r0, r6
 8001960:	f7ff feb2 	bl	80016c8 <remove_piece>

        // Atualiza posição
        *linha = new_linha;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	601a      	str	r2, [r3, #0]
        *coluna = new_coluna;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	601a      	str	r2, [r3, #0]

        // Coloca a peça na nova posição
        place_piece(*linha, *coluna, peca);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681e      	ldr	r6, [r3, #0]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	466d      	mov	r5, sp
 800197c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001990:	e885 0003 	stmia.w	r5, {r0, r1}
 8001994:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001998:	ca0c      	ldmia	r2, {r2, r3}
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4630      	mov	r0, r6
 800199e:	f7ff fe47 	bl	8001630 <place_piece>
    }
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80019ac:	b002      	add	sp, #8
 80019ae:	4770      	bx	lr

080019b0 <rotate_piece_right>:
 * @param coluna  Posição horizontal da peça no tabuleiro.
 * @param peca    Ponteiro para a estrutura da peça a ser rotacionada.
 */

void rotate_piece_right(int linha, int coluna, PecaTetris *peca)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b096      	sub	sp, #88	@ 0x58
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
    int nova_peca[4][4];

    for (int i = 0; i < 4; i++)
 80019bc:	2300      	movs	r3, #0
 80019be:	657b      	str	r3, [r7, #84]	@ 0x54
 80019c0:	e01d      	b.n	80019fe <rotate_piece_right+0x4e>
    {
        for (int j = 0; j < 4; j++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80019c6:	e014      	b.n	80019f2 <rotate_piece_right+0x42>
        {
            nova_peca[j][3 - i] = peca->shape[i][j];
 80019c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019ca:	f1c3 0303 	rsb	r3, r3, #3
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80019d2:	0088      	lsls	r0, r1, #2
 80019d4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80019d6:	4401      	add	r1, r0
 80019d8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80019dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80019de:	0089      	lsls	r1, r1, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	3358      	adds	r3, #88	@ 0x58
 80019e6:	443b      	add	r3, r7
 80019e8:	f843 2c48 	str.w	r2, [r3, #-72]
        for (int j = 0; j < 4; j++)
 80019ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019ee:	3301      	adds	r3, #1
 80019f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80019f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	dde7      	ble.n	80019c8 <rotate_piece_right+0x18>
    for (int i = 0; i < 4; i++)
 80019f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019fa:	3301      	adds	r3, #1
 80019fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80019fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	ddde      	ble.n	80019c2 <rotate_piece_right+0x12>
        }
    }
    rotate_piece(linha, coluna, nova_peca, peca);
 8001a04:	f107 0210 	add.w	r2, r7, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f000 f804 	bl	8001a1a <rotate_piece>
}
 8001a12:	bf00      	nop
 8001a14:	3758      	adds	r7, #88	@ 0x58
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <rotate_piece>:
 * @param new_matriz Matriz 4x4 representando a peça rotacionada.
 * @param peca       Ponteiro para a estrutura da peça a ser rotacionada.
 */

void rotate_piece(int linha, int coluna, int new_matriz[4][4], PecaTetris *peca)
{
 8001a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1c:	b0a7      	sub	sp, #156	@ 0x9c
 8001a1e:	af0e      	add	r7, sp, #56	@ 0x38
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	603b      	str	r3, [r7, #0]

    PecaTetris pecaAux;
    // Cria uma cópia temporária para verificação
    for (int i = 0; i < 4; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a2c:	e01b      	b.n	8001a66 <rotate_piece+0x4c>
    {
        for (int j = 0; j < 4; j++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a32:	e012      	b.n	8001a5a <rotate_piece+0x40>
        {
            pecaAux.shape[i][j] = new_matriz[i][j];
 8001a34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a44:	0099      	lsls	r1, r3, #2
 8001a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a48:	440b      	add	r3, r1
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	3360      	adds	r3, #96	@ 0x60
 8001a4e:	443b      	add	r3, r7
 8001a50:	f843 2c50 	str.w	r2, [r3, #-80]
        for (int j = 0; j < 4; j++)
 8001a54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a56:	3301      	adds	r3, #1
 8001a58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	dde9      	ble.n	8001a34 <rotate_piece+0x1a>
    for (int i = 0; i < 4; i++)
 8001a60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a62:	3301      	adds	r3, #1
 8001a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	dde0      	ble.n	8001a2e <rotate_piece+0x14>
        }
    }

    if (can_move(linha, coluna, pecaAux))
 8001a6c:	466d      	mov	r5, sp
 8001a6e:	f107 0418 	add.w	r4, r7, #24
 8001a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a82:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	cb0c      	ldmia	r3, {r2, r3}
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f7ff fe66 	bl	8001760 <can_move>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d047      	beq.n	8001b2a <rotate_piece+0x110>
    {
        // Apaga a peça da posição atual
        remove_piece(linha, coluna, *peca);
 8001a9a:	683e      	ldr	r6, [r7, #0]
 8001a9c:	466d      	mov	r5, sp
 8001a9e:	f106 0408 	add.w	r4, r6, #8
 8001aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ab2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ab6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001aba:	68b9      	ldr	r1, [r7, #8]
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f7ff fe03 	bl	80016c8 <remove_piece>

        // Copia a matriz rotacionada para a peça original
        for (int i = 0; i < 4; i++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ac6:	e019      	b.n	8001afc <rotate_piece+0xe2>
        {
            for (int j = 0; j < 4; j++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8001acc:	e010      	b.n	8001af0 <rotate_piece+0xd6>
            {
                peca->shape[i][j] = new_matriz[i][j];
 8001ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ae0:	0090      	lsls	r0, r2, #2
 8001ae2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001ae4:	4402      	add	r2, r0
 8001ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = 0; j < 4; j++)
 8001aea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001aec:	3301      	adds	r3, #1
 8001aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8001af0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	ddeb      	ble.n	8001ace <rotate_piece+0xb4>
        for (int i = 0; i < 4; i++)
 8001af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af8:	3301      	adds	r3, #1
 8001afa:	657b      	str	r3, [r7, #84]	@ 0x54
 8001afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	dde2      	ble.n	8001ac8 <rotate_piece+0xae>
            }
        }

        // Coloca a peça na nova posição
        place_piece(linha, coluna, *peca);
 8001b02:	683e      	ldr	r6, [r7, #0]
 8001b04:	466d      	mov	r5, sp
 8001b06:	f106 0408 	add.w	r4, r6, #8
 8001b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b1e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001b22:	68b9      	ldr	r1, [r7, #8]
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff fd83 	bl	8001630 <place_piece>
    }
}
 8001b2a:	bf00      	nop
 8001b2c:	3764      	adds	r7, #100	@ 0x64
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b32 <move_piece_down>:
 * @param peca        Ponteiro para a estrutura da peça que está em jogo.
 * @param peca_atual  Ponteiro para o índice da peça atual.
 * @return            Retorna 0 se a peça continuar descendo e 1 se ela foi fixada.
 */
int move_piece_down(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 8001b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b34:	b097      	sub	sp, #92	@ 0x5c
 8001b36:	af0e      	add	r7, sp, #56	@ 0x38
 8001b38:	6178      	str	r0, [r7, #20]
 8001b3a:	6139      	str	r1, [r7, #16]
 8001b3c:	60fa      	str	r2, [r7, #12]
 8001b3e:	60bb      	str	r3, [r7, #8]
    int nova_linha = *linha + 1;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]

    // Verifica se a peça pode se mover para baixo (se a linha não está fora do tabuleiro e não há outra peça no caminho)
    if (can_move(nova_linha, *coluna, *peca)) // A função can_move agora verifica se a nova posição é válida
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	68fe      	ldr	r6, [r7, #12]
 8001b50:	466d      	mov	r5, sp
 8001b52:	f106 0408 	add.w	r4, r6, #8
 8001b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b66:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b6a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	69f8      	ldr	r0, [r7, #28]
 8001b72:	f7ff fdf5 	bl	8001760 <can_move>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d038      	beq.n	8001bee <move_piece_down+0xbc>
    {
        // Apaga a peça da posição atual
        remove_piece(*linha, *coluna, *peca);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	603a      	str	r2, [r7, #0]
 8001b88:	68fe      	ldr	r6, [r7, #12]
 8001b8a:	466d      	mov	r5, sp
 8001b8c:	f106 0408 	add.w	r4, r6, #8
 8001b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ba0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ba4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001ba8:	6839      	ldr	r1, [r7, #0]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fd8c 	bl	80016c8 <remove_piece>

        // Atualiza a posição da peça
        *linha = nova_linha;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	601a      	str	r2, [r3, #0]

        // Coloca a peça na nova posição
        place_piece(*linha, *coluna, *peca);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	603a      	str	r2, [r7, #0]
 8001bc2:	68fe      	ldr	r6, [r7, #12]
 8001bc4:	466d      	mov	r5, sp
 8001bc6:	f106 0408 	add.w	r4, r6, #8
 8001bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bda:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bde:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff fd23 	bl	8001630 <place_piece>
        return 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e01c      	b.n	8001c28 <move_piece_down+0xf6>
    }
    else
    {
        fix_piece(linha, coluna, *peca);
 8001bee:	68fe      	ldr	r6, [r7, #12]
 8001bf0:	466d      	mov	r5, sp
 8001bf2:	f106 0408 	add.w	r4, r6, #8
 8001bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c06:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c0a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001c0e:	6939      	ldr	r1, [r7, #16]
 8001c10:	6978      	ldr	r0, [r7, #20]
 8001c12:	f000 f8b9 	bl	8001d88 <fix_piece>
        remove_full_lines();
 8001c16:	f000 f8f5 	bl	8001e04 <remove_full_lines>
        generate_next_piece(linha, coluna, peca, peca_atual);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	6939      	ldr	r1, [r7, #16]
 8001c20:	6978      	ldr	r0, [r7, #20]
 8001c22:	f000 f863 	bl	8001cec <generate_next_piece>
        return 1;
 8001c26:	2301      	movs	r3, #1
    }
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3724      	adds	r7, #36	@ 0x24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c30 <number_aleatory_peace>:
 *
 * @return       Um número entre 0 e 6, representando o tipo da peça aleatória.
 */

int number_aleatory_peace()
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
    return rand() % 7; // Gera um número entre 0 e 6
 8001c34:	f002 fbd2 	bl	80043dc <rand>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <number_aleatory_peace+0x28>)
 8001c3c:	fb83 1302 	smull	r1, r3, r3, r2
 8001c40:	4413      	add	r3, r2
 8001c42:	1099      	asrs	r1, r3, #2
 8001c44:	17d3      	asrs	r3, r2, #31
 8001c46:	1ac9      	subs	r1, r1, r3
 8001c48:	460b      	mov	r3, r1
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1a5b      	subs	r3, r3, r1
 8001c4e:	1ad1      	subs	r1, r2, r3
 8001c50:	460b      	mov	r3, r1
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	92492493 	.word	0x92492493

08001c5c <check_piece_at_bottom>:
 *
 * @return 1 se a peça atingiu o fundo ou colidiu com outra peça; 0 caso contrário.
 */

int check_piece_at_bottom(int *linha, int *coluna, PecaTetris peca)
{
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
 8001c68:	f107 0118 	add.w	r1, r7, #24
 8001c6c:	e881 000c 	stmia.w	r1, {r2, r3}

    // Verifique se há outra peça abaixo dela (posição da peça no tabuleiro)
    for (int i = 0; i < 4; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e02d      	b.n	8001cd2 <check_piece_at_bottom+0x76>
    {
        for (int j = 0; j < 4; j++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	e024      	b.n	8001cc6 <check_piece_at_bottom+0x6a>
        {
            if (peca.shape[i][j] == 1)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	009a      	lsls	r2, r3, #2
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4413      	add	r3, r2
 8001c84:	f107 0218 	add.w	r2, r7, #24
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d117      	bne.n	8001cc0 <check_piece_at_bottom+0x64>
            {
                if (board[*linha + i + 1][*coluna + j] == 2 || (*linha + i) >= 15) // Se houver uma peça fixa abaixo
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6819      	ldr	r1, [r3, #0]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	440b      	add	r3, r1
 8001ca2:	4911      	ldr	r1, [pc, #68]	@ (8001ce8 <check_piece_at_bottom+0x8c>)
 8001ca4:	00d2      	lsls	r2, r2, #3
 8001ca6:	440a      	add	r2, r1
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d005      	beq.n	8001cbc <check_piece_at_bottom+0x60>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	2b0e      	cmp	r3, #14
 8001cba:	dd01      	ble.n	8001cc0 <check_piece_at_bottom+0x64>
                {
                    return 1;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e00c      	b.n	8001cda <check_piece_at_bottom+0x7e>
        for (int j = 0; j < 4; j++)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	ddd7      	ble.n	8001c7c <check_piece_at_bottom+0x20>
    for (int i = 0; i < 4; i++)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	ddce      	ble.n	8001c76 <check_piece_at_bottom+0x1a>
                }
            }
        }
    }

    return 0; // A peça não atingiu o fundo
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	b002      	add	sp, #8
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000444 	.word	0x20000444

08001cec <generate_next_piece>:
 * @param peca        Ponteiro para a estrutura da peça que será colocada no tabuleiro.
 * @param peca_atual  Ponteiro para armazenar o índice da peça atual.
 */

void generate_next_piece(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 8001cec:	b5b0      	push	{r4, r5, r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
    *peca_atual = next_number;
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d68 <generate_next_piece+0x7c>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	601a      	str	r2, [r3, #0]
    *peca = pecas[*peca_atual];
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4a18      	ldr	r2, [pc, #96]	@ (8001d6c <generate_next_piece+0x80>)
 8001d0a:	019b      	lsls	r3, r3, #6
 8001d0c:	4413      	add	r3, r2
 8001d0e:	460c      	mov	r4, r1
 8001d10:	461d      	mov	r5, r3
 8001d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    next_number = number_aleatory_peace();
 8001d26:	f7ff ff83 	bl	8001c30 <number_aleatory_peace>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <generate_next_piece+0x7c>)
 8001d2e:	6013      	str	r3, [r2, #0]
    next_peace = pecas[next_number];
 8001d30:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <generate_next_piece+0x7c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	490e      	ldr	r1, [pc, #56]	@ (8001d70 <generate_next_piece+0x84>)
 8001d36:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <generate_next_piece+0x80>)
 8001d38:	019b      	lsls	r3, r3, #6
 8001d3a:	4413      	add	r3, r2
 8001d3c:	460c      	mov	r4, r1
 8001d3e:	461d      	mov	r5, r3
 8001d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Define a posição inicial da nova peça
    *linha = 0;  // Começa do topo
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
    *coluna = 3; // Começa no meio do tabuleiro
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	601a      	str	r2, [r3, #0]
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bdb0      	pop	{r4, r5, r7, pc}
 8001d68:	200004d4 	.word	0x200004d4
 8001d6c:	20000064 	.word	0x20000064
 8001d70:	200004d8 	.word	0x200004d8

08001d74 <get_next_piece>:
 * @brief       Get a Proxima Peca a ser gerada.
 * 
 * Esta função exibe a próxima peça que será gerada no jogo Tetris.
 */

 int get_next_piece(){
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
    return next_number; // Retorna a próxima peça a ser gerada
 8001d78:	4b02      	ldr	r3, [pc, #8]	@ (8001d84 <get_next_piece+0x10>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 }
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	200004d4 	.word	0x200004d4

08001d88 <fix_piece>:
 * @param coluna A coluna onde a peça está atualmente posicionada no tabuleiro.
 * @param peca   A peça que deve ser fixada no tabuleiro.
 */

void fix_piece(int *linha, int *coluna, PecaTetris peca)
{
 8001d88:	b082      	sub	sp, #8
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
 8001d94:	f107 0118 	add.w	r1, r7, #24
 8001d98:	e881 000c 	stmia.w	r1, {r2, r3}
    // Adiciona a peça no tabuleiro, tornando-a fixa
    for (int i = 0; i < 4; i++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	e023      	b.n	8001dea <fix_piece+0x62>
    {
        for (int j = 0; j < 4; j++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	e01a      	b.n	8001dde <fix_piece+0x56>
        {
            if (peca.shape[i][j] == 1)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	009a      	lsls	r2, r3, #2
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4413      	add	r3, r2
 8001db0:	f107 0218 	add.w	r2, r7, #24
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10d      	bne.n	8001dd8 <fix_piece+0x50>
            {
                board[*linha + i][*coluna + j] = 2; // Marca a posição com 2, indicando que está fixa
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	441a      	add	r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	6819      	ldr	r1, [r3, #0]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	440b      	add	r3, r1
 8001dcc:	490c      	ldr	r1, [pc, #48]	@ (8001e00 <fix_piece+0x78>)
 8001dce:	00d2      	lsls	r2, r2, #3
 8001dd0:	440a      	add	r2, r1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	dde1      	ble.n	8001da8 <fix_piece+0x20>
    for (int i = 0; i < 4; i++)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	3301      	adds	r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	ddd8      	ble.n	8001da2 <fix_piece+0x1a>
            }
        }
    }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	b002      	add	sp, #8
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000444 	.word	0x20000444

08001e04 <remove_full_lines>:
 * acima dela são deslocadas para baixo. A primeira linha do tabuleiro é então limpa.
 * Caso uma ou mais linhas sejam removidas, a pontuação e o nível do jogador são atualizados.
 */

void remove_full_lines()
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0

    int linhas_removidas = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]

    for (int i = ROWS - 1; i >= 0; i--) // Começa da última linha e vai subindo
 8001e0e:	230f      	movs	r3, #15
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	e052      	b.n	8001eba <remove_full_lines+0xb6>
    {
        int complete = 1;
 8001e14:	2301      	movs	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]

        // Verifica se a linha está completa
        for (int j = 0; j < COLS; j++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	e00e      	b.n	8001e3c <remove_full_lines+0x38>
        {
            if (board[i][j] != 2) // Se qualquer célula não for preenchida
 8001e1e:	4a31      	ldr	r2, [pc, #196]	@ (8001ee4 <remove_full_lines+0xe0>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	441a      	add	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4413      	add	r3, r2
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d002      	beq.n	8001e36 <remove_full_lines+0x32>
            {
                complete = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
                break; // Se a linha não estiver completa, sai do loop
 8001e34:	e005      	b.n	8001e42 <remove_full_lines+0x3e>
        for (int j = 0; j < COLS; j++)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b07      	cmp	r3, #7
 8001e40:	dded      	ble.n	8001e1e <remove_full_lines+0x1a>
            }
        }

        // Se a linha estiver completa, removemos a linha e deslocamos as linhas acima
        if (complete)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d035      	beq.n	8001eb4 <remove_full_lines+0xb0>
        {

            linhas_removidas++;
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	61fb      	str	r3, [r7, #28]

            // Desloca todas as linhas acima uma posição para baixo
            for (int k = i; k > 0; k--)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	e01b      	b.n	8001e8c <remove_full_lines+0x88>
            {
                for (int j = 0; j < COLS; j++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	e012      	b.n	8001e80 <remove_full_lines+0x7c>
                {
                    board[k][j] = board[k - 1][j];
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	4a21      	ldr	r2, [pc, #132]	@ (8001ee4 <remove_full_lines+0xe0>)
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	441a      	add	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4413      	add	r3, r2
 8001e68:	7819      	ldrb	r1, [r3, #0]
 8001e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee4 <remove_full_lines+0xe0>)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	441a      	add	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	4413      	add	r3, r2
 8001e76:	460a      	mov	r2, r1
 8001e78:	701a      	strb	r2, [r3, #0]
                for (int j = 0; j < COLS; j++)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b07      	cmp	r3, #7
 8001e84:	dde9      	ble.n	8001e5a <remove_full_lines+0x56>
            for (int k = i; k > 0; k--)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	dce0      	bgt.n	8001e54 <remove_full_lines+0x50>
                }
            }

            // Limpa a primeira linha (agora vazia)
            for (int j = 0; j < COLS; j++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	e007      	b.n	8001ea8 <remove_full_lines+0xa4>
            {
                board[0][j] = 0;
 8001e98:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <remove_full_lines+0xe0>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < COLS; j++)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b07      	cmp	r3, #7
 8001eac:	ddf4      	ble.n	8001e98 <remove_full_lines+0x94>
            }

            // Como movemos as linhas para baixo, não precisamos verificar a linha removida novamente
            i++; // Reanalisa a linha atual, pois ela pode ter se tornado completa após o deslocamento
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	61bb      	str	r3, [r7, #24]
    for (int i = ROWS - 1; i >= 0; i--) // Começa da última linha e vai subindo
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	daa9      	bge.n	8001e14 <remove_full_lines+0x10>
        }
    }
    if (linhas_removidas > 0)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	dd0a      	ble.n	8001edc <remove_full_lines+0xd8>
    {
        atualizar_pontuacao(linhas_removidas);
 8001ec6:	69f8      	ldr	r0, [r7, #28]
 8001ec8:	f000 f898 	bl	8001ffc <atualizar_pontuacao>

#ifdef DEBUG
        printf("Pontuação: %d   Nível: %d\n", pontuacao, nivel);
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <remove_full_lines+0xe4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a06      	ldr	r2, [pc, #24]	@ (8001eec <remove_full_lines+0xe8>)
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4806      	ldr	r0, [pc, #24]	@ (8001ef0 <remove_full_lines+0xec>)
 8001ed8:	f002 fb80 	bl	80045dc <iprintf>
#endif
    }
}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000444 	.word	0x20000444
 8001ee8:	200004c8 	.word	0x200004c8
 8001eec:	200004cc 	.word	0x200004cc
 8001ef0:	080059bc 	.word	0x080059bc

08001ef4 <update_game>:
 * @param coluna     Ponteiro para a posição horizontal da peça no tabuleiro.
 * @param peca       Ponteiro para a estrutura da peça atual.
 * @param peca_atual Ponteiro para o índice da peça atual.
 */
void update_game(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 8001ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef6:	b093      	sub	sp, #76	@ 0x4c
 8001ef8:	af0e      	add	r7, sp, #56	@ 0x38
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]

    incrementTime();
 8001f02:	f000 f851 	bl	8001fa8 <incrementTime>

    // Se o tempo acumulado atingir o limiar, move a peça para baixo
    if (timer_counter >= TEMPO_BASE / multiplicador_tempo)
 8001f06:	4b26      	ldr	r3, [pc, #152]	@ (8001fa0 <update_game+0xac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001f0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b23      	ldr	r3, [pc, #140]	@ (8001fa4 <update_game+0xb0>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d83c      	bhi.n	8001f96 <update_game+0xa2>
    {

        if (check_piece_at_bottom(linha, coluna, *peca) == 1)
 8001f1c:	687e      	ldr	r6, [r7, #4]
 8001f1e:	466d      	mov	r5, sp
 8001f20:	f106 0408 	add.w	r4, r6, #8
 8001f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f34:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f38:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f7ff fe8c 	bl	8001c5c <check_piece_at_bottom>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d11c      	bne.n	8001f84 <update_game+0x90>
        {
            fix_piece(linha, coluna, *peca);
 8001f4a:	687e      	ldr	r6, [r7, #4]
 8001f4c:	466d      	mov	r5, sp
 8001f4e:	f106 0408 	add.w	r4, r6, #8
 8001f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f66:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff ff0b 	bl	8001d88 <fix_piece>
            remove_full_lines();
 8001f72:	f7ff ff47 	bl	8001e04 <remove_full_lines>
            generate_next_piece(linha, coluna, peca, peca_atual);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f7ff feb5 	bl	8001cec <generate_next_piece>
 8001f82:	e005      	b.n	8001f90 <update_game+0x9c>
        }
        else
        {
            move_piece_down(linha, coluna, peca, peca_atual);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff fdd1 	bl	8001b32 <move_piece_down>
        }

        timer_counter = 0; // Reinicia o contador
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <update_game+0xb0>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
    }

    //draw_board();
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000224 	.word	0x20000224
 8001fa4:	200004c4 	.word	0x200004c4

08001fa8 <incrementTime>:
 *
 * Esta função é chamada a cada milissegundo para atualizar o contador
 * responsável por controlar a gravidade do jogo.
 */
void incrementTime()
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
    // Chamada de 1 ms aqui
    timer_counter++;
 8001fac:	4b04      	ldr	r3, [pc, #16]	@ (8001fc0 <incrementTime+0x18>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	4a03      	ldr	r2, [pc, #12]	@ (8001fc0 <incrementTime+0x18>)
 8001fb4:	6013      	str	r3, [r2, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	200004c4 	.word	0x200004c4

08001fc4 <game_over>:
 * e o jogo deve terminar.
 *
 * @return      Retorna 1 se o jogo acabou (fim de jogo), ou 0 caso contrário.
 */
int game_over()
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
    for (int j = 0; j < COLS; j++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	e00a      	b.n	8001fe6 <game_over+0x22>
    {
        if (board[0][j] == 2)
 8001fd0:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <game_over+0x34>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d101      	bne.n	8001fe0 <game_over+0x1c>
        {
            return 1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e006      	b.n	8001fee <game_over+0x2a>
    for (int j = 0; j < COLS; j++)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b07      	cmp	r3, #7
 8001fea:	ddf1      	ble.n	8001fd0 <game_over+0xc>
        }
    }
    return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	20000444 	.word	0x20000444

08001ffc <atualizar_pontuacao>:
 *   - 4 linhas: 1200 * (nivel+1)
 *
 * @param linhas_removidas Número de linhas removidas de uma vez.
 */
void atualizar_pontuacao(int linhas_removidas)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
    int pontos = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
    switch (linhas_removidas)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	2b03      	cmp	r3, #3
 800200e:	d82e      	bhi.n	800206e <atualizar_pontuacao+0x72>
 8002010:	a201      	add	r2, pc, #4	@ (adr r2, 8002018 <atualizar_pontuacao+0x1c>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	08002029 	.word	0x08002029
 800201c:	0800203b 	.word	0x0800203b
 8002020:	0800204b 	.word	0x0800204b
 8002024:	0800205d 	.word	0x0800205d
    {
    case 1:
        pontos = 40 * (nivel + 1);
 8002028:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <atualizar_pontuacao+0xbc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	60fb      	str	r3, [r7, #12]
        break;
 8002038:	e01a      	b.n	8002070 <atualizar_pontuacao+0x74>
    case 2:
        pontos = 100 * (nivel + 1);
 800203a:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <atualizar_pontuacao+0xbc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	2264      	movs	r2, #100	@ 0x64
 8002042:	fb02 f303 	mul.w	r3, r2, r3
 8002046:	60fb      	str	r3, [r7, #12]
        break;
 8002048:	e012      	b.n	8002070 <atualizar_pontuacao+0x74>
    case 3:
        pontos = 300 * (nivel + 1);
 800204a:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <atualizar_pontuacao+0xbc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3301      	adds	r3, #1
 8002050:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	60fb      	str	r3, [r7, #12]
        break;
 800205a:	e009      	b.n	8002070 <atualizar_pontuacao+0x74>
    case 4:
        pontos = 1200 * (nivel + 1);
 800205c:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <atualizar_pontuacao+0xbc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	60fb      	str	r3, [r7, #12]
        break;
 800206c:	e000      	b.n	8002070 <atualizar_pontuacao+0x74>
    default:
        break;
 800206e:	bf00      	nop
    }
    pontuacao += pontos;
 8002070:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <atualizar_pontuacao+0xc0>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	4a10      	ldr	r2, [pc, #64]	@ (80020bc <atualizar_pontuacao+0xc0>)
 800207a:	6013      	str	r3, [r2, #0]
    linhas_totais += linhas_removidas;
 800207c:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <atualizar_pontuacao+0xc4>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	4a0e      	ldr	r2, [pc, #56]	@ (80020c0 <atualizar_pontuacao+0xc4>)
 8002086:	6013      	str	r3, [r2, #0]

    // Atualiza o nível se atingir o limite
    if (linhas_totais >= LINHAS_POR_NIVEL)
 8002088:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <atualizar_pontuacao+0xc4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b09      	cmp	r3, #9
 800208e:	dd0e      	ble.n	80020ae <atualizar_pontuacao+0xb2>
    {
        nivel++;
 8002090:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <atualizar_pontuacao+0xbc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	4a08      	ldr	r2, [pc, #32]	@ (80020b8 <atualizar_pontuacao+0xbc>)
 8002098:	6013      	str	r3, [r2, #0]
        linhas_totais = linhas_totais - LINHAS_POR_NIVEL; // Ou zere e acumule com pontos extras se desejar
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <atualizar_pontuacao+0xc4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3b0a      	subs	r3, #10
 80020a0:	4a07      	ldr	r2, [pc, #28]	@ (80020c0 <atualizar_pontuacao+0xc4>)
 80020a2:	6013      	str	r3, [r2, #0]
        // Ajuste a velocidade do jogo, por exemplo:
        multiplicador_tempo++; // Ou reduza o tempo base
 80020a4:	4b07      	ldr	r3, [pc, #28]	@ (80020c4 <atualizar_pontuacao+0xc8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	4a06      	ldr	r2, [pc, #24]	@ (80020c4 <atualizar_pontuacao+0xc8>)
 80020ac:	6013      	str	r3, [r2, #0]
        //printf("\nNível aumentado! Agora é o nível %d\n", nivel);
    }
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	200004cc 	.word	0x200004cc
 80020bc:	200004c8 	.word	0x200004c8
 80020c0:	200004d0 	.word	0x200004d0
 80020c4:	20000224 	.word	0x20000224

080020c8 <show_next_peace>:
 * Esta função imprime no console a matriz 4x4 da próxima peça
 * que será utilizada no jogo. A peça é representada com '█'
 * para blocos preenchidos e '.' para espaços vazios.
 */
void show_next_peace()
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
    printf("Proxima peca a aparecer\n");
 80020ce:	481b      	ldr	r0, [pc, #108]	@ (800213c <show_next_peace+0x74>)
 80020d0:	f002 faf4 	bl	80046bc <puts>
    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	e027      	b.n	800212a <show_next_peace+0x62>
    {
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 80020da:	2300      	movs	r3, #0
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	e01b      	b.n	8002118 <show_next_peace+0x50>
        {
            if (next_peace.shape[i][j] == 1)
 80020e0:	4917      	ldr	r1, [pc, #92]	@ (8002140 <show_next_peace+0x78>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	009a      	lsls	r2, r3, #2
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d103      	bne.n	80020fa <show_next_peace+0x32>
            {

                printf("█ "); // Bloco preenchido
 80020f2:	4814      	ldr	r0, [pc, #80]	@ (8002144 <show_next_peace+0x7c>)
 80020f4:	f002 fa72 	bl	80045dc <iprintf>
 80020f8:	e00b      	b.n	8002112 <show_next_peace+0x4a>
            }
            else if (board[i][j] == 0)
 80020fa:	4a13      	ldr	r2, [pc, #76]	@ (8002148 <show_next_peace+0x80>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	441a      	add	r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <show_next_peace+0x4a>
            {
                printf(". "); // Espaço vazio
 800210c:	480f      	ldr	r0, [pc, #60]	@ (800214c <show_next_peace+0x84>)
 800210e:	f002 fa65 	bl	80045dc <iprintf>
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b03      	cmp	r3, #3
 800211c:	dde0      	ble.n	80020e0 <show_next_peace+0x18>
            }
        }
        printf("\n");
 800211e:	200a      	movs	r0, #10
 8002120:	f002 fa6e 	bl	8004600 <putchar>
    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3301      	adds	r3, #1
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b03      	cmp	r3, #3
 800212e:	ddd4      	ble.n	80020da <show_next_peace+0x12>
    }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	080059dc 	.word	0x080059dc
 8002140:	200004d8 	.word	0x200004d8
 8002144:	08005998 	.word	0x08005998
 8002148:	20000444 	.word	0x20000444
 800214c:	080059a0 	.word	0x080059a0

08002150 <get_pontuacao>:
 * Esta função retorna a pontuação acumulada pelo jogador durante o jogo.
 *
 * @return A pontuação atual como um valor de 16 bits sem sinal.
 */
uint16_t get_pontuacao(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
    return (uint16_t)pontuacao;
 8002154:	4b03      	ldr	r3, [pc, #12]	@ (8002164 <get_pontuacao+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	200004c8 	.word	0x200004c8

08002168 <Reset_Handler>:
 8002168:	f7ff f9c0 	bl	80014ec <SystemInit>
 800216c:	480b      	ldr	r0, [pc, #44]	@ (800219c <LoopFillZerobss+0xe>)
 800216e:	490c      	ldr	r1, [pc, #48]	@ (80021a0 <LoopFillZerobss+0x12>)
 8002170:	4a0c      	ldr	r2, [pc, #48]	@ (80021a4 <LoopFillZerobss+0x16>)
 8002172:	2300      	movs	r3, #0
 8002174:	e002      	b.n	800217c <LoopCopyDataInit>

08002176 <CopyDataInit>:
 8002176:	58d4      	ldr	r4, [r2, r3]
 8002178:	50c4      	str	r4, [r0, r3]
 800217a:	3304      	adds	r3, #4

0800217c <LoopCopyDataInit>:
 800217c:	18c4      	adds	r4, r0, r3
 800217e:	428c      	cmp	r4, r1
 8002180:	d3f9      	bcc.n	8002176 <CopyDataInit>
 8002182:	4a09      	ldr	r2, [pc, #36]	@ (80021a8 <LoopFillZerobss+0x1a>)
 8002184:	4c09      	ldr	r4, [pc, #36]	@ (80021ac <LoopFillZerobss+0x1e>)
 8002186:	2300      	movs	r3, #0
 8002188:	e001      	b.n	800218e <LoopFillZerobss>

0800218a <FillZerobss>:
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	3204      	adds	r2, #4

0800218e <LoopFillZerobss>:
 800218e:	42a2      	cmp	r2, r4
 8002190:	d3fb      	bcc.n	800218a <FillZerobss>
 8002192:	f002 fbe9 	bl	8004968 <__libc_init_array>
 8002196:	f7fe fded 	bl	8000d74 <main>
 800219a:	4770      	bx	lr
 800219c:	20000000 	.word	0x20000000
 80021a0:	2000028c 	.word	0x2000028c
 80021a4:	08005b18 	.word	0x08005b18
 80021a8:	2000028c 	.word	0x2000028c
 80021ac:	20000668 	.word	0x20000668

080021b0 <ADC1_2_IRQHandler>:
 80021b0:	e7fe      	b.n	80021b0 <ADC1_2_IRQHandler>
	...

080021b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <HAL_Init+0x28>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <HAL_Init+0x28>)
 80021be:	f043 0310 	orr.w	r3, r3, #16
 80021c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c4:	2003      	movs	r0, #3
 80021c6:	f000 fd73 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ca:	200f      	movs	r0, #15
 80021cc:	f000 f808 	bl	80021e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d0:	f7ff f802 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_InitTick+0x54>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_InitTick+0x58>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fd8b 	bl	8002d1a <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e00e      	b.n	800222c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d80a      	bhi.n	800222a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002214:	2200      	movs	r2, #0
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800221c:	f000 fd53 	bl	8002cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002220:	4a06      	ldr	r2, [pc, #24]	@ (800223c <HAL_InitTick+0x5c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000060 	.word	0x20000060
 8002238:	2000022c 	.word	0x2000022c
 800223c:	20000228 	.word	0x20000228

08002240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HAL_IncTick+0x1c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <HAL_IncTick+0x20>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a03      	ldr	r2, [pc, #12]	@ (8002260 <HAL_IncTick+0x20>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	2000022c 	.word	0x2000022c
 8002260:	20000518 	.word	0x20000518

08002264 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return uwTick;
 8002268:	4b02      	ldr	r3, [pc, #8]	@ (8002274 <HAL_GetTick+0x10>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20000518 	.word	0x20000518

08002278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002280:	f7ff fff0 	bl	8002264 <HAL_GetTick>
 8002284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002290:	d005      	beq.n	800229e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <HAL_Delay+0x44>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800229e:	bf00      	nop
 80022a0:	f7ff ffe0 	bl	8002264 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d8f7      	bhi.n	80022a0 <HAL_Delay+0x28>
  {
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000022c 	.word	0x2000022c

080022c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0be      	b.n	8002460 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe ff9c 	bl	800123c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fbc5 	bl	8002a94 <ADC_ConversionStop_Disable>
 800230a:	4603      	mov	r3, r0
 800230c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002312:	f003 0310 	and.w	r3, r3, #16
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 8099 	bne.w	800244e <HAL_ADC_Init+0x18e>
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 8095 	bne.w	800244e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002328:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800232c:	f023 0302 	bic.w	r3, r3, #2
 8002330:	f043 0202 	orr.w	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002340:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7b1b      	ldrb	r3, [r3, #12]
 8002346:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002348:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	4313      	orrs	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002358:	d003      	beq.n	8002362 <HAL_ADC_Init+0xa2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d102      	bne.n	8002368 <HAL_ADC_Init+0xa8>
 8002362:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002366:	e000      	b.n	800236a <HAL_ADC_Init+0xaa>
 8002368:	2300      	movs	r3, #0
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7d1b      	ldrb	r3, [r3, #20]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d119      	bne.n	80023ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7b1b      	ldrb	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	3b01      	subs	r3, #1
 8002386:	035a      	lsls	r2, r3, #13
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	e00b      	b.n	80023ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	430a      	orrs	r2, r1
 80023be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	4b28      	ldr	r3, [pc, #160]	@ (8002468 <HAL_ADC_Init+0x1a8>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023dc:	d003      	beq.n	80023e6 <HAL_ADC_Init+0x126>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d104      	bne.n	80023f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	430a      	orrs	r2, r1
 8002402:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	4b18      	ldr	r3, [pc, #96]	@ (800246c <HAL_ADC_Init+0x1ac>)
 800240c:	4013      	ands	r3, r2
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	429a      	cmp	r2, r3
 8002412:	d10b      	bne.n	800242c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	f023 0303 	bic.w	r3, r3, #3
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800242a:	e018      	b.n	800245e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	f023 0312 	bic.w	r3, r3, #18
 8002434:	f043 0210 	orr.w	r2, r3, #16
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002440:	f043 0201 	orr.w	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800244c:	e007      	b.n	800245e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002452:	f043 0210 	orr.w	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800245e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	ffe1f7fd 	.word	0xffe1f7fd
 800246c:	ff1f0efe 	.word	0xff1f0efe

08002470 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_ADC_Start+0x1a>
 8002486:	2302      	movs	r3, #2
 8002488:	e098      	b.n	80025bc <HAL_ADC_Start+0x14c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 faa4 	bl	80029e0 <ADC_Enable>
 8002498:	4603      	mov	r3, r0
 800249a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 8087 	bne.w	80025b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a41      	ldr	r2, [pc, #260]	@ (80025c4 <HAL_ADC_Start+0x154>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d105      	bne.n	80024ce <HAL_ADC_Start+0x5e>
 80024c2:	4b41      	ldr	r3, [pc, #260]	@ (80025c8 <HAL_ADC_Start+0x158>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d115      	bne.n	80024fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d026      	beq.n	8002536 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024f8:	e01d      	b.n	8002536 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2f      	ldr	r2, [pc, #188]	@ (80025c8 <HAL_ADC_Start+0x158>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d004      	beq.n	800251a <HAL_ADC_Start+0xaa>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a2b      	ldr	r2, [pc, #172]	@ (80025c4 <HAL_ADC_Start+0x154>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d10d      	bne.n	8002536 <HAL_ADC_Start+0xc6>
 800251a:	4b2b      	ldr	r3, [pc, #172]	@ (80025c8 <HAL_ADC_Start+0x158>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800252e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	f023 0206 	bic.w	r2, r3, #6
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800254e:	e002      	b.n	8002556 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f06f 0202 	mvn.w	r2, #2
 8002566:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002572:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002576:	d113      	bne.n	80025a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800257c:	4a11      	ldr	r2, [pc, #68]	@ (80025c4 <HAL_ADC_Start+0x154>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d105      	bne.n	800258e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002582:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <HAL_ADC_Start+0x158>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800258a:	2b00      	cmp	r3, #0
 800258c:	d108      	bne.n	80025a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	e00c      	b.n	80025ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	e003      	b.n	80025ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40012800 	.word	0x40012800
 80025c8:	40012400 	.word	0x40012400

080025cc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80025e2:	f7ff fe3f 	bl	8002264 <HAL_GetTick>
 80025e6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	f043 0220 	orr.w	r2, r3, #32
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0d3      	b.n	80027b6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d131      	bne.n	8002680 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002626:	2b00      	cmp	r3, #0
 8002628:	d12a      	bne.n	8002680 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800262a:	e021      	b.n	8002670 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002632:	d01d      	beq.n	8002670 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <HAL_ADC_PollForConversion+0x7e>
 800263a:	f7ff fe13 	bl	8002264 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d212      	bcs.n	8002670 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	f043 0204 	orr.w	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e0a2      	b.n	80027b6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0d6      	beq.n	800262c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800267e:	e070      	b.n	8002762 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002680:	4b4f      	ldr	r3, [pc, #316]	@ (80027c0 <HAL_ADC_PollForConversion+0x1f4>)
 8002682:	681c      	ldr	r4, [r3, #0]
 8002684:	2002      	movs	r0, #2
 8002686:	f001 f9d3 	bl	8003a30 <HAL_RCCEx_GetPeriphCLKFreq>
 800268a:	4603      	mov	r3, r0
 800268c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	4b4b      	ldr	r3, [pc, #300]	@ (80027c4 <HAL_ADC_PollForConversion+0x1f8>)
 8002698:	400b      	ands	r3, r1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d118      	bne.n	80026d0 <HAL_ADC_PollForConversion+0x104>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68d9      	ldr	r1, [r3, #12]
 80026a4:	4b48      	ldr	r3, [pc, #288]	@ (80027c8 <HAL_ADC_PollForConversion+0x1fc>)
 80026a6:	400b      	ands	r3, r1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d111      	bne.n	80026d0 <HAL_ADC_PollForConversion+0x104>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6919      	ldr	r1, [r3, #16]
 80026b2:	4b46      	ldr	r3, [pc, #280]	@ (80027cc <HAL_ADC_PollForConversion+0x200>)
 80026b4:	400b      	ands	r3, r1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d108      	bne.n	80026cc <HAL_ADC_PollForConversion+0x100>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68d9      	ldr	r1, [r3, #12]
 80026c0:	4b43      	ldr	r3, [pc, #268]	@ (80027d0 <HAL_ADC_PollForConversion+0x204>)
 80026c2:	400b      	ands	r3, r1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_PollForConversion+0x100>
 80026c8:	2314      	movs	r3, #20
 80026ca:	e020      	b.n	800270e <HAL_ADC_PollForConversion+0x142>
 80026cc:	2329      	movs	r3, #41	@ 0x29
 80026ce:	e01e      	b.n	800270e <HAL_ADC_PollForConversion+0x142>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6919      	ldr	r1, [r3, #16]
 80026d6:	4b3d      	ldr	r3, [pc, #244]	@ (80027cc <HAL_ADC_PollForConversion+0x200>)
 80026d8:	400b      	ands	r3, r1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_ADC_PollForConversion+0x120>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68d9      	ldr	r1, [r3, #12]
 80026e4:	4b3a      	ldr	r3, [pc, #232]	@ (80027d0 <HAL_ADC_PollForConversion+0x204>)
 80026e6:	400b      	ands	r3, r1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00d      	beq.n	8002708 <HAL_ADC_PollForConversion+0x13c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6919      	ldr	r1, [r3, #16]
 80026f2:	4b38      	ldr	r3, [pc, #224]	@ (80027d4 <HAL_ADC_PollForConversion+0x208>)
 80026f4:	400b      	ands	r3, r1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d108      	bne.n	800270c <HAL_ADC_PollForConversion+0x140>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68d9      	ldr	r1, [r3, #12]
 8002700:	4b34      	ldr	r3, [pc, #208]	@ (80027d4 <HAL_ADC_PollForConversion+0x208>)
 8002702:	400b      	ands	r3, r1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_PollForConversion+0x140>
 8002708:	2354      	movs	r3, #84	@ 0x54
 800270a:	e000      	b.n	800270e <HAL_ADC_PollForConversion+0x142>
 800270c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002714:	e021      	b.n	800275a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800271c:	d01a      	beq.n	8002754 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_ADC_PollForConversion+0x168>
 8002724:	f7ff fd9e 	bl	8002264 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d20f      	bcs.n	8002754 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	429a      	cmp	r2, r3
 800273a:	d90b      	bls.n	8002754 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	f043 0204 	orr.w	r2, r3, #4
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e030      	b.n	80027b6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3301      	adds	r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	429a      	cmp	r2, r3
 8002760:	d8d9      	bhi.n	8002716 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f06f 0212 	mvn.w	r2, #18
 800276a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002782:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002786:	d115      	bne.n	80027b4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800278c:	2b00      	cmp	r3, #0
 800278e:	d111      	bne.n	80027b4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	f043 0201 	orr.w	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd90      	pop	{r4, r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000060 	.word	0x20000060
 80027c4:	24924924 	.word	0x24924924
 80027c8:	00924924 	.word	0x00924924
 80027cc:	12492492 	.word	0x12492492
 80027d0:	00492492 	.word	0x00492492
 80027d4:	00249249 	.word	0x00249249

080027d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x20>
 800280c:	2302      	movs	r3, #2
 800280e:	e0dc      	b.n	80029ca <HAL_ADC_ConfigChannel+0x1da>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b06      	cmp	r3, #6
 800281e:	d81c      	bhi.n	800285a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	3b05      	subs	r3, #5
 8002832:	221f      	movs	r2, #31
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	4019      	ands	r1, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	3b05      	subs	r3, #5
 800284c:	fa00 f203 	lsl.w	r2, r0, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	635a      	str	r2, [r3, #52]	@ 0x34
 8002858:	e03c      	b.n	80028d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d81c      	bhi.n	800289c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	3b23      	subs	r3, #35	@ 0x23
 8002874:	221f      	movs	r2, #31
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	4019      	ands	r1, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	3b23      	subs	r3, #35	@ 0x23
 800288e:	fa00 f203 	lsl.w	r2, r0, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	631a      	str	r2, [r3, #48]	@ 0x30
 800289a:	e01b      	b.n	80028d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	3b41      	subs	r3, #65	@ 0x41
 80028ae:	221f      	movs	r2, #31
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4019      	ands	r1, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	3b41      	subs	r3, #65	@ 0x41
 80028c8:	fa00 f203 	lsl.w	r2, r0, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b09      	cmp	r3, #9
 80028da:	d91c      	bls.n	8002916 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68d9      	ldr	r1, [r3, #12]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	3b1e      	subs	r3, #30
 80028ee:	2207      	movs	r2, #7
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	4019      	ands	r1, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6898      	ldr	r0, [r3, #8]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	3b1e      	subs	r3, #30
 8002908:	fa00 f203 	lsl.w	r2, r0, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	60da      	str	r2, [r3, #12]
 8002914:	e019      	b.n	800294a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6919      	ldr	r1, [r3, #16]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	2207      	movs	r2, #7
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	4019      	ands	r1, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6898      	ldr	r0, [r3, #8]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	fa00 f203 	lsl.w	r2, r0, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b10      	cmp	r3, #16
 8002950:	d003      	beq.n	800295a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002956:	2b11      	cmp	r3, #17
 8002958:	d132      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1d      	ldr	r2, [pc, #116]	@ (80029d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d125      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d126      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002980:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b10      	cmp	r3, #16
 8002988:	d11a      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800298a:	4b13      	ldr	r3, [pc, #76]	@ (80029d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a13      	ldr	r2, [pc, #76]	@ (80029dc <HAL_ADC_ConfigChannel+0x1ec>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	0c9a      	lsrs	r2, r3, #18
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x1b2>
 80029ae:	e007      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	f043 0220 	orr.w	r2, r3, #32
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40012400 	.word	0x40012400
 80029d8:	20000060 	.word	0x20000060
 80029dc:	431bde83 	.word	0x431bde83

080029e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d040      	beq.n	8002a80 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002a8c <ADC_Enable+0xac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1f      	ldr	r2, [pc, #124]	@ (8002a90 <ADC_Enable+0xb0>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	0c9b      	lsrs	r3, r3, #18
 8002a1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a1c:	e002      	b.n	8002a24 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f9      	bne.n	8002a1e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a2a:	f7ff fc1b 	bl	8002264 <HAL_GetTick>
 8002a2e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a30:	e01f      	b.n	8002a72 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a32:	f7ff fc17 	bl	8002264 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d918      	bls.n	8002a72 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d011      	beq.n	8002a72 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a52:	f043 0210 	orr.w	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5e:	f043 0201 	orr.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e007      	b.n	8002a82 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d1d8      	bne.n	8002a32 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000060 	.word	0x20000060
 8002a90:	431bde83 	.word	0x431bde83

08002a94 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d12e      	bne.n	8002b0c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002abe:	f7ff fbd1 	bl	8002264 <HAL_GetTick>
 8002ac2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ac4:	e01b      	b.n	8002afe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ac6:	f7ff fbcd 	bl	8002264 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d914      	bls.n	8002afe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10d      	bne.n	8002afe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae6:	f043 0210 	orr.w	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e007      	b.n	8002b0e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d0dc      	beq.n	8002ac6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <__NVIC_SetPriorityGrouping+0x44>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b34:	4013      	ands	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4a:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <__NVIC_SetPriorityGrouping+0x44>)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	60d3      	str	r3, [r2, #12]
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <__NVIC_GetPriorityGrouping+0x18>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	f003 0307 	and.w	r3, r3, #7
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	db0b      	blt.n	8002ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	f003 021f 	and.w	r2, r3, #31
 8002b94:	4906      	ldr	r1, [pc, #24]	@ (8002bb0 <__NVIC_EnableIRQ+0x34>)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	e000e100 	.word	0xe000e100

08002bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	6039      	str	r1, [r7, #0]
 8002bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	db0a      	blt.n	8002bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	490c      	ldr	r1, [pc, #48]	@ (8002c00 <__NVIC_SetPriority+0x4c>)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	0112      	lsls	r2, r2, #4
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bdc:	e00a      	b.n	8002bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4908      	ldr	r1, [pc, #32]	@ (8002c04 <__NVIC_SetPriority+0x50>)
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	3b04      	subs	r3, #4
 8002bec:	0112      	lsls	r2, r2, #4
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	761a      	strb	r2, [r3, #24]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e100 	.word	0xe000e100
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	@ 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f1c3 0307 	rsb	r3, r3, #7
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	bf28      	it	cs
 8002c26:	2304      	movcs	r3, #4
 8002c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d902      	bls.n	8002c38 <NVIC_EncodePriority+0x30>
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3b03      	subs	r3, #3
 8002c36:	e000      	b.n	8002c3a <NVIC_EncodePriority+0x32>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43da      	mvns	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5a:	43d9      	mvns	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	4313      	orrs	r3, r2
         );
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3724      	adds	r7, #36	@ 0x24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <SysTick_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c90:	f7ff ff90 	bl	8002bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <SysTick_Config+0x40>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9a:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <SysTick_Config+0x40>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff2d 	bl	8002b18 <__NVIC_SetPriorityGrouping>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd8:	f7ff ff42 	bl	8002b60 <__NVIC_GetPriorityGrouping>
 8002cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff90 	bl	8002c08 <NVIC_EncodePriority>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff5f 	bl	8002bb4 <__NVIC_SetPriority>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff35 	bl	8002b7c <__NVIC_EnableIRQ>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffa2 	bl	8002c6c <SysTick_Config>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b08b      	sub	sp, #44	@ 0x2c
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d42:	2300      	movs	r3, #0
 8002d44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d46:	e169      	b.n	800301c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d48:	2201      	movs	r2, #1
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	f040 8158 	bne.w	8003016 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4a9a      	ldr	r2, [pc, #616]	@ (8002fd4 <HAL_GPIO_Init+0x2a0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d05e      	beq.n	8002e2e <HAL_GPIO_Init+0xfa>
 8002d70:	4a98      	ldr	r2, [pc, #608]	@ (8002fd4 <HAL_GPIO_Init+0x2a0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d875      	bhi.n	8002e62 <HAL_GPIO_Init+0x12e>
 8002d76:	4a98      	ldr	r2, [pc, #608]	@ (8002fd8 <HAL_GPIO_Init+0x2a4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d058      	beq.n	8002e2e <HAL_GPIO_Init+0xfa>
 8002d7c:	4a96      	ldr	r2, [pc, #600]	@ (8002fd8 <HAL_GPIO_Init+0x2a4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d86f      	bhi.n	8002e62 <HAL_GPIO_Init+0x12e>
 8002d82:	4a96      	ldr	r2, [pc, #600]	@ (8002fdc <HAL_GPIO_Init+0x2a8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d052      	beq.n	8002e2e <HAL_GPIO_Init+0xfa>
 8002d88:	4a94      	ldr	r2, [pc, #592]	@ (8002fdc <HAL_GPIO_Init+0x2a8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d869      	bhi.n	8002e62 <HAL_GPIO_Init+0x12e>
 8002d8e:	4a94      	ldr	r2, [pc, #592]	@ (8002fe0 <HAL_GPIO_Init+0x2ac>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d04c      	beq.n	8002e2e <HAL_GPIO_Init+0xfa>
 8002d94:	4a92      	ldr	r2, [pc, #584]	@ (8002fe0 <HAL_GPIO_Init+0x2ac>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d863      	bhi.n	8002e62 <HAL_GPIO_Init+0x12e>
 8002d9a:	4a92      	ldr	r2, [pc, #584]	@ (8002fe4 <HAL_GPIO_Init+0x2b0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d046      	beq.n	8002e2e <HAL_GPIO_Init+0xfa>
 8002da0:	4a90      	ldr	r2, [pc, #576]	@ (8002fe4 <HAL_GPIO_Init+0x2b0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d85d      	bhi.n	8002e62 <HAL_GPIO_Init+0x12e>
 8002da6:	2b12      	cmp	r3, #18
 8002da8:	d82a      	bhi.n	8002e00 <HAL_GPIO_Init+0xcc>
 8002daa:	2b12      	cmp	r3, #18
 8002dac:	d859      	bhi.n	8002e62 <HAL_GPIO_Init+0x12e>
 8002dae:	a201      	add	r2, pc, #4	@ (adr r2, 8002db4 <HAL_GPIO_Init+0x80>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002e2f 	.word	0x08002e2f
 8002db8:	08002e09 	.word	0x08002e09
 8002dbc:	08002e1b 	.word	0x08002e1b
 8002dc0:	08002e5d 	.word	0x08002e5d
 8002dc4:	08002e63 	.word	0x08002e63
 8002dc8:	08002e63 	.word	0x08002e63
 8002dcc:	08002e63 	.word	0x08002e63
 8002dd0:	08002e63 	.word	0x08002e63
 8002dd4:	08002e63 	.word	0x08002e63
 8002dd8:	08002e63 	.word	0x08002e63
 8002ddc:	08002e63 	.word	0x08002e63
 8002de0:	08002e63 	.word	0x08002e63
 8002de4:	08002e63 	.word	0x08002e63
 8002de8:	08002e63 	.word	0x08002e63
 8002dec:	08002e63 	.word	0x08002e63
 8002df0:	08002e63 	.word	0x08002e63
 8002df4:	08002e63 	.word	0x08002e63
 8002df8:	08002e11 	.word	0x08002e11
 8002dfc:	08002e25 	.word	0x08002e25
 8002e00:	4a79      	ldr	r2, [pc, #484]	@ (8002fe8 <HAL_GPIO_Init+0x2b4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e06:	e02c      	b.n	8002e62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	623b      	str	r3, [r7, #32]
          break;
 8002e0e:	e029      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	3304      	adds	r3, #4
 8002e16:	623b      	str	r3, [r7, #32]
          break;
 8002e18:	e024      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	3308      	adds	r3, #8
 8002e20:	623b      	str	r3, [r7, #32]
          break;
 8002e22:	e01f      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	623b      	str	r3, [r7, #32]
          break;
 8002e2c:	e01a      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e36:	2304      	movs	r3, #4
 8002e38:	623b      	str	r3, [r7, #32]
          break;
 8002e3a:	e013      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d105      	bne.n	8002e50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e44:	2308      	movs	r3, #8
 8002e46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	611a      	str	r2, [r3, #16]
          break;
 8002e4e:	e009      	b.n	8002e64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e50:	2308      	movs	r3, #8
 8002e52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	615a      	str	r2, [r3, #20]
          break;
 8002e5a:	e003      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	623b      	str	r3, [r7, #32]
          break;
 8002e60:	e000      	b.n	8002e64 <HAL_GPIO_Init+0x130>
          break;
 8002e62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2bff      	cmp	r3, #255	@ 0xff
 8002e68:	d801      	bhi.n	8002e6e <HAL_GPIO_Init+0x13a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	e001      	b.n	8002e72 <HAL_GPIO_Init+0x13e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3304      	adds	r3, #4
 8002e72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2bff      	cmp	r3, #255	@ 0xff
 8002e78:	d802      	bhi.n	8002e80 <HAL_GPIO_Init+0x14c>
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	e002      	b.n	8002e86 <HAL_GPIO_Init+0x152>
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	3b08      	subs	r3, #8
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	210f      	movs	r1, #15
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	401a      	ands	r2, r3
 8002e98:	6a39      	ldr	r1, [r7, #32]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80b1 	beq.w	8003016 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002eb4:	4b4d      	ldr	r3, [pc, #308]	@ (8002fec <HAL_GPIO_Init+0x2b8>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	4a4c      	ldr	r2, [pc, #304]	@ (8002fec <HAL_GPIO_Init+0x2b8>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6193      	str	r3, [r2, #24]
 8002ec0:	4b4a      	ldr	r3, [pc, #296]	@ (8002fec <HAL_GPIO_Init+0x2b8>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ecc:	4a48      	ldr	r2, [pc, #288]	@ (8002ff0 <HAL_GPIO_Init+0x2bc>)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a40      	ldr	r2, [pc, #256]	@ (8002ff4 <HAL_GPIO_Init+0x2c0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <HAL_GPIO_Init+0x1ec>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a3f      	ldr	r2, [pc, #252]	@ (8002ff8 <HAL_GPIO_Init+0x2c4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00d      	beq.n	8002f1c <HAL_GPIO_Init+0x1e8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a3e      	ldr	r2, [pc, #248]	@ (8002ffc <HAL_GPIO_Init+0x2c8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d007      	beq.n	8002f18 <HAL_GPIO_Init+0x1e4>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a3d      	ldr	r2, [pc, #244]	@ (8003000 <HAL_GPIO_Init+0x2cc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <HAL_GPIO_Init+0x1e0>
 8002f10:	2303      	movs	r3, #3
 8002f12:	e006      	b.n	8002f22 <HAL_GPIO_Init+0x1ee>
 8002f14:	2304      	movs	r3, #4
 8002f16:	e004      	b.n	8002f22 <HAL_GPIO_Init+0x1ee>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e002      	b.n	8002f22 <HAL_GPIO_Init+0x1ee>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_GPIO_Init+0x1ee>
 8002f20:	2300      	movs	r3, #0
 8002f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f24:	f002 0203 	and.w	r2, r2, #3
 8002f28:	0092      	lsls	r2, r2, #2
 8002f2a:	4093      	lsls	r3, r2
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f32:	492f      	ldr	r1, [pc, #188]	@ (8002ff0 <HAL_GPIO_Init+0x2bc>)
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	089b      	lsrs	r3, r3, #2
 8002f38:	3302      	adds	r3, #2
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d006      	beq.n	8002f5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	492c      	ldr	r1, [pc, #176]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
 8002f58:	e006      	b.n	8002f68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	4928      	ldr	r1, [pc, #160]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d006      	beq.n	8002f82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f74:	4b23      	ldr	r3, [pc, #140]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	4922      	ldr	r1, [pc, #136]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60cb      	str	r3, [r1, #12]
 8002f80:	e006      	b.n	8002f90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f82:	4b20      	ldr	r3, [pc, #128]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	491e      	ldr	r1, [pc, #120]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d006      	beq.n	8002faa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f9c:	4b19      	ldr	r3, [pc, #100]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	4918      	ldr	r1, [pc, #96]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
 8002fa8:	e006      	b.n	8002fb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002faa:	4b16      	ldr	r3, [pc, #88]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	4914      	ldr	r1, [pc, #80]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d021      	beq.n	8003008 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	490e      	ldr	r1, [pc, #56]	@ (8003004 <HAL_GPIO_Init+0x2d0>)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]
 8002fd0:	e021      	b.n	8003016 <HAL_GPIO_Init+0x2e2>
 8002fd2:	bf00      	nop
 8002fd4:	10320000 	.word	0x10320000
 8002fd8:	10310000 	.word	0x10310000
 8002fdc:	10220000 	.word	0x10220000
 8002fe0:	10210000 	.word	0x10210000
 8002fe4:	10120000 	.word	0x10120000
 8002fe8:	10110000 	.word	0x10110000
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	40010800 	.word	0x40010800
 8002ff8:	40010c00 	.word	0x40010c00
 8002ffc:	40011000 	.word	0x40011000
 8003000:	40011400 	.word	0x40011400
 8003004:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <HAL_GPIO_Init+0x304>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	43db      	mvns	r3, r3
 8003010:	4909      	ldr	r1, [pc, #36]	@ (8003038 <HAL_GPIO_Init+0x304>)
 8003012:	4013      	ands	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	3301      	adds	r3, #1
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003022:	fa22 f303 	lsr.w	r3, r2, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	f47f ae8e 	bne.w	8002d48 <HAL_GPIO_Init+0x14>
  }
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	372c      	adds	r7, #44	@ 0x2c
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	40010400 	.word	0x40010400

0800303c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	887b      	ldrh	r3, [r7, #2]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
 8003058:	e001      	b.n	800305e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	807b      	strh	r3, [r7, #2]
 8003076:	4613      	mov	r3, r2
 8003078:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800307a:	787b      	ldrb	r3, [r7, #1]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003080:	887a      	ldrh	r2, [r7, #2]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003086:	e003      	b.n	8003090 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	041a      	lsls	r2, r3, #16
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	611a      	str	r2, [r3, #16]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ac:	887a      	ldrh	r2, [r7, #2]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4013      	ands	r3, r2
 80030b2:	041a      	lsls	r2, r3, #16
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	400b      	ands	r3, r1
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	611a      	str	r2, [r3, #16]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e272      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8087 	beq.w	80031fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030ec:	4b92      	ldr	r3, [pc, #584]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d00c      	beq.n	8003112 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b08      	cmp	r3, #8
 8003102:	d112      	bne.n	800312a <HAL_RCC_OscConfig+0x5e>
 8003104:	4b8c      	ldr	r3, [pc, #560]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003110:	d10b      	bne.n	800312a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003112:	4b89      	ldr	r3, [pc, #548]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d06c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x12c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d168      	bne.n	80031f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e24c      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x76>
 8003134:	4b80      	ldr	r3, [pc, #512]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a7f      	ldr	r2, [pc, #508]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 800313a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	e02e      	b.n	80031a0 <HAL_RCC_OscConfig+0xd4>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x98>
 800314a:	4b7b      	ldr	r3, [pc, #492]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a7a      	ldr	r2, [pc, #488]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b78      	ldr	r3, [pc, #480]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a77      	ldr	r2, [pc, #476]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 800315c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e01d      	b.n	80031a0 <HAL_RCC_OscConfig+0xd4>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0xbc>
 800316e:	4b72      	ldr	r3, [pc, #456]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a71      	ldr	r2, [pc, #452]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	4b6f      	ldr	r3, [pc, #444]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a6e      	ldr	r2, [pc, #440]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0xd4>
 8003188:	4b6b      	ldr	r3, [pc, #428]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6a      	ldr	r2, [pc, #424]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 800318e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b68      	ldr	r3, [pc, #416]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a67      	ldr	r2, [pc, #412]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 800319a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800319e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d013      	beq.n	80031d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7ff f85c 	bl	8002264 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b0:	f7ff f858 	bl	8002264 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	@ 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e200      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0xe4>
 80031ce:	e014      	b.n	80031fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d0:	f7ff f848 	bl	8002264 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d8:	f7ff f844 	bl	8002264 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	@ 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e1ec      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	4b53      	ldr	r3, [pc, #332]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x10c>
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d063      	beq.n	80032ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003206:	4b4c      	ldr	r3, [pc, #304]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003212:	4b49      	ldr	r3, [pc, #292]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b08      	cmp	r3, #8
 800321c:	d11c      	bne.n	8003258 <HAL_RCC_OscConfig+0x18c>
 800321e:	4b46      	ldr	r3, [pc, #280]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800322a:	4b43      	ldr	r3, [pc, #268]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_RCC_OscConfig+0x176>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d001      	beq.n	8003242 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e1c0      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b3d      	ldr	r3, [pc, #244]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4939      	ldr	r1, [pc, #228]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	e03a      	b.n	80032ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003260:	4b36      	ldr	r3, [pc, #216]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fe fffd 	bl	8002264 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326e:	f7fe fff9 	bl	8002264 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e1a1      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003280:	4b2d      	ldr	r3, [pc, #180]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328c:	4b2a      	ldr	r3, [pc, #168]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4927      	ldr	r1, [pc, #156]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]
 80032a0:	e015      	b.n	80032ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a2:	4b26      	ldr	r3, [pc, #152]	@ (800333c <HAL_RCC_OscConfig+0x270>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe ffdc 	bl	8002264 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b0:	f7fe ffd8 	bl	8002264 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e180      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d03a      	beq.n	8003350 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d019      	beq.n	8003316 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e2:	4b17      	ldr	r3, [pc, #92]	@ (8003340 <HAL_RCC_OscConfig+0x274>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e8:	f7fe ffbc 	bl	8002264 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f0:	f7fe ffb8 	bl	8002264 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e160      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <HAL_RCC_OscConfig+0x26c>)
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800330e:	2001      	movs	r0, #1
 8003310:	f000 faba 	bl	8003888 <RCC_Delay>
 8003314:	e01c      	b.n	8003350 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003316:	4b0a      	ldr	r3, [pc, #40]	@ (8003340 <HAL_RCC_OscConfig+0x274>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331c:	f7fe ffa2 	bl	8002264 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003322:	e00f      	b.n	8003344 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003324:	f7fe ff9e 	bl	8002264 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d908      	bls.n	8003344 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e146      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	42420000 	.word	0x42420000
 8003340:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003344:	4b92      	ldr	r3, [pc, #584]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e9      	bne.n	8003324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80a6 	beq.w	80034aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003362:	4b8b      	ldr	r3, [pc, #556]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10d      	bne.n	800338a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336e:	4b88      	ldr	r3, [pc, #544]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a87      	ldr	r2, [pc, #540]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003378:	61d3      	str	r3, [r2, #28]
 800337a:	4b85      	ldr	r3, [pc, #532]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003386:	2301      	movs	r3, #1
 8003388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338a:	4b82      	ldr	r3, [pc, #520]	@ (8003594 <HAL_RCC_OscConfig+0x4c8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003392:	2b00      	cmp	r3, #0
 8003394:	d118      	bne.n	80033c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003396:	4b7f      	ldr	r3, [pc, #508]	@ (8003594 <HAL_RCC_OscConfig+0x4c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7e      	ldr	r2, [pc, #504]	@ (8003594 <HAL_RCC_OscConfig+0x4c8>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a2:	f7fe ff5f 	bl	8002264 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033aa:	f7fe ff5b 	bl	8002264 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b64      	cmp	r3, #100	@ 0x64
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e103      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033bc:	4b75      	ldr	r3, [pc, #468]	@ (8003594 <HAL_RCC_OscConfig+0x4c8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d106      	bne.n	80033de <HAL_RCC_OscConfig+0x312>
 80033d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6213      	str	r3, [r2, #32]
 80033dc:	e02d      	b.n	800343a <HAL_RCC_OscConfig+0x36e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0x334>
 80033e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4a69      	ldr	r2, [pc, #420]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	6213      	str	r3, [r2, #32]
 80033f2:	4b67      	ldr	r3, [pc, #412]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a66      	ldr	r2, [pc, #408]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	6213      	str	r3, [r2, #32]
 80033fe:	e01c      	b.n	800343a <HAL_RCC_OscConfig+0x36e>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b05      	cmp	r3, #5
 8003406:	d10c      	bne.n	8003422 <HAL_RCC_OscConfig+0x356>
 8003408:	4b61      	ldr	r3, [pc, #388]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4a60      	ldr	r2, [pc, #384]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800340e:	f043 0304 	orr.w	r3, r3, #4
 8003412:	6213      	str	r3, [r2, #32]
 8003414:	4b5e      	ldr	r3, [pc, #376]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a5d      	ldr	r2, [pc, #372]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	e00b      	b.n	800343a <HAL_RCC_OscConfig+0x36e>
 8003422:	4b5b      	ldr	r3, [pc, #364]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a5a      	ldr	r2, [pc, #360]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	6213      	str	r3, [r2, #32]
 800342e:	4b58      	ldr	r3, [pc, #352]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a57      	ldr	r2, [pc, #348]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	f023 0304 	bic.w	r3, r3, #4
 8003438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d015      	beq.n	800346e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003442:	f7fe ff0f 	bl	8002264 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003448:	e00a      	b.n	8003460 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344a:	f7fe ff0b 	bl	8002264 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003458:	4293      	cmp	r3, r2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e0b1      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	4b4b      	ldr	r3, [pc, #300]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ee      	beq.n	800344a <HAL_RCC_OscConfig+0x37e>
 800346c:	e014      	b.n	8003498 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346e:	f7fe fef9 	bl	8002264 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003474:	e00a      	b.n	800348c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003476:	f7fe fef5 	bl	8002264 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003484:	4293      	cmp	r3, r2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e09b      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	4b40      	ldr	r3, [pc, #256]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1ee      	bne.n	8003476 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d105      	bne.n	80034aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800349e:	4b3c      	ldr	r3, [pc, #240]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8087 	beq.w	80035c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034b4:	4b36      	ldr	r3, [pc, #216]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d061      	beq.n	8003584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d146      	bne.n	8003556 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c8:	4b33      	ldr	r3, [pc, #204]	@ (8003598 <HAL_RCC_OscConfig+0x4cc>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7fe fec9 	bl	8002264 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fe fec5 	bl	8002264 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e06d      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e8:	4b29      	ldr	r3, [pc, #164]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034fc:	d108      	bne.n	8003510 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034fe:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4921      	ldr	r1, [pc, #132]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003510:	4b1f      	ldr	r3, [pc, #124]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a19      	ldr	r1, [r3, #32]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	430b      	orrs	r3, r1
 8003522:	491b      	ldr	r1, [pc, #108]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003528:	4b1b      	ldr	r3, [pc, #108]	@ (8003598 <HAL_RCC_OscConfig+0x4cc>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7fe fe99 	bl	8002264 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003536:	f7fe fe95 	bl	8002264 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e03d      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003548:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x46a>
 8003554:	e035      	b.n	80035c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b10      	ldr	r3, [pc, #64]	@ (8003598 <HAL_RCC_OscConfig+0x4cc>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe fe82 	bl	8002264 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe fe7e 	bl	8002264 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e026      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003576:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x498>
 8003582:	e01e      	b.n	80035c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d107      	bne.n	800359c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e019      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
 8003590:	40021000 	.word	0x40021000
 8003594:	40007000 	.word	0x40007000
 8003598:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800359c:	4b0b      	ldr	r3, [pc, #44]	@ (80035cc <HAL_RCC_OscConfig+0x500>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d106      	bne.n	80035be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000

080035d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0d0      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d910      	bls.n	8003614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b67      	ldr	r3, [pc, #412]	@ (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 0207 	bic.w	r2, r3, #7
 80035fa:	4965      	ldr	r1, [pc, #404]	@ (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4313      	orrs	r3, r2
 8003600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b63      	ldr	r3, [pc, #396]	@ (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0b8      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d020      	beq.n	8003662 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800362c:	4b59      	ldr	r3, [pc, #356]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a58      	ldr	r2, [pc, #352]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003636:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003644:	4b53      	ldr	r3, [pc, #332]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	4a52      	ldr	r2, [pc, #328]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800364a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800364e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003650:	4b50      	ldr	r3, [pc, #320]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	494d      	ldr	r1, [pc, #308]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	4313      	orrs	r3, r2
 8003660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d040      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003676:	4b47      	ldr	r3, [pc, #284]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d115      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e07f      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	4b41      	ldr	r3, [pc, #260]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e073      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369e:	4b3d      	ldr	r3, [pc, #244]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e06b      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b39      	ldr	r3, [pc, #228]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4936      	ldr	r1, [pc, #216]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c0:	f7fe fdd0 	bl	8002264 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fe fdcc 	bl	8002264 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e053      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b2d      	ldr	r3, [pc, #180]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b27      	ldr	r3, [pc, #156]	@ (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d210      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b24      	ldr	r3, [pc, #144]	@ (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 0207 	bic.w	r2, r3, #7
 8003706:	4922      	ldr	r1, [pc, #136]	@ (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e032      	b.n	8003786 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800372c:	4b19      	ldr	r3, [pc, #100]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4916      	ldr	r1, [pc, #88]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800374a:	4b12      	ldr	r3, [pc, #72]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	490e      	ldr	r1, [pc, #56]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800375e:	f000 f821 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8003762:	4602      	mov	r2, r0
 8003764:	4b0b      	ldr	r3, [pc, #44]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	490a      	ldr	r1, [pc, #40]	@ (8003798 <HAL_RCC_ClockConfig+0x1c8>)
 8003770:	5ccb      	ldrb	r3, [r1, r3]
 8003772:	fa22 f303 	lsr.w	r3, r2, r3
 8003776:	4a09      	ldr	r2, [pc, #36]	@ (800379c <HAL_RCC_ClockConfig+0x1cc>)
 8003778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800377a:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <HAL_RCC_ClockConfig+0x1d0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fd2e 	bl	80021e0 <HAL_InitTick>

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40022000 	.word	0x40022000
 8003794:	40021000 	.word	0x40021000
 8003798:	080059f4 	.word	0x080059f4
 800379c:	20000060 	.word	0x20000060
 80037a0:	20000228 	.word	0x20000228

080037a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	2300      	movs	r3, #0
 80037b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037be:	4b1e      	ldr	r3, [pc, #120]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x94>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d002      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x30>
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d003      	beq.n	80037da <HAL_RCC_GetSysClockFreq+0x36>
 80037d2:	e027      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037d4:	4b19      	ldr	r3, [pc, #100]	@ (800383c <HAL_RCC_GetSysClockFreq+0x98>)
 80037d6:	613b      	str	r3, [r7, #16]
      break;
 80037d8:	e027      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	0c9b      	lsrs	r3, r3, #18
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	4a17      	ldr	r2, [pc, #92]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037e4:	5cd3      	ldrb	r3, [r2, r3]
 80037e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d010      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037f2:	4b11      	ldr	r3, [pc, #68]	@ (8003838 <HAL_RCC_GetSysClockFreq+0x94>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	0c5b      	lsrs	r3, r3, #17
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	4a11      	ldr	r2, [pc, #68]	@ (8003844 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037fe:	5cd3      	ldrb	r3, [r2, r3]
 8003800:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a0d      	ldr	r2, [pc, #52]	@ (800383c <HAL_RCC_GetSysClockFreq+0x98>)
 8003806:	fb03 f202 	mul.w	r2, r3, r2
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e004      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a0c      	ldr	r2, [pc, #48]	@ (8003848 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	613b      	str	r3, [r7, #16]
      break;
 8003822:	e002      	b.n	800382a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4b05      	ldr	r3, [pc, #20]	@ (800383c <HAL_RCC_GetSysClockFreq+0x98>)
 8003826:	613b      	str	r3, [r7, #16]
      break;
 8003828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800382a:	693b      	ldr	r3, [r7, #16]
}
 800382c:	4618      	mov	r0, r3
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
 800383c:	007a1200 	.word	0x007a1200
 8003840:	08005a0c 	.word	0x08005a0c
 8003844:	08005a1c 	.word	0x08005a1c
 8003848:	003d0900 	.word	0x003d0900

0800384c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003850:	4b02      	ldr	r3, [pc, #8]	@ (800385c <HAL_RCC_GetHCLKFreq+0x10>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	20000060 	.word	0x20000060

08003860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003864:	f7ff fff2 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <HAL_RCC_GetPCLK2Freq+0x20>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	0adb      	lsrs	r3, r3, #11
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4903      	ldr	r1, [pc, #12]	@ (8003884 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800387c:	4618      	mov	r0, r3
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40021000 	.word	0x40021000
 8003884:	08005a04 	.word	0x08005a04

08003888 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003890:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <RCC_Delay+0x34>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a0a      	ldr	r2, [pc, #40]	@ (80038c0 <RCC_Delay+0x38>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0a5b      	lsrs	r3, r3, #9
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038a4:	bf00      	nop
  }
  while (Delay --);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1e5a      	subs	r2, r3, #1
 80038aa:	60fa      	str	r2, [r7, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f9      	bne.n	80038a4 <RCC_Delay+0x1c>
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	20000060 	.word	0x20000060
 80038c0:	10624dd3 	.word	0x10624dd3

080038c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d07d      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80038e0:	2300      	movs	r3, #0
 80038e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10d      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038fa:	61d3      	str	r3, [r2, #28]
 80038fc:	4b49      	ldr	r3, [pc, #292]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003908:	2301      	movs	r3, #1
 800390a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	4b46      	ldr	r3, [pc, #280]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d118      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003918:	4b43      	ldr	r3, [pc, #268]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a42      	ldr	r2, [pc, #264]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800391e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003922:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003924:	f7fe fc9e 	bl	8002264 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392a:	e008      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392c:	f7fe fc9a 	bl	8002264 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	@ 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e06d      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800394a:	4b36      	ldr	r3, [pc, #216]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003952:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d02e      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	429a      	cmp	r2, r3
 8003966:	d027      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003968:	4b2e      	ldr	r3, [pc, #184]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003970:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003972:	4b2e      	ldr	r3, [pc, #184]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003974:	2201      	movs	r2, #1
 8003976:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003978:	4b2c      	ldr	r3, [pc, #176]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800397e:	4a29      	ldr	r2, [pc, #164]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d014      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7fe fc69 	bl	8002264 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003994:	e00a      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003996:	f7fe fc65 	bl	8002264 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e036      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ee      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4917      	ldr	r1, [pc, #92]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d0:	4b14      	ldr	r3, [pc, #80]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	4a13      	ldr	r2, [pc, #76]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	490b      	ldr	r1, [pc, #44]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d008      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a06:	4b07      	ldr	r3, [pc, #28]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	4904      	ldr	r1, [pc, #16]	@ (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	42420440 	.word	0x42420440

08003a30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	f200 808a 	bhi.w	8003b6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d045      	beq.n	8003aec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d075      	beq.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003a66:	e082      	b.n	8003b6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003a68:	4b46      	ldr	r3, [pc, #280]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a6e:	4b45      	ldr	r3, [pc, #276]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d07b      	beq.n	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	0c9b      	lsrs	r3, r3, #18
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	4a41      	ldr	r2, [pc, #260]	@ (8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003a84:	5cd3      	ldrb	r3, [r2, r3]
 8003a86:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d015      	beq.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a92:	4b3c      	ldr	r3, [pc, #240]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	0c5b      	lsrs	r3, r3, #17
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003a9e:	5cd3      	ldrb	r3, [r2, r3]
 8003aa0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003aac:	4a38      	ldr	r2, [pc, #224]	@ (8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	fb02 f303 	mul.w	r3, r2, r3
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	e004      	b.n	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4a34      	ldr	r2, [pc, #208]	@ (8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ad4:	d102      	bne.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	61bb      	str	r3, [r7, #24]
      break;
 8003ada:	e04a      	b.n	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	61bb      	str	r3, [r7, #24]
      break;
 8003aea:	e042      	b.n	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003aec:	4b25      	ldr	r3, [pc, #148]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003afc:	d108      	bne.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003b08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e01f      	b.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b1a:	d109      	bne.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003b1c:	4b19      	ldr	r3, [pc, #100]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003b28:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	e00f      	b.n	8003b50 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b3a:	d11c      	bne.n	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003b3c:	4b11      	ldr	r3, [pc, #68]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d016      	beq.n	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003b48:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003b4c:	61bb      	str	r3, [r7, #24]
      break;
 8003b4e:	e012      	b.n	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003b50:	e011      	b.n	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003b52:	f7ff fe85 	bl	8003860 <HAL_RCC_GetPCLK2Freq>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4b0a      	ldr	r3, [pc, #40]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	0b9b      	lsrs	r3, r3, #14
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	3301      	adds	r3, #1
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	61bb      	str	r3, [r7, #24]
      break;
 8003b6c:	e004      	b.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e002      	b.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003b76:	bf00      	nop
    }
  }
  return (frequency);
 8003b78:	69bb      	ldr	r3, [r7, #24]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	08005a20 	.word	0x08005a20
 8003b8c:	08005a30 	.word	0x08005a30
 8003b90:	007a1200 	.word	0x007a1200
 8003b94:	003d0900 	.word	0x003d0900
 8003b98:	aaaaaaab 	.word	0xaaaaaaab

08003b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e041      	b.n	8003c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fd fb76 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f000 fa5c 	bl	8004098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d001      	beq.n	8003c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e03a      	b.n	8003cca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a18      	ldr	r2, [pc, #96]	@ (8003cd4 <HAL_TIM_Base_Start_IT+0x98>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00e      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x58>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c7e:	d009      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x58>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a14      	ldr	r2, [pc, #80]	@ (8003cd8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d004      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x58>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a13      	ldr	r2, [pc, #76]	@ (8003cdc <HAL_TIM_Base_Start_IT+0xa0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d111      	bne.n	8003cb8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b06      	cmp	r3, #6
 8003ca4:	d010      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb6:	e007      	b.n	8003cc8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800

08003ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d020      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01b      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0202 	mvn.w	r2, #2
 8003d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f998 	bl	8004060 <HAL_TIM_IC_CaptureCallback>
 8003d30:	e005      	b.n	8003d3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f98b 	bl	800404e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f99a 	bl	8004072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d020      	beq.n	8003d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d01b      	beq.n	8003d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0204 	mvn.w	r2, #4
 8003d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2202      	movs	r2, #2
 8003d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f972 	bl	8004060 <HAL_TIM_IC_CaptureCallback>
 8003d7c:	e005      	b.n	8003d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f965 	bl	800404e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f974 	bl	8004072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d020      	beq.n	8003ddc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01b      	beq.n	8003ddc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0208 	mvn.w	r2, #8
 8003dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2204      	movs	r2, #4
 8003db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f94c 	bl	8004060 <HAL_TIM_IC_CaptureCallback>
 8003dc8:	e005      	b.n	8003dd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f93f 	bl	800404e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f94e 	bl	8004072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d020      	beq.n	8003e28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d01b      	beq.n	8003e28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0210 	mvn.w	r2, #16
 8003df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f926 	bl	8004060 <HAL_TIM_IC_CaptureCallback>
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f919 	bl	800404e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f928 	bl	8004072 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00c      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0201 	mvn.w	r2, #1
 8003e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fc ff70 	bl	8000d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00c      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fa7f 	bl	800436e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f8f8 	bl	8004084 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00c      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0220 	mvn.w	r2, #32
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa52 	bl	800435c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_TIM_ConfigClockSource+0x1c>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e0b4      	b.n	8004046 <HAL_TIM_ConfigClockSource+0x186>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f14:	d03e      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0xd4>
 8003f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f1a:	f200 8087 	bhi.w	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f22:	f000 8086 	beq.w	8004032 <HAL_TIM_ConfigClockSource+0x172>
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2a:	d87f      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b70      	cmp	r3, #112	@ 0x70
 8003f2e:	d01a      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0xa6>
 8003f30:	2b70      	cmp	r3, #112	@ 0x70
 8003f32:	d87b      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b60      	cmp	r3, #96	@ 0x60
 8003f36:	d050      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x11a>
 8003f38:	2b60      	cmp	r3, #96	@ 0x60
 8003f3a:	d877      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b50      	cmp	r3, #80	@ 0x50
 8003f3e:	d03c      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0xfa>
 8003f40:	2b50      	cmp	r3, #80	@ 0x50
 8003f42:	d873      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f44:	2b40      	cmp	r3, #64	@ 0x40
 8003f46:	d058      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x13a>
 8003f48:	2b40      	cmp	r3, #64	@ 0x40
 8003f4a:	d86f      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f4c:	2b30      	cmp	r3, #48	@ 0x30
 8003f4e:	d064      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x15a>
 8003f50:	2b30      	cmp	r3, #48	@ 0x30
 8003f52:	d86b      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d060      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x15a>
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d867      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d05c      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x15a>
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	d05a      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x15a>
 8003f64:	e062      	b.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f76:	f000 f974 	bl	8004262 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	609a      	str	r2, [r3, #8]
      break;
 8003f92:	e04f      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fa4:	f000 f95d 	bl	8004262 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fb6:	609a      	str	r2, [r3, #8]
      break;
 8003fb8:	e03c      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f000 f8d4 	bl	8004174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2150      	movs	r1, #80	@ 0x50
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f92b 	bl	800422e <TIM_ITRx_SetConfig>
      break;
 8003fd8:	e02c      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f000 f8f2 	bl	80041d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2160      	movs	r1, #96	@ 0x60
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f91b 	bl	800422e <TIM_ITRx_SetConfig>
      break;
 8003ff8:	e01c      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004006:	461a      	mov	r2, r3
 8004008:	f000 f8b4 	bl	8004174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2140      	movs	r1, #64	@ 0x40
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f90b 	bl	800422e <TIM_ITRx_SetConfig>
      break;
 8004018:	e00c      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4619      	mov	r1, r3
 8004024:	4610      	mov	r0, r2
 8004026:	f000 f902 	bl	800422e <TIM_ITRx_SetConfig>
      break;
 800402a:	e003      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	e000      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004032:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004044:	7bfb      	ldrb	r3, [r7, #15]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr

08004084 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr
	...

08004098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004168 <TIM_Base_SetConfig+0xd0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00b      	beq.n	80040c8 <TIM_Base_SetConfig+0x30>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b6:	d007      	beq.n	80040c8 <TIM_Base_SetConfig+0x30>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a2c      	ldr	r2, [pc, #176]	@ (800416c <TIM_Base_SetConfig+0xd4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_Base_SetConfig+0x30>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004170 <TIM_Base_SetConfig+0xd8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d108      	bne.n	80040da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a22      	ldr	r2, [pc, #136]	@ (8004168 <TIM_Base_SetConfig+0xd0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00b      	beq.n	80040fa <TIM_Base_SetConfig+0x62>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e8:	d007      	beq.n	80040fa <TIM_Base_SetConfig+0x62>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a1f      	ldr	r2, [pc, #124]	@ (800416c <TIM_Base_SetConfig+0xd4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d003      	beq.n	80040fa <TIM_Base_SetConfig+0x62>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004170 <TIM_Base_SetConfig+0xd8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d108      	bne.n	800410c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a0d      	ldr	r2, [pc, #52]	@ (8004168 <TIM_Base_SetConfig+0xd0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d103      	bne.n	8004140 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f023 0201 	bic.w	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	611a      	str	r2, [r3, #16]
  }
}
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800

08004174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	f023 0201 	bic.w	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800419e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f023 030a 	bic.w	r3, r3, #10
 80041b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0210 	bic.w	r2, r3, #16
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	031b      	lsls	r3, r3, #12
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800420c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	621a      	str	r2, [r3, #32]
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr

0800422e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	f043 0307 	orr.w	r3, r3, #7
 8004250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr

08004262 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004262:	b480      	push	{r7}
 8004264:	b087      	sub	sp, #28
 8004266:	af00      	add	r7, sp, #0
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800427c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	021a      	lsls	r2, r3, #8
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	431a      	orrs	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4313      	orrs	r3, r2
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	609a      	str	r2, [r3, #8]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e046      	b.n	8004346 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a16      	ldr	r2, [pc, #88]	@ (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00e      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004304:	d009      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a12      	ldr	r2, [pc, #72]	@ (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a10      	ldr	r2, [pc, #64]	@ (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10c      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4313      	orrs	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800

0800435c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <srand>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4b10      	ldr	r3, [pc, #64]	@ (80043c4 <srand+0x44>)
 8004384:	4604      	mov	r4, r0
 8004386:	681d      	ldr	r5, [r3, #0]
 8004388:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800438a:	b9b3      	cbnz	r3, 80043ba <srand+0x3a>
 800438c:	2018      	movs	r0, #24
 800438e:	f000 fb79 	bl	8004a84 <malloc>
 8004392:	4602      	mov	r2, r0
 8004394:	6328      	str	r0, [r5, #48]	@ 0x30
 8004396:	b920      	cbnz	r0, 80043a2 <srand+0x22>
 8004398:	2146      	movs	r1, #70	@ 0x46
 800439a:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <srand+0x48>)
 800439c:	480b      	ldr	r0, [pc, #44]	@ (80043cc <srand+0x4c>)
 800439e:	f000 fb0b 	bl	80049b8 <__assert_func>
 80043a2:	490b      	ldr	r1, [pc, #44]	@ (80043d0 <srand+0x50>)
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <srand+0x54>)
 80043a6:	e9c0 1300 	strd	r1, r3, [r0]
 80043aa:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <srand+0x58>)
 80043ac:	2100      	movs	r1, #0
 80043ae:	6083      	str	r3, [r0, #8]
 80043b0:	230b      	movs	r3, #11
 80043b2:	8183      	strh	r3, [r0, #12]
 80043b4:	2001      	movs	r0, #1
 80043b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80043ba:	2200      	movs	r2, #0
 80043bc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80043be:	611c      	str	r4, [r3, #16]
 80043c0:	615a      	str	r2, [r3, #20]
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	2000023c 	.word	0x2000023c
 80043c8:	08005a32 	.word	0x08005a32
 80043cc:	08005a49 	.word	0x08005a49
 80043d0:	abcd330e 	.word	0xabcd330e
 80043d4:	e66d1234 	.word	0xe66d1234
 80043d8:	0005deec 	.word	0x0005deec

080043dc <rand>:
 80043dc:	4b16      	ldr	r3, [pc, #88]	@ (8004438 <rand+0x5c>)
 80043de:	b510      	push	{r4, lr}
 80043e0:	681c      	ldr	r4, [r3, #0]
 80043e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80043e4:	b9b3      	cbnz	r3, 8004414 <rand+0x38>
 80043e6:	2018      	movs	r0, #24
 80043e8:	f000 fb4c 	bl	8004a84 <malloc>
 80043ec:	4602      	mov	r2, r0
 80043ee:	6320      	str	r0, [r4, #48]	@ 0x30
 80043f0:	b920      	cbnz	r0, 80043fc <rand+0x20>
 80043f2:	2152      	movs	r1, #82	@ 0x52
 80043f4:	4b11      	ldr	r3, [pc, #68]	@ (800443c <rand+0x60>)
 80043f6:	4812      	ldr	r0, [pc, #72]	@ (8004440 <rand+0x64>)
 80043f8:	f000 fade 	bl	80049b8 <__assert_func>
 80043fc:	4911      	ldr	r1, [pc, #68]	@ (8004444 <rand+0x68>)
 80043fe:	4b12      	ldr	r3, [pc, #72]	@ (8004448 <rand+0x6c>)
 8004400:	e9c0 1300 	strd	r1, r3, [r0]
 8004404:	4b11      	ldr	r3, [pc, #68]	@ (800444c <rand+0x70>)
 8004406:	2100      	movs	r1, #0
 8004408:	6083      	str	r3, [r0, #8]
 800440a:	230b      	movs	r3, #11
 800440c:	8183      	strh	r3, [r0, #12]
 800440e:	2001      	movs	r0, #1
 8004410:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004414:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004416:	480e      	ldr	r0, [pc, #56]	@ (8004450 <rand+0x74>)
 8004418:	690b      	ldr	r3, [r1, #16]
 800441a:	694c      	ldr	r4, [r1, #20]
 800441c:	4358      	muls	r0, r3
 800441e:	4a0d      	ldr	r2, [pc, #52]	@ (8004454 <rand+0x78>)
 8004420:	fb02 0004 	mla	r0, r2, r4, r0
 8004424:	fba3 3202 	umull	r3, r2, r3, r2
 8004428:	3301      	adds	r3, #1
 800442a:	eb40 0002 	adc.w	r0, r0, r2
 800442e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004432:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004436:	bd10      	pop	{r4, pc}
 8004438:	2000023c 	.word	0x2000023c
 800443c:	08005a32 	.word	0x08005a32
 8004440:	08005a49 	.word	0x08005a49
 8004444:	abcd330e 	.word	0xabcd330e
 8004448:	e66d1234 	.word	0xe66d1234
 800444c:	0005deec 	.word	0x0005deec
 8004450:	5851f42d 	.word	0x5851f42d
 8004454:	4c957f2d 	.word	0x4c957f2d

08004458 <std>:
 8004458:	2300      	movs	r3, #0
 800445a:	b510      	push	{r4, lr}
 800445c:	4604      	mov	r4, r0
 800445e:	e9c0 3300 	strd	r3, r3, [r0]
 8004462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004466:	6083      	str	r3, [r0, #8]
 8004468:	8181      	strh	r1, [r0, #12]
 800446a:	6643      	str	r3, [r0, #100]	@ 0x64
 800446c:	81c2      	strh	r2, [r0, #14]
 800446e:	6183      	str	r3, [r0, #24]
 8004470:	4619      	mov	r1, r3
 8004472:	2208      	movs	r2, #8
 8004474:	305c      	adds	r0, #92	@ 0x5c
 8004476:	f000 fa23 	bl	80048c0 <memset>
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <std+0x58>)
 800447c:	6224      	str	r4, [r4, #32]
 800447e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004480:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <std+0x5c>)
 8004482:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004484:	4b0c      	ldr	r3, [pc, #48]	@ (80044b8 <std+0x60>)
 8004486:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <std+0x64>)
 800448a:	6323      	str	r3, [r4, #48]	@ 0x30
 800448c:	4b0c      	ldr	r3, [pc, #48]	@ (80044c0 <std+0x68>)
 800448e:	429c      	cmp	r4, r3
 8004490:	d006      	beq.n	80044a0 <std+0x48>
 8004492:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004496:	4294      	cmp	r4, r2
 8004498:	d002      	beq.n	80044a0 <std+0x48>
 800449a:	33d0      	adds	r3, #208	@ 0xd0
 800449c:	429c      	cmp	r4, r3
 800449e:	d105      	bne.n	80044ac <std+0x54>
 80044a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80044a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044a8:	f000 ba82 	b.w	80049b0 <__retarget_lock_init_recursive>
 80044ac:	bd10      	pop	{r4, pc}
 80044ae:	bf00      	nop
 80044b0:	08004711 	.word	0x08004711
 80044b4:	08004733 	.word	0x08004733
 80044b8:	0800476b 	.word	0x0800476b
 80044bc:	0800478f 	.word	0x0800478f
 80044c0:	2000051c 	.word	0x2000051c

080044c4 <stdio_exit_handler>:
 80044c4:	4a02      	ldr	r2, [pc, #8]	@ (80044d0 <stdio_exit_handler+0xc>)
 80044c6:	4903      	ldr	r1, [pc, #12]	@ (80044d4 <stdio_exit_handler+0x10>)
 80044c8:	4803      	ldr	r0, [pc, #12]	@ (80044d8 <stdio_exit_handler+0x14>)
 80044ca:	f000 b869 	b.w	80045a0 <_fwalk_sglue>
 80044ce:	bf00      	nop
 80044d0:	20000230 	.word	0x20000230
 80044d4:	08005541 	.word	0x08005541
 80044d8:	20000240 	.word	0x20000240

080044dc <cleanup_stdio>:
 80044dc:	6841      	ldr	r1, [r0, #4]
 80044de:	4b0c      	ldr	r3, [pc, #48]	@ (8004510 <cleanup_stdio+0x34>)
 80044e0:	b510      	push	{r4, lr}
 80044e2:	4299      	cmp	r1, r3
 80044e4:	4604      	mov	r4, r0
 80044e6:	d001      	beq.n	80044ec <cleanup_stdio+0x10>
 80044e8:	f001 f82a 	bl	8005540 <_fflush_r>
 80044ec:	68a1      	ldr	r1, [r4, #8]
 80044ee:	4b09      	ldr	r3, [pc, #36]	@ (8004514 <cleanup_stdio+0x38>)
 80044f0:	4299      	cmp	r1, r3
 80044f2:	d002      	beq.n	80044fa <cleanup_stdio+0x1e>
 80044f4:	4620      	mov	r0, r4
 80044f6:	f001 f823 	bl	8005540 <_fflush_r>
 80044fa:	68e1      	ldr	r1, [r4, #12]
 80044fc:	4b06      	ldr	r3, [pc, #24]	@ (8004518 <cleanup_stdio+0x3c>)
 80044fe:	4299      	cmp	r1, r3
 8004500:	d004      	beq.n	800450c <cleanup_stdio+0x30>
 8004502:	4620      	mov	r0, r4
 8004504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004508:	f001 b81a 	b.w	8005540 <_fflush_r>
 800450c:	bd10      	pop	{r4, pc}
 800450e:	bf00      	nop
 8004510:	2000051c 	.word	0x2000051c
 8004514:	20000584 	.word	0x20000584
 8004518:	200005ec 	.word	0x200005ec

0800451c <global_stdio_init.part.0>:
 800451c:	b510      	push	{r4, lr}
 800451e:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <global_stdio_init.part.0+0x30>)
 8004520:	4c0b      	ldr	r4, [pc, #44]	@ (8004550 <global_stdio_init.part.0+0x34>)
 8004522:	4a0c      	ldr	r2, [pc, #48]	@ (8004554 <global_stdio_init.part.0+0x38>)
 8004524:	4620      	mov	r0, r4
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	2104      	movs	r1, #4
 800452a:	2200      	movs	r2, #0
 800452c:	f7ff ff94 	bl	8004458 <std>
 8004530:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004534:	2201      	movs	r2, #1
 8004536:	2109      	movs	r1, #9
 8004538:	f7ff ff8e 	bl	8004458 <std>
 800453c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004540:	2202      	movs	r2, #2
 8004542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004546:	2112      	movs	r1, #18
 8004548:	f7ff bf86 	b.w	8004458 <std>
 800454c:	20000654 	.word	0x20000654
 8004550:	2000051c 	.word	0x2000051c
 8004554:	080044c5 	.word	0x080044c5

08004558 <__sfp_lock_acquire>:
 8004558:	4801      	ldr	r0, [pc, #4]	@ (8004560 <__sfp_lock_acquire+0x8>)
 800455a:	f000 ba2a 	b.w	80049b2 <__retarget_lock_acquire_recursive>
 800455e:	bf00      	nop
 8004560:	2000065d 	.word	0x2000065d

08004564 <__sfp_lock_release>:
 8004564:	4801      	ldr	r0, [pc, #4]	@ (800456c <__sfp_lock_release+0x8>)
 8004566:	f000 ba25 	b.w	80049b4 <__retarget_lock_release_recursive>
 800456a:	bf00      	nop
 800456c:	2000065d 	.word	0x2000065d

08004570 <__sinit>:
 8004570:	b510      	push	{r4, lr}
 8004572:	4604      	mov	r4, r0
 8004574:	f7ff fff0 	bl	8004558 <__sfp_lock_acquire>
 8004578:	6a23      	ldr	r3, [r4, #32]
 800457a:	b11b      	cbz	r3, 8004584 <__sinit+0x14>
 800457c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004580:	f7ff bff0 	b.w	8004564 <__sfp_lock_release>
 8004584:	4b04      	ldr	r3, [pc, #16]	@ (8004598 <__sinit+0x28>)
 8004586:	6223      	str	r3, [r4, #32]
 8004588:	4b04      	ldr	r3, [pc, #16]	@ (800459c <__sinit+0x2c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f5      	bne.n	800457c <__sinit+0xc>
 8004590:	f7ff ffc4 	bl	800451c <global_stdio_init.part.0>
 8004594:	e7f2      	b.n	800457c <__sinit+0xc>
 8004596:	bf00      	nop
 8004598:	080044dd 	.word	0x080044dd
 800459c:	20000654 	.word	0x20000654

080045a0 <_fwalk_sglue>:
 80045a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045a4:	4607      	mov	r7, r0
 80045a6:	4688      	mov	r8, r1
 80045a8:	4614      	mov	r4, r2
 80045aa:	2600      	movs	r6, #0
 80045ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045b0:	f1b9 0901 	subs.w	r9, r9, #1
 80045b4:	d505      	bpl.n	80045c2 <_fwalk_sglue+0x22>
 80045b6:	6824      	ldr	r4, [r4, #0]
 80045b8:	2c00      	cmp	r4, #0
 80045ba:	d1f7      	bne.n	80045ac <_fwalk_sglue+0xc>
 80045bc:	4630      	mov	r0, r6
 80045be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045c2:	89ab      	ldrh	r3, [r5, #12]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d907      	bls.n	80045d8 <_fwalk_sglue+0x38>
 80045c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045cc:	3301      	adds	r3, #1
 80045ce:	d003      	beq.n	80045d8 <_fwalk_sglue+0x38>
 80045d0:	4629      	mov	r1, r5
 80045d2:	4638      	mov	r0, r7
 80045d4:	47c0      	blx	r8
 80045d6:	4306      	orrs	r6, r0
 80045d8:	3568      	adds	r5, #104	@ 0x68
 80045da:	e7e9      	b.n	80045b0 <_fwalk_sglue+0x10>

080045dc <iprintf>:
 80045dc:	b40f      	push	{r0, r1, r2, r3}
 80045de:	b507      	push	{r0, r1, r2, lr}
 80045e0:	4906      	ldr	r1, [pc, #24]	@ (80045fc <iprintf+0x20>)
 80045e2:	ab04      	add	r3, sp, #16
 80045e4:	6808      	ldr	r0, [r1, #0]
 80045e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80045ea:	6881      	ldr	r1, [r0, #8]
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	f000 fc7f 	bl	8004ef0 <_vfiprintf_r>
 80045f2:	b003      	add	sp, #12
 80045f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045f8:	b004      	add	sp, #16
 80045fa:	4770      	bx	lr
 80045fc:	2000023c 	.word	0x2000023c

08004600 <putchar>:
 8004600:	4b02      	ldr	r3, [pc, #8]	@ (800460c <putchar+0xc>)
 8004602:	4601      	mov	r1, r0
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	6882      	ldr	r2, [r0, #8]
 8004608:	f001 b835 	b.w	8005676 <_putc_r>
 800460c:	2000023c 	.word	0x2000023c

08004610 <_puts_r>:
 8004610:	6a03      	ldr	r3, [r0, #32]
 8004612:	b570      	push	{r4, r5, r6, lr}
 8004614:	4605      	mov	r5, r0
 8004616:	460e      	mov	r6, r1
 8004618:	6884      	ldr	r4, [r0, #8]
 800461a:	b90b      	cbnz	r3, 8004620 <_puts_r+0x10>
 800461c:	f7ff ffa8 	bl	8004570 <__sinit>
 8004620:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004622:	07db      	lsls	r3, r3, #31
 8004624:	d405      	bmi.n	8004632 <_puts_r+0x22>
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	0598      	lsls	r0, r3, #22
 800462a:	d402      	bmi.n	8004632 <_puts_r+0x22>
 800462c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800462e:	f000 f9c0 	bl	80049b2 <__retarget_lock_acquire_recursive>
 8004632:	89a3      	ldrh	r3, [r4, #12]
 8004634:	0719      	lsls	r1, r3, #28
 8004636:	d502      	bpl.n	800463e <_puts_r+0x2e>
 8004638:	6923      	ldr	r3, [r4, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d135      	bne.n	80046aa <_puts_r+0x9a>
 800463e:	4621      	mov	r1, r4
 8004640:	4628      	mov	r0, r5
 8004642:	f000 f8e7 	bl	8004814 <__swsetup_r>
 8004646:	b380      	cbz	r0, 80046aa <_puts_r+0x9a>
 8004648:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800464c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800464e:	07da      	lsls	r2, r3, #31
 8004650:	d405      	bmi.n	800465e <_puts_r+0x4e>
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	059b      	lsls	r3, r3, #22
 8004656:	d402      	bmi.n	800465e <_puts_r+0x4e>
 8004658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800465a:	f000 f9ab 	bl	80049b4 <__retarget_lock_release_recursive>
 800465e:	4628      	mov	r0, r5
 8004660:	bd70      	pop	{r4, r5, r6, pc}
 8004662:	2b00      	cmp	r3, #0
 8004664:	da04      	bge.n	8004670 <_puts_r+0x60>
 8004666:	69a2      	ldr	r2, [r4, #24]
 8004668:	429a      	cmp	r2, r3
 800466a:	dc17      	bgt.n	800469c <_puts_r+0x8c>
 800466c:	290a      	cmp	r1, #10
 800466e:	d015      	beq.n	800469c <_puts_r+0x8c>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	6022      	str	r2, [r4, #0]
 8004676:	7019      	strb	r1, [r3, #0]
 8004678:	68a3      	ldr	r3, [r4, #8]
 800467a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800467e:	3b01      	subs	r3, #1
 8004680:	60a3      	str	r3, [r4, #8]
 8004682:	2900      	cmp	r1, #0
 8004684:	d1ed      	bne.n	8004662 <_puts_r+0x52>
 8004686:	2b00      	cmp	r3, #0
 8004688:	da11      	bge.n	80046ae <_puts_r+0x9e>
 800468a:	4622      	mov	r2, r4
 800468c:	210a      	movs	r1, #10
 800468e:	4628      	mov	r0, r5
 8004690:	f000 f881 	bl	8004796 <__swbuf_r>
 8004694:	3001      	adds	r0, #1
 8004696:	d0d7      	beq.n	8004648 <_puts_r+0x38>
 8004698:	250a      	movs	r5, #10
 800469a:	e7d7      	b.n	800464c <_puts_r+0x3c>
 800469c:	4622      	mov	r2, r4
 800469e:	4628      	mov	r0, r5
 80046a0:	f000 f879 	bl	8004796 <__swbuf_r>
 80046a4:	3001      	adds	r0, #1
 80046a6:	d1e7      	bne.n	8004678 <_puts_r+0x68>
 80046a8:	e7ce      	b.n	8004648 <_puts_r+0x38>
 80046aa:	3e01      	subs	r6, #1
 80046ac:	e7e4      	b.n	8004678 <_puts_r+0x68>
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	6022      	str	r2, [r4, #0]
 80046b4:	220a      	movs	r2, #10
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e7ee      	b.n	8004698 <_puts_r+0x88>
	...

080046bc <puts>:
 80046bc:	4b02      	ldr	r3, [pc, #8]	@ (80046c8 <puts+0xc>)
 80046be:	4601      	mov	r1, r0
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	f7ff bfa5 	b.w	8004610 <_puts_r>
 80046c6:	bf00      	nop
 80046c8:	2000023c 	.word	0x2000023c

080046cc <siprintf>:
 80046cc:	b40e      	push	{r1, r2, r3}
 80046ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046d2:	b510      	push	{r4, lr}
 80046d4:	2400      	movs	r4, #0
 80046d6:	b09d      	sub	sp, #116	@ 0x74
 80046d8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80046da:	9002      	str	r0, [sp, #8]
 80046dc:	9006      	str	r0, [sp, #24]
 80046de:	9107      	str	r1, [sp, #28]
 80046e0:	9104      	str	r1, [sp, #16]
 80046e2:	4809      	ldr	r0, [pc, #36]	@ (8004708 <siprintf+0x3c>)
 80046e4:	4909      	ldr	r1, [pc, #36]	@ (800470c <siprintf+0x40>)
 80046e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80046ea:	9105      	str	r1, [sp, #20]
 80046ec:	6800      	ldr	r0, [r0, #0]
 80046ee:	a902      	add	r1, sp, #8
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80046f4:	f000 fad8 	bl	8004ca8 <_svfiprintf_r>
 80046f8:	9b02      	ldr	r3, [sp, #8]
 80046fa:	701c      	strb	r4, [r3, #0]
 80046fc:	b01d      	add	sp, #116	@ 0x74
 80046fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004702:	b003      	add	sp, #12
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	2000023c 	.word	0x2000023c
 800470c:	ffff0208 	.word	0xffff0208

08004710 <__sread>:
 8004710:	b510      	push	{r4, lr}
 8004712:	460c      	mov	r4, r1
 8004714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004718:	f000 f8fc 	bl	8004914 <_read_r>
 800471c:	2800      	cmp	r0, #0
 800471e:	bfab      	itete	ge
 8004720:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004722:	89a3      	ldrhlt	r3, [r4, #12]
 8004724:	181b      	addge	r3, r3, r0
 8004726:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800472a:	bfac      	ite	ge
 800472c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800472e:	81a3      	strhlt	r3, [r4, #12]
 8004730:	bd10      	pop	{r4, pc}

08004732 <__swrite>:
 8004732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004736:	461f      	mov	r7, r3
 8004738:	898b      	ldrh	r3, [r1, #12]
 800473a:	4605      	mov	r5, r0
 800473c:	05db      	lsls	r3, r3, #23
 800473e:	460c      	mov	r4, r1
 8004740:	4616      	mov	r6, r2
 8004742:	d505      	bpl.n	8004750 <__swrite+0x1e>
 8004744:	2302      	movs	r3, #2
 8004746:	2200      	movs	r2, #0
 8004748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800474c:	f000 f8d0 	bl	80048f0 <_lseek_r>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	4632      	mov	r2, r6
 8004754:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004758:	81a3      	strh	r3, [r4, #12]
 800475a:	4628      	mov	r0, r5
 800475c:	463b      	mov	r3, r7
 800475e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004766:	f000 b8e7 	b.w	8004938 <_write_r>

0800476a <__sseek>:
 800476a:	b510      	push	{r4, lr}
 800476c:	460c      	mov	r4, r1
 800476e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004772:	f000 f8bd 	bl	80048f0 <_lseek_r>
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	89a3      	ldrh	r3, [r4, #12]
 800477a:	bf15      	itete	ne
 800477c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800477e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004782:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004786:	81a3      	strheq	r3, [r4, #12]
 8004788:	bf18      	it	ne
 800478a:	81a3      	strhne	r3, [r4, #12]
 800478c:	bd10      	pop	{r4, pc}

0800478e <__sclose>:
 800478e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004792:	f000 b89d 	b.w	80048d0 <_close_r>

08004796 <__swbuf_r>:
 8004796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004798:	460e      	mov	r6, r1
 800479a:	4614      	mov	r4, r2
 800479c:	4605      	mov	r5, r0
 800479e:	b118      	cbz	r0, 80047a8 <__swbuf_r+0x12>
 80047a0:	6a03      	ldr	r3, [r0, #32]
 80047a2:	b90b      	cbnz	r3, 80047a8 <__swbuf_r+0x12>
 80047a4:	f7ff fee4 	bl	8004570 <__sinit>
 80047a8:	69a3      	ldr	r3, [r4, #24]
 80047aa:	60a3      	str	r3, [r4, #8]
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	071a      	lsls	r2, r3, #28
 80047b0:	d501      	bpl.n	80047b6 <__swbuf_r+0x20>
 80047b2:	6923      	ldr	r3, [r4, #16]
 80047b4:	b943      	cbnz	r3, 80047c8 <__swbuf_r+0x32>
 80047b6:	4621      	mov	r1, r4
 80047b8:	4628      	mov	r0, r5
 80047ba:	f000 f82b 	bl	8004814 <__swsetup_r>
 80047be:	b118      	cbz	r0, 80047c8 <__swbuf_r+0x32>
 80047c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80047c4:	4638      	mov	r0, r7
 80047c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	6922      	ldr	r2, [r4, #16]
 80047cc:	b2f6      	uxtb	r6, r6
 80047ce:	1a98      	subs	r0, r3, r2
 80047d0:	6963      	ldr	r3, [r4, #20]
 80047d2:	4637      	mov	r7, r6
 80047d4:	4283      	cmp	r3, r0
 80047d6:	dc05      	bgt.n	80047e4 <__swbuf_r+0x4e>
 80047d8:	4621      	mov	r1, r4
 80047da:	4628      	mov	r0, r5
 80047dc:	f000 feb0 	bl	8005540 <_fflush_r>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d1ed      	bne.n	80047c0 <__swbuf_r+0x2a>
 80047e4:	68a3      	ldr	r3, [r4, #8]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	60a3      	str	r3, [r4, #8]
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	6022      	str	r2, [r4, #0]
 80047f0:	701e      	strb	r6, [r3, #0]
 80047f2:	6962      	ldr	r2, [r4, #20]
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d004      	beq.n	8004804 <__swbuf_r+0x6e>
 80047fa:	89a3      	ldrh	r3, [r4, #12]
 80047fc:	07db      	lsls	r3, r3, #31
 80047fe:	d5e1      	bpl.n	80047c4 <__swbuf_r+0x2e>
 8004800:	2e0a      	cmp	r6, #10
 8004802:	d1df      	bne.n	80047c4 <__swbuf_r+0x2e>
 8004804:	4621      	mov	r1, r4
 8004806:	4628      	mov	r0, r5
 8004808:	f000 fe9a 	bl	8005540 <_fflush_r>
 800480c:	2800      	cmp	r0, #0
 800480e:	d0d9      	beq.n	80047c4 <__swbuf_r+0x2e>
 8004810:	e7d6      	b.n	80047c0 <__swbuf_r+0x2a>
	...

08004814 <__swsetup_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4b29      	ldr	r3, [pc, #164]	@ (80048bc <__swsetup_r+0xa8>)
 8004818:	4605      	mov	r5, r0
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	460c      	mov	r4, r1
 800481e:	b118      	cbz	r0, 8004828 <__swsetup_r+0x14>
 8004820:	6a03      	ldr	r3, [r0, #32]
 8004822:	b90b      	cbnz	r3, 8004828 <__swsetup_r+0x14>
 8004824:	f7ff fea4 	bl	8004570 <__sinit>
 8004828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800482c:	0719      	lsls	r1, r3, #28
 800482e:	d422      	bmi.n	8004876 <__swsetup_r+0x62>
 8004830:	06da      	lsls	r2, r3, #27
 8004832:	d407      	bmi.n	8004844 <__swsetup_r+0x30>
 8004834:	2209      	movs	r2, #9
 8004836:	602a      	str	r2, [r5, #0]
 8004838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800483c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004840:	81a3      	strh	r3, [r4, #12]
 8004842:	e033      	b.n	80048ac <__swsetup_r+0x98>
 8004844:	0758      	lsls	r0, r3, #29
 8004846:	d512      	bpl.n	800486e <__swsetup_r+0x5a>
 8004848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800484a:	b141      	cbz	r1, 800485e <__swsetup_r+0x4a>
 800484c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004850:	4299      	cmp	r1, r3
 8004852:	d002      	beq.n	800485a <__swsetup_r+0x46>
 8004854:	4628      	mov	r0, r5
 8004856:	f000 f8cd 	bl	80049f4 <_free_r>
 800485a:	2300      	movs	r3, #0
 800485c:	6363      	str	r3, [r4, #52]	@ 0x34
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	2300      	movs	r3, #0
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	f043 0308 	orr.w	r3, r3, #8
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	b94b      	cbnz	r3, 800488e <__swsetup_r+0x7a>
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004884:	d003      	beq.n	800488e <__swsetup_r+0x7a>
 8004886:	4621      	mov	r1, r4
 8004888:	4628      	mov	r0, r5
 800488a:	f000 feb8 	bl	80055fe <__smakebuf_r>
 800488e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004892:	f013 0201 	ands.w	r2, r3, #1
 8004896:	d00a      	beq.n	80048ae <__swsetup_r+0x9a>
 8004898:	2200      	movs	r2, #0
 800489a:	60a2      	str	r2, [r4, #8]
 800489c:	6962      	ldr	r2, [r4, #20]
 800489e:	4252      	negs	r2, r2
 80048a0:	61a2      	str	r2, [r4, #24]
 80048a2:	6922      	ldr	r2, [r4, #16]
 80048a4:	b942      	cbnz	r2, 80048b8 <__swsetup_r+0xa4>
 80048a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80048aa:	d1c5      	bne.n	8004838 <__swsetup_r+0x24>
 80048ac:	bd38      	pop	{r3, r4, r5, pc}
 80048ae:	0799      	lsls	r1, r3, #30
 80048b0:	bf58      	it	pl
 80048b2:	6962      	ldrpl	r2, [r4, #20]
 80048b4:	60a2      	str	r2, [r4, #8]
 80048b6:	e7f4      	b.n	80048a2 <__swsetup_r+0x8e>
 80048b8:	2000      	movs	r0, #0
 80048ba:	e7f7      	b.n	80048ac <__swsetup_r+0x98>
 80048bc:	2000023c 	.word	0x2000023c

080048c0 <memset>:
 80048c0:	4603      	mov	r3, r0
 80048c2:	4402      	add	r2, r0
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d100      	bne.n	80048ca <memset+0xa>
 80048c8:	4770      	bx	lr
 80048ca:	f803 1b01 	strb.w	r1, [r3], #1
 80048ce:	e7f9      	b.n	80048c4 <memset+0x4>

080048d0 <_close_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	2300      	movs	r3, #0
 80048d4:	4d05      	ldr	r5, [pc, #20]	@ (80048ec <_close_r+0x1c>)
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	602b      	str	r3, [r5, #0]
 80048dc:	f7fc fd9f 	bl	800141e <_close>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_close_r+0x1a>
 80048e4:	682b      	ldr	r3, [r5, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_close_r+0x1a>
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	20000658 	.word	0x20000658

080048f0 <_lseek_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4604      	mov	r4, r0
 80048f4:	4608      	mov	r0, r1
 80048f6:	4611      	mov	r1, r2
 80048f8:	2200      	movs	r2, #0
 80048fa:	4d05      	ldr	r5, [pc, #20]	@ (8004910 <_lseek_r+0x20>)
 80048fc:	602a      	str	r2, [r5, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	f7fc fdb1 	bl	8001466 <_lseek>
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	d102      	bne.n	800490e <_lseek_r+0x1e>
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	b103      	cbz	r3, 800490e <_lseek_r+0x1e>
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	bd38      	pop	{r3, r4, r5, pc}
 8004910:	20000658 	.word	0x20000658

08004914 <_read_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4604      	mov	r4, r0
 8004918:	4608      	mov	r0, r1
 800491a:	4611      	mov	r1, r2
 800491c:	2200      	movs	r2, #0
 800491e:	4d05      	ldr	r5, [pc, #20]	@ (8004934 <_read_r+0x20>)
 8004920:	602a      	str	r2, [r5, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f7fc fd42 	bl	80013ac <_read>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_read_r+0x1e>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_read_r+0x1e>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	20000658 	.word	0x20000658

08004938 <_write_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4604      	mov	r4, r0
 800493c:	4608      	mov	r0, r1
 800493e:	4611      	mov	r1, r2
 8004940:	2200      	movs	r2, #0
 8004942:	4d05      	ldr	r5, [pc, #20]	@ (8004958 <_write_r+0x20>)
 8004944:	602a      	str	r2, [r5, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f7fc fd4d 	bl	80013e6 <_write>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d102      	bne.n	8004956 <_write_r+0x1e>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	b103      	cbz	r3, 8004956 <_write_r+0x1e>
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	20000658 	.word	0x20000658

0800495c <__errno>:
 800495c:	4b01      	ldr	r3, [pc, #4]	@ (8004964 <__errno+0x8>)
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	2000023c 	.word	0x2000023c

08004968 <__libc_init_array>:
 8004968:	b570      	push	{r4, r5, r6, lr}
 800496a:	2600      	movs	r6, #0
 800496c:	4d0c      	ldr	r5, [pc, #48]	@ (80049a0 <__libc_init_array+0x38>)
 800496e:	4c0d      	ldr	r4, [pc, #52]	@ (80049a4 <__libc_init_array+0x3c>)
 8004970:	1b64      	subs	r4, r4, r5
 8004972:	10a4      	asrs	r4, r4, #2
 8004974:	42a6      	cmp	r6, r4
 8004976:	d109      	bne.n	800498c <__libc_init_array+0x24>
 8004978:	f000 ff9c 	bl	80058b4 <_init>
 800497c:	2600      	movs	r6, #0
 800497e:	4d0a      	ldr	r5, [pc, #40]	@ (80049a8 <__libc_init_array+0x40>)
 8004980:	4c0a      	ldr	r4, [pc, #40]	@ (80049ac <__libc_init_array+0x44>)
 8004982:	1b64      	subs	r4, r4, r5
 8004984:	10a4      	asrs	r4, r4, #2
 8004986:	42a6      	cmp	r6, r4
 8004988:	d105      	bne.n	8004996 <__libc_init_array+0x2e>
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004990:	4798      	blx	r3
 8004992:	3601      	adds	r6, #1
 8004994:	e7ee      	b.n	8004974 <__libc_init_array+0xc>
 8004996:	f855 3b04 	ldr.w	r3, [r5], #4
 800499a:	4798      	blx	r3
 800499c:	3601      	adds	r6, #1
 800499e:	e7f2      	b.n	8004986 <__libc_init_array+0x1e>
 80049a0:	08005b10 	.word	0x08005b10
 80049a4:	08005b10 	.word	0x08005b10
 80049a8:	08005b10 	.word	0x08005b10
 80049ac:	08005b14 	.word	0x08005b14

080049b0 <__retarget_lock_init_recursive>:
 80049b0:	4770      	bx	lr

080049b2 <__retarget_lock_acquire_recursive>:
 80049b2:	4770      	bx	lr

080049b4 <__retarget_lock_release_recursive>:
 80049b4:	4770      	bx	lr
	...

080049b8 <__assert_func>:
 80049b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049ba:	4614      	mov	r4, r2
 80049bc:	461a      	mov	r2, r3
 80049be:	4b09      	ldr	r3, [pc, #36]	@ (80049e4 <__assert_func+0x2c>)
 80049c0:	4605      	mov	r5, r0
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68d8      	ldr	r0, [r3, #12]
 80049c6:	b14c      	cbz	r4, 80049dc <__assert_func+0x24>
 80049c8:	4b07      	ldr	r3, [pc, #28]	@ (80049e8 <__assert_func+0x30>)
 80049ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049ce:	9100      	str	r1, [sp, #0]
 80049d0:	462b      	mov	r3, r5
 80049d2:	4906      	ldr	r1, [pc, #24]	@ (80049ec <__assert_func+0x34>)
 80049d4:	f000 fddc 	bl	8005590 <fiprintf>
 80049d8:	f000 feea 	bl	80057b0 <abort>
 80049dc:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <__assert_func+0x38>)
 80049de:	461c      	mov	r4, r3
 80049e0:	e7f3      	b.n	80049ca <__assert_func+0x12>
 80049e2:	bf00      	nop
 80049e4:	2000023c 	.word	0x2000023c
 80049e8:	08005aa1 	.word	0x08005aa1
 80049ec:	08005aae 	.word	0x08005aae
 80049f0:	08005adc 	.word	0x08005adc

080049f4 <_free_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4605      	mov	r5, r0
 80049f8:	2900      	cmp	r1, #0
 80049fa:	d040      	beq.n	8004a7e <_free_r+0x8a>
 80049fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a00:	1f0c      	subs	r4, r1, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bfb8      	it	lt
 8004a06:	18e4      	addlt	r4, r4, r3
 8004a08:	f000 f8e6 	bl	8004bd8 <__malloc_lock>
 8004a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a80 <_free_r+0x8c>)
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	b933      	cbnz	r3, 8004a20 <_free_r+0x2c>
 8004a12:	6063      	str	r3, [r4, #4]
 8004a14:	6014      	str	r4, [r2, #0]
 8004a16:	4628      	mov	r0, r5
 8004a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a1c:	f000 b8e2 	b.w	8004be4 <__malloc_unlock>
 8004a20:	42a3      	cmp	r3, r4
 8004a22:	d908      	bls.n	8004a36 <_free_r+0x42>
 8004a24:	6820      	ldr	r0, [r4, #0]
 8004a26:	1821      	adds	r1, r4, r0
 8004a28:	428b      	cmp	r3, r1
 8004a2a:	bf01      	itttt	eq
 8004a2c:	6819      	ldreq	r1, [r3, #0]
 8004a2e:	685b      	ldreq	r3, [r3, #4]
 8004a30:	1809      	addeq	r1, r1, r0
 8004a32:	6021      	streq	r1, [r4, #0]
 8004a34:	e7ed      	b.n	8004a12 <_free_r+0x1e>
 8004a36:	461a      	mov	r2, r3
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	b10b      	cbz	r3, 8004a40 <_free_r+0x4c>
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	d9fa      	bls.n	8004a36 <_free_r+0x42>
 8004a40:	6811      	ldr	r1, [r2, #0]
 8004a42:	1850      	adds	r0, r2, r1
 8004a44:	42a0      	cmp	r0, r4
 8004a46:	d10b      	bne.n	8004a60 <_free_r+0x6c>
 8004a48:	6820      	ldr	r0, [r4, #0]
 8004a4a:	4401      	add	r1, r0
 8004a4c:	1850      	adds	r0, r2, r1
 8004a4e:	4283      	cmp	r3, r0
 8004a50:	6011      	str	r1, [r2, #0]
 8004a52:	d1e0      	bne.n	8004a16 <_free_r+0x22>
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	4408      	add	r0, r1
 8004a5a:	6010      	str	r0, [r2, #0]
 8004a5c:	6053      	str	r3, [r2, #4]
 8004a5e:	e7da      	b.n	8004a16 <_free_r+0x22>
 8004a60:	d902      	bls.n	8004a68 <_free_r+0x74>
 8004a62:	230c      	movs	r3, #12
 8004a64:	602b      	str	r3, [r5, #0]
 8004a66:	e7d6      	b.n	8004a16 <_free_r+0x22>
 8004a68:	6820      	ldr	r0, [r4, #0]
 8004a6a:	1821      	adds	r1, r4, r0
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	bf01      	itttt	eq
 8004a70:	6819      	ldreq	r1, [r3, #0]
 8004a72:	685b      	ldreq	r3, [r3, #4]
 8004a74:	1809      	addeq	r1, r1, r0
 8004a76:	6021      	streq	r1, [r4, #0]
 8004a78:	6063      	str	r3, [r4, #4]
 8004a7a:	6054      	str	r4, [r2, #4]
 8004a7c:	e7cb      	b.n	8004a16 <_free_r+0x22>
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	20000664 	.word	0x20000664

08004a84 <malloc>:
 8004a84:	4b02      	ldr	r3, [pc, #8]	@ (8004a90 <malloc+0xc>)
 8004a86:	4601      	mov	r1, r0
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	f000 b825 	b.w	8004ad8 <_malloc_r>
 8004a8e:	bf00      	nop
 8004a90:	2000023c 	.word	0x2000023c

08004a94 <sbrk_aligned>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	4e0f      	ldr	r6, [pc, #60]	@ (8004ad4 <sbrk_aligned+0x40>)
 8004a98:	460c      	mov	r4, r1
 8004a9a:	6831      	ldr	r1, [r6, #0]
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	b911      	cbnz	r1, 8004aa6 <sbrk_aligned+0x12>
 8004aa0:	f000 fe5a 	bl	8005758 <_sbrk_r>
 8004aa4:	6030      	str	r0, [r6, #0]
 8004aa6:	4621      	mov	r1, r4
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f000 fe55 	bl	8005758 <_sbrk_r>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	d103      	bne.n	8004aba <sbrk_aligned+0x26>
 8004ab2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	bd70      	pop	{r4, r5, r6, pc}
 8004aba:	1cc4      	adds	r4, r0, #3
 8004abc:	f024 0403 	bic.w	r4, r4, #3
 8004ac0:	42a0      	cmp	r0, r4
 8004ac2:	d0f8      	beq.n	8004ab6 <sbrk_aligned+0x22>
 8004ac4:	1a21      	subs	r1, r4, r0
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 fe46 	bl	8005758 <_sbrk_r>
 8004acc:	3001      	adds	r0, #1
 8004ace:	d1f2      	bne.n	8004ab6 <sbrk_aligned+0x22>
 8004ad0:	e7ef      	b.n	8004ab2 <sbrk_aligned+0x1e>
 8004ad2:	bf00      	nop
 8004ad4:	20000660 	.word	0x20000660

08004ad8 <_malloc_r>:
 8004ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004adc:	1ccd      	adds	r5, r1, #3
 8004ade:	f025 0503 	bic.w	r5, r5, #3
 8004ae2:	3508      	adds	r5, #8
 8004ae4:	2d0c      	cmp	r5, #12
 8004ae6:	bf38      	it	cc
 8004ae8:	250c      	movcc	r5, #12
 8004aea:	2d00      	cmp	r5, #0
 8004aec:	4606      	mov	r6, r0
 8004aee:	db01      	blt.n	8004af4 <_malloc_r+0x1c>
 8004af0:	42a9      	cmp	r1, r5
 8004af2:	d904      	bls.n	8004afe <_malloc_r+0x26>
 8004af4:	230c      	movs	r3, #12
 8004af6:	6033      	str	r3, [r6, #0]
 8004af8:	2000      	movs	r0, #0
 8004afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004afe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004bd4 <_malloc_r+0xfc>
 8004b02:	f000 f869 	bl	8004bd8 <__malloc_lock>
 8004b06:	f8d8 3000 	ldr.w	r3, [r8]
 8004b0a:	461c      	mov	r4, r3
 8004b0c:	bb44      	cbnz	r4, 8004b60 <_malloc_r+0x88>
 8004b0e:	4629      	mov	r1, r5
 8004b10:	4630      	mov	r0, r6
 8004b12:	f7ff ffbf 	bl	8004a94 <sbrk_aligned>
 8004b16:	1c43      	adds	r3, r0, #1
 8004b18:	4604      	mov	r4, r0
 8004b1a:	d158      	bne.n	8004bce <_malloc_r+0xf6>
 8004b1c:	f8d8 4000 	ldr.w	r4, [r8]
 8004b20:	4627      	mov	r7, r4
 8004b22:	2f00      	cmp	r7, #0
 8004b24:	d143      	bne.n	8004bae <_malloc_r+0xd6>
 8004b26:	2c00      	cmp	r4, #0
 8004b28:	d04b      	beq.n	8004bc2 <_malloc_r+0xea>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	4630      	mov	r0, r6
 8004b30:	eb04 0903 	add.w	r9, r4, r3
 8004b34:	f000 fe10 	bl	8005758 <_sbrk_r>
 8004b38:	4581      	cmp	r9, r0
 8004b3a:	d142      	bne.n	8004bc2 <_malloc_r+0xea>
 8004b3c:	6821      	ldr	r1, [r4, #0]
 8004b3e:	4630      	mov	r0, r6
 8004b40:	1a6d      	subs	r5, r5, r1
 8004b42:	4629      	mov	r1, r5
 8004b44:	f7ff ffa6 	bl	8004a94 <sbrk_aligned>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d03a      	beq.n	8004bc2 <_malloc_r+0xea>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	442b      	add	r3, r5
 8004b50:	6023      	str	r3, [r4, #0]
 8004b52:	f8d8 3000 	ldr.w	r3, [r8]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	bb62      	cbnz	r2, 8004bb4 <_malloc_r+0xdc>
 8004b5a:	f8c8 7000 	str.w	r7, [r8]
 8004b5e:	e00f      	b.n	8004b80 <_malloc_r+0xa8>
 8004b60:	6822      	ldr	r2, [r4, #0]
 8004b62:	1b52      	subs	r2, r2, r5
 8004b64:	d420      	bmi.n	8004ba8 <_malloc_r+0xd0>
 8004b66:	2a0b      	cmp	r2, #11
 8004b68:	d917      	bls.n	8004b9a <_malloc_r+0xc2>
 8004b6a:	1961      	adds	r1, r4, r5
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	6025      	str	r5, [r4, #0]
 8004b70:	bf18      	it	ne
 8004b72:	6059      	strne	r1, [r3, #4]
 8004b74:	6863      	ldr	r3, [r4, #4]
 8004b76:	bf08      	it	eq
 8004b78:	f8c8 1000 	streq.w	r1, [r8]
 8004b7c:	5162      	str	r2, [r4, r5]
 8004b7e:	604b      	str	r3, [r1, #4]
 8004b80:	4630      	mov	r0, r6
 8004b82:	f000 f82f 	bl	8004be4 <__malloc_unlock>
 8004b86:	f104 000b 	add.w	r0, r4, #11
 8004b8a:	1d23      	adds	r3, r4, #4
 8004b8c:	f020 0007 	bic.w	r0, r0, #7
 8004b90:	1ac2      	subs	r2, r0, r3
 8004b92:	bf1c      	itt	ne
 8004b94:	1a1b      	subne	r3, r3, r0
 8004b96:	50a3      	strne	r3, [r4, r2]
 8004b98:	e7af      	b.n	8004afa <_malloc_r+0x22>
 8004b9a:	6862      	ldr	r2, [r4, #4]
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	bf0c      	ite	eq
 8004ba0:	f8c8 2000 	streq.w	r2, [r8]
 8004ba4:	605a      	strne	r2, [r3, #4]
 8004ba6:	e7eb      	b.n	8004b80 <_malloc_r+0xa8>
 8004ba8:	4623      	mov	r3, r4
 8004baa:	6864      	ldr	r4, [r4, #4]
 8004bac:	e7ae      	b.n	8004b0c <_malloc_r+0x34>
 8004bae:	463c      	mov	r4, r7
 8004bb0:	687f      	ldr	r7, [r7, #4]
 8004bb2:	e7b6      	b.n	8004b22 <_malloc_r+0x4a>
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	42a3      	cmp	r3, r4
 8004bba:	d1fb      	bne.n	8004bb4 <_malloc_r+0xdc>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	6053      	str	r3, [r2, #4]
 8004bc0:	e7de      	b.n	8004b80 <_malloc_r+0xa8>
 8004bc2:	230c      	movs	r3, #12
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	6033      	str	r3, [r6, #0]
 8004bc8:	f000 f80c 	bl	8004be4 <__malloc_unlock>
 8004bcc:	e794      	b.n	8004af8 <_malloc_r+0x20>
 8004bce:	6005      	str	r5, [r0, #0]
 8004bd0:	e7d6      	b.n	8004b80 <_malloc_r+0xa8>
 8004bd2:	bf00      	nop
 8004bd4:	20000664 	.word	0x20000664

08004bd8 <__malloc_lock>:
 8004bd8:	4801      	ldr	r0, [pc, #4]	@ (8004be0 <__malloc_lock+0x8>)
 8004bda:	f7ff beea 	b.w	80049b2 <__retarget_lock_acquire_recursive>
 8004bde:	bf00      	nop
 8004be0:	2000065c 	.word	0x2000065c

08004be4 <__malloc_unlock>:
 8004be4:	4801      	ldr	r0, [pc, #4]	@ (8004bec <__malloc_unlock+0x8>)
 8004be6:	f7ff bee5 	b.w	80049b4 <__retarget_lock_release_recursive>
 8004bea:	bf00      	nop
 8004bec:	2000065c 	.word	0x2000065c

08004bf0 <__ssputs_r>:
 8004bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf4:	461f      	mov	r7, r3
 8004bf6:	688e      	ldr	r6, [r1, #8]
 8004bf8:	4682      	mov	sl, r0
 8004bfa:	42be      	cmp	r6, r7
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	4690      	mov	r8, r2
 8004c00:	680b      	ldr	r3, [r1, #0]
 8004c02:	d82d      	bhi.n	8004c60 <__ssputs_r+0x70>
 8004c04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c0c:	d026      	beq.n	8004c5c <__ssputs_r+0x6c>
 8004c0e:	6965      	ldr	r5, [r4, #20]
 8004c10:	6909      	ldr	r1, [r1, #16]
 8004c12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c16:	eba3 0901 	sub.w	r9, r3, r1
 8004c1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c1e:	1c7b      	adds	r3, r7, #1
 8004c20:	444b      	add	r3, r9
 8004c22:	106d      	asrs	r5, r5, #1
 8004c24:	429d      	cmp	r5, r3
 8004c26:	bf38      	it	cc
 8004c28:	461d      	movcc	r5, r3
 8004c2a:	0553      	lsls	r3, r2, #21
 8004c2c:	d527      	bpl.n	8004c7e <__ssputs_r+0x8e>
 8004c2e:	4629      	mov	r1, r5
 8004c30:	f7ff ff52 	bl	8004ad8 <_malloc_r>
 8004c34:	4606      	mov	r6, r0
 8004c36:	b360      	cbz	r0, 8004c92 <__ssputs_r+0xa2>
 8004c38:	464a      	mov	r2, r9
 8004c3a:	6921      	ldr	r1, [r4, #16]
 8004c3c:	f000 fdaa 	bl	8005794 <memcpy>
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c4a:	81a3      	strh	r3, [r4, #12]
 8004c4c:	6126      	str	r6, [r4, #16]
 8004c4e:	444e      	add	r6, r9
 8004c50:	6026      	str	r6, [r4, #0]
 8004c52:	463e      	mov	r6, r7
 8004c54:	6165      	str	r5, [r4, #20]
 8004c56:	eba5 0509 	sub.w	r5, r5, r9
 8004c5a:	60a5      	str	r5, [r4, #8]
 8004c5c:	42be      	cmp	r6, r7
 8004c5e:	d900      	bls.n	8004c62 <__ssputs_r+0x72>
 8004c60:	463e      	mov	r6, r7
 8004c62:	4632      	mov	r2, r6
 8004c64:	4641      	mov	r1, r8
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	f000 fd39 	bl	80056de <memmove>
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	68a3      	ldr	r3, [r4, #8]
 8004c70:	1b9b      	subs	r3, r3, r6
 8004c72:	60a3      	str	r3, [r4, #8]
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	4433      	add	r3, r6
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7e:	462a      	mov	r2, r5
 8004c80:	f000 fd9d 	bl	80057be <_realloc_r>
 8004c84:	4606      	mov	r6, r0
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d1e0      	bne.n	8004c4c <__ssputs_r+0x5c>
 8004c8a:	4650      	mov	r0, sl
 8004c8c:	6921      	ldr	r1, [r4, #16]
 8004c8e:	f7ff feb1 	bl	80049f4 <_free_r>
 8004c92:	230c      	movs	r3, #12
 8004c94:	f8ca 3000 	str.w	r3, [sl]
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ca2:	81a3      	strh	r3, [r4, #12]
 8004ca4:	e7e9      	b.n	8004c7a <__ssputs_r+0x8a>
	...

08004ca8 <_svfiprintf_r>:
 8004ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	4698      	mov	r8, r3
 8004cae:	898b      	ldrh	r3, [r1, #12]
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	061b      	lsls	r3, r3, #24
 8004cb4:	460d      	mov	r5, r1
 8004cb6:	4614      	mov	r4, r2
 8004cb8:	b09d      	sub	sp, #116	@ 0x74
 8004cba:	d510      	bpl.n	8004cde <_svfiprintf_r+0x36>
 8004cbc:	690b      	ldr	r3, [r1, #16]
 8004cbe:	b973      	cbnz	r3, 8004cde <_svfiprintf_r+0x36>
 8004cc0:	2140      	movs	r1, #64	@ 0x40
 8004cc2:	f7ff ff09 	bl	8004ad8 <_malloc_r>
 8004cc6:	6028      	str	r0, [r5, #0]
 8004cc8:	6128      	str	r0, [r5, #16]
 8004cca:	b930      	cbnz	r0, 8004cda <_svfiprintf_r+0x32>
 8004ccc:	230c      	movs	r3, #12
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cd4:	b01d      	add	sp, #116	@ 0x74
 8004cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cda:	2340      	movs	r3, #64	@ 0x40
 8004cdc:	616b      	str	r3, [r5, #20]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ce8:	2330      	movs	r3, #48	@ 0x30
 8004cea:	f04f 0901 	mov.w	r9, #1
 8004cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cf2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004e8c <_svfiprintf_r+0x1e4>
 8004cf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cfa:	4623      	mov	r3, r4
 8004cfc:	469a      	mov	sl, r3
 8004cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d02:	b10a      	cbz	r2, 8004d08 <_svfiprintf_r+0x60>
 8004d04:	2a25      	cmp	r2, #37	@ 0x25
 8004d06:	d1f9      	bne.n	8004cfc <_svfiprintf_r+0x54>
 8004d08:	ebba 0b04 	subs.w	fp, sl, r4
 8004d0c:	d00b      	beq.n	8004d26 <_svfiprintf_r+0x7e>
 8004d0e:	465b      	mov	r3, fp
 8004d10:	4622      	mov	r2, r4
 8004d12:	4629      	mov	r1, r5
 8004d14:	4638      	mov	r0, r7
 8004d16:	f7ff ff6b 	bl	8004bf0 <__ssputs_r>
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f000 80a7 	beq.w	8004e6e <_svfiprintf_r+0x1c6>
 8004d20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d22:	445a      	add	r2, fp
 8004d24:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d26:	f89a 3000 	ldrb.w	r3, [sl]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 809f 	beq.w	8004e6e <_svfiprintf_r+0x1c6>
 8004d30:	2300      	movs	r3, #0
 8004d32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d3a:	f10a 0a01 	add.w	sl, sl, #1
 8004d3e:	9304      	str	r3, [sp, #16]
 8004d40:	9307      	str	r3, [sp, #28]
 8004d42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d46:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d48:	4654      	mov	r4, sl
 8004d4a:	2205      	movs	r2, #5
 8004d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d50:	484e      	ldr	r0, [pc, #312]	@ (8004e8c <_svfiprintf_r+0x1e4>)
 8004d52:	f000 fd11 	bl	8005778 <memchr>
 8004d56:	9a04      	ldr	r2, [sp, #16]
 8004d58:	b9d8      	cbnz	r0, 8004d92 <_svfiprintf_r+0xea>
 8004d5a:	06d0      	lsls	r0, r2, #27
 8004d5c:	bf44      	itt	mi
 8004d5e:	2320      	movmi	r3, #32
 8004d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d64:	0711      	lsls	r1, r2, #28
 8004d66:	bf44      	itt	mi
 8004d68:	232b      	movmi	r3, #43	@ 0x2b
 8004d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d74:	d015      	beq.n	8004da2 <_svfiprintf_r+0xfa>
 8004d76:	4654      	mov	r4, sl
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f04f 0c0a 	mov.w	ip, #10
 8004d7e:	9a07      	ldr	r2, [sp, #28]
 8004d80:	4621      	mov	r1, r4
 8004d82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d86:	3b30      	subs	r3, #48	@ 0x30
 8004d88:	2b09      	cmp	r3, #9
 8004d8a:	d94b      	bls.n	8004e24 <_svfiprintf_r+0x17c>
 8004d8c:	b1b0      	cbz	r0, 8004dbc <_svfiprintf_r+0x114>
 8004d8e:	9207      	str	r2, [sp, #28]
 8004d90:	e014      	b.n	8004dbc <_svfiprintf_r+0x114>
 8004d92:	eba0 0308 	sub.w	r3, r0, r8
 8004d96:	fa09 f303 	lsl.w	r3, r9, r3
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	46a2      	mov	sl, r4
 8004d9e:	9304      	str	r3, [sp, #16]
 8004da0:	e7d2      	b.n	8004d48 <_svfiprintf_r+0xa0>
 8004da2:	9b03      	ldr	r3, [sp, #12]
 8004da4:	1d19      	adds	r1, r3, #4
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	9103      	str	r1, [sp, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bfbb      	ittet	lt
 8004dae:	425b      	neglt	r3, r3
 8004db0:	f042 0202 	orrlt.w	r2, r2, #2
 8004db4:	9307      	strge	r3, [sp, #28]
 8004db6:	9307      	strlt	r3, [sp, #28]
 8004db8:	bfb8      	it	lt
 8004dba:	9204      	strlt	r2, [sp, #16]
 8004dbc:	7823      	ldrb	r3, [r4, #0]
 8004dbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dc0:	d10a      	bne.n	8004dd8 <_svfiprintf_r+0x130>
 8004dc2:	7863      	ldrb	r3, [r4, #1]
 8004dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dc6:	d132      	bne.n	8004e2e <_svfiprintf_r+0x186>
 8004dc8:	9b03      	ldr	r3, [sp, #12]
 8004dca:	3402      	adds	r4, #2
 8004dcc:	1d1a      	adds	r2, r3, #4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	9203      	str	r2, [sp, #12]
 8004dd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004dd6:	9305      	str	r3, [sp, #20]
 8004dd8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004e90 <_svfiprintf_r+0x1e8>
 8004ddc:	2203      	movs	r2, #3
 8004dde:	4650      	mov	r0, sl
 8004de0:	7821      	ldrb	r1, [r4, #0]
 8004de2:	f000 fcc9 	bl	8005778 <memchr>
 8004de6:	b138      	cbz	r0, 8004df8 <_svfiprintf_r+0x150>
 8004de8:	2240      	movs	r2, #64	@ 0x40
 8004dea:	9b04      	ldr	r3, [sp, #16]
 8004dec:	eba0 000a 	sub.w	r0, r0, sl
 8004df0:	4082      	lsls	r2, r0
 8004df2:	4313      	orrs	r3, r2
 8004df4:	3401      	adds	r4, #1
 8004df6:	9304      	str	r3, [sp, #16]
 8004df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dfc:	2206      	movs	r2, #6
 8004dfe:	4825      	ldr	r0, [pc, #148]	@ (8004e94 <_svfiprintf_r+0x1ec>)
 8004e00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e04:	f000 fcb8 	bl	8005778 <memchr>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d036      	beq.n	8004e7a <_svfiprintf_r+0x1d2>
 8004e0c:	4b22      	ldr	r3, [pc, #136]	@ (8004e98 <_svfiprintf_r+0x1f0>)
 8004e0e:	bb1b      	cbnz	r3, 8004e58 <_svfiprintf_r+0x1b0>
 8004e10:	9b03      	ldr	r3, [sp, #12]
 8004e12:	3307      	adds	r3, #7
 8004e14:	f023 0307 	bic.w	r3, r3, #7
 8004e18:	3308      	adds	r3, #8
 8004e1a:	9303      	str	r3, [sp, #12]
 8004e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e1e:	4433      	add	r3, r6
 8004e20:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e22:	e76a      	b.n	8004cfa <_svfiprintf_r+0x52>
 8004e24:	460c      	mov	r4, r1
 8004e26:	2001      	movs	r0, #1
 8004e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e2c:	e7a8      	b.n	8004d80 <_svfiprintf_r+0xd8>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f04f 0c0a 	mov.w	ip, #10
 8004e34:	4619      	mov	r1, r3
 8004e36:	3401      	adds	r4, #1
 8004e38:	9305      	str	r3, [sp, #20]
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e40:	3a30      	subs	r2, #48	@ 0x30
 8004e42:	2a09      	cmp	r2, #9
 8004e44:	d903      	bls.n	8004e4e <_svfiprintf_r+0x1a6>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0c6      	beq.n	8004dd8 <_svfiprintf_r+0x130>
 8004e4a:	9105      	str	r1, [sp, #20]
 8004e4c:	e7c4      	b.n	8004dd8 <_svfiprintf_r+0x130>
 8004e4e:	4604      	mov	r4, r0
 8004e50:	2301      	movs	r3, #1
 8004e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e56:	e7f0      	b.n	8004e3a <_svfiprintf_r+0x192>
 8004e58:	ab03      	add	r3, sp, #12
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	462a      	mov	r2, r5
 8004e5e:	4638      	mov	r0, r7
 8004e60:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <_svfiprintf_r+0x1f4>)
 8004e62:	a904      	add	r1, sp, #16
 8004e64:	f3af 8000 	nop.w
 8004e68:	1c42      	adds	r2, r0, #1
 8004e6a:	4606      	mov	r6, r0
 8004e6c:	d1d6      	bne.n	8004e1c <_svfiprintf_r+0x174>
 8004e6e:	89ab      	ldrh	r3, [r5, #12]
 8004e70:	065b      	lsls	r3, r3, #25
 8004e72:	f53f af2d 	bmi.w	8004cd0 <_svfiprintf_r+0x28>
 8004e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e78:	e72c      	b.n	8004cd4 <_svfiprintf_r+0x2c>
 8004e7a:	ab03      	add	r3, sp, #12
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	462a      	mov	r2, r5
 8004e80:	4638      	mov	r0, r7
 8004e82:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <_svfiprintf_r+0x1f4>)
 8004e84:	a904      	add	r1, sp, #16
 8004e86:	f000 f9bd 	bl	8005204 <_printf_i>
 8004e8a:	e7ed      	b.n	8004e68 <_svfiprintf_r+0x1c0>
 8004e8c:	08005add 	.word	0x08005add
 8004e90:	08005ae3 	.word	0x08005ae3
 8004e94:	08005ae7 	.word	0x08005ae7
 8004e98:	00000000 	.word	0x00000000
 8004e9c:	08004bf1 	.word	0x08004bf1

08004ea0 <__sfputc_r>:
 8004ea0:	6893      	ldr	r3, [r2, #8]
 8004ea2:	b410      	push	{r4}
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	6093      	str	r3, [r2, #8]
 8004eaa:	da07      	bge.n	8004ebc <__sfputc_r+0x1c>
 8004eac:	6994      	ldr	r4, [r2, #24]
 8004eae:	42a3      	cmp	r3, r4
 8004eb0:	db01      	blt.n	8004eb6 <__sfputc_r+0x16>
 8004eb2:	290a      	cmp	r1, #10
 8004eb4:	d102      	bne.n	8004ebc <__sfputc_r+0x1c>
 8004eb6:	bc10      	pop	{r4}
 8004eb8:	f7ff bc6d 	b.w	8004796 <__swbuf_r>
 8004ebc:	6813      	ldr	r3, [r2, #0]
 8004ebe:	1c58      	adds	r0, r3, #1
 8004ec0:	6010      	str	r0, [r2, #0]
 8004ec2:	7019      	strb	r1, [r3, #0]
 8004ec4:	4608      	mov	r0, r1
 8004ec6:	bc10      	pop	{r4}
 8004ec8:	4770      	bx	lr

08004eca <__sfputs_r>:
 8004eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ecc:	4606      	mov	r6, r0
 8004ece:	460f      	mov	r7, r1
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	18d5      	adds	r5, r2, r3
 8004ed4:	42ac      	cmp	r4, r5
 8004ed6:	d101      	bne.n	8004edc <__sfputs_r+0x12>
 8004ed8:	2000      	movs	r0, #0
 8004eda:	e007      	b.n	8004eec <__sfputs_r+0x22>
 8004edc:	463a      	mov	r2, r7
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee4:	f7ff ffdc 	bl	8004ea0 <__sfputc_r>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d1f3      	bne.n	8004ed4 <__sfputs_r+0xa>
 8004eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ef0 <_vfiprintf_r>:
 8004ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef4:	460d      	mov	r5, r1
 8004ef6:	4614      	mov	r4, r2
 8004ef8:	4698      	mov	r8, r3
 8004efa:	4606      	mov	r6, r0
 8004efc:	b09d      	sub	sp, #116	@ 0x74
 8004efe:	b118      	cbz	r0, 8004f08 <_vfiprintf_r+0x18>
 8004f00:	6a03      	ldr	r3, [r0, #32]
 8004f02:	b90b      	cbnz	r3, 8004f08 <_vfiprintf_r+0x18>
 8004f04:	f7ff fb34 	bl	8004570 <__sinit>
 8004f08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f0a:	07d9      	lsls	r1, r3, #31
 8004f0c:	d405      	bmi.n	8004f1a <_vfiprintf_r+0x2a>
 8004f0e:	89ab      	ldrh	r3, [r5, #12]
 8004f10:	059a      	lsls	r2, r3, #22
 8004f12:	d402      	bmi.n	8004f1a <_vfiprintf_r+0x2a>
 8004f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f16:	f7ff fd4c 	bl	80049b2 <__retarget_lock_acquire_recursive>
 8004f1a:	89ab      	ldrh	r3, [r5, #12]
 8004f1c:	071b      	lsls	r3, r3, #28
 8004f1e:	d501      	bpl.n	8004f24 <_vfiprintf_r+0x34>
 8004f20:	692b      	ldr	r3, [r5, #16]
 8004f22:	b99b      	cbnz	r3, 8004f4c <_vfiprintf_r+0x5c>
 8004f24:	4629      	mov	r1, r5
 8004f26:	4630      	mov	r0, r6
 8004f28:	f7ff fc74 	bl	8004814 <__swsetup_r>
 8004f2c:	b170      	cbz	r0, 8004f4c <_vfiprintf_r+0x5c>
 8004f2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f30:	07dc      	lsls	r4, r3, #31
 8004f32:	d504      	bpl.n	8004f3e <_vfiprintf_r+0x4e>
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f38:	b01d      	add	sp, #116	@ 0x74
 8004f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f3e:	89ab      	ldrh	r3, [r5, #12]
 8004f40:	0598      	lsls	r0, r3, #22
 8004f42:	d4f7      	bmi.n	8004f34 <_vfiprintf_r+0x44>
 8004f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f46:	f7ff fd35 	bl	80049b4 <__retarget_lock_release_recursive>
 8004f4a:	e7f3      	b.n	8004f34 <_vfiprintf_r+0x44>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f50:	2320      	movs	r3, #32
 8004f52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f56:	2330      	movs	r3, #48	@ 0x30
 8004f58:	f04f 0901 	mov.w	r9, #1
 8004f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f60:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800510c <_vfiprintf_r+0x21c>
 8004f64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f68:	4623      	mov	r3, r4
 8004f6a:	469a      	mov	sl, r3
 8004f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f70:	b10a      	cbz	r2, 8004f76 <_vfiprintf_r+0x86>
 8004f72:	2a25      	cmp	r2, #37	@ 0x25
 8004f74:	d1f9      	bne.n	8004f6a <_vfiprintf_r+0x7a>
 8004f76:	ebba 0b04 	subs.w	fp, sl, r4
 8004f7a:	d00b      	beq.n	8004f94 <_vfiprintf_r+0xa4>
 8004f7c:	465b      	mov	r3, fp
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4629      	mov	r1, r5
 8004f82:	4630      	mov	r0, r6
 8004f84:	f7ff ffa1 	bl	8004eca <__sfputs_r>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	f000 80a7 	beq.w	80050dc <_vfiprintf_r+0x1ec>
 8004f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f90:	445a      	add	r2, fp
 8004f92:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f94:	f89a 3000 	ldrb.w	r3, [sl]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 809f 	beq.w	80050dc <_vfiprintf_r+0x1ec>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa8:	f10a 0a01 	add.w	sl, sl, #1
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	9307      	str	r3, [sp, #28]
 8004fb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fb6:	4654      	mov	r4, sl
 8004fb8:	2205      	movs	r2, #5
 8004fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fbe:	4853      	ldr	r0, [pc, #332]	@ (800510c <_vfiprintf_r+0x21c>)
 8004fc0:	f000 fbda 	bl	8005778 <memchr>
 8004fc4:	9a04      	ldr	r2, [sp, #16]
 8004fc6:	b9d8      	cbnz	r0, 8005000 <_vfiprintf_r+0x110>
 8004fc8:	06d1      	lsls	r1, r2, #27
 8004fca:	bf44      	itt	mi
 8004fcc:	2320      	movmi	r3, #32
 8004fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fd2:	0713      	lsls	r3, r2, #28
 8004fd4:	bf44      	itt	mi
 8004fd6:	232b      	movmi	r3, #43	@ 0x2b
 8004fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fe2:	d015      	beq.n	8005010 <_vfiprintf_r+0x120>
 8004fe4:	4654      	mov	r4, sl
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f04f 0c0a 	mov.w	ip, #10
 8004fec:	9a07      	ldr	r2, [sp, #28]
 8004fee:	4621      	mov	r1, r4
 8004ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff4:	3b30      	subs	r3, #48	@ 0x30
 8004ff6:	2b09      	cmp	r3, #9
 8004ff8:	d94b      	bls.n	8005092 <_vfiprintf_r+0x1a2>
 8004ffa:	b1b0      	cbz	r0, 800502a <_vfiprintf_r+0x13a>
 8004ffc:	9207      	str	r2, [sp, #28]
 8004ffe:	e014      	b.n	800502a <_vfiprintf_r+0x13a>
 8005000:	eba0 0308 	sub.w	r3, r0, r8
 8005004:	fa09 f303 	lsl.w	r3, r9, r3
 8005008:	4313      	orrs	r3, r2
 800500a:	46a2      	mov	sl, r4
 800500c:	9304      	str	r3, [sp, #16]
 800500e:	e7d2      	b.n	8004fb6 <_vfiprintf_r+0xc6>
 8005010:	9b03      	ldr	r3, [sp, #12]
 8005012:	1d19      	adds	r1, r3, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	9103      	str	r1, [sp, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	bfbb      	ittet	lt
 800501c:	425b      	neglt	r3, r3
 800501e:	f042 0202 	orrlt.w	r2, r2, #2
 8005022:	9307      	strge	r3, [sp, #28]
 8005024:	9307      	strlt	r3, [sp, #28]
 8005026:	bfb8      	it	lt
 8005028:	9204      	strlt	r2, [sp, #16]
 800502a:	7823      	ldrb	r3, [r4, #0]
 800502c:	2b2e      	cmp	r3, #46	@ 0x2e
 800502e:	d10a      	bne.n	8005046 <_vfiprintf_r+0x156>
 8005030:	7863      	ldrb	r3, [r4, #1]
 8005032:	2b2a      	cmp	r3, #42	@ 0x2a
 8005034:	d132      	bne.n	800509c <_vfiprintf_r+0x1ac>
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	3402      	adds	r4, #2
 800503a:	1d1a      	adds	r2, r3, #4
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	9203      	str	r2, [sp, #12]
 8005040:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005044:	9305      	str	r3, [sp, #20]
 8005046:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005110 <_vfiprintf_r+0x220>
 800504a:	2203      	movs	r2, #3
 800504c:	4650      	mov	r0, sl
 800504e:	7821      	ldrb	r1, [r4, #0]
 8005050:	f000 fb92 	bl	8005778 <memchr>
 8005054:	b138      	cbz	r0, 8005066 <_vfiprintf_r+0x176>
 8005056:	2240      	movs	r2, #64	@ 0x40
 8005058:	9b04      	ldr	r3, [sp, #16]
 800505a:	eba0 000a 	sub.w	r0, r0, sl
 800505e:	4082      	lsls	r2, r0
 8005060:	4313      	orrs	r3, r2
 8005062:	3401      	adds	r4, #1
 8005064:	9304      	str	r3, [sp, #16]
 8005066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506a:	2206      	movs	r2, #6
 800506c:	4829      	ldr	r0, [pc, #164]	@ (8005114 <_vfiprintf_r+0x224>)
 800506e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005072:	f000 fb81 	bl	8005778 <memchr>
 8005076:	2800      	cmp	r0, #0
 8005078:	d03f      	beq.n	80050fa <_vfiprintf_r+0x20a>
 800507a:	4b27      	ldr	r3, [pc, #156]	@ (8005118 <_vfiprintf_r+0x228>)
 800507c:	bb1b      	cbnz	r3, 80050c6 <_vfiprintf_r+0x1d6>
 800507e:	9b03      	ldr	r3, [sp, #12]
 8005080:	3307      	adds	r3, #7
 8005082:	f023 0307 	bic.w	r3, r3, #7
 8005086:	3308      	adds	r3, #8
 8005088:	9303      	str	r3, [sp, #12]
 800508a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800508c:	443b      	add	r3, r7
 800508e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005090:	e76a      	b.n	8004f68 <_vfiprintf_r+0x78>
 8005092:	460c      	mov	r4, r1
 8005094:	2001      	movs	r0, #1
 8005096:	fb0c 3202 	mla	r2, ip, r2, r3
 800509a:	e7a8      	b.n	8004fee <_vfiprintf_r+0xfe>
 800509c:	2300      	movs	r3, #0
 800509e:	f04f 0c0a 	mov.w	ip, #10
 80050a2:	4619      	mov	r1, r3
 80050a4:	3401      	adds	r4, #1
 80050a6:	9305      	str	r3, [sp, #20]
 80050a8:	4620      	mov	r0, r4
 80050aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ae:	3a30      	subs	r2, #48	@ 0x30
 80050b0:	2a09      	cmp	r2, #9
 80050b2:	d903      	bls.n	80050bc <_vfiprintf_r+0x1cc>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0c6      	beq.n	8005046 <_vfiprintf_r+0x156>
 80050b8:	9105      	str	r1, [sp, #20]
 80050ba:	e7c4      	b.n	8005046 <_vfiprintf_r+0x156>
 80050bc:	4604      	mov	r4, r0
 80050be:	2301      	movs	r3, #1
 80050c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c4:	e7f0      	b.n	80050a8 <_vfiprintf_r+0x1b8>
 80050c6:	ab03      	add	r3, sp, #12
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	462a      	mov	r2, r5
 80050cc:	4630      	mov	r0, r6
 80050ce:	4b13      	ldr	r3, [pc, #76]	@ (800511c <_vfiprintf_r+0x22c>)
 80050d0:	a904      	add	r1, sp, #16
 80050d2:	f3af 8000 	nop.w
 80050d6:	4607      	mov	r7, r0
 80050d8:	1c78      	adds	r0, r7, #1
 80050da:	d1d6      	bne.n	800508a <_vfiprintf_r+0x19a>
 80050dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050de:	07d9      	lsls	r1, r3, #31
 80050e0:	d405      	bmi.n	80050ee <_vfiprintf_r+0x1fe>
 80050e2:	89ab      	ldrh	r3, [r5, #12]
 80050e4:	059a      	lsls	r2, r3, #22
 80050e6:	d402      	bmi.n	80050ee <_vfiprintf_r+0x1fe>
 80050e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050ea:	f7ff fc63 	bl	80049b4 <__retarget_lock_release_recursive>
 80050ee:	89ab      	ldrh	r3, [r5, #12]
 80050f0:	065b      	lsls	r3, r3, #25
 80050f2:	f53f af1f 	bmi.w	8004f34 <_vfiprintf_r+0x44>
 80050f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050f8:	e71e      	b.n	8004f38 <_vfiprintf_r+0x48>
 80050fa:	ab03      	add	r3, sp, #12
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	462a      	mov	r2, r5
 8005100:	4630      	mov	r0, r6
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <_vfiprintf_r+0x22c>)
 8005104:	a904      	add	r1, sp, #16
 8005106:	f000 f87d 	bl	8005204 <_printf_i>
 800510a:	e7e4      	b.n	80050d6 <_vfiprintf_r+0x1e6>
 800510c:	08005add 	.word	0x08005add
 8005110:	08005ae3 	.word	0x08005ae3
 8005114:	08005ae7 	.word	0x08005ae7
 8005118:	00000000 	.word	0x00000000
 800511c:	08004ecb 	.word	0x08004ecb

08005120 <_printf_common>:
 8005120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005124:	4616      	mov	r6, r2
 8005126:	4698      	mov	r8, r3
 8005128:	688a      	ldr	r2, [r1, #8]
 800512a:	690b      	ldr	r3, [r1, #16]
 800512c:	4607      	mov	r7, r0
 800512e:	4293      	cmp	r3, r2
 8005130:	bfb8      	it	lt
 8005132:	4613      	movlt	r3, r2
 8005134:	6033      	str	r3, [r6, #0]
 8005136:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800513a:	460c      	mov	r4, r1
 800513c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005140:	b10a      	cbz	r2, 8005146 <_printf_common+0x26>
 8005142:	3301      	adds	r3, #1
 8005144:	6033      	str	r3, [r6, #0]
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	0699      	lsls	r1, r3, #26
 800514a:	bf42      	ittt	mi
 800514c:	6833      	ldrmi	r3, [r6, #0]
 800514e:	3302      	addmi	r3, #2
 8005150:	6033      	strmi	r3, [r6, #0]
 8005152:	6825      	ldr	r5, [r4, #0]
 8005154:	f015 0506 	ands.w	r5, r5, #6
 8005158:	d106      	bne.n	8005168 <_printf_common+0x48>
 800515a:	f104 0a19 	add.w	sl, r4, #25
 800515e:	68e3      	ldr	r3, [r4, #12]
 8005160:	6832      	ldr	r2, [r6, #0]
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	42ab      	cmp	r3, r5
 8005166:	dc2b      	bgt.n	80051c0 <_printf_common+0xa0>
 8005168:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800516c:	6822      	ldr	r2, [r4, #0]
 800516e:	3b00      	subs	r3, #0
 8005170:	bf18      	it	ne
 8005172:	2301      	movne	r3, #1
 8005174:	0692      	lsls	r2, r2, #26
 8005176:	d430      	bmi.n	80051da <_printf_common+0xba>
 8005178:	4641      	mov	r1, r8
 800517a:	4638      	mov	r0, r7
 800517c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005180:	47c8      	blx	r9
 8005182:	3001      	adds	r0, #1
 8005184:	d023      	beq.n	80051ce <_printf_common+0xae>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	6922      	ldr	r2, [r4, #16]
 800518a:	f003 0306 	and.w	r3, r3, #6
 800518e:	2b04      	cmp	r3, #4
 8005190:	bf14      	ite	ne
 8005192:	2500      	movne	r5, #0
 8005194:	6833      	ldreq	r3, [r6, #0]
 8005196:	f04f 0600 	mov.w	r6, #0
 800519a:	bf08      	it	eq
 800519c:	68e5      	ldreq	r5, [r4, #12]
 800519e:	f104 041a 	add.w	r4, r4, #26
 80051a2:	bf08      	it	eq
 80051a4:	1aed      	subeq	r5, r5, r3
 80051a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80051aa:	bf08      	it	eq
 80051ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b0:	4293      	cmp	r3, r2
 80051b2:	bfc4      	itt	gt
 80051b4:	1a9b      	subgt	r3, r3, r2
 80051b6:	18ed      	addgt	r5, r5, r3
 80051b8:	42b5      	cmp	r5, r6
 80051ba:	d11a      	bne.n	80051f2 <_printf_common+0xd2>
 80051bc:	2000      	movs	r0, #0
 80051be:	e008      	b.n	80051d2 <_printf_common+0xb2>
 80051c0:	2301      	movs	r3, #1
 80051c2:	4652      	mov	r2, sl
 80051c4:	4641      	mov	r1, r8
 80051c6:	4638      	mov	r0, r7
 80051c8:	47c8      	blx	r9
 80051ca:	3001      	adds	r0, #1
 80051cc:	d103      	bne.n	80051d6 <_printf_common+0xb6>
 80051ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d6:	3501      	adds	r5, #1
 80051d8:	e7c1      	b.n	800515e <_printf_common+0x3e>
 80051da:	2030      	movs	r0, #48	@ 0x30
 80051dc:	18e1      	adds	r1, r4, r3
 80051de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051e8:	4422      	add	r2, r4
 80051ea:	3302      	adds	r3, #2
 80051ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051f0:	e7c2      	b.n	8005178 <_printf_common+0x58>
 80051f2:	2301      	movs	r3, #1
 80051f4:	4622      	mov	r2, r4
 80051f6:	4641      	mov	r1, r8
 80051f8:	4638      	mov	r0, r7
 80051fa:	47c8      	blx	r9
 80051fc:	3001      	adds	r0, #1
 80051fe:	d0e6      	beq.n	80051ce <_printf_common+0xae>
 8005200:	3601      	adds	r6, #1
 8005202:	e7d9      	b.n	80051b8 <_printf_common+0x98>

08005204 <_printf_i>:
 8005204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005208:	7e0f      	ldrb	r7, [r1, #24]
 800520a:	4691      	mov	r9, r2
 800520c:	2f78      	cmp	r7, #120	@ 0x78
 800520e:	4680      	mov	r8, r0
 8005210:	460c      	mov	r4, r1
 8005212:	469a      	mov	sl, r3
 8005214:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800521a:	d807      	bhi.n	800522c <_printf_i+0x28>
 800521c:	2f62      	cmp	r7, #98	@ 0x62
 800521e:	d80a      	bhi.n	8005236 <_printf_i+0x32>
 8005220:	2f00      	cmp	r7, #0
 8005222:	f000 80d1 	beq.w	80053c8 <_printf_i+0x1c4>
 8005226:	2f58      	cmp	r7, #88	@ 0x58
 8005228:	f000 80b8 	beq.w	800539c <_printf_i+0x198>
 800522c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005234:	e03a      	b.n	80052ac <_printf_i+0xa8>
 8005236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800523a:	2b15      	cmp	r3, #21
 800523c:	d8f6      	bhi.n	800522c <_printf_i+0x28>
 800523e:	a101      	add	r1, pc, #4	@ (adr r1, 8005244 <_printf_i+0x40>)
 8005240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005244:	0800529d 	.word	0x0800529d
 8005248:	080052b1 	.word	0x080052b1
 800524c:	0800522d 	.word	0x0800522d
 8005250:	0800522d 	.word	0x0800522d
 8005254:	0800522d 	.word	0x0800522d
 8005258:	0800522d 	.word	0x0800522d
 800525c:	080052b1 	.word	0x080052b1
 8005260:	0800522d 	.word	0x0800522d
 8005264:	0800522d 	.word	0x0800522d
 8005268:	0800522d 	.word	0x0800522d
 800526c:	0800522d 	.word	0x0800522d
 8005270:	080053af 	.word	0x080053af
 8005274:	080052db 	.word	0x080052db
 8005278:	08005369 	.word	0x08005369
 800527c:	0800522d 	.word	0x0800522d
 8005280:	0800522d 	.word	0x0800522d
 8005284:	080053d1 	.word	0x080053d1
 8005288:	0800522d 	.word	0x0800522d
 800528c:	080052db 	.word	0x080052db
 8005290:	0800522d 	.word	0x0800522d
 8005294:	0800522d 	.word	0x0800522d
 8005298:	08005371 	.word	0x08005371
 800529c:	6833      	ldr	r3, [r6, #0]
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6032      	str	r2, [r6, #0]
 80052a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052ac:	2301      	movs	r3, #1
 80052ae:	e09c      	b.n	80053ea <_printf_i+0x1e6>
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	6820      	ldr	r0, [r4, #0]
 80052b4:	1d19      	adds	r1, r3, #4
 80052b6:	6031      	str	r1, [r6, #0]
 80052b8:	0606      	lsls	r6, r0, #24
 80052ba:	d501      	bpl.n	80052c0 <_printf_i+0xbc>
 80052bc:	681d      	ldr	r5, [r3, #0]
 80052be:	e003      	b.n	80052c8 <_printf_i+0xc4>
 80052c0:	0645      	lsls	r5, r0, #25
 80052c2:	d5fb      	bpl.n	80052bc <_printf_i+0xb8>
 80052c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052c8:	2d00      	cmp	r5, #0
 80052ca:	da03      	bge.n	80052d4 <_printf_i+0xd0>
 80052cc:	232d      	movs	r3, #45	@ 0x2d
 80052ce:	426d      	negs	r5, r5
 80052d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d4:	230a      	movs	r3, #10
 80052d6:	4858      	ldr	r0, [pc, #352]	@ (8005438 <_printf_i+0x234>)
 80052d8:	e011      	b.n	80052fe <_printf_i+0xfa>
 80052da:	6821      	ldr	r1, [r4, #0]
 80052dc:	6833      	ldr	r3, [r6, #0]
 80052de:	0608      	lsls	r0, r1, #24
 80052e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80052e4:	d402      	bmi.n	80052ec <_printf_i+0xe8>
 80052e6:	0649      	lsls	r1, r1, #25
 80052e8:	bf48      	it	mi
 80052ea:	b2ad      	uxthmi	r5, r5
 80052ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ee:	6033      	str	r3, [r6, #0]
 80052f0:	bf14      	ite	ne
 80052f2:	230a      	movne	r3, #10
 80052f4:	2308      	moveq	r3, #8
 80052f6:	4850      	ldr	r0, [pc, #320]	@ (8005438 <_printf_i+0x234>)
 80052f8:	2100      	movs	r1, #0
 80052fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052fe:	6866      	ldr	r6, [r4, #4]
 8005300:	2e00      	cmp	r6, #0
 8005302:	60a6      	str	r6, [r4, #8]
 8005304:	db05      	blt.n	8005312 <_printf_i+0x10e>
 8005306:	6821      	ldr	r1, [r4, #0]
 8005308:	432e      	orrs	r6, r5
 800530a:	f021 0104 	bic.w	r1, r1, #4
 800530e:	6021      	str	r1, [r4, #0]
 8005310:	d04b      	beq.n	80053aa <_printf_i+0x1a6>
 8005312:	4616      	mov	r6, r2
 8005314:	fbb5 f1f3 	udiv	r1, r5, r3
 8005318:	fb03 5711 	mls	r7, r3, r1, r5
 800531c:	5dc7      	ldrb	r7, [r0, r7]
 800531e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005322:	462f      	mov	r7, r5
 8005324:	42bb      	cmp	r3, r7
 8005326:	460d      	mov	r5, r1
 8005328:	d9f4      	bls.n	8005314 <_printf_i+0x110>
 800532a:	2b08      	cmp	r3, #8
 800532c:	d10b      	bne.n	8005346 <_printf_i+0x142>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	07df      	lsls	r7, r3, #31
 8005332:	d508      	bpl.n	8005346 <_printf_i+0x142>
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	6861      	ldr	r1, [r4, #4]
 8005338:	4299      	cmp	r1, r3
 800533a:	bfde      	ittt	le
 800533c:	2330      	movle	r3, #48	@ 0x30
 800533e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005342:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005346:	1b92      	subs	r2, r2, r6
 8005348:	6122      	str	r2, [r4, #16]
 800534a:	464b      	mov	r3, r9
 800534c:	4621      	mov	r1, r4
 800534e:	4640      	mov	r0, r8
 8005350:	f8cd a000 	str.w	sl, [sp]
 8005354:	aa03      	add	r2, sp, #12
 8005356:	f7ff fee3 	bl	8005120 <_printf_common>
 800535a:	3001      	adds	r0, #1
 800535c:	d14a      	bne.n	80053f4 <_printf_i+0x1f0>
 800535e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005362:	b004      	add	sp, #16
 8005364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	f043 0320 	orr.w	r3, r3, #32
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	2778      	movs	r7, #120	@ 0x78
 8005372:	4832      	ldr	r0, [pc, #200]	@ (800543c <_printf_i+0x238>)
 8005374:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	6831      	ldr	r1, [r6, #0]
 800537c:	061f      	lsls	r7, r3, #24
 800537e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005382:	d402      	bmi.n	800538a <_printf_i+0x186>
 8005384:	065f      	lsls	r7, r3, #25
 8005386:	bf48      	it	mi
 8005388:	b2ad      	uxthmi	r5, r5
 800538a:	6031      	str	r1, [r6, #0]
 800538c:	07d9      	lsls	r1, r3, #31
 800538e:	bf44      	itt	mi
 8005390:	f043 0320 	orrmi.w	r3, r3, #32
 8005394:	6023      	strmi	r3, [r4, #0]
 8005396:	b11d      	cbz	r5, 80053a0 <_printf_i+0x19c>
 8005398:	2310      	movs	r3, #16
 800539a:	e7ad      	b.n	80052f8 <_printf_i+0xf4>
 800539c:	4826      	ldr	r0, [pc, #152]	@ (8005438 <_printf_i+0x234>)
 800539e:	e7e9      	b.n	8005374 <_printf_i+0x170>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	f023 0320 	bic.w	r3, r3, #32
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	e7f6      	b.n	8005398 <_printf_i+0x194>
 80053aa:	4616      	mov	r6, r2
 80053ac:	e7bd      	b.n	800532a <_printf_i+0x126>
 80053ae:	6833      	ldr	r3, [r6, #0]
 80053b0:	6825      	ldr	r5, [r4, #0]
 80053b2:	1d18      	adds	r0, r3, #4
 80053b4:	6961      	ldr	r1, [r4, #20]
 80053b6:	6030      	str	r0, [r6, #0]
 80053b8:	062e      	lsls	r6, r5, #24
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	d501      	bpl.n	80053c2 <_printf_i+0x1be>
 80053be:	6019      	str	r1, [r3, #0]
 80053c0:	e002      	b.n	80053c8 <_printf_i+0x1c4>
 80053c2:	0668      	lsls	r0, r5, #25
 80053c4:	d5fb      	bpl.n	80053be <_printf_i+0x1ba>
 80053c6:	8019      	strh	r1, [r3, #0]
 80053c8:	2300      	movs	r3, #0
 80053ca:	4616      	mov	r6, r2
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	e7bc      	b.n	800534a <_printf_i+0x146>
 80053d0:	6833      	ldr	r3, [r6, #0]
 80053d2:	2100      	movs	r1, #0
 80053d4:	1d1a      	adds	r2, r3, #4
 80053d6:	6032      	str	r2, [r6, #0]
 80053d8:	681e      	ldr	r6, [r3, #0]
 80053da:	6862      	ldr	r2, [r4, #4]
 80053dc:	4630      	mov	r0, r6
 80053de:	f000 f9cb 	bl	8005778 <memchr>
 80053e2:	b108      	cbz	r0, 80053e8 <_printf_i+0x1e4>
 80053e4:	1b80      	subs	r0, r0, r6
 80053e6:	6060      	str	r0, [r4, #4]
 80053e8:	6863      	ldr	r3, [r4, #4]
 80053ea:	6123      	str	r3, [r4, #16]
 80053ec:	2300      	movs	r3, #0
 80053ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053f2:	e7aa      	b.n	800534a <_printf_i+0x146>
 80053f4:	4632      	mov	r2, r6
 80053f6:	4649      	mov	r1, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	47d0      	blx	sl
 80053fe:	3001      	adds	r0, #1
 8005400:	d0ad      	beq.n	800535e <_printf_i+0x15a>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	079b      	lsls	r3, r3, #30
 8005406:	d413      	bmi.n	8005430 <_printf_i+0x22c>
 8005408:	68e0      	ldr	r0, [r4, #12]
 800540a:	9b03      	ldr	r3, [sp, #12]
 800540c:	4298      	cmp	r0, r3
 800540e:	bfb8      	it	lt
 8005410:	4618      	movlt	r0, r3
 8005412:	e7a6      	b.n	8005362 <_printf_i+0x15e>
 8005414:	2301      	movs	r3, #1
 8005416:	4632      	mov	r2, r6
 8005418:	4649      	mov	r1, r9
 800541a:	4640      	mov	r0, r8
 800541c:	47d0      	blx	sl
 800541e:	3001      	adds	r0, #1
 8005420:	d09d      	beq.n	800535e <_printf_i+0x15a>
 8005422:	3501      	adds	r5, #1
 8005424:	68e3      	ldr	r3, [r4, #12]
 8005426:	9903      	ldr	r1, [sp, #12]
 8005428:	1a5b      	subs	r3, r3, r1
 800542a:	42ab      	cmp	r3, r5
 800542c:	dcf2      	bgt.n	8005414 <_printf_i+0x210>
 800542e:	e7eb      	b.n	8005408 <_printf_i+0x204>
 8005430:	2500      	movs	r5, #0
 8005432:	f104 0619 	add.w	r6, r4, #25
 8005436:	e7f5      	b.n	8005424 <_printf_i+0x220>
 8005438:	08005aee 	.word	0x08005aee
 800543c:	08005aff 	.word	0x08005aff

08005440 <__sflush_r>:
 8005440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	0716      	lsls	r6, r2, #28
 8005448:	4605      	mov	r5, r0
 800544a:	460c      	mov	r4, r1
 800544c:	d454      	bmi.n	80054f8 <__sflush_r+0xb8>
 800544e:	684b      	ldr	r3, [r1, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	dc02      	bgt.n	800545a <__sflush_r+0x1a>
 8005454:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	dd48      	ble.n	80054ec <__sflush_r+0xac>
 800545a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800545c:	2e00      	cmp	r6, #0
 800545e:	d045      	beq.n	80054ec <__sflush_r+0xac>
 8005460:	2300      	movs	r3, #0
 8005462:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005466:	682f      	ldr	r7, [r5, #0]
 8005468:	6a21      	ldr	r1, [r4, #32]
 800546a:	602b      	str	r3, [r5, #0]
 800546c:	d030      	beq.n	80054d0 <__sflush_r+0x90>
 800546e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	0759      	lsls	r1, r3, #29
 8005474:	d505      	bpl.n	8005482 <__sflush_r+0x42>
 8005476:	6863      	ldr	r3, [r4, #4]
 8005478:	1ad2      	subs	r2, r2, r3
 800547a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800547c:	b10b      	cbz	r3, 8005482 <__sflush_r+0x42>
 800547e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005480:	1ad2      	subs	r2, r2, r3
 8005482:	2300      	movs	r3, #0
 8005484:	4628      	mov	r0, r5
 8005486:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005488:	6a21      	ldr	r1, [r4, #32]
 800548a:	47b0      	blx	r6
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	d106      	bne.n	80054a0 <__sflush_r+0x60>
 8005492:	6829      	ldr	r1, [r5, #0]
 8005494:	291d      	cmp	r1, #29
 8005496:	d82b      	bhi.n	80054f0 <__sflush_r+0xb0>
 8005498:	4a28      	ldr	r2, [pc, #160]	@ (800553c <__sflush_r+0xfc>)
 800549a:	40ca      	lsrs	r2, r1
 800549c:	07d6      	lsls	r6, r2, #31
 800549e:	d527      	bpl.n	80054f0 <__sflush_r+0xb0>
 80054a0:	2200      	movs	r2, #0
 80054a2:	6062      	str	r2, [r4, #4]
 80054a4:	6922      	ldr	r2, [r4, #16]
 80054a6:	04d9      	lsls	r1, r3, #19
 80054a8:	6022      	str	r2, [r4, #0]
 80054aa:	d504      	bpl.n	80054b6 <__sflush_r+0x76>
 80054ac:	1c42      	adds	r2, r0, #1
 80054ae:	d101      	bne.n	80054b4 <__sflush_r+0x74>
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	b903      	cbnz	r3, 80054b6 <__sflush_r+0x76>
 80054b4:	6560      	str	r0, [r4, #84]	@ 0x54
 80054b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054b8:	602f      	str	r7, [r5, #0]
 80054ba:	b1b9      	cbz	r1, 80054ec <__sflush_r+0xac>
 80054bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054c0:	4299      	cmp	r1, r3
 80054c2:	d002      	beq.n	80054ca <__sflush_r+0x8a>
 80054c4:	4628      	mov	r0, r5
 80054c6:	f7ff fa95 	bl	80049f4 <_free_r>
 80054ca:	2300      	movs	r3, #0
 80054cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80054ce:	e00d      	b.n	80054ec <__sflush_r+0xac>
 80054d0:	2301      	movs	r3, #1
 80054d2:	4628      	mov	r0, r5
 80054d4:	47b0      	blx	r6
 80054d6:	4602      	mov	r2, r0
 80054d8:	1c50      	adds	r0, r2, #1
 80054da:	d1c9      	bne.n	8005470 <__sflush_r+0x30>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0c6      	beq.n	8005470 <__sflush_r+0x30>
 80054e2:	2b1d      	cmp	r3, #29
 80054e4:	d001      	beq.n	80054ea <__sflush_r+0xaa>
 80054e6:	2b16      	cmp	r3, #22
 80054e8:	d11d      	bne.n	8005526 <__sflush_r+0xe6>
 80054ea:	602f      	str	r7, [r5, #0]
 80054ec:	2000      	movs	r0, #0
 80054ee:	e021      	b.n	8005534 <__sflush_r+0xf4>
 80054f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054f4:	b21b      	sxth	r3, r3
 80054f6:	e01a      	b.n	800552e <__sflush_r+0xee>
 80054f8:	690f      	ldr	r7, [r1, #16]
 80054fa:	2f00      	cmp	r7, #0
 80054fc:	d0f6      	beq.n	80054ec <__sflush_r+0xac>
 80054fe:	0793      	lsls	r3, r2, #30
 8005500:	bf18      	it	ne
 8005502:	2300      	movne	r3, #0
 8005504:	680e      	ldr	r6, [r1, #0]
 8005506:	bf08      	it	eq
 8005508:	694b      	ldreq	r3, [r1, #20]
 800550a:	1bf6      	subs	r6, r6, r7
 800550c:	600f      	str	r7, [r1, #0]
 800550e:	608b      	str	r3, [r1, #8]
 8005510:	2e00      	cmp	r6, #0
 8005512:	ddeb      	ble.n	80054ec <__sflush_r+0xac>
 8005514:	4633      	mov	r3, r6
 8005516:	463a      	mov	r2, r7
 8005518:	4628      	mov	r0, r5
 800551a:	6a21      	ldr	r1, [r4, #32]
 800551c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005520:	47e0      	blx	ip
 8005522:	2800      	cmp	r0, #0
 8005524:	dc07      	bgt.n	8005536 <__sflush_r+0xf6>
 8005526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800552a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800552e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005532:	81a3      	strh	r3, [r4, #12]
 8005534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005536:	4407      	add	r7, r0
 8005538:	1a36      	subs	r6, r6, r0
 800553a:	e7e9      	b.n	8005510 <__sflush_r+0xd0>
 800553c:	20400001 	.word	0x20400001

08005540 <_fflush_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	690b      	ldr	r3, [r1, #16]
 8005544:	4605      	mov	r5, r0
 8005546:	460c      	mov	r4, r1
 8005548:	b913      	cbnz	r3, 8005550 <_fflush_r+0x10>
 800554a:	2500      	movs	r5, #0
 800554c:	4628      	mov	r0, r5
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	b118      	cbz	r0, 800555a <_fflush_r+0x1a>
 8005552:	6a03      	ldr	r3, [r0, #32]
 8005554:	b90b      	cbnz	r3, 800555a <_fflush_r+0x1a>
 8005556:	f7ff f80b 	bl	8004570 <__sinit>
 800555a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f3      	beq.n	800554a <_fflush_r+0xa>
 8005562:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005564:	07d0      	lsls	r0, r2, #31
 8005566:	d404      	bmi.n	8005572 <_fflush_r+0x32>
 8005568:	0599      	lsls	r1, r3, #22
 800556a:	d402      	bmi.n	8005572 <_fflush_r+0x32>
 800556c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800556e:	f7ff fa20 	bl	80049b2 <__retarget_lock_acquire_recursive>
 8005572:	4628      	mov	r0, r5
 8005574:	4621      	mov	r1, r4
 8005576:	f7ff ff63 	bl	8005440 <__sflush_r>
 800557a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800557c:	4605      	mov	r5, r0
 800557e:	07da      	lsls	r2, r3, #31
 8005580:	d4e4      	bmi.n	800554c <_fflush_r+0xc>
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	059b      	lsls	r3, r3, #22
 8005586:	d4e1      	bmi.n	800554c <_fflush_r+0xc>
 8005588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800558a:	f7ff fa13 	bl	80049b4 <__retarget_lock_release_recursive>
 800558e:	e7dd      	b.n	800554c <_fflush_r+0xc>

08005590 <fiprintf>:
 8005590:	b40e      	push	{r1, r2, r3}
 8005592:	b503      	push	{r0, r1, lr}
 8005594:	4601      	mov	r1, r0
 8005596:	ab03      	add	r3, sp, #12
 8005598:	4805      	ldr	r0, [pc, #20]	@ (80055b0 <fiprintf+0x20>)
 800559a:	f853 2b04 	ldr.w	r2, [r3], #4
 800559e:	6800      	ldr	r0, [r0, #0]
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	f7ff fca5 	bl	8004ef0 <_vfiprintf_r>
 80055a6:	b002      	add	sp, #8
 80055a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055ac:	b003      	add	sp, #12
 80055ae:	4770      	bx	lr
 80055b0:	2000023c 	.word	0x2000023c

080055b4 <__swhatbuf_r>:
 80055b4:	b570      	push	{r4, r5, r6, lr}
 80055b6:	460c      	mov	r4, r1
 80055b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055bc:	4615      	mov	r5, r2
 80055be:	2900      	cmp	r1, #0
 80055c0:	461e      	mov	r6, r3
 80055c2:	b096      	sub	sp, #88	@ 0x58
 80055c4:	da0c      	bge.n	80055e0 <__swhatbuf_r+0x2c>
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	2100      	movs	r1, #0
 80055ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055ce:	bf14      	ite	ne
 80055d0:	2340      	movne	r3, #64	@ 0x40
 80055d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055d6:	2000      	movs	r0, #0
 80055d8:	6031      	str	r1, [r6, #0]
 80055da:	602b      	str	r3, [r5, #0]
 80055dc:	b016      	add	sp, #88	@ 0x58
 80055de:	bd70      	pop	{r4, r5, r6, pc}
 80055e0:	466a      	mov	r2, sp
 80055e2:	f000 f897 	bl	8005714 <_fstat_r>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	dbed      	blt.n	80055c6 <__swhatbuf_r+0x12>
 80055ea:	9901      	ldr	r1, [sp, #4]
 80055ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80055f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80055f4:	4259      	negs	r1, r3
 80055f6:	4159      	adcs	r1, r3
 80055f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055fc:	e7eb      	b.n	80055d6 <__swhatbuf_r+0x22>

080055fe <__smakebuf_r>:
 80055fe:	898b      	ldrh	r3, [r1, #12]
 8005600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005602:	079d      	lsls	r5, r3, #30
 8005604:	4606      	mov	r6, r0
 8005606:	460c      	mov	r4, r1
 8005608:	d507      	bpl.n	800561a <__smakebuf_r+0x1c>
 800560a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	2301      	movs	r3, #1
 8005614:	6163      	str	r3, [r4, #20]
 8005616:	b003      	add	sp, #12
 8005618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800561a:	466a      	mov	r2, sp
 800561c:	ab01      	add	r3, sp, #4
 800561e:	f7ff ffc9 	bl	80055b4 <__swhatbuf_r>
 8005622:	9f00      	ldr	r7, [sp, #0]
 8005624:	4605      	mov	r5, r0
 8005626:	4639      	mov	r1, r7
 8005628:	4630      	mov	r0, r6
 800562a:	f7ff fa55 	bl	8004ad8 <_malloc_r>
 800562e:	b948      	cbnz	r0, 8005644 <__smakebuf_r+0x46>
 8005630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005634:	059a      	lsls	r2, r3, #22
 8005636:	d4ee      	bmi.n	8005616 <__smakebuf_r+0x18>
 8005638:	f023 0303 	bic.w	r3, r3, #3
 800563c:	f043 0302 	orr.w	r3, r3, #2
 8005640:	81a3      	strh	r3, [r4, #12]
 8005642:	e7e2      	b.n	800560a <__smakebuf_r+0xc>
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800564a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800564e:	81a3      	strh	r3, [r4, #12]
 8005650:	9b01      	ldr	r3, [sp, #4]
 8005652:	6020      	str	r0, [r4, #0]
 8005654:	b15b      	cbz	r3, 800566e <__smakebuf_r+0x70>
 8005656:	4630      	mov	r0, r6
 8005658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800565c:	f000 f86c 	bl	8005738 <_isatty_r>
 8005660:	b128      	cbz	r0, 800566e <__smakebuf_r+0x70>
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	f023 0303 	bic.w	r3, r3, #3
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	81a3      	strh	r3, [r4, #12]
 800566e:	89a3      	ldrh	r3, [r4, #12]
 8005670:	431d      	orrs	r5, r3
 8005672:	81a5      	strh	r5, [r4, #12]
 8005674:	e7cf      	b.n	8005616 <__smakebuf_r+0x18>

08005676 <_putc_r>:
 8005676:	b570      	push	{r4, r5, r6, lr}
 8005678:	460d      	mov	r5, r1
 800567a:	4614      	mov	r4, r2
 800567c:	4606      	mov	r6, r0
 800567e:	b118      	cbz	r0, 8005688 <_putc_r+0x12>
 8005680:	6a03      	ldr	r3, [r0, #32]
 8005682:	b90b      	cbnz	r3, 8005688 <_putc_r+0x12>
 8005684:	f7fe ff74 	bl	8004570 <__sinit>
 8005688:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800568a:	07d8      	lsls	r0, r3, #31
 800568c:	d405      	bmi.n	800569a <_putc_r+0x24>
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	0599      	lsls	r1, r3, #22
 8005692:	d402      	bmi.n	800569a <_putc_r+0x24>
 8005694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005696:	f7ff f98c 	bl	80049b2 <__retarget_lock_acquire_recursive>
 800569a:	68a3      	ldr	r3, [r4, #8]
 800569c:	3b01      	subs	r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	60a3      	str	r3, [r4, #8]
 80056a2:	da05      	bge.n	80056b0 <_putc_r+0x3a>
 80056a4:	69a2      	ldr	r2, [r4, #24]
 80056a6:	4293      	cmp	r3, r2
 80056a8:	db12      	blt.n	80056d0 <_putc_r+0x5a>
 80056aa:	b2eb      	uxtb	r3, r5
 80056ac:	2b0a      	cmp	r3, #10
 80056ae:	d00f      	beq.n	80056d0 <_putc_r+0x5a>
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	6022      	str	r2, [r4, #0]
 80056b6:	701d      	strb	r5, [r3, #0]
 80056b8:	b2ed      	uxtb	r5, r5
 80056ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056bc:	07da      	lsls	r2, r3, #31
 80056be:	d405      	bmi.n	80056cc <_putc_r+0x56>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	059b      	lsls	r3, r3, #22
 80056c4:	d402      	bmi.n	80056cc <_putc_r+0x56>
 80056c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056c8:	f7ff f974 	bl	80049b4 <__retarget_lock_release_recursive>
 80056cc:	4628      	mov	r0, r5
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	4629      	mov	r1, r5
 80056d2:	4622      	mov	r2, r4
 80056d4:	4630      	mov	r0, r6
 80056d6:	f7ff f85e 	bl	8004796 <__swbuf_r>
 80056da:	4605      	mov	r5, r0
 80056dc:	e7ed      	b.n	80056ba <_putc_r+0x44>

080056de <memmove>:
 80056de:	4288      	cmp	r0, r1
 80056e0:	b510      	push	{r4, lr}
 80056e2:	eb01 0402 	add.w	r4, r1, r2
 80056e6:	d902      	bls.n	80056ee <memmove+0x10>
 80056e8:	4284      	cmp	r4, r0
 80056ea:	4623      	mov	r3, r4
 80056ec:	d807      	bhi.n	80056fe <memmove+0x20>
 80056ee:	1e43      	subs	r3, r0, #1
 80056f0:	42a1      	cmp	r1, r4
 80056f2:	d008      	beq.n	8005706 <memmove+0x28>
 80056f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056fc:	e7f8      	b.n	80056f0 <memmove+0x12>
 80056fe:	4601      	mov	r1, r0
 8005700:	4402      	add	r2, r0
 8005702:	428a      	cmp	r2, r1
 8005704:	d100      	bne.n	8005708 <memmove+0x2a>
 8005706:	bd10      	pop	{r4, pc}
 8005708:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800570c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005710:	e7f7      	b.n	8005702 <memmove+0x24>
	...

08005714 <_fstat_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	2300      	movs	r3, #0
 8005718:	4d06      	ldr	r5, [pc, #24]	@ (8005734 <_fstat_r+0x20>)
 800571a:	4604      	mov	r4, r0
 800571c:	4608      	mov	r0, r1
 800571e:	4611      	mov	r1, r2
 8005720:	602b      	str	r3, [r5, #0]
 8005722:	f7fb fe87 	bl	8001434 <_fstat>
 8005726:	1c43      	adds	r3, r0, #1
 8005728:	d102      	bne.n	8005730 <_fstat_r+0x1c>
 800572a:	682b      	ldr	r3, [r5, #0]
 800572c:	b103      	cbz	r3, 8005730 <_fstat_r+0x1c>
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	bd38      	pop	{r3, r4, r5, pc}
 8005732:	bf00      	nop
 8005734:	20000658 	.word	0x20000658

08005738 <_isatty_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	2300      	movs	r3, #0
 800573c:	4d05      	ldr	r5, [pc, #20]	@ (8005754 <_isatty_r+0x1c>)
 800573e:	4604      	mov	r4, r0
 8005740:	4608      	mov	r0, r1
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	f7fb fe85 	bl	8001452 <_isatty>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_isatty_r+0x1a>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_isatty_r+0x1a>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	20000658 	.word	0x20000658

08005758 <_sbrk_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	2300      	movs	r3, #0
 800575c:	4d05      	ldr	r5, [pc, #20]	@ (8005774 <_sbrk_r+0x1c>)
 800575e:	4604      	mov	r4, r0
 8005760:	4608      	mov	r0, r1
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	f7fb fe8c 	bl	8001480 <_sbrk>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_sbrk_r+0x1a>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_sbrk_r+0x1a>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	20000658 	.word	0x20000658

08005778 <memchr>:
 8005778:	4603      	mov	r3, r0
 800577a:	b510      	push	{r4, lr}
 800577c:	b2c9      	uxtb	r1, r1
 800577e:	4402      	add	r2, r0
 8005780:	4293      	cmp	r3, r2
 8005782:	4618      	mov	r0, r3
 8005784:	d101      	bne.n	800578a <memchr+0x12>
 8005786:	2000      	movs	r0, #0
 8005788:	e003      	b.n	8005792 <memchr+0x1a>
 800578a:	7804      	ldrb	r4, [r0, #0]
 800578c:	3301      	adds	r3, #1
 800578e:	428c      	cmp	r4, r1
 8005790:	d1f6      	bne.n	8005780 <memchr+0x8>
 8005792:	bd10      	pop	{r4, pc}

08005794 <memcpy>:
 8005794:	440a      	add	r2, r1
 8005796:	4291      	cmp	r1, r2
 8005798:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800579c:	d100      	bne.n	80057a0 <memcpy+0xc>
 800579e:	4770      	bx	lr
 80057a0:	b510      	push	{r4, lr}
 80057a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057a6:	4291      	cmp	r1, r2
 80057a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ac:	d1f9      	bne.n	80057a2 <memcpy+0xe>
 80057ae:	bd10      	pop	{r4, pc}

080057b0 <abort>:
 80057b0:	2006      	movs	r0, #6
 80057b2:	b508      	push	{r3, lr}
 80057b4:	f000 f85a 	bl	800586c <raise>
 80057b8:	2001      	movs	r0, #1
 80057ba:	f7fb fdec 	bl	8001396 <_exit>

080057be <_realloc_r>:
 80057be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c2:	4607      	mov	r7, r0
 80057c4:	4614      	mov	r4, r2
 80057c6:	460d      	mov	r5, r1
 80057c8:	b921      	cbnz	r1, 80057d4 <_realloc_r+0x16>
 80057ca:	4611      	mov	r1, r2
 80057cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057d0:	f7ff b982 	b.w	8004ad8 <_malloc_r>
 80057d4:	b92a      	cbnz	r2, 80057e2 <_realloc_r+0x24>
 80057d6:	f7ff f90d 	bl	80049f4 <_free_r>
 80057da:	4625      	mov	r5, r4
 80057dc:	4628      	mov	r0, r5
 80057de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e2:	f000 f85f 	bl	80058a4 <_malloc_usable_size_r>
 80057e6:	4284      	cmp	r4, r0
 80057e8:	4606      	mov	r6, r0
 80057ea:	d802      	bhi.n	80057f2 <_realloc_r+0x34>
 80057ec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057f0:	d8f4      	bhi.n	80057dc <_realloc_r+0x1e>
 80057f2:	4621      	mov	r1, r4
 80057f4:	4638      	mov	r0, r7
 80057f6:	f7ff f96f 	bl	8004ad8 <_malloc_r>
 80057fa:	4680      	mov	r8, r0
 80057fc:	b908      	cbnz	r0, 8005802 <_realloc_r+0x44>
 80057fe:	4645      	mov	r5, r8
 8005800:	e7ec      	b.n	80057dc <_realloc_r+0x1e>
 8005802:	42b4      	cmp	r4, r6
 8005804:	4622      	mov	r2, r4
 8005806:	4629      	mov	r1, r5
 8005808:	bf28      	it	cs
 800580a:	4632      	movcs	r2, r6
 800580c:	f7ff ffc2 	bl	8005794 <memcpy>
 8005810:	4629      	mov	r1, r5
 8005812:	4638      	mov	r0, r7
 8005814:	f7ff f8ee 	bl	80049f4 <_free_r>
 8005818:	e7f1      	b.n	80057fe <_realloc_r+0x40>

0800581a <_raise_r>:
 800581a:	291f      	cmp	r1, #31
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	4605      	mov	r5, r0
 8005820:	460c      	mov	r4, r1
 8005822:	d904      	bls.n	800582e <_raise_r+0x14>
 8005824:	2316      	movs	r3, #22
 8005826:	6003      	str	r3, [r0, #0]
 8005828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800582c:	bd38      	pop	{r3, r4, r5, pc}
 800582e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005830:	b112      	cbz	r2, 8005838 <_raise_r+0x1e>
 8005832:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005836:	b94b      	cbnz	r3, 800584c <_raise_r+0x32>
 8005838:	4628      	mov	r0, r5
 800583a:	f000 f831 	bl	80058a0 <_getpid_r>
 800583e:	4622      	mov	r2, r4
 8005840:	4601      	mov	r1, r0
 8005842:	4628      	mov	r0, r5
 8005844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005848:	f000 b818 	b.w	800587c <_kill_r>
 800584c:	2b01      	cmp	r3, #1
 800584e:	d00a      	beq.n	8005866 <_raise_r+0x4c>
 8005850:	1c59      	adds	r1, r3, #1
 8005852:	d103      	bne.n	800585c <_raise_r+0x42>
 8005854:	2316      	movs	r3, #22
 8005856:	6003      	str	r3, [r0, #0]
 8005858:	2001      	movs	r0, #1
 800585a:	e7e7      	b.n	800582c <_raise_r+0x12>
 800585c:	2100      	movs	r1, #0
 800585e:	4620      	mov	r0, r4
 8005860:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005864:	4798      	blx	r3
 8005866:	2000      	movs	r0, #0
 8005868:	e7e0      	b.n	800582c <_raise_r+0x12>
	...

0800586c <raise>:
 800586c:	4b02      	ldr	r3, [pc, #8]	@ (8005878 <raise+0xc>)
 800586e:	4601      	mov	r1, r0
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	f7ff bfd2 	b.w	800581a <_raise_r>
 8005876:	bf00      	nop
 8005878:	2000023c 	.word	0x2000023c

0800587c <_kill_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	2300      	movs	r3, #0
 8005880:	4d06      	ldr	r5, [pc, #24]	@ (800589c <_kill_r+0x20>)
 8005882:	4604      	mov	r4, r0
 8005884:	4608      	mov	r0, r1
 8005886:	4611      	mov	r1, r2
 8005888:	602b      	str	r3, [r5, #0]
 800588a:	f7fb fd74 	bl	8001376 <_kill>
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	d102      	bne.n	8005898 <_kill_r+0x1c>
 8005892:	682b      	ldr	r3, [r5, #0]
 8005894:	b103      	cbz	r3, 8005898 <_kill_r+0x1c>
 8005896:	6023      	str	r3, [r4, #0]
 8005898:	bd38      	pop	{r3, r4, r5, pc}
 800589a:	bf00      	nop
 800589c:	20000658 	.word	0x20000658

080058a0 <_getpid_r>:
 80058a0:	f7fb bd62 	b.w	8001368 <_getpid>

080058a4 <_malloc_usable_size_r>:
 80058a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a8:	1f18      	subs	r0, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	bfbc      	itt	lt
 80058ae:	580b      	ldrlt	r3, [r1, r0]
 80058b0:	18c0      	addlt	r0, r0, r3
 80058b2:	4770      	bx	lr

080058b4 <_init>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	bf00      	nop
 80058b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ba:	bc08      	pop	{r3}
 80058bc:	469e      	mov	lr, r3
 80058be:	4770      	bx	lr

080058c0 <_fini>:
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	bf00      	nop
 80058c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c6:	bc08      	pop	{r3}
 80058c8:	469e      	mov	lr, r3
 80058ca:	4770      	bx	lr
