
ProjetoTetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c94  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08003da0  08003da0  00004da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f88  08003f88  00005254  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003f88  08003f88  00005254  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003f88  08003f88  00005254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f88  08003f88  00004f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f8c  08003f8c  00004f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000254  20000000  08003f90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000254  080041e4  00005254  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  200005b8  080041e4  000055b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a12  00000000  00000000  0000527d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002092  00000000  00000000  0000ec8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00010d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e3  00000000  00000000  000118d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eda  00000000  00000000  000121b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbf4  00000000  00000000  0002b08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a59d  00000000  00000000  00037c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c221e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000390c  00000000  00000000  000c2264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000c5b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000254 	.word	0x20000254
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d88 	.word	0x08003d88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000258 	.word	0x20000258
 8000148:	08003d88 	.word	0x08003d88

0800014c <lcd_Task>:

#include "LCD_Manager.h"

estados_LCD estadoLCD = TELA1;

void lcd_Task(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	//4 estados na máquina de estados

	switch (estadoLCD) {
 8000150:	4b1c      	ldr	r3, [pc, #112]	@ (80001c4 <lcd_Task+0x78>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b03      	cmp	r3, #3
 8000156:	d80b      	bhi.n	8000170 <lcd_Task+0x24>
 8000158:	a201      	add	r2, pc, #4	@ (adr r2, 8000160 <lcd_Task+0x14>)
 800015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800015e:	bf00      	nop
 8000160:	08000177 	.word	0x08000177
 8000164:	08000189 	.word	0x08000189
 8000168:	0800019b 	.word	0x0800019b
 800016c:	080001ad 	.word	0x080001ad
	default:
		estadoLCD = TELA1;
 8000170:	4b14      	ldr	r3, [pc, #80]	@ (80001c4 <lcd_Task+0x78>)
 8000172:	2200      	movs	r2, #0
 8000174:	701a      	strb	r2, [r3, #0]
	case TELA1:
		change_Message(0, ">>Start Game");
 8000176:	4914      	ldr	r1, [pc, #80]	@ (80001c8 <lcd_Task+0x7c>)
 8000178:	2000      	movs	r0, #0
 800017a:	f000 fa07 	bl	800058c <change_Message>
		change_Message(1, "Recorde Atual");
 800017e:	4913      	ldr	r1, [pc, #76]	@ (80001cc <lcd_Task+0x80>)
 8000180:	2001      	movs	r0, #1
 8000182:	f000 fa03 	bl	800058c <change_Message>
		break;
 8000186:	e01a      	b.n	80001be <lcd_Task+0x72>
	case TELA2:
		change_Message(0, ">>Recorde Atual");
 8000188:	4911      	ldr	r1, [pc, #68]	@ (80001d0 <lcd_Task+0x84>)
 800018a:	2000      	movs	r0, #0
 800018c:	f000 f9fe 	bl	800058c <change_Message>
		change_Message(1, "Gravar Nome");
 8000190:	4910      	ldr	r1, [pc, #64]	@ (80001d4 <lcd_Task+0x88>)
 8000192:	2001      	movs	r0, #1
 8000194:	f000 f9fa 	bl	800058c <change_Message>
		break;
 8000198:	e011      	b.n	80001be <lcd_Task+0x72>
	case TELA3:
		change_Message(0, ">>Gravar Nome");
 800019a:	490f      	ldr	r1, [pc, #60]	@ (80001d8 <lcd_Task+0x8c>)
 800019c:	2000      	movs	r0, #0
 800019e:	f000 f9f5 	bl	800058c <change_Message>
		change_Message(1, "Limpar Recorde");
 80001a2:	490e      	ldr	r1, [pc, #56]	@ (80001dc <lcd_Task+0x90>)
 80001a4:	2001      	movs	r0, #1
 80001a6:	f000 f9f1 	bl	800058c <change_Message>
		break;
 80001aa:	e008      	b.n	80001be <lcd_Task+0x72>
	case TELA4:
		change_Message(0, ">>Limpar Recorde");
 80001ac:	490c      	ldr	r1, [pc, #48]	@ (80001e0 <lcd_Task+0x94>)
 80001ae:	2000      	movs	r0, #0
 80001b0:	f000 f9ec 	bl	800058c <change_Message>
		change_Message(1, "Start Game");
 80001b4:	490b      	ldr	r1, [pc, #44]	@ (80001e4 <lcd_Task+0x98>)
 80001b6:	2001      	movs	r0, #1
 80001b8:	f000 f9e8 	bl	800058c <change_Message>
		break;
 80001bc:	bf00      	nop
	}
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	20000270 	.word	0x20000270
 80001c8:	08003da0 	.word	0x08003da0
 80001cc:	08003db0 	.word	0x08003db0
 80001d0:	08003dc0 	.word	0x08003dc0
 80001d4:	08003dd0 	.word	0x08003dd0
 80001d8:	08003ddc 	.word	0x08003ddc
 80001dc:	08003dec 	.word	0x08003dec
 80001e0:	08003dfc 	.word	0x08003dfc
 80001e4:	08003e10 	.word	0x08003e10

080001e8 <changeLCDScreen>:

void changeLCDScreen(estados_LCD novaTela) {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	//valide que novaTela é um estado valido antes de mudar
	if (novaTela >= TELA1 && novaTela <= TELA4) {
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b03      	cmp	r3, #3
 80001f6:	d803      	bhi.n	8000200 <changeLCDScreen+0x18>
		estadoLCD = novaTela;
 80001f8:	4a05      	ldr	r2, [pc, #20]	@ (8000210 <changeLCDScreen+0x28>)
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	7013      	strb	r3, [r2, #0]
	} else {
		estadoLCD = TELA1; // Reset to default state if invalid
	}
}
 80001fe:	e002      	b.n	8000206 <changeLCDScreen+0x1e>
		estadoLCD = TELA1; // Reset to default state if invalid
 8000200:	4b03      	ldr	r3, [pc, #12]	@ (8000210 <changeLCDScreen+0x28>)
 8000202:	2200      	movs	r2, #0
 8000204:	701a      	strb	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	20000270 	.word	0x20000270

08000214 <initGame>:
static int linha = 0, coluna = 0, peca_atual = 0;                // Posição inicial da peça
PecaTetris peca;


void initGame(void)
{
 8000214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000216:	b091      	sub	sp, #68	@ 0x44
 8000218:	af0e      	add	r7, sp, #56	@ 0x38
	peca_atual = number_aleatory_peace(); // Gera a primeira peça aleatória
 800021a:	f000 ffad 	bl	8001178 <number_aleatory_peace>
 800021e:	4603      	mov	r3, r0
 8000220:	4a1c      	ldr	r2, [pc, #112]	@ (8000294 <initGame+0x80>)
 8000222:	6013      	str	r3, [r2, #0]
    peca = pecas[peca_atual];
 8000224:	4b1b      	ldr	r3, [pc, #108]	@ (8000294 <initGame+0x80>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	491b      	ldr	r1, [pc, #108]	@ (8000298 <initGame+0x84>)
 800022a:	4a1c      	ldr	r2, [pc, #112]	@ (800029c <initGame+0x88>)
 800022c:	019b      	lsls	r3, r3, #6
 800022e:	4413      	add	r3, r2
 8000230:	460c      	mov	r4, r1
 8000232:	461d      	mov	r5, r3
 8000234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800023a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800023c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800023e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000240:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    linha = 0;
 8000248:	4b15      	ldr	r3, [pc, #84]	@ (80002a0 <initGame+0x8c>)
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
    coluna = 3;
 800024e:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <initGame+0x90>)
 8000250:	2203      	movs	r2, #3
 8000252:	601a      	str	r2, [r3, #0]
	init_game();
 8000254:	f000 fdde 	bl	8000e14 <init_game>

    place_piece(linha, coluna, peca);
 8000258:	4b11      	ldr	r3, [pc, #68]	@ (80002a0 <initGame+0x8c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <initGame+0x90>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	603a      	str	r2, [r7, #0]
 8000264:	4e0c      	ldr	r6, [pc, #48]	@ (8000298 <initGame+0x84>)
 8000266:	466d      	mov	r5, sp
 8000268:	f106 0408 	add.w	r4, r6, #8
 800026c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800026e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000278:	e894 0003 	ldmia.w	r4, {r0, r1}
 800027c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000280:	e896 000c 	ldmia.w	r6, {r2, r3}
 8000284:	6839      	ldr	r1, [r7, #0]
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f000 fe04 	bl	8000e94 <place_piece>
    //limpaTela();
    //draw_board();

}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000294:	2000027c 	.word	0x2000027c
 8000298:	20000280 	.word	0x20000280
 800029c:	2000002c 	.word	0x2000002c
 80002a0:	20000274 	.word	0x20000274
 80002a4:	20000278 	.word	0x20000278

080002a8 <taskTetris>:

void taskTetris(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
    if (game_over()) // Verifica se o jogo acabou
 80002ac:	f001 f924 	bl	80014f8 <game_over>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d106      	bne.n	80002c4 <taskTetris+0x1c>
    {
        return;
    }

    update_game(&linha, &coluna, &peca, &peca_atual);
 80002b6:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <taskTetris+0x20>)
 80002b8:	4a04      	ldr	r2, [pc, #16]	@ (80002cc <taskTetris+0x24>)
 80002ba:	4905      	ldr	r1, [pc, #20]	@ (80002d0 <taskTetris+0x28>)
 80002bc:	4805      	ldr	r0, [pc, #20]	@ (80002d4 <taskTetris+0x2c>)
 80002be:	f001 f8b3 	bl	8001428 <update_game>
 80002c2:	e000      	b.n	80002c6 <taskTetris+0x1e>
        return;
 80002c4:	bf00      	nop
}
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000027c 	.word	0x2000027c
 80002cc:	20000280 	.word	0x20000280
 80002d0:	20000278 	.word	0x20000278
 80002d4:	20000274 	.word	0x20000274

080002d8 <taskMatrizLed>:
#include "MatrizLed.h"

volatile MatrizLED_t MatrizLed = {0};

void taskMatrizLed(void) //150us de execucao
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
    static volatile uint8_t line = 0;
    static volatile uint16_t line_m = 0b1000000000000000;

    volatile uint16_t aux_line = 0x00;
 80002de:	2300      	movs	r3, #0
 80002e0:	80fb      	strh	r3, [r7, #6]
    volatile uint8_t aux_line2 = 0x00;
 80002e2:	2300      	movs	r3, #0
 80002e4:	717b      	strb	r3, [r7, #5]

    line++;
 80002e6:	4b53      	ldr	r3, [pc, #332]	@ (8000434 <taskMatrizLed+0x15c>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	3301      	adds	r3, #1
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	4b50      	ldr	r3, [pc, #320]	@ (8000434 <taskMatrizLed+0x15c>)
 80002f2:	701a      	strb	r2, [r3, #0]
    if (line == 16)
 80002f4:	4b4f      	ldr	r3, [pc, #316]	@ (8000434 <taskMatrizLed+0x15c>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	2b10      	cmp	r3, #16
 80002fc:	d102      	bne.n	8000304 <taskMatrizLed+0x2c>
        line = 0;
 80002fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000434 <taskMatrizLed+0x15c>)
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]
    aux_line = (line_m >> line) | (line_m << (15 - line));
 8000304:	4b4c      	ldr	r3, [pc, #304]	@ (8000438 <taskMatrizLed+0x160>)
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	b29b      	uxth	r3, r3
 800030a:	461a      	mov	r2, r3
 800030c:	4b49      	ldr	r3, [pc, #292]	@ (8000434 <taskMatrizLed+0x15c>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	fa42 f303 	asr.w	r3, r2, r3
 8000316:	b21a      	sxth	r2, r3
 8000318:	4b47      	ldr	r3, [pc, #284]	@ (8000438 <taskMatrizLed+0x160>)
 800031a:	881b      	ldrh	r3, [r3, #0]
 800031c:	b29b      	uxth	r3, r3
 800031e:	4619      	mov	r1, r3
 8000320:	4b44      	ldr	r3, [pc, #272]	@ (8000434 <taskMatrizLed+0x15c>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	b2db      	uxtb	r3, r3
 8000326:	f1c3 030f 	rsb	r3, r3, #15
 800032a:	fa01 f303 	lsl.w	r3, r1, r3
 800032e:	b21b      	sxth	r3, r3
 8000330:	4313      	orrs	r3, r2
 8000332:	b21b      	sxth	r3, r3
 8000334:	b29b      	uxth	r3, r3
 8000336:	80fb      	strh	r3, [r7, #6]

    for (int i = 0; i < 8; i++)
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	e02e      	b.n	800039c <taskMatrizLed+0xc4>
    {
        if (MatrizLed[line][7 - i] == 0)
 800033e:	4b3d      	ldr	r3, [pc, #244]	@ (8000434 <taskMatrizLed+0x15c>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	b2db      	uxtb	r3, r3
 8000344:	461a      	mov	r2, r3
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	f1c3 0307 	rsb	r3, r3, #7
 800034c:	493b      	ldr	r1, [pc, #236]	@ (800043c <taskMatrizLed+0x164>)
 800034e:	00d2      	lsls	r2, r2, #3
 8000350:	440a      	add	r2, r1
 8000352:	4413      	add	r3, r2
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	b2db      	uxtb	r3, r3
 8000358:	2b00      	cmp	r3, #0
 800035a:	d106      	bne.n	800036a <taskMatrizLed+0x92>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 800035c:	2201      	movs	r2, #1
 800035e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000362:	4837      	ldr	r0, [pc, #220]	@ (8000440 <taskMatrizLed+0x168>)
 8000364:	f001 fc88 	bl	8001c78 <HAL_GPIO_WritePin>
 8000368:	e005      	b.n	8000376 <taskMatrizLed+0x9e>
        else
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000370:	4833      	ldr	r0, [pc, #204]	@ (8000440 <taskMatrizLed+0x168>)
 8000372:	f001 fc81 	bl	8001c78 <HAL_GPIO_WritePin>

        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 8000376:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800037a:	4831      	ldr	r0, [pc, #196]	@ (8000440 <taskMatrizLed+0x168>)
 800037c:	f001 fc94 	bl	8001ca8 <HAL_GPIO_TogglePin>
        DWT_Delay_us(1);
 8000380:	2001      	movs	r0, #1
 8000382:	f000 fa2d 	bl	80007e0 <DWT_Delay_us>
        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 8000386:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800038a:	482d      	ldr	r0, [pc, #180]	@ (8000440 <taskMatrizLed+0x168>)
 800038c:	f001 fc8c 	bl	8001ca8 <HAL_GPIO_TogglePin>
        DWT_Delay_us(1);
 8000390:	2001      	movs	r0, #1
 8000392:	f000 fa25 	bl	80007e0 <DWT_Delay_us>
    for (int i = 0; i < 8; i++)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	3301      	adds	r3, #1
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	2b07      	cmp	r3, #7
 80003a0:	ddcd      	ble.n	800033e <taskMatrizLed+0x66>
    }
    for (int i = 0; i < 16; i++)
 80003a2:	2300      	movs	r3, #0
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	e02e      	b.n	8000406 <taskMatrizLed+0x12e>
    {
        aux_line2 = (aux_line >> i) & 0x0001;
 80003a8:	88fb      	ldrh	r3, [r7, #6]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	fa42 f303 	asr.w	r3, r2, r3
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	717b      	strb	r3, [r7, #5]
        if (aux_line2 == 0)
 80003be:	797b      	ldrb	r3, [r7, #5]
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d106      	bne.n	80003d4 <taskMatrizLed+0xfc>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003cc:	481c      	ldr	r0, [pc, #112]	@ (8000440 <taskMatrizLed+0x168>)
 80003ce:	f001 fc53 	bl	8001c78 <HAL_GPIO_WritePin>
 80003d2:	e005      	b.n	80003e0 <taskMatrizLed+0x108>
        else
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003da:	4819      	ldr	r0, [pc, #100]	@ (8000440 <taskMatrizLed+0x168>)
 80003dc:	f001 fc4c 	bl	8001c78 <HAL_GPIO_WritePin>

        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 80003e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003e4:	4816      	ldr	r0, [pc, #88]	@ (8000440 <taskMatrizLed+0x168>)
 80003e6:	f001 fc5f 	bl	8001ca8 <HAL_GPIO_TogglePin>

        DWT_Delay_us(1);
 80003ea:	2001      	movs	r0, #1
 80003ec:	f000 f9f8 	bl	80007e0 <DWT_Delay_us>
        HAL_GPIO_TogglePin(CLK1_GPIO_Port, CLK1_Pin);
 80003f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003f4:	4812      	ldr	r0, [pc, #72]	@ (8000440 <taskMatrizLed+0x168>)
 80003f6:	f001 fc57 	bl	8001ca8 <HAL_GPIO_TogglePin>

        DWT_Delay_us(1);
 80003fa:	2001      	movs	r0, #1
 80003fc:	f000 f9f0 	bl	80007e0 <DWT_Delay_us>
    for (int i = 0; i < 16; i++)
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	3301      	adds	r3, #1
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	2b0f      	cmp	r3, #15
 800040a:	ddcd      	ble.n	80003a8 <taskMatrizLed+0xd0>
    }
    HAL_GPIO_TogglePin(CLK2_GPIO_Port, CLK2_Pin);
 800040c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000410:	480b      	ldr	r0, [pc, #44]	@ (8000440 <taskMatrizLed+0x168>)
 8000412:	f001 fc49 	bl	8001ca8 <HAL_GPIO_TogglePin>
    DWT_Delay_us(1);
 8000416:	2001      	movs	r0, #1
 8000418:	f000 f9e2 	bl	80007e0 <DWT_Delay_us>
    HAL_GPIO_TogglePin(CLK2_GPIO_Port, CLK2_Pin);
 800041c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000420:	4807      	ldr	r0, [pc, #28]	@ (8000440 <taskMatrizLed+0x168>)
 8000422:	f001 fc41 	bl	8001ca8 <HAL_GPIO_TogglePin>
    DWT_Delay_us(1);
 8000426:	2001      	movs	r0, #1
 8000428:	f000 f9da 	bl	80007e0 <DWT_Delay_us>
}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000340 	.word	0x20000340
 8000438:	20000000 	.word	0x20000000
 800043c:	200002c0 	.word	0x200002c0
 8000440:	40010c00 	.word	0x40010c00

08000444 <changeMatriz>:

void changeMatriz(MatrizLED_t newMatriz)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < LinhasMatriz; i++)
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	e01a      	b.n	8000488 <changeMatriz+0x44>
    {
        for (int j = 0; j < ColunasMatriz; j++)
 8000452:	2300      	movs	r3, #0
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	e011      	b.n	800047c <changeMatriz+0x38>
        {
            MatrizLed[i][j] = newMatriz[i][j];
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	00db      	lsls	r3, r3, #3
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	441a      	add	r2, r3
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	4413      	add	r3, r2
 8000464:	7819      	ldrb	r1, [r3, #0]
 8000466:	4a0d      	ldr	r2, [pc, #52]	@ (800049c <changeMatriz+0x58>)
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	00db      	lsls	r3, r3, #3
 800046c:	441a      	add	r2, r3
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	4413      	add	r3, r2
 8000472:	460a      	mov	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < ColunasMatriz; j++)
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	3301      	adds	r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	2b07      	cmp	r3, #7
 8000480:	ddea      	ble.n	8000458 <changeMatriz+0x14>
    for (int i = 0; i < LinhasMatriz; i++)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	3301      	adds	r3, #1
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2b0f      	cmp	r3, #15
 800048c:	dde1      	ble.n	8000452 <changeMatriz+0xe>
        }
    }
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	3714      	adds	r7, #20
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	200002c0 	.word	0x200002c0

080004a0 <register_EN>:
int8_t status_LCD_startup = 1;
char message[2][17] = {"                ", "                "};
int8_t position_String = 0;
char linha_LCD = 0;

void register_EN(void) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
    EN_HIGH;
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004aa:	4808      	ldr	r0, [pc, #32]	@ (80004cc <register_EN+0x2c>)
 80004ac:	f001 fbe4 	bl	8001c78 <HAL_GPIO_WritePin>
    LCD_delay_us(1);
 80004b0:	2001      	movs	r0, #1
 80004b2:	f000 f995 	bl	80007e0 <DWT_Delay_us>
    EN_LOW;
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004bc:	4803      	ldr	r0, [pc, #12]	@ (80004cc <register_EN+0x2c>)
 80004be:	f001 fbdb 	bl	8001c78 <HAL_GPIO_WritePin>
    LCD_delay_us(40);
 80004c2:	2028      	movs	r0, #40	@ 0x28
 80004c4:	f000 f98c 	bl	80007e0 <DWT_Delay_us>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40011000 	.word	0x40011000

080004d0 <Write_Display>:
//    DB1_HIGH;
//    DB0_LOW;
//    register_EN();
//}

void Write_Display() {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0

    if (position_String < 16) {
 80004d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000540 <Write_Display+0x70>)
 80004d6:	f993 3000 	ldrsb.w	r3, [r3]
 80004da:	2b0f      	cmp	r3, #15
 80004dc:	dc1a      	bgt.n	8000514 <Write_Display+0x44>
        Write_caracter(message[linha_LCD][position_String]);
 80004de:	4b19      	ldr	r3, [pc, #100]	@ (8000544 <Write_Display+0x74>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	4619      	mov	r1, r3
 80004e4:	4b16      	ldr	r3, [pc, #88]	@ (8000540 <Write_Display+0x70>)
 80004e6:	f993 3000 	ldrsb.w	r3, [r3]
 80004ea:	4618      	mov	r0, r3
 80004ec:	4a16      	ldr	r2, [pc, #88]	@ (8000548 <Write_Display+0x78>)
 80004ee:	460b      	mov	r3, r1
 80004f0:	011b      	lsls	r3, r3, #4
 80004f2:	440b      	add	r3, r1
 80004f4:	4413      	add	r3, r2
 80004f6:	4403      	add	r3, r0
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f826 	bl	800054c <Write_caracter>
        position_String++;
 8000500:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <Write_Display+0x70>)
 8000502:	f993 3000 	ldrsb.w	r3, [r3]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	3301      	adds	r3, #1
 800050a:	b2db      	uxtb	r3, r3
 800050c:	b25a      	sxtb	r2, r3
 800050e:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <Write_Display+0x70>)
 8000510:	701a      	strb	r2, [r3, #0]
        position_String = 0;
        (linha_LCD == 0) ? (linha_LCD = 1) : (linha_LCD = 0);
        Set_Line(linha_LCD);
    }

}
 8000512:	e012      	b.n	800053a <Write_Display+0x6a>
        position_String = 0;
 8000514:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <Write_Display+0x70>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
        (linha_LCD == 0) ? (linha_LCD = 1) : (linha_LCD = 0);
 800051a:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <Write_Display+0x74>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d103      	bne.n	800052a <Write_Display+0x5a>
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <Write_Display+0x74>)
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
 8000528:	e002      	b.n	8000530 <Write_Display+0x60>
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <Write_Display+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
        Set_Line(linha_LCD);
 8000530:	4b04      	ldr	r3, [pc, #16]	@ (8000544 <Write_Display+0x74>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f816 	bl	8000566 <Set_Line>
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000341 	.word	0x20000341
 8000544:	20000342 	.word	0x20000342
 8000548:	20000004 	.word	0x20000004

0800054c <Write_caracter>:

void Write_caracter(char c) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	lcd_send_data(c);
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f8d3 	bl	8000704 <lcd_send_data>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <Set_Line>:
    EN_LOW;
    LCD_delay_us(1);
    RS_LOW;
}

void Set_Line(char line) {
 8000566:	b580      	push	{r7, lr}
 8000568:	b082      	sub	sp, #8
 800056a:	af00      	add	r7, sp, #0
 800056c:	4603      	mov	r3, r0
 800056e:	71fb      	strb	r3, [r7, #7]
	if (line == 0)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d103      	bne.n	800057e <Set_Line+0x18>
	        lcd_send_command(0x80);  // linha 1
 8000576:	2080      	movs	r0, #128	@ 0x80
 8000578:	f000 f8a2 	bl	80006c0 <lcd_send_command>
	    else
	        lcd_send_command(0xC0);  // linha 2
}
 800057c:	e002      	b.n	8000584 <Set_Line+0x1e>
	        lcd_send_command(0xC0);  // linha 2
 800057e:	20c0      	movs	r0, #192	@ 0xc0
 8000580:	f000 f89e 	bl	80006c0 <lcd_send_command>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <change_Message>:

void change_Message(char line, char *new_Text) {
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	71fb      	strb	r3, [r7, #7]
    int i = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
    //Verifica onde acaba a string enviada
    while (new_Text[i] != '\0' && i < 16) {
 800059c:	e01f      	b.n	80005de <change_Message+0x52>

        if (message[line][i] != new_Text[i]) {
 800059e:	79fa      	ldrb	r2, [r7, #7]
 80005a0:	491f      	ldr	r1, [pc, #124]	@ (8000620 <change_Message+0x94>)
 80005a2:	4613      	mov	r3, r2
 80005a4:	011b      	lsls	r3, r3, #4
 80005a6:	4413      	add	r3, r2
 80005a8:	18ca      	adds	r2, r1, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	6839      	ldr	r1, [r7, #0]
 80005b4:	440b      	add	r3, r1
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d00d      	beq.n	80005d8 <change_Message+0x4c>
                message[line][i] = new_Text[i];
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	4413      	add	r3, r2
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	7818      	ldrb	r0, [r3, #0]
 80005c6:	4916      	ldr	r1, [pc, #88]	@ (8000620 <change_Message+0x94>)
 80005c8:	4613      	mov	r3, r2
 80005ca:	011b      	lsls	r3, r3, #4
 80005cc:	4413      	add	r3, r2
 80005ce:	18ca      	adds	r2, r1, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	4602      	mov	r2, r0
 80005d6:	701a      	strb	r2, [r3, #0]
            }
        i++;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
    while (new_Text[i] != '\0' && i < 16) {
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d010      	beq.n	800060c <change_Message+0x80>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	ddd6      	ble.n	800059e <change_Message+0x12>
    }
    for (i = i; i < 16; i++) {
 80005f0:	e00c      	b.n	800060c <change_Message+0x80>
        message[line][i] = ' ';
 80005f2:	79fa      	ldrb	r2, [r7, #7]
 80005f4:	490a      	ldr	r1, [pc, #40]	@ (8000620 <change_Message+0x94>)
 80005f6:	4613      	mov	r3, r2
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	4413      	add	r3, r2
 80005fc:	18ca      	adds	r2, r1, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	2220      	movs	r2, #32
 8000604:	701a      	strb	r2, [r3, #0]
    for (i = i; i < 16; i++) {
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3301      	adds	r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b0f      	cmp	r3, #15
 8000610:	ddef      	ble.n	80005f2 <change_Message+0x66>
    }
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000004 	.word	0x20000004

08000624 <send_nibble>:

void send_nibble(uint8_t nibble) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
    (nibble & 0x08) ? DB7_HIGH : DB7_LOW;
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 0308 	and.w	r3, r3, #8
 8000634:	2b00      	cmp	r3, #0
 8000636:	d005      	beq.n	8000644 <send_nibble+0x20>
 8000638:	2201      	movs	r2, #1
 800063a:	2140      	movs	r1, #64	@ 0x40
 800063c:	481f      	ldr	r0, [pc, #124]	@ (80006bc <send_nibble+0x98>)
 800063e:	f001 fb1b 	bl	8001c78 <HAL_GPIO_WritePin>
 8000642:	e004      	b.n	800064e <send_nibble+0x2a>
 8000644:	2200      	movs	r2, #0
 8000646:	2140      	movs	r1, #64	@ 0x40
 8000648:	481c      	ldr	r0, [pc, #112]	@ (80006bc <send_nibble+0x98>)
 800064a:	f001 fb15 	bl	8001c78 <HAL_GPIO_WritePin>
    (nibble & 0x04) ? DB6_HIGH : DB6_LOW;
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	2b00      	cmp	r3, #0
 8000656:	d005      	beq.n	8000664 <send_nibble+0x40>
 8000658:	2201      	movs	r2, #1
 800065a:	2120      	movs	r1, #32
 800065c:	4817      	ldr	r0, [pc, #92]	@ (80006bc <send_nibble+0x98>)
 800065e:	f001 fb0b 	bl	8001c78 <HAL_GPIO_WritePin>
 8000662:	e004      	b.n	800066e <send_nibble+0x4a>
 8000664:	2200      	movs	r2, #0
 8000666:	2120      	movs	r1, #32
 8000668:	4814      	ldr	r0, [pc, #80]	@ (80006bc <send_nibble+0x98>)
 800066a:	f001 fb05 	bl	8001c78 <HAL_GPIO_WritePin>
    (nibble & 0x02) ? DB5_HIGH : DB5_LOW;
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	2b00      	cmp	r3, #0
 8000676:	d005      	beq.n	8000684 <send_nibble+0x60>
 8000678:	2201      	movs	r2, #1
 800067a:	2110      	movs	r1, #16
 800067c:	480f      	ldr	r0, [pc, #60]	@ (80006bc <send_nibble+0x98>)
 800067e:	f001 fafb 	bl	8001c78 <HAL_GPIO_WritePin>
 8000682:	e004      	b.n	800068e <send_nibble+0x6a>
 8000684:	2200      	movs	r2, #0
 8000686:	2110      	movs	r1, #16
 8000688:	480c      	ldr	r0, [pc, #48]	@ (80006bc <send_nibble+0x98>)
 800068a:	f001 faf5 	bl	8001c78 <HAL_GPIO_WritePin>
    (nibble & 0x01) ? DB4_HIGH : DB4_LOW;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d005      	beq.n	80006a4 <send_nibble+0x80>
 8000698:	2201      	movs	r2, #1
 800069a:	2108      	movs	r1, #8
 800069c:	4807      	ldr	r0, [pc, #28]	@ (80006bc <send_nibble+0x98>)
 800069e:	f001 faeb 	bl	8001c78 <HAL_GPIO_WritePin>
 80006a2:	e004      	b.n	80006ae <send_nibble+0x8a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2108      	movs	r1, #8
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <send_nibble+0x98>)
 80006aa:	f001 fae5 	bl	8001c78 <HAL_GPIO_WritePin>

    register_EN();
 80006ae:	f7ff fef7 	bl	80004a0 <register_EN>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010800 	.word	0x40010800

080006c0 <lcd_send_command>:

void lcd_send_command(uint8_t cmd) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
    RS_LOW;
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006d0:	480b      	ldr	r0, [pc, #44]	@ (8000700 <lcd_send_command+0x40>)
 80006d2:	f001 fad1 	bl	8001c78 <HAL_GPIO_WritePin>
    send_nibble(cmd >> 4);  // parte alta
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	091b      	lsrs	r3, r3, #4
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ffa1 	bl	8000624 <send_nibble>
    send_nibble(cmd & 0x0F); // parte baixa
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 030f 	and.w	r3, r3, #15
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff9a 	bl	8000624 <send_nibble>
    LCD_delay_us(40);
 80006f0:	2028      	movs	r0, #40	@ 0x28
 80006f2:	f000 f875 	bl	80007e0 <DWT_Delay_us>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40011000 	.word	0x40011000

08000704 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
    RS_HIGH;
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <lcd_send_data+0x40>)
 8000716:	f001 faaf 	bl	8001c78 <HAL_GPIO_WritePin>
    send_nibble(data >> 4);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	091b      	lsrs	r3, r3, #4
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff7f 	bl	8000624 <send_nibble>
    send_nibble(data & 0x0F);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f003 030f 	and.w	r3, r3, #15
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff78 	bl	8000624 <send_nibble>
    LCD_delay_us(40);
 8000734:	2028      	movs	r0, #40	@ 0x28
 8000736:	f000 f853 	bl	80007e0 <DWT_Delay_us>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40011000 	.word	0x40011000

08000748 <initialize_LCD>:

void initialize_LCD(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    LCD_delay_ms(15); // tempo mínimo de boot
 800074c:	200f      	movs	r0, #15
 800074e:	f000 ffdd 	bl	800170c <HAL_Delay>

    // Inicialização especial para 4 bits
    send_nibble(0x03);  // função set 8 bits (3)
 8000752:	2003      	movs	r0, #3
 8000754:	f7ff ff66 	bl	8000624 <send_nibble>
    LCD_delay_ms(5);
 8000758:	2005      	movs	r0, #5
 800075a:	f000 ffd7 	bl	800170c <HAL_Delay>
    send_nibble(0x03);
 800075e:	2003      	movs	r0, #3
 8000760:	f7ff ff60 	bl	8000624 <send_nibble>
    LCD_delay_us(150);
 8000764:	2096      	movs	r0, #150	@ 0x96
 8000766:	f000 f83b 	bl	80007e0 <DWT_Delay_us>
    send_nibble(0x03);
 800076a:	2003      	movs	r0, #3
 800076c:	f7ff ff5a 	bl	8000624 <send_nibble>
    LCD_delay_us(150);
 8000770:	2096      	movs	r0, #150	@ 0x96
 8000772:	f000 f835 	bl	80007e0 <DWT_Delay_us>
    send_nibble(0x02);  // função set para 4 bits
 8000776:	2002      	movs	r0, #2
 8000778:	f7ff ff54 	bl	8000624 <send_nibble>
    LCD_delay_us(150);
 800077c:	2096      	movs	r0, #150	@ 0x96
 800077e:	f000 f82f 	bl	80007e0 <DWT_Delay_us>

    lcd_send_command(0x28); // function set: 4 bits, 2 linhas, 5x8
 8000782:	2028      	movs	r0, #40	@ 0x28
 8000784:	f7ff ff9c 	bl	80006c0 <lcd_send_command>
    lcd_send_command(0x08); // display OFF
 8000788:	2008      	movs	r0, #8
 800078a:	f7ff ff99 	bl	80006c0 <lcd_send_command>
    lcd_send_command(0x01); // clear display
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff ff96 	bl	80006c0 <lcd_send_command>
    LCD_delay_ms(2);
 8000794:	2002      	movs	r0, #2
 8000796:	f000 ffb9 	bl	800170c <HAL_Delay>
    lcd_send_command(0x06); // entry mode set
 800079a:	2006      	movs	r0, #6
 800079c:	f7ff ff90 	bl	80006c0 <lcd_send_command>
    lcd_send_command(0x0C); // display ON, cursor OFF
 80007a0:	200c      	movs	r0, #12
 80007a2:	f7ff ff8d 	bl	80006c0 <lcd_send_command>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <DWT_Delay_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void DWT_Delay_Init(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <DWT_Delay_Init+0x2c>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	4a08      	ldr	r2, [pc, #32]	@ (80007d8 <DWT_Delay_Init+0x2c>)
 80007b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007ba:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <DWT_Delay_Init+0x30>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <DWT_Delay_Init+0x30>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <DWT_Delay_Init+0x30>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6013      	str	r3, [r2, #0]
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000edf0 	.word	0xe000edf0
 80007dc:	e0001000 	.word	0xe0001000

080007e0 <DWT_Delay_us>:

void DWT_Delay_us(uint32_t us)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <DWT_Delay_us+0x40>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000);
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <DWT_Delay_us+0x44>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000828 <DWT_Delay_us+0x48>)
 80007f4:	fba2 2303 	umull	r2, r3, r2, r3
 80007f8:	0c9a      	lsrs	r2, r3, #18
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	fb02 f303 	mul.w	r3, r2, r3
 8000800:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < ticks)
 8000802:	bf00      	nop
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <DWT_Delay_us+0x40>)
 8000806:	685a      	ldr	r2, [r3, #4]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	68ba      	ldr	r2, [r7, #8]
 800080e:	429a      	cmp	r2, r3
 8000810:	d8f8      	bhi.n	8000804 <DWT_Delay_us+0x24>
        ;
}
 8000812:	bf00      	nop
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e0001000 	.word	0xe0001000
 8000824:	20000028 	.word	0x20000028
 8000828:	431bde83 	.word	0x431bde83

0800082c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800083c:	d10e      	bne.n	800085c <HAL_TIM_PeriodElapsedCallback+0x30>
    {
        flag1ms = TRUE;
 800083e:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
        count100ms++;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800084e:	701a      	strb	r2, [r3, #0]
        count1000ms++;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	b29a      	uxth	r2, r3
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800085a:	801a      	strh	r2, [r3, #0]
    }
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2000038c 	.word	0x2000038c
 800086c:	2000038d 	.word	0x2000038d
 8000870:	2000038e 	.word	0x2000038e

08000874 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800087a:	f000 fee5 	bl	8001648 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800087e:	f000 f84d 	bl	800091c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000882:	f000 f8dd 	bl	8000a40 <MX_GPIO_Init>
    MX_TIM2_Init();
 8000886:	f000 f88f 	bl	80009a8 <MX_TIM2_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim2);
 800088a:	481f      	ldr	r0, [pc, #124]	@ (8000908 <main+0x94>)
 800088c:	f001 fe54 	bl	8002538 <HAL_TIM_Base_Start_IT>
    DWT_Delay_Init();
 8000890:	f7ff ff8c 	bl	80007ac <DWT_Delay_Init>
    initialize_LCD();
 8000894:	f7ff ff58 	bl	8000748 <initialize_LCD>

    srand(HAL_GetTick());
 8000898:	f000 ff2e 	bl	80016f8 <HAL_GetTick>
 800089c:	4603      	mov	r3, r0
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 f9ec 	bl	8002c7c <srand>

    estados_LCD estadoTeste = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	71fb      	strb	r3, [r7, #7]
    //uint8_t flagTest = FALSE;

    initGame();
 80008a8:	f7ff fcb4 	bl	8000214 <initGame>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (flag1ms)
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <main+0x98>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00b      	beq.n	80008cc <main+0x58>
        {
            flag1ms = FALSE;
 80008b4:	4b15      	ldr	r3, [pc, #84]	@ (800090c <main+0x98>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
            Write_Display();
 80008ba:	f7ff fe09 	bl	80004d0 <Write_Display>
            taskMatrizLed();
 80008be:	f7ff fd0b 	bl	80002d8 <taskMatrizLed>
            taskTetris();
 80008c2:	f7ff fcf1 	bl	80002a8 <taskTetris>
            changeMatriz(board);
 80008c6:	4812      	ldr	r0, [pc, #72]	@ (8000910 <main+0x9c>)
 80008c8:	f7ff fdbc 	bl	8000444 <changeMatriz>
        }

        if (count100ms >= 100)
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <main+0xa0>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b63      	cmp	r3, #99	@ 0x63
 80008d2:	d904      	bls.n	80008de <main+0x6a>
        {

            count100ms = 0;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <main+0xa0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
            // flagTest == TRUE ? changeMatriz(MatrizLedB) : changeMatriz(MatrizLedA);
            // flagTest = flagTest == TRUE ? 0 : 1;
            lcd_Task();
 80008da:	f7ff fc37 	bl	800014c <lcd_Task>
        }

        if (count1000ms >= 1000)
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <main+0xa4>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008e6:	d3e1      	bcc.n	80008ac <main+0x38>
        {
            count1000ms = 0;
 80008e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <main+0xa4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	801a      	strh	r2, [r3, #0]
            estadoTeste++;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	3301      	adds	r3, #1
 80008f2:	71fb      	strb	r3, [r7, #7]
            if (estadoTeste > TELA4)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d901      	bls.n	80008fe <main+0x8a>
                estadoTeste = TELA1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	71fb      	strb	r3, [r7, #7]
            changeLCDScreen(estadoTeste);
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fc71 	bl	80001e8 <changeLCDScreen>
        if (flag1ms)
 8000906:	e7d1      	b.n	80008ac <main+0x38>
 8000908:	20000344 	.word	0x20000344
 800090c:	2000038c 	.word	0x2000038c
 8000910:	20000394 	.word	0x20000394
 8000914:	2000038d 	.word	0x2000038d
 8000918:	2000038e 	.word	0x2000038e

0800091c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b090      	sub	sp, #64	@ 0x40
 8000920:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0318 	add.w	r3, r7, #24
 8000926:	2228      	movs	r2, #40	@ 0x28
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fc1c 	bl	8003168 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093e:	2301      	movs	r3, #1
 8000940:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000942:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000946:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094c:	2301      	movs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000950:	2302      	movs	r3, #2
 8000952:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000954:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000958:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800095a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800095e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0318 	add.w	r3, r7, #24
 8000964:	4618      	mov	r0, r3
 8000966:	f001 f9b9 	bl	8001cdc <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x58>
    {
        Error_Handler();
 8000970:	f000 f8f6 	bl	8000b60 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000974:	230f      	movs	r3, #15
 8000976:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000978:	2302      	movs	r3, #2
 800097a:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000984:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800098a:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2102      	movs	r1, #2
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fc25 	bl	80021e0 <HAL_RCC_ClockConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x84>
    {
        Error_Handler();
 800099c:	f000 f8e0 	bl	8000b60 <Error_Handler>
    }
}
 80009a0:	bf00      	nop
 80009a2:	3740      	adds	r7, #64	@ 0x40
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 80009c4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a3c <MX_TIM2_Init+0x94>)
 80009c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ca:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 7199;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <MX_TIM2_Init+0x94>)
 80009ce:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80009d2:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <MX_TIM2_Init+0x94>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 9;
 80009da:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_TIM2_Init+0x94>)
 80009dc:	2209      	movs	r2, #9
 80009de:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <MX_TIM2_Init+0x94>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <MX_TIM2_Init+0x94>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ec:	4813      	ldr	r0, [pc, #76]	@ (8000a3c <MX_TIM2_Init+0x94>)
 80009ee:	f001 fd53 	bl	8002498 <HAL_TIM_Base_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM2_Init+0x54>
    {
        Error_Handler();
 80009f8:	f000 f8b2 	bl	8000b60 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a00:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <MX_TIM2_Init+0x94>)
 8000a0a:	f001 fed7 	bl	80027bc <HAL_TIM_ConfigClockSource>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM2_Init+0x70>
    {
        Error_Handler();
 8000a14:	f000 f8a4 	bl	8000b60 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_TIM2_Init+0x94>)
 8000a26:	f002 f8b9 	bl	8002b9c <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0x8c>
    {
        Error_Handler();
 8000a30:	f000 f896 	bl	8000b60 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000344 	.word	0x20000344

08000a40 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a54:	4b3e      	ldr	r3, [pc, #248]	@ (8000b50 <MX_GPIO_Init+0x110>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a3d      	ldr	r2, [pc, #244]	@ (8000b50 <MX_GPIO_Init+0x110>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b3b      	ldr	r3, [pc, #236]	@ (8000b50 <MX_GPIO_Init+0x110>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0310 	and.w	r3, r3, #16
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6c:	4b38      	ldr	r3, [pc, #224]	@ (8000b50 <MX_GPIO_Init+0x110>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a37      	ldr	r2, [pc, #220]	@ (8000b50 <MX_GPIO_Init+0x110>)
 8000a72:	f043 0320 	orr.w	r3, r3, #32
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b35      	ldr	r3, [pc, #212]	@ (8000b50 <MX_GPIO_Init+0x110>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0320 	and.w	r3, r3, #32
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b32      	ldr	r3, [pc, #200]	@ (8000b50 <MX_GPIO_Init+0x110>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a31      	ldr	r2, [pc, #196]	@ (8000b50 <MX_GPIO_Init+0x110>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b2f      	ldr	r3, [pc, #188]	@ (8000b50 <MX_GPIO_Init+0x110>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b50 <MX_GPIO_Init+0x110>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8000b50 <MX_GPIO_Init+0x110>)
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b29      	ldr	r3, [pc, #164]	@ (8000b50 <MX_GPIO_Init+0x110>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin | LCD_E_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000aba:	4826      	ldr	r0, [pc, #152]	@ (8000b54 <MX_GPIO_Init+0x114>)
 8000abc:	f001 f8dc 	bl	8001c78 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2178      	movs	r1, #120	@ 0x78
 8000ac4:	4824      	ldr	r0, [pc, #144]	@ (8000b58 <MX_GPIO_Init+0x118>)
 8000ac6:	f001 f8d7 	bl	8001c78 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, D_Pin | CLK1_Pin | CLK2_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000ad0:	4822      	ldr	r0, [pc, #136]	@ (8000b5c <MX_GPIO_Init+0x11c>)
 8000ad2:	f001 f8d1 	bl	8001c78 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin */
    GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_E_Pin;
 8000ad6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000ada:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	4819      	ldr	r0, [pc, #100]	@ (8000b54 <MX_GPIO_Init+0x114>)
 8000af0:	f000 ff3e 	bl	8001970 <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
    GPIO_InitStruct.Pin = LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 8000af4:	2378      	movs	r3, #120	@ 0x78
 8000af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4813      	ldr	r0, [pc, #76]	@ (8000b58 <MX_GPIO_Init+0x118>)
 8000b0c:	f000 ff30 	bl	8001970 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOTAO_Pin */
    GPIO_InitStruct.Pin = BOTAO_Pin;
 8000b10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	4619      	mov	r1, r3
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_GPIO_Init+0x11c>)
 8000b26:	f000 ff23 	bl	8001970 <HAL_GPIO_Init>

    /*Configure GPIO pins : D_Pin CLK1_Pin CLK2_Pin */
    GPIO_InitStruct.Pin = D_Pin | CLK1_Pin | CLK2_Pin;
 8000b2a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <MX_GPIO_Init+0x11c>)
 8000b44:	f000 ff14 	bl	8001970 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40011000 	.word	0x40011000
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	40010c00 	.word	0x40010c00

08000b60 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <Error_Handler+0x8>

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	61d3      	str	r3, [r2, #28]
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <HAL_MspInit+0x5c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_MspInit+0x60>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <HAL_MspInit+0x60>)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000be0:	d113      	bne.n	8000c0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <HAL_TIM_Base_MspInit+0x44>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c14 <HAL_TIM_Base_MspInit+0x44>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	61d3      	str	r3, [r2, #28]
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <HAL_TIM_Base_MspInit+0x44>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	201c      	movs	r0, #28
 8000c00:	f000 fe7f 	bl	8001902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c04:	201c      	movs	r0, #28
 8000c06:	f000 fe98 	bl	800193a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <NMI_Handler+0x4>

08000c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <MemManage_Handler+0x4>

08000c30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 fd34 	bl	80016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c74:	4802      	ldr	r0, [pc, #8]	@ (8000c80 <TIM2_IRQHandler+0x10>)
 8000c76:	f001 fcb1 	bl	80025dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000344 	.word	0x20000344

08000c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return 1;
 8000c88:	2301      	movs	r3, #1
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr

08000c92 <_kill>:

int _kill(int pid, int sig)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c9c:	f002 fab2 	bl	8003204 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2216      	movs	r2, #22
 8000ca4:	601a      	str	r2, [r3, #0]
  return -1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <_exit>:

void _exit (int status)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffe7 	bl	8000c92 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <_exit+0x12>

08000cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e00a      	b.n	8000cf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cda:	f3af 8000 	nop.w
 8000cde:	4601      	mov	r1, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf0      	blt.n	8000cda <_read+0x12>
  }

  return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e009      	b.n	8000d28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf1      	blt.n	8000d14 <_write+0x12>
  }
  return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_close>:

int _close(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d60:	605a      	str	r2, [r3, #4]
  return 0;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr

08000d6e <_isatty>:

int _isatty(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b085      	sub	sp, #20
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
	...

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f002 fa1a 	bl	8003204 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20005000 	.word	0x20005000
 8000dfc:	00000500 	.word	0x00000500
 8000e00:	20000390 	.word	0x20000390
 8000e04:	200005b8 	.word	0x200005b8

08000e08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <init_game>:
 * Esta função preenche o tabuleiro com zeros, garantindo que todas as
 * posições estejam vazias no início do jogo. Também inicializa a próxima peça
 * a partir de um número aleatório.
 */
void init_game()
{
 8000e14:	b5b0      	push	{r4, r5, r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
    //printf("Iniciando Tetris...\n");

    for (int i = 0; i < ROWS; i++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	e013      	b.n	8000e48 <init_game+0x34>
    {
        for (int j = 0; j < COLS; j++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	e00a      	b.n	8000e3c <init_game+0x28>
        {
            board[i][j] = 0;
 8000e26:	4a17      	ldr	r2, [pc, #92]	@ (8000e84 <init_game+0x70>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	441a      	add	r2, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < COLS; j++)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	2b07      	cmp	r3, #7
 8000e40:	ddf1      	ble.n	8000e26 <init_game+0x12>
    for (int i = 0; i < ROWS; i++)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3301      	adds	r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b0f      	cmp	r3, #15
 8000e4c:	dde8      	ble.n	8000e20 <init_game+0xc>
        }
    }
    next_number = number_aleatory_peace();
 8000e4e:	f000 f993 	bl	8001178 <number_aleatory_peace>
 8000e52:	4603      	mov	r3, r0
 8000e54:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <init_game+0x74>)
 8000e56:	6013      	str	r3, [r2, #0]
    next_peace = pecas[next_number];
 8000e58:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <init_game+0x74>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	490b      	ldr	r1, [pc, #44]	@ (8000e8c <init_game+0x78>)
 8000e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e90 <init_game+0x7c>)
 8000e60:	019b      	lsls	r3, r3, #6
 8000e62:	4413      	add	r3, r2
 8000e64:	460c      	mov	r4, r1
 8000e66:	461d      	mov	r5, r3
 8000e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bdb0      	pop	{r4, r5, r7, pc}
 8000e84:	20000394 	.word	0x20000394
 8000e88:	20000424 	.word	0x20000424
 8000e8c:	20000428 	.word	0x20000428
 8000e90:	2000002c 	.word	0x2000002c

08000e94 <place_piece>:
 * @param coluna  Posição inicial da peça no eixo horizontal.
 * @param peca    Estrutura contendo o formato da peça.
 */

void place_piece(int linha, int coluna, PecaTetris peca)
{
 8000e94:	b082      	sub	sp, #8
 8000e96:	b480      	push	{r7}
 8000e98:	b087      	sub	sp, #28
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
 8000ea0:	f107 0120 	add.w	r1, r7, #32
 8000ea4:	e881 000c 	stmia.w	r1, {r2, r3}

    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e031      	b.n	8000f12 <place_piece+0x7e>
    {
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	e028      	b.n	8000f06 <place_piece+0x72>
        {
            if (peca.shape[i][j] == 1)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	009a      	lsls	r2, r3, #2
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4413      	add	r3, r2
 8000ebc:	f107 0220 	add.w	r2, r7, #32
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d11b      	bne.n	8000f00 <place_piece+0x6c>
            {
                int board_linha = linha + i;
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	4413      	add	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha >= 0 && board_linha < ROWS && board_coluna >= 0 && board_coluna < COLS)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db10      	blt.n	8000f00 <place_piece+0x6c>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	dc0d      	bgt.n	8000f00 <place_piece+0x6c>
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0a      	blt.n	8000f00 <place_piece+0x6c>
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	dc07      	bgt.n	8000f00 <place_piece+0x6c>
                {
                    board[board_linha][board_coluna] = 1;
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f28 <place_piece+0x94>)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	441a      	add	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4413      	add	r3, r2
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++) // responsavel pela peca sentido coluna
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	3301      	adds	r3, #1
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	ddd3      	ble.n	8000eb4 <place_piece+0x20>
    for (int i = 0; i < 4; i++) // responsavel pela peca sentido linha
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	ddca      	ble.n	8000eae <place_piece+0x1a>
                }
            }
        }
    }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	371c      	adds	r7, #28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	b002      	add	sp, #8
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000394 	.word	0x20000394

08000f2c <remove_piece>:
 * @param coluna  Posição inicial da peça no eixo horizontal.
 * @param peca    Estrutura contendo o formato da peça.
 */

void remove_piece(int linha, int coluna, PecaTetris peca)
{
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	b480      	push	{r7}
 8000f30:	b087      	sub	sp, #28
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
 8000f38:	f107 0120 	add.w	r1, r7, #32
 8000f3c:	e881 000c 	stmia.w	r1, {r2, r3}
    for (int i = 0; i < 4; i++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e031      	b.n	8000faa <remove_piece+0x7e>
    {
        for (int j = 0; j < 4; j++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	e028      	b.n	8000f9e <remove_piece+0x72>
        {
            if (peca.shape[i][j] == 1)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	009a      	lsls	r2, r3, #2
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4413      	add	r3, r2
 8000f54:	f107 0220 	add.w	r2, r7, #32
 8000f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d11b      	bne.n	8000f98 <remove_piece+0x6c>
            {
                int board_linha = linha + i;
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	4413      	add	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha >= 0 && board_linha < ROWS && board_coluna >= 0 && board_coluna < COLS)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db10      	blt.n	8000f98 <remove_piece+0x6c>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	dc0d      	bgt.n	8000f98 <remove_piece+0x6c>
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0a      	blt.n	8000f98 <remove_piece+0x6c>
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	2b07      	cmp	r3, #7
 8000f86:	dc07      	bgt.n	8000f98 <remove_piece+0x6c>
                {
                    board[board_linha][board_coluna] = 0;
 8000f88:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc0 <remove_piece+0x94>)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	441a      	add	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	4413      	add	r3, r2
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	ddd3      	ble.n	8000f4c <remove_piece+0x20>
    for (int i = 0; i < 4; i++)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	ddca      	ble.n	8000f46 <remove_piece+0x1a>
                }
            }
        }
    }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	371c      	adds	r7, #28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	b002      	add	sp, #8
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000394 	.word	0x20000394

08000fc4 <can_move>:
 * @param peca    Estrutura contendo o formato da peça.
 * @return        1 se o movimento for válido, 0 caso contrário.
 */

int can_move(int linha, int coluna, PecaTetris peca)
{
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
 8000fd0:	f107 0120 	add.w	r1, r7, #32
 8000fd4:	e881 000c 	stmia.w	r1, {r2, r3}

    for (int i = 0; i < 4; i++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	e03c      	b.n	8001058 <can_move+0x94>
    {
        for (int j = 0; j < 4; j++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	e033      	b.n	800104c <can_move+0x88>
        {
            if (peca.shape[i][j] == 1)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	009a      	lsls	r2, r3, #2
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4413      	add	r3, r2
 8000fec:	f107 0220 	add.w	r2, r7, #32
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d126      	bne.n	8001046 <can_move+0x82>
            {
                int board_linha = linha + i;
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
                int board_coluna = coluna + j;
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4413      	add	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]

                // Verifica se está dentro dos limites do tabuleiro
                if (board_linha < 0 || board_linha >= ROWS || board_coluna < 0 || board_coluna >= COLS)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db08      	blt.n	8001020 <can_move+0x5c>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	dc05      	bgt.n	8001020 <can_move+0x5c>
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db02      	blt.n	8001020 <can_move+0x5c>
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	2b07      	cmp	r3, #7
 800101e:	dd04      	ble.n	800102a <can_move+0x66>
                {
#ifdef DEBUG
                    printf("\nMovimento Invalido\n");
 8001020:	4813      	ldr	r0, [pc, #76]	@ (8001070 <can_move+0xac>)
 8001022:	f001 ffc1 	bl	8002fa8 <puts>
#endif
                    return 0; // Movimento inválido
 8001026:	2300      	movs	r3, #0
 8001028:	e01a      	b.n	8001060 <can_move+0x9c>
                }

                // Verifica se a posição está ocupada
                if (board[board_linha][board_coluna] == 2)
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <can_move+0xb0>)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	441a      	add	r2, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	4413      	add	r3, r2
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d104      	bne.n	8001046 <can_move+0x82>
                {
#ifdef DEBUG
                    printf("\nMovimento Invalido\n");
 800103c:	480c      	ldr	r0, [pc, #48]	@ (8001070 <can_move+0xac>)
 800103e:	f001 ffb3 	bl	8002fa8 <puts>
#endif
                    return 0; // Movimento inválido
 8001042:	2300      	movs	r3, #0
 8001044:	e00c      	b.n	8001060 <can_move+0x9c>
        for (int j = 0; j < 4; j++)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	3301      	adds	r3, #1
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	2b03      	cmp	r3, #3
 8001050:	ddc8      	ble.n	8000fe4 <can_move+0x20>
    for (int i = 0; i < 4; i++)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b03      	cmp	r3, #3
 800105c:	ddbf      	ble.n	8000fde <can_move+0x1a>
                }
            }
        }
    }

    return 1; // Movimento válido
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800106a:	b002      	add	sp, #8
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	08003e3c 	.word	0x08003e3c
 8001074:	20000394 	.word	0x20000394

08001078 <move_piece_down>:
 * @param peca        Ponteiro para a estrutura da peça que está em jogo.
 * @param peca_atual  Ponteiro para o índice da peça atual.
 * @return            Retorna 0 se a peça continuar descendo e 1 se ela foi fixada.
 */
int move_piece_down(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 8001078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107a:	b097      	sub	sp, #92	@ 0x5c
 800107c:	af0e      	add	r7, sp, #56	@ 0x38
 800107e:	6178      	str	r0, [r7, #20]
 8001080:	6139      	str	r1, [r7, #16]
 8001082:	60fa      	str	r2, [r7, #12]
 8001084:	60bb      	str	r3, [r7, #8]
    int nova_linha = *linha + 1;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]

    // Verifica se a peça pode se mover para baixo (se a linha não está fora do tabuleiro e não há outra peça no caminho)
    if (can_move(nova_linha, *coluna, *peca)) // A função can_move agora verifica se a nova posição é válida
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	68fe      	ldr	r6, [r7, #12]
 8001096:	466d      	mov	r5, sp
 8001098:	f106 0408 	add.w	r4, r6, #8
 800109c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80010b0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	69f8      	ldr	r0, [r7, #28]
 80010b8:	f7ff ff84 	bl	8000fc4 <can_move>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d038      	beq.n	8001134 <move_piece_down+0xbc>
    {
        // Apaga a peça da posição atual
        remove_piece(*linha, *coluna, *peca);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	603a      	str	r2, [r7, #0]
 80010ce:	68fe      	ldr	r6, [r7, #12]
 80010d0:	466d      	mov	r5, sp
 80010d2:	f106 0408 	add.w	r4, r6, #8
 80010d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80010ea:	e896 000c 	ldmia.w	r6, {r2, r3}
 80010ee:	6839      	ldr	r1, [r7, #0]
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff ff1b 	bl	8000f2c <remove_piece>

        // Atualiza a posição da peça
        *linha = nova_linha;
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	601a      	str	r2, [r3, #0]

        // Coloca a peça na nova posição
        place_piece(*linha, *coluna, *peca);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	603a      	str	r2, [r7, #0]
 8001108:	68fe      	ldr	r6, [r7, #12]
 800110a:	466d      	mov	r5, sp
 800110c:	f106 0408 	add.w	r4, r6, #8
 8001110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800111a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001120:	e885 0003 	stmia.w	r5, {r0, r1}
 8001124:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff feb2 	bl	8000e94 <place_piece>
        return 0;
 8001130:	2300      	movs	r3, #0
 8001132:	e01c      	b.n	800116e <move_piece_down+0xf6>
    }
    else
    {
        fix_piece(linha, coluna, *peca);
 8001134:	68fe      	ldr	r6, [r7, #12]
 8001136:	466d      	mov	r5, sp
 8001138:	f106 0408 	add.w	r4, r6, #8
 800113c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001148:	e894 0003 	ldmia.w	r4, {r0, r1}
 800114c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001150:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001154:	6939      	ldr	r1, [r7, #16]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f000 f8b0 	bl	80012bc <fix_piece>
        remove_full_lines();
 800115c:	f000 f8ec 	bl	8001338 <remove_full_lines>
        generate_next_piece(linha, coluna, peca, peca_atual);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	6939      	ldr	r1, [r7, #16]
 8001166:	6978      	ldr	r0, [r7, #20]
 8001168:	f000 f864 	bl	8001234 <generate_next_piece>
        return 1;
 800116c:	2301      	movs	r3, #1
    }
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	@ 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001178 <number_aleatory_peace>:
 *
 * @return       Um número entre 0 e 6, representando o tipo da peça aleatória.
 */

int number_aleatory_peace()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
    return rand() % 7; // Gera um número entre 0 e 6
 800117c:	f001 fdac 	bl	8002cd8 <rand>
 8001180:	4602      	mov	r2, r0
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <number_aleatory_peace+0x28>)
 8001184:	fb83 1302 	smull	r1, r3, r3, r2
 8001188:	4413      	add	r3, r2
 800118a:	1099      	asrs	r1, r3, #2
 800118c:	17d3      	asrs	r3, r2, #31
 800118e:	1ac9      	subs	r1, r1, r3
 8001190:	460b      	mov	r3, r1
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	1a5b      	subs	r3, r3, r1
 8001196:	1ad1      	subs	r1, r2, r3
 8001198:	460b      	mov	r3, r1
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	92492493 	.word	0x92492493

080011a4 <check_piece_at_bottom>:
 *
 * @return 1 se a peça atingiu o fundo ou colidiu com outra peça; 0 caso contrário.
 */

int check_piece_at_bottom(int *linha, int *coluna, PecaTetris peca)
{
 80011a4:	b082      	sub	sp, #8
 80011a6:	b480      	push	{r7}
 80011a8:	b085      	sub	sp, #20
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
 80011b0:	f107 0118 	add.w	r1, r7, #24
 80011b4:	e881 000c 	stmia.w	r1, {r2, r3}

    // Verifique se há outra peça abaixo dela (posição da peça no tabuleiro)
    for (int i = 0; i < 4; i++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	e02d      	b.n	800121a <check_piece_at_bottom+0x76>
    {
        for (int j = 0; j < 4; j++)
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	e024      	b.n	800120e <check_piece_at_bottom+0x6a>
        {
            if (peca.shape[i][j] == 1)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	009a      	lsls	r2, r3, #2
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4413      	add	r3, r2
 80011cc:	f107 0218 	add.w	r2, r7, #24
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d117      	bne.n	8001208 <check_piece_at_bottom+0x64>
            {
                if (board[*linha + i + 1][*coluna + j] == 2 || (*linha + i) >= 15) // Se houver uma peça fixa abaixo
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	6819      	ldr	r1, [r3, #0]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	440b      	add	r3, r1
 80011ea:	4911      	ldr	r1, [pc, #68]	@ (8001230 <check_piece_at_bottom+0x8c>)
 80011ec:	00d2      	lsls	r2, r2, #3
 80011ee:	440a      	add	r2, r1
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d005      	beq.n	8001204 <check_piece_at_bottom+0x60>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	2b0e      	cmp	r3, #14
 8001202:	dd01      	ble.n	8001208 <check_piece_at_bottom+0x64>
                {
                    return 1;
 8001204:	2301      	movs	r3, #1
 8001206:	e00c      	b.n	8001222 <check_piece_at_bottom+0x7e>
        for (int j = 0; j < 4; j++)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3301      	adds	r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	2b03      	cmp	r3, #3
 8001212:	ddd7      	ble.n	80011c4 <check_piece_at_bottom+0x20>
    for (int i = 0; i < 4; i++)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b03      	cmp	r3, #3
 800121e:	ddce      	ble.n	80011be <check_piece_at_bottom+0x1a>
                }
            }
        }
    }

    return 0; // A peça não atingiu o fundo
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	b002      	add	sp, #8
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000394 	.word	0x20000394

08001234 <generate_next_piece>:
 * @param peca        Ponteiro para a estrutura da peça que será colocada no tabuleiro.
 * @param peca_atual  Ponteiro para armazenar o índice da peça atual.
 */

void generate_next_piece(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 8001234:	b5b0      	push	{r4, r5, r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	603b      	str	r3, [r7, #0]
    *peca_atual = next_number;
 8001242:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <generate_next_piece+0x7c>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	601a      	str	r2, [r3, #0]
    *peca = pecas[*peca_atual];
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4a18      	ldr	r2, [pc, #96]	@ (80012b4 <generate_next_piece+0x80>)
 8001252:	019b      	lsls	r3, r3, #6
 8001254:	4413      	add	r3, r2
 8001256:	460c      	mov	r4, r1
 8001258:	461d      	mov	r5, r3
 800125a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800126a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    next_number = number_aleatory_peace();
 800126e:	f7ff ff83 	bl	8001178 <number_aleatory_peace>
 8001272:	4603      	mov	r3, r0
 8001274:	4a0e      	ldr	r2, [pc, #56]	@ (80012b0 <generate_next_piece+0x7c>)
 8001276:	6013      	str	r3, [r2, #0]
    next_peace = pecas[next_number];
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <generate_next_piece+0x7c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	490e      	ldr	r1, [pc, #56]	@ (80012b8 <generate_next_piece+0x84>)
 800127e:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <generate_next_piece+0x80>)
 8001280:	019b      	lsls	r3, r3, #6
 8001282:	4413      	add	r3, r2
 8001284:	460c      	mov	r4, r1
 8001286:	461d      	mov	r5, r3
 8001288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001294:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Define a posição inicial da nova peça
    *linha = 0;  // Começa do topo
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
    *coluna = 3; // Começa no meio do tabuleiro
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2203      	movs	r2, #3
 80012a6:	601a      	str	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bdb0      	pop	{r4, r5, r7, pc}
 80012b0:	20000424 	.word	0x20000424
 80012b4:	2000002c 	.word	0x2000002c
 80012b8:	20000428 	.word	0x20000428

080012bc <fix_piece>:
 * @param coluna A coluna onde a peça está atualmente posicionada no tabuleiro.
 * @param peca   A peça que deve ser fixada no tabuleiro.
 */

void fix_piece(int *linha, int *coluna, PecaTetris peca)
{
 80012bc:	b082      	sub	sp, #8
 80012be:	b480      	push	{r7}
 80012c0:	b085      	sub	sp, #20
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
 80012c8:	f107 0118 	add.w	r1, r7, #24
 80012cc:	e881 000c 	stmia.w	r1, {r2, r3}
    // Adiciona a peça no tabuleiro, tornando-a fixa
    for (int i = 0; i < 4; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	e023      	b.n	800131e <fix_piece+0x62>
    {
        for (int j = 0; j < 4; j++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	e01a      	b.n	8001312 <fix_piece+0x56>
        {
            if (peca.shape[i][j] == 1)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	009a      	lsls	r2, r3, #2
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4413      	add	r3, r2
 80012e4:	f107 0218 	add.w	r2, r7, #24
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d10d      	bne.n	800130c <fix_piece+0x50>
            {
                board[*linha + i][*coluna + j] = 2; // Marca a posição com 2, indicando que está fixa
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	441a      	add	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	6819      	ldr	r1, [r3, #0]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	440b      	add	r3, r1
 8001300:	490c      	ldr	r1, [pc, #48]	@ (8001334 <fix_piece+0x78>)
 8001302:	00d2      	lsls	r2, r2, #3
 8001304:	440a      	add	r2, r1
 8001306:	4413      	add	r3, r2
 8001308:	2202      	movs	r2, #2
 800130a:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < 4; j++)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	3301      	adds	r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	2b03      	cmp	r3, #3
 8001316:	dde1      	ble.n	80012dc <fix_piece+0x20>
    for (int i = 0; i < 4; i++)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b03      	cmp	r3, #3
 8001322:	ddd8      	ble.n	80012d6 <fix_piece+0x1a>
            }
        }
    }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	b002      	add	sp, #8
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000394 	.word	0x20000394

08001338 <remove_full_lines>:
 * acima dela são deslocadas para baixo. A primeira linha do tabuleiro é então limpa.
 * Caso uma ou mais linhas sejam removidas, a pontuação e o nível do jogador são atualizados.
 */

void remove_full_lines()
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0

    int linhas_removidas = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]

    for (int i = ROWS - 1; i >= 0; i--) // Começa da última linha e vai subindo
 8001342:	230f      	movs	r3, #15
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	e052      	b.n	80013ee <remove_full_lines+0xb6>
    {
        int complete = 1;
 8001348:	2301      	movs	r3, #1
 800134a:	617b      	str	r3, [r7, #20]

        // Verifica se a linha está completa
        for (int j = 0; j < COLS; j++)
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	e00e      	b.n	8001370 <remove_full_lines+0x38>
        {
            if (board[i][j] != 2) // Se qualquer célula não for preenchida
 8001352:	4a31      	ldr	r2, [pc, #196]	@ (8001418 <remove_full_lines+0xe0>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	441a      	add	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4413      	add	r3, r2
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d002      	beq.n	800136a <remove_full_lines+0x32>
            {
                complete = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
                break; // Se a linha não estiver completa, sai do loop
 8001368:	e005      	b.n	8001376 <remove_full_lines+0x3e>
        for (int j = 0; j < COLS; j++)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	3301      	adds	r3, #1
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	2b07      	cmp	r3, #7
 8001374:	dded      	ble.n	8001352 <remove_full_lines+0x1a>
            }
        }

        // Se a linha estiver completa, removemos a linha e deslocamos as linhas acima
        if (complete)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d035      	beq.n	80013e8 <remove_full_lines+0xb0>
        {

            linhas_removidas++;
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	3301      	adds	r3, #1
 8001380:	61fb      	str	r3, [r7, #28]

            // Desloca todas as linhas acima uma posição para baixo
            for (int k = i; k > 0; k--)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e01b      	b.n	80013c0 <remove_full_lines+0x88>
            {
                for (int j = 0; j < COLS; j++)
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	e012      	b.n	80013b4 <remove_full_lines+0x7c>
                {
                    board[k][j] = board[k - 1][j];
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3b01      	subs	r3, #1
 8001392:	4a21      	ldr	r2, [pc, #132]	@ (8001418 <remove_full_lines+0xe0>)
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	441a      	add	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	7819      	ldrb	r1, [r3, #0]
 800139e:	4a1e      	ldr	r2, [pc, #120]	@ (8001418 <remove_full_lines+0xe0>)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	441a      	add	r2, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	4413      	add	r3, r2
 80013aa:	460a      	mov	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
                for (int j = 0; j < COLS; j++)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b07      	cmp	r3, #7
 80013b8:	dde9      	ble.n	800138e <remove_full_lines+0x56>
            for (int k = i; k > 0; k--)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3b01      	subs	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	dce0      	bgt.n	8001388 <remove_full_lines+0x50>
                }
            }

            // Limpa a primeira linha (agora vazia)
            for (int j = 0; j < COLS; j++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	e007      	b.n	80013dc <remove_full_lines+0xa4>
            {
                board[0][j] = 0;
 80013cc:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <remove_full_lines+0xe0>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < COLS; j++)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3301      	adds	r3, #1
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b07      	cmp	r3, #7
 80013e0:	ddf4      	ble.n	80013cc <remove_full_lines+0x94>
            }

            // Como movemos as linhas para baixo, não precisamos verificar a linha removida novamente
            i++; // Reanalisa a linha atual, pois ela pode ter se tornado completa após o deslocamento
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	3301      	adds	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
    for (int i = ROWS - 1; i >= 0; i--) // Começa da última linha e vai subindo
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	daa9      	bge.n	8001348 <remove_full_lines+0x10>
        }
    }
    if (linhas_removidas > 0)
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	dd0a      	ble.n	8001410 <remove_full_lines+0xd8>
    {
        atualizar_pontuacao(linhas_removidas);
 80013fa:	69f8      	ldr	r0, [r7, #28]
 80013fc:	f000 f898 	bl	8001530 <atualizar_pontuacao>

#ifdef DEBUG
        printf("Pontuação: %d   Nível: %d\n", pontuacao, nivel);
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <remove_full_lines+0xe4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a06      	ldr	r2, [pc, #24]	@ (8001420 <remove_full_lines+0xe8>)
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	@ (8001424 <remove_full_lines+0xec>)
 800140c:	f001 fd64 	bl	8002ed8 <iprintf>
#endif
    }
}
 8001410:	bf00      	nop
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000394 	.word	0x20000394
 800141c:	20000418 	.word	0x20000418
 8001420:	2000041c 	.word	0x2000041c
 8001424:	08003e50 	.word	0x08003e50

08001428 <update_game>:
 * @param coluna     Ponteiro para a posição horizontal da peça no tabuleiro.
 * @param peca       Ponteiro para a estrutura da peça atual.
 * @param peca_atual Ponteiro para o índice da peça atual.
 */
void update_game(int *linha, int *coluna, PecaTetris *peca, int *peca_atual)
{
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142a:	b093      	sub	sp, #76	@ 0x4c
 800142c:	af0e      	add	r7, sp, #56	@ 0x38
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]

    incrementTime();
 8001436:	f000 f851 	bl	80014dc <incrementTime>

    // Se o tempo acumulado atingir o limiar, move a peça para baixo
    if (timer_counter >= TEMPO_BASE / multiplicador_tempo)
 800143a:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <update_game+0xac>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001442:	fb92 f3f3 	sdiv	r3, r2, r3
 8001446:	461a      	mov	r2, r3
 8001448:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <update_game+0xb0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d83c      	bhi.n	80014ca <update_game+0xa2>
    {

        if (check_piece_at_bottom(linha, coluna, *peca) == 1)
 8001450:	687e      	ldr	r6, [r7, #4]
 8001452:	466d      	mov	r5, sp
 8001454:	f106 0408 	add.w	r4, r6, #8
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001464:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001468:	e885 0003 	stmia.w	r5, {r0, r1}
 800146c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff fe96 	bl	80011a4 <check_piece_at_bottom>
 8001478:	4603      	mov	r3, r0
 800147a:	2b01      	cmp	r3, #1
 800147c:	d11c      	bne.n	80014b8 <update_game+0x90>
        {
            fix_piece(linha, coluna, *peca);
 800147e:	687e      	ldr	r6, [r7, #4]
 8001480:	466d      	mov	r5, sp
 8001482:	f106 0408 	add.w	r4, r6, #8
 8001486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001492:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001496:	e885 0003 	stmia.w	r5, {r0, r1}
 800149a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800149e:	68b9      	ldr	r1, [r7, #8]
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7ff ff0b 	bl	80012bc <fix_piece>
            remove_full_lines();
 80014a6:	f7ff ff47 	bl	8001338 <remove_full_lines>
            generate_next_piece(linha, coluna, peca, peca_atual);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff febf 	bl	8001234 <generate_next_piece>
 80014b6:	e005      	b.n	80014c4 <update_game+0x9c>
        }
        else
        {
            move_piece_down(linha, coluna, peca, peca_atual);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff fdda 	bl	8001078 <move_piece_down>
        }

        timer_counter = 0; // Reinicia o contador
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <update_game+0xb0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
    }

    //draw_board();
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200001ec 	.word	0x200001ec
 80014d8:	20000414 	.word	0x20000414

080014dc <incrementTime>:
 *
 * Esta função é chamada a cada milissegundo para atualizar o contador
 * responsável por controlar a gravidade do jogo.
 */
void incrementTime()
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
    // Chamada de 1 ms aqui
    timer_counter++;
 80014e0:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <incrementTime+0x18>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	4a03      	ldr	r2, [pc, #12]	@ (80014f4 <incrementTime+0x18>)
 80014e8:	6013      	str	r3, [r2, #0]
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000414 	.word	0x20000414

080014f8 <game_over>:
 * e o jogo deve terminar.
 *
 * @return      Retorna 1 se o jogo acabou (fim de jogo), ou 0 caso contrário.
 */
int game_over()
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
    for (int j = 0; j < COLS; j++)
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	e00a      	b.n	800151a <game_over+0x22>
    {
        if (board[0][j] == 2)
 8001504:	4a09      	ldr	r2, [pc, #36]	@ (800152c <game_over+0x34>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d101      	bne.n	8001514 <game_over+0x1c>
        {
            return 1;
 8001510:	2301      	movs	r3, #1
 8001512:	e006      	b.n	8001522 <game_over+0x2a>
    for (int j = 0; j < COLS; j++)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3301      	adds	r3, #1
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b07      	cmp	r3, #7
 800151e:	ddf1      	ble.n	8001504 <game_over+0xc>
        }
    }
    return 0;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	20000394 	.word	0x20000394

08001530 <atualizar_pontuacao>:
 *   - 4 linhas: 1200 * (nivel+1)
 *
 * @param linhas_removidas Número de linhas removidas de uma vez.
 */
void atualizar_pontuacao(int linhas_removidas)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    int pontos = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
    switch (linhas_removidas)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	2b03      	cmp	r3, #3
 8001542:	d82e      	bhi.n	80015a2 <atualizar_pontuacao+0x72>
 8001544:	a201      	add	r2, pc, #4	@ (adr r2, 800154c <atualizar_pontuacao+0x1c>)
 8001546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154a:	bf00      	nop
 800154c:	0800155d 	.word	0x0800155d
 8001550:	0800156f 	.word	0x0800156f
 8001554:	0800157f 	.word	0x0800157f
 8001558:	08001591 	.word	0x08001591
    {
    case 1:
        pontos = 40 * (nivel + 1);
 800155c:	4b23      	ldr	r3, [pc, #140]	@ (80015ec <atualizar_pontuacao+0xbc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	60fb      	str	r3, [r7, #12]
        break;
 800156c:	e01a      	b.n	80015a4 <atualizar_pontuacao+0x74>
    case 2:
        pontos = 100 * (nivel + 1);
 800156e:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <atualizar_pontuacao+0xbc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	2264      	movs	r2, #100	@ 0x64
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	60fb      	str	r3, [r7, #12]
        break;
 800157c:	e012      	b.n	80015a4 <atualizar_pontuacao+0x74>
    case 3:
        pontos = 300 * (nivel + 1);
 800157e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <atualizar_pontuacao+0xbc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001588:	fb02 f303 	mul.w	r3, r2, r3
 800158c:	60fb      	str	r3, [r7, #12]
        break;
 800158e:	e009      	b.n	80015a4 <atualizar_pontuacao+0x74>
    case 4:
        pontos = 1200 * (nivel + 1);
 8001590:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <atualizar_pontuacao+0xbc>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	60fb      	str	r3, [r7, #12]
        break;
 80015a0:	e000      	b.n	80015a4 <atualizar_pontuacao+0x74>
    default:
        break;
 80015a2:	bf00      	nop
    }
    pontuacao += pontos;
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <atualizar_pontuacao+0xc0>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a10      	ldr	r2, [pc, #64]	@ (80015f0 <atualizar_pontuacao+0xc0>)
 80015ae:	6013      	str	r3, [r2, #0]
    linhas_totais += linhas_removidas;
 80015b0:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <atualizar_pontuacao+0xc4>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a0e      	ldr	r2, [pc, #56]	@ (80015f4 <atualizar_pontuacao+0xc4>)
 80015ba:	6013      	str	r3, [r2, #0]

    // Atualiza o nível se atingir o limite
    if (linhas_totais >= LINHAS_POR_NIVEL)
 80015bc:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <atualizar_pontuacao+0xc4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b09      	cmp	r3, #9
 80015c2:	dd0e      	ble.n	80015e2 <atualizar_pontuacao+0xb2>
    {
        nivel++;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <atualizar_pontuacao+0xbc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	4a08      	ldr	r2, [pc, #32]	@ (80015ec <atualizar_pontuacao+0xbc>)
 80015cc:	6013      	str	r3, [r2, #0]
        linhas_totais = linhas_totais - LINHAS_POR_NIVEL; // Ou zere e acumule com pontos extras se desejar
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <atualizar_pontuacao+0xc4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3b0a      	subs	r3, #10
 80015d4:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <atualizar_pontuacao+0xc4>)
 80015d6:	6013      	str	r3, [r2, #0]
        // Ajuste a velocidade do jogo, por exemplo:
        multiplicador_tempo++; // Ou reduza o tempo base
 80015d8:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <atualizar_pontuacao+0xc8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	4a06      	ldr	r2, [pc, #24]	@ (80015f8 <atualizar_pontuacao+0xc8>)
 80015e0:	6013      	str	r3, [r2, #0]
        //printf("\nNível aumentado! Agora é o nível %d\n", nivel);
    }
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	2000041c 	.word	0x2000041c
 80015f0:	20000418 	.word	0x20000418
 80015f4:	20000420 	.word	0x20000420
 80015f8:	200001ec 	.word	0x200001ec

080015fc <Reset_Handler>:
 80015fc:	f7ff fc04 	bl	8000e08 <SystemInit>
 8001600:	480b      	ldr	r0, [pc, #44]	@ (8001630 <LoopFillZerobss+0xe>)
 8001602:	490c      	ldr	r1, [pc, #48]	@ (8001634 <LoopFillZerobss+0x12>)
 8001604:	4a0c      	ldr	r2, [pc, #48]	@ (8001638 <LoopFillZerobss+0x16>)
 8001606:	2300      	movs	r3, #0
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:
 800160a:	58d4      	ldr	r4, [r2, r3]
 800160c:	50c4      	str	r4, [r0, r3]
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:
 8001610:	18c4      	adds	r4, r0, r3
 8001612:	428c      	cmp	r4, r1
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
 8001616:	4a09      	ldr	r2, [pc, #36]	@ (800163c <LoopFillZerobss+0x1a>)
 8001618:	4c09      	ldr	r4, [pc, #36]	@ (8001640 <LoopFillZerobss+0x1e>)
 800161a:	2300      	movs	r3, #0
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:
 8001622:	42a2      	cmp	r2, r4
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>
 8001626:	f001 fdf3 	bl	8003210 <__libc_init_array>
 800162a:	f7ff f923 	bl	8000874 <main>
 800162e:	4770      	bx	lr
 8001630:	20000000 	.word	0x20000000
 8001634:	20000254 	.word	0x20000254
 8001638:	08003f90 	.word	0x08003f90
 800163c:	20000254 	.word	0x20000254
 8001640:	200005b8 	.word	0x200005b8

08001644 <ADC1_2_IRQHandler>:
 8001644:	e7fe      	b.n	8001644 <ADC1_2_IRQHandler>
	...

08001648 <HAL_Init>:
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <HAL_Init+0x28>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <HAL_Init+0x28>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	2003      	movs	r0, #3
 800165a:	f000 f947 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>
 800165e:	200f      	movs	r0, #15
 8001660:	f000 f808 	bl	8001674 <HAL_InitTick>
 8001664:	f7ff fa82 	bl	8000b6c <HAL_MspInit>
 8001668:	2300      	movs	r3, #0
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000

08001674 <HAL_InitTick>:
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_InitTick+0x54>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <HAL_InitTick+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4619      	mov	r1, r3
 8001686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800168a:	fbb3 f3f1 	udiv	r3, r3, r1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f95f 	bl	8001956 <HAL_SYSTICK_Config>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_InitTick+0x2e>
 800169e:	2301      	movs	r3, #1
 80016a0:	e00e      	b.n	80016c0 <HAL_InitTick+0x4c>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d80a      	bhi.n	80016be <HAL_InitTick+0x4a>
 80016a8:	2200      	movs	r2, #0
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016b0:	f000 f927 	bl	8001902 <HAL_NVIC_SetPriority>
 80016b4:	4a06      	ldr	r2, [pc, #24]	@ (80016d0 <HAL_InitTick+0x5c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	2300      	movs	r3, #0
 80016bc:	e000      	b.n	80016c0 <HAL_InitTick+0x4c>
 80016be:	2301      	movs	r3, #1
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000028 	.word	0x20000028
 80016cc:	200001f4 	.word	0x200001f4
 80016d0:	200001f0 	.word	0x200001f0

080016d4 <HAL_IncTick>:
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_IncTick+0x1c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <HAL_IncTick+0x20>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a03      	ldr	r2, [pc, #12]	@ (80016f4 <HAL_IncTick+0x20>)
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	200001f4 	.word	0x200001f4
 80016f4:	20000468 	.word	0x20000468

080016f8 <HAL_GetTick>:
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4b02      	ldr	r3, [pc, #8]	@ (8001708 <HAL_GetTick+0x10>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	20000468 	.word	0x20000468

0800170c <HAL_Delay>:
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	f7ff fff0 	bl	80016f8 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	bf00      	nop
 8001734:	f7ff ffe0 	bl	80016f8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200001f4 	.word	0x200001f4

08001754 <__NVIC_SetPriorityGrouping>:
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4906      	ldr	r1, [pc, #24]	@ (80017ec <__NVIC_EnableIRQ+0x34>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	@ (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	@ (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	@ 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
 800188c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
 800189c:	4313      	orrs	r3, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	@ 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <SysTick_Config>:
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018cc:	f7ff ff90 	bl	80017f0 <__NVIC_SetPriority>
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff2d 	bl	8001754 <__NVIC_SetPriorityGrouping>
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	f7ff ff42 	bl	800179c <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff90 	bl	8001844 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5f 	bl	80017f0 <__NVIC_SetPriority>
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff35 	bl	80017b8 <__NVIC_EnableIRQ>
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffa2 	bl	80018a8 <SysTick_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_GPIO_Init>:
 8001970:	b480      	push	{r7}
 8001972:	b08b      	sub	sp, #44	@ 0x2c
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
 8001982:	e169      	b.n	8001c58 <HAL_GPIO_Init+0x2e8>
 8001984:	2201      	movs	r2, #1
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 8158 	bne.w	8001c52 <HAL_GPIO_Init+0x2e2>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4a9a      	ldr	r2, [pc, #616]	@ (8001c10 <HAL_GPIO_Init+0x2a0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d05e      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019ac:	4a98      	ldr	r2, [pc, #608]	@ (8001c10 <HAL_GPIO_Init+0x2a0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d875      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019b2:	4a98      	ldr	r2, [pc, #608]	@ (8001c14 <HAL_GPIO_Init+0x2a4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d058      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019b8:	4a96      	ldr	r2, [pc, #600]	@ (8001c14 <HAL_GPIO_Init+0x2a4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d86f      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019be:	4a96      	ldr	r2, [pc, #600]	@ (8001c18 <HAL_GPIO_Init+0x2a8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d052      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019c4:	4a94      	ldr	r2, [pc, #592]	@ (8001c18 <HAL_GPIO_Init+0x2a8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d869      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019ca:	4a94      	ldr	r2, [pc, #592]	@ (8001c1c <HAL_GPIO_Init+0x2ac>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d04c      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019d0:	4a92      	ldr	r2, [pc, #584]	@ (8001c1c <HAL_GPIO_Init+0x2ac>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d863      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019d6:	4a92      	ldr	r2, [pc, #584]	@ (8001c20 <HAL_GPIO_Init+0x2b0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d046      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 80019dc:	4a90      	ldr	r2, [pc, #576]	@ (8001c20 <HAL_GPIO_Init+0x2b0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d85d      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019e2:	2b12      	cmp	r3, #18
 80019e4:	d82a      	bhi.n	8001a3c <HAL_GPIO_Init+0xcc>
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	d859      	bhi.n	8001a9e <HAL_GPIO_Init+0x12e>
 80019ea:	a201      	add	r2, pc, #4	@ (adr r2, 80019f0 <HAL_GPIO_Init+0x80>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a6b 	.word	0x08001a6b
 80019f4:	08001a45 	.word	0x08001a45
 80019f8:	08001a57 	.word	0x08001a57
 80019fc:	08001a99 	.word	0x08001a99
 8001a00:	08001a9f 	.word	0x08001a9f
 8001a04:	08001a9f 	.word	0x08001a9f
 8001a08:	08001a9f 	.word	0x08001a9f
 8001a0c:	08001a9f 	.word	0x08001a9f
 8001a10:	08001a9f 	.word	0x08001a9f
 8001a14:	08001a9f 	.word	0x08001a9f
 8001a18:	08001a9f 	.word	0x08001a9f
 8001a1c:	08001a9f 	.word	0x08001a9f
 8001a20:	08001a9f 	.word	0x08001a9f
 8001a24:	08001a9f 	.word	0x08001a9f
 8001a28:	08001a9f 	.word	0x08001a9f
 8001a2c:	08001a9f 	.word	0x08001a9f
 8001a30:	08001a9f 	.word	0x08001a9f
 8001a34:	08001a4d 	.word	0x08001a4d
 8001a38:	08001a61 	.word	0x08001a61
 8001a3c:	4a79      	ldr	r2, [pc, #484]	@ (8001c24 <HAL_GPIO_Init+0x2b4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d013      	beq.n	8001a6a <HAL_GPIO_Init+0xfa>
 8001a42:	e02c      	b.n	8001a9e <HAL_GPIO_Init+0x12e>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	623b      	str	r3, [r7, #32]
 8001a4a:	e029      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	3304      	adds	r3, #4
 8001a52:	623b      	str	r3, [r7, #32]
 8001a54:	e024      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	3308      	adds	r3, #8
 8001a5c:	623b      	str	r3, [r7, #32]
 8001a5e:	e01f      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	330c      	adds	r3, #12
 8001a66:	623b      	str	r3, [r7, #32]
 8001a68:	e01a      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d102      	bne.n	8001a78 <HAL_GPIO_Init+0x108>
 8001a72:	2304      	movs	r3, #4
 8001a74:	623b      	str	r3, [r7, #32]
 8001a76:	e013      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d105      	bne.n	8001a8c <HAL_GPIO_Init+0x11c>
 8001a80:	2308      	movs	r3, #8
 8001a82:	623b      	str	r3, [r7, #32]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	611a      	str	r2, [r3, #16]
 8001a8a:	e009      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	623b      	str	r3, [r7, #32]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	615a      	str	r2, [r3, #20]
 8001a96:	e003      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x130>
 8001a9e:	bf00      	nop
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2bff      	cmp	r3, #255	@ 0xff
 8001aa4:	d801      	bhi.n	8001aaa <HAL_GPIO_Init+0x13a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	e001      	b.n	8001aae <HAL_GPIO_Init+0x13e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3304      	adds	r3, #4
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bff      	cmp	r3, #255	@ 0xff
 8001ab4:	d802      	bhi.n	8001abc <HAL_GPIO_Init+0x14c>
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	e002      	b.n	8001ac2 <HAL_GPIO_Init+0x152>
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	3b08      	subs	r3, #8
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	210f      	movs	r1, #15
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	6a39      	ldr	r1, [r7, #32]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	431a      	orrs	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 80b1 	beq.w	8001c52 <HAL_GPIO_Init+0x2e2>
 8001af0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a4c      	ldr	r2, [pc, #304]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b4a      	ldr	r3, [pc, #296]	@ (8001c28 <HAL_GPIO_Init+0x2b8>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	4a48      	ldr	r2, [pc, #288]	@ (8001c2c <HAL_GPIO_Init+0x2bc>)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	220f      	movs	r2, #15
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a40      	ldr	r2, [pc, #256]	@ (8001c30 <HAL_GPIO_Init+0x2c0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_GPIO_Init+0x1ec>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a3f      	ldr	r2, [pc, #252]	@ (8001c34 <HAL_GPIO_Init+0x2c4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00d      	beq.n	8001b58 <HAL_GPIO_Init+0x1e8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c38 <HAL_GPIO_Init+0x2c8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d007      	beq.n	8001b54 <HAL_GPIO_Init+0x1e4>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a3d      	ldr	r2, [pc, #244]	@ (8001c3c <HAL_GPIO_Init+0x2cc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_GPIO_Init+0x1e0>
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e006      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b50:	2304      	movs	r3, #4
 8001b52:	e004      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e002      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b60:	f002 0203 	and.w	r2, r2, #3
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	4093      	lsls	r3, r2
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	492f      	ldr	r1, [pc, #188]	@ (8001c2c <HAL_GPIO_Init+0x2bc>)
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_GPIO_Init+0x226>
 8001b88:	4b2d      	ldr	r3, [pc, #180]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	492c      	ldr	r1, [pc, #176]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x234>
 8001b96:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	4928      	ldr	r1, [pc, #160]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <HAL_GPIO_Init+0x24e>
 8001bb0:	4b23      	ldr	r3, [pc, #140]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	4922      	ldr	r1, [pc, #136]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60cb      	str	r3, [r1, #12]
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x25c>
 8001bbe:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	491e      	ldr	r1, [pc, #120]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60cb      	str	r3, [r1, #12]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_GPIO_Init+0x276>
 8001bd8:	4b19      	ldr	r3, [pc, #100]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4918      	ldr	r1, [pc, #96]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x284>
 8001be6:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	4914      	ldr	r1, [pc, #80]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d021      	beq.n	8001c44 <HAL_GPIO_Init+0x2d4>
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	490e      	ldr	r1, [pc, #56]	@ (8001c40 <HAL_GPIO_Init+0x2d0>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
 8001c0c:	e021      	b.n	8001c52 <HAL_GPIO_Init+0x2e2>
 8001c0e:	bf00      	nop
 8001c10:	10320000 	.word	0x10320000
 8001c14:	10310000 	.word	0x10310000
 8001c18:	10220000 	.word	0x10220000
 8001c1c:	10210000 	.word	0x10210000
 8001c20:	10120000 	.word	0x10120000
 8001c24:	10110000 	.word	0x10110000
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	40010800 	.word	0x40010800
 8001c34:	40010c00 	.word	0x40010c00
 8001c38:	40011000 	.word	0x40011000
 8001c3c:	40011400 	.word	0x40011400
 8001c40:	40010400 	.word	0x40010400
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <HAL_GPIO_Init+0x304>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	4909      	ldr	r1, [pc, #36]	@ (8001c74 <HAL_GPIO_Init+0x304>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	3301      	adds	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f47f ae8e 	bne.w	8001984 <HAL_GPIO_Init+0x14>
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	372c      	adds	r7, #44	@ 0x2c
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_GPIO_WritePin>:
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	e003      	b.n	8001c9e <HAL_GPIO_WritePin+0x26>
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	041a      	lsls	r2, r3, #16
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_GPIO_TogglePin>:
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43d9      	mvns	r1, r3
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	400b      	ands	r3, r1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	611a      	str	r2, [r3, #16]
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_RCC_OscConfig>:
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x12>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e272      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8087 	beq.w	8001e0a <HAL_RCC_OscConfig+0x12e>
 8001cfc:	4b92      	ldr	r3, [pc, #584]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 030c 	and.w	r3, r3, #12
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d00c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x46>
 8001d08:	4b8f      	ldr	r3, [pc, #572]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d112      	bne.n	8001d3a <HAL_RCC_OscConfig+0x5e>
 8001d14:	4b8c      	ldr	r3, [pc, #560]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d20:	d10b      	bne.n	8001d3a <HAL_RCC_OscConfig+0x5e>
 8001d22:	4b89      	ldr	r3, [pc, #548]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d06c      	beq.n	8001e08 <HAL_RCC_OscConfig+0x12c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d168      	bne.n	8001e08 <HAL_RCC_OscConfig+0x12c>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e24c      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x76>
 8001d44:	4b80      	ldr	r3, [pc, #512]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a7f      	ldr	r2, [pc, #508]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e02e      	b.n	8001db0 <HAL_RCC_OscConfig+0xd4>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x98>
 8001d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a7a      	ldr	r2, [pc, #488]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b78      	ldr	r3, [pc, #480]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a77      	ldr	r2, [pc, #476]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e01d      	b.n	8001db0 <HAL_RCC_OscConfig+0xd4>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0xbc>
 8001d7e:	4b72      	ldr	r3, [pc, #456]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a71      	ldr	r2, [pc, #452]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0xd4>
 8001d98:	4b6b      	ldr	r3, [pc, #428]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b68      	ldr	r3, [pc, #416]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a67      	ldr	r2, [pc, #412]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_RCC_OscConfig+0x104>
 8001db8:	f7ff fc9e 	bl	80016f8 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xf6>
 8001dc0:	f7ff fc9a 	bl	80016f8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	@ 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xf6>
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e200      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8001dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xe4>
 8001dde:	e014      	b.n	8001e0a <HAL_RCC_OscConfig+0x12e>
 8001de0:	f7ff fc8a 	bl	80016f8 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x11e>
 8001de8:	f7ff fc86 	bl	80016f8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	@ 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x11e>
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1ec      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8001dfa:	4b53      	ldr	r3, [pc, #332]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x10c>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x12e>
 8001e08:	bf00      	nop
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_OscConfig+0x202>
 8001e16:	4b4c      	ldr	r3, [pc, #304]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_RCC_OscConfig+0x15e>
 8001e22:	4b49      	ldr	r3, [pc, #292]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d11c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x18c>
 8001e2e:	4b46      	ldr	r3, [pc, #280]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d116      	bne.n	8001e68 <HAL_RCC_OscConfig+0x18c>
 8001e3a:	4b43      	ldr	r3, [pc, #268]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x176>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x176>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e1c0      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8001e52:	4b3d      	ldr	r3, [pc, #244]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4939      	ldr	r1, [pc, #228]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
 8001e66:	e03a      	b.n	8001ede <HAL_RCC_OscConfig+0x202>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d020      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1d6>
 8001e70:	4b36      	ldr	r3, [pc, #216]	@ (8001f4c <HAL_RCC_OscConfig+0x270>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f7ff fc3f 	bl	80016f8 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x1b4>
 8001e7e:	f7ff fc3b 	bl	80016f8 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x1b4>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e1a1      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8001e90:	4b2d      	ldr	r3, [pc, #180]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x1a2>
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4927      	ldr	r1, [pc, #156]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
 8001eb0:	e015      	b.n	8001ede <HAL_RCC_OscConfig+0x202>
 8001eb2:	4b26      	ldr	r3, [pc, #152]	@ (8001f4c <HAL_RCC_OscConfig+0x270>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	f7ff fc1e 	bl	80016f8 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1f6>
 8001ec0:	f7ff fc1a 	bl	80016f8 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1f6>
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e180      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x1e4>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d03a      	beq.n	8001f60 <HAL_RCC_OscConfig+0x284>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d019      	beq.n	8001f26 <HAL_RCC_OscConfig+0x24a>
 8001ef2:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	f7ff fbfe 	bl	80016f8 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x236>
 8001f00:	f7ff fbfa 	bl	80016f8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x236>
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e160      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8001f12:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x224>
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f000 fa9c 	bl	800245c <RCC_Delay>
 8001f24:	e01c      	b.n	8001f60 <HAL_RCC_OscConfig+0x284>
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_RCC_OscConfig+0x274>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f7ff fbe4 	bl	80016f8 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]
 8001f32:	e00f      	b.n	8001f54 <HAL_RCC_OscConfig+0x278>
 8001f34:	f7ff fbe0 	bl	80016f8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d908      	bls.n	8001f54 <HAL_RCC_OscConfig+0x278>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e146      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	42420000 	.word	0x42420000
 8001f50:	42420480 	.word	0x42420480
 8001f54:	4b92      	ldr	r3, [pc, #584]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1e9      	bne.n	8001f34 <HAL_RCC_OscConfig+0x258>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80a6 	beq.w	80020ba <HAL_RCC_OscConfig+0x3de>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]
 8001f72:	4b8b      	ldr	r3, [pc, #556]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10d      	bne.n	8001f9a <HAL_RCC_OscConfig+0x2be>
 8001f7e:	4b88      	ldr	r3, [pc, #544]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	4a87      	ldr	r2, [pc, #540]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	61d3      	str	r3, [r2, #28]
 8001f8a:	4b85      	ldr	r3, [pc, #532]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
 8001f9a:	4b82      	ldr	r3, [pc, #520]	@ (80021a4 <HAL_RCC_OscConfig+0x4c8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d118      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x2fc>
 8001fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80021a4 <HAL_RCC_OscConfig+0x4c8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a7e      	ldr	r2, [pc, #504]	@ (80021a4 <HAL_RCC_OscConfig+0x4c8>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	f7ff fba1 	bl	80016f8 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x2f0>
 8001fba:	f7ff fb9d 	bl	80016f8 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b64      	cmp	r3, #100	@ 0x64
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x2f0>
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e103      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8001fcc:	4b75      	ldr	r3, [pc, #468]	@ (80021a4 <HAL_RCC_OscConfig+0x4c8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x2de>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x312>
 8001fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4a6e      	ldr	r2, [pc, #440]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6213      	str	r3, [r2, #32]
 8001fec:	e02d      	b.n	800204a <HAL_RCC_OscConfig+0x36e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x334>
 8001ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a69      	ldr	r2, [pc, #420]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6213      	str	r3, [r2, #32]
 8002002:	4b67      	ldr	r3, [pc, #412]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a66      	ldr	r2, [pc, #408]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6213      	str	r3, [r2, #32]
 800200e:	e01c      	b.n	800204a <HAL_RCC_OscConfig+0x36e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b05      	cmp	r3, #5
 8002016:	d10c      	bne.n	8002032 <HAL_RCC_OscConfig+0x356>
 8002018:	4b61      	ldr	r3, [pc, #388]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4a60      	ldr	r2, [pc, #384]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	6213      	str	r3, [r2, #32]
 8002024:	4b5e      	ldr	r3, [pc, #376]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4a5d      	ldr	r2, [pc, #372]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6213      	str	r3, [r2, #32]
 8002030:	e00b      	b.n	800204a <HAL_RCC_OscConfig+0x36e>
 8002032:	4b5b      	ldr	r3, [pc, #364]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a5a      	ldr	r2, [pc, #360]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	4b58      	ldr	r3, [pc, #352]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a57      	ldr	r2, [pc, #348]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d015      	beq.n	800207e <HAL_RCC_OscConfig+0x3a2>
 8002052:	f7ff fb51 	bl	80016f8 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x394>
 800205a:	f7ff fb4d 	bl	80016f8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x394>
 800206c:	2303      	movs	r3, #3
 800206e:	e0b1      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8002070:	4b4b      	ldr	r3, [pc, #300]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ee      	beq.n	800205a <HAL_RCC_OscConfig+0x37e>
 800207c:	e014      	b.n	80020a8 <HAL_RCC_OscConfig+0x3cc>
 800207e:	f7ff fb3b 	bl	80016f8 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x3c0>
 8002086:	f7ff fb37 	bl	80016f8 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x3c0>
 8002098:	2303      	movs	r3, #3
 800209a:	e09b      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 800209c:	4b40      	ldr	r3, [pc, #256]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1ee      	bne.n	8002086 <HAL_RCC_OscConfig+0x3aa>
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d105      	bne.n	80020ba <HAL_RCC_OscConfig+0x3de>
 80020ae:	4b3c      	ldr	r3, [pc, #240]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4a3b      	ldr	r2, [pc, #236]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	61d3      	str	r3, [r2, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8087 	beq.w	80021d2 <HAL_RCC_OscConfig+0x4f6>
 80020c4:	4b36      	ldr	r3, [pc, #216]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d061      	beq.n	8002194 <HAL_RCC_OscConfig+0x4b8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d146      	bne.n	8002166 <HAL_RCC_OscConfig+0x48a>
 80020d8:	4b33      	ldr	r3, [pc, #204]	@ (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	f7ff fb0b 	bl	80016f8 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x41c>
 80020e6:	f7ff fb07 	bl	80016f8 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x41c>
 80020f4:	2303      	movs	r3, #3
 80020f6:	e06d      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 80020f8:	4b29      	ldr	r3, [pc, #164]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f0      	bne.n	80020e6 <HAL_RCC_OscConfig+0x40a>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800210c:	d108      	bne.n	8002120 <HAL_RCC_OscConfig+0x444>
 800210e:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4921      	ldr	r1, [pc, #132]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
 8002120:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a19      	ldr	r1, [r3, #32]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	430b      	orrs	r3, r1
 8002132:	491b      	ldr	r1, [pc, #108]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
 8002138:	4b1b      	ldr	r3, [pc, #108]	@ (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 800213a:	2201      	movs	r2, #1
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	f7ff fadb 	bl	80016f8 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x47c>
 8002146:	f7ff fad7 	bl	80016f8 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x47c>
 8002154:	2303      	movs	r3, #3
 8002156:	e03d      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x46a>
 8002164:	e035      	b.n	80021d2 <HAL_RCC_OscConfig+0x4f6>
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <HAL_RCC_OscConfig+0x4cc>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	f7ff fac4 	bl	80016f8 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x4aa>
 8002174:	f7ff fac0 	bl	80016f8 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x4aa>
 8002182:	2303      	movs	r3, #3
 8002184:	e026      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x498>
 8002192:	e01e      	b.n	80021d2 <HAL_RCC_OscConfig+0x4f6>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d107      	bne.n	80021ac <HAL_RCC_OscConfig+0x4d0>
 800219c:	2301      	movs	r3, #1
 800219e:	e019      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
 80021a8:	42420060 	.word	0x42420060
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <HAL_RCC_OscConfig+0x500>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x4f2>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4f6>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_RCC_OscConfig+0x4f8>
 80021d2:	2300      	movs	r3, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000

080021e0 <HAL_RCC_ClockConfig>:
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0d0      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
 80021f4:	4b6a      	ldr	r3, [pc, #424]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d910      	bls.n	8002224 <HAL_RCC_ClockConfig+0x44>
 8002202:	4b67      	ldr	r3, [pc, #412]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 0207 	bic.w	r2, r3, #7
 800220a:	4965      	ldr	r1, [pc, #404]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
 8002212:	4b63      	ldr	r3, [pc, #396]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x44>
 8002220:	2301      	movs	r3, #1
 8002222:	e0b8      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_ClockConfig+0x92>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x68>
 800223c:	4b59      	ldr	r3, [pc, #356]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a58      	ldr	r2, [pc, #352]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002246:	6053      	str	r3, [r2, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x80>
 8002254:	4b53      	ldr	r3, [pc, #332]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a52      	ldr	r2, [pc, #328]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800225e:	6053      	str	r3, [r2, #4]
 8002260:	4b50      	ldr	r3, [pc, #320]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	494d      	ldr	r1, [pc, #308]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	4313      	orrs	r3, r2
 8002270:	604b      	str	r3, [r1, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d040      	beq.n	8002300 <HAL_RCC_ClockConfig+0x120>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xb6>
 8002286:	4b47      	ldr	r3, [pc, #284]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d115      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
 8002292:	2301      	movs	r3, #1
 8002294:	e07f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xce>
 800229e:	4b41      	ldr	r3, [pc, #260]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e073      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
 80022ae:	4b3d      	ldr	r3, [pc, #244]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06b      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
 80022be:	4b39      	ldr	r3, [pc, #228]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4936      	ldr	r1, [pc, #216]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
 80022d0:	f7ff fa12 	bl	80016f8 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x10e>
 80022d8:	f7ff fa0e 	bl	80016f8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x10e>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e053      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
 80022ee:	4b2d      	ldr	r3, [pc, #180]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xf8>
 8002300:	4b27      	ldr	r3, [pc, #156]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d210      	bcs.n	8002330 <HAL_RCC_ClockConfig+0x150>
 800230e:	4b24      	ldr	r3, [pc, #144]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 0207 	bic.w	r2, r3, #7
 8002316:	4922      	ldr	r1, [pc, #136]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
 800231e:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x150>
 800232c:	2301      	movs	r3, #1
 800232e:	e032      	b.n	8002396 <HAL_RCC_ClockConfig+0x1b6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCC_ClockConfig+0x16e>
 800233c:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4916      	ldr	r1, [pc, #88]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x18e>
 800235a:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	490e      	ldr	r1, [pc, #56]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
 800236e:	f000 f821 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8002372:	4602      	mov	r2, r0
 8002374:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	490a      	ldr	r1, [pc, #40]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002380:	5ccb      	ldrb	r3, [r1, r3]
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	4a09      	ldr	r2, [pc, #36]	@ (80023ac <HAL_RCC_ClockConfig+0x1cc>)
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <HAL_RCC_ClockConfig+0x1d0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f970 	bl	8001674 <HAL_InitTick>
 8002394:	2300      	movs	r3, #0
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08003e88 	.word	0x08003e88
 80023ac:	20000028 	.word	0x20000028
 80023b0:	200001f0 	.word	0x200001f0

080023b4 <HAL_RCC_GetSysClockFreq>:
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x94>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d002      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x30>
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d003      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x36>
 80023e2:	e027      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x80>
 80023e4:	4b19      	ldr	r3, [pc, #100]	@ (800244c <HAL_RCC_GetSysClockFreq+0x98>)
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	e027      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x86>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	0c9b      	lsrs	r3, r3, #18
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	4a17      	ldr	r2, [pc, #92]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023f4:	5cd3      	ldrb	r3, [r2, r3]
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x70>
 8002402:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x94>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	0c5b      	lsrs	r3, r3, #17
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	4a11      	ldr	r2, [pc, #68]	@ (8002454 <HAL_RCC_GetSysClockFreq+0xa0>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a0d      	ldr	r2, [pc, #52]	@ (800244c <HAL_RCC_GetSysClockFreq+0x98>)
 8002416:	fb03 f202 	mul.w	r2, r3, r2
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e004      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x7a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a0c      	ldr	r2, [pc, #48]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	e002      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x86>
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_RCC_GetSysClockFreq+0x98>)
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	bf00      	nop
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4618      	mov	r0, r3
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	007a1200 	.word	0x007a1200
 8002450:	08003e98 	.word	0x08003e98
 8002454:	08003ea8 	.word	0x08003ea8
 8002458:	003d0900 	.word	0x003d0900

0800245c <RCC_Delay>:
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <RCC_Delay+0x34>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0a      	ldr	r2, [pc, #40]	@ (8002494 <RCC_Delay+0x38>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0a5b      	lsrs	r3, r3, #9
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	bf00      	nop
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	60fa      	str	r2, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f9      	bne.n	8002478 <RCC_Delay+0x1c>
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	20000028 	.word	0x20000028
 8002494:	10624dd3 	.word	0x10624dd3

08002498 <HAL_TIM_Base_Init>:
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_Base_Init+0x12>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e041      	b.n	800252e <HAL_TIM_Base_Init+0x96>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_TIM_Base_Init+0x2c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fb86 	bl	8000bd0 <HAL_TIM_Base_MspInit>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 fa5c 	bl	8002994 <TIM_Base_SetConfig>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800252c:	2300      	movs	r3, #0
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_TIM_Base_Start_IT>:
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d001      	beq.n	8002550 <HAL_TIM_Base_Start_IT+0x18>
 800254c:	2301      	movs	r3, #1
 800254e:	e03a      	b.n	80025c6 <HAL_TIM_Base_Start_IT+0x8e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a18      	ldr	r2, [pc, #96]	@ (80025d0 <HAL_TIM_Base_Start_IT+0x98>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00e      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x58>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800257a:	d009      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x58>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a14      	ldr	r2, [pc, #80]	@ (80025d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d004      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x58>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a13      	ldr	r2, [pc, #76]	@ (80025d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d111      	bne.n	80025b4 <HAL_TIM_Base_Start_IT+0x7c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d010      	beq.n	80025c4 <HAL_TIM_Base_Start_IT+0x8c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e007      	b.n	80025c4 <HAL_TIM_Base_Start_IT+0x8c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	2300      	movs	r3, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	40012c00 	.word	0x40012c00
 80025d4:	40000400 	.word	0x40000400
 80025d8:	40000800 	.word	0x40000800

080025dc <HAL_TIM_IRQHandler>:
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d020      	beq.n	8002640 <HAL_TIM_IRQHandler+0x64>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01b      	beq.n	8002640 <HAL_TIM_IRQHandler+0x64>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0202 	mvn.w	r2, #2
 8002610:	611a      	str	r2, [r3, #16]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	771a      	strb	r2, [r3, #28]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_TIM_IRQHandler+0x52>
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f998 	bl	800295c <HAL_TIM_IC_CaptureCallback>
 800262c:	e005      	b.n	800263a <HAL_TIM_IRQHandler+0x5e>
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f98b 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f99a 	bl	800296e <HAL_TIM_PWM_PulseFinishedCallback>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	771a      	strb	r2, [r3, #28]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d020      	beq.n	800268c <HAL_TIM_IRQHandler+0xb0>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01b      	beq.n	800268c <HAL_TIM_IRQHandler+0xb0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0204 	mvn.w	r2, #4
 800265c:	611a      	str	r2, [r3, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2202      	movs	r2, #2
 8002662:	771a      	strb	r2, [r3, #28]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0x9e>
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f972 	bl	800295c <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0xaa>
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f965 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f974 	bl	800296e <HAL_TIM_PWM_PulseFinishedCallback>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d020      	beq.n	80026d8 <HAL_TIM_IRQHandler+0xfc>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01b      	beq.n	80026d8 <HAL_TIM_IRQHandler+0xfc>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0208 	mvn.w	r2, #8
 80026a8:	611a      	str	r2, [r3, #16]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2204      	movs	r2, #4
 80026ae:	771a      	strb	r2, [r3, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_TIM_IRQHandler+0xea>
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f94c 	bl	800295c <HAL_TIM_IC_CaptureCallback>
 80026c4:	e005      	b.n	80026d2 <HAL_TIM_IRQHandler+0xf6>
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f93f 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f94e 	bl	800296e <HAL_TIM_PWM_PulseFinishedCallback>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	771a      	strb	r2, [r3, #28]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d020      	beq.n	8002724 <HAL_TIM_IRQHandler+0x148>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01b      	beq.n	8002724 <HAL_TIM_IRQHandler+0x148>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0210 	mvn.w	r2, #16
 80026f4:	611a      	str	r2, [r3, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2208      	movs	r2, #8
 80026fa:	771a      	strb	r2, [r3, #28]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_TIM_IRQHandler+0x136>
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f926 	bl	800295c <HAL_TIM_IC_CaptureCallback>
 8002710:	e005      	b.n	800271e <HAL_TIM_IRQHandler+0x142>
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f919 	bl	800294a <HAL_TIM_OC_DelayElapsedCallback>
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f928 	bl	800296e <HAL_TIM_PWM_PulseFinishedCallback>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	771a      	strb	r2, [r3, #28]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <HAL_TIM_IRQHandler+0x16c>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_TIM_IRQHandler+0x16c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0201 	mvn.w	r2, #1
 8002740:	611a      	str	r2, [r3, #16]
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe f872 	bl	800082c <HAL_TIM_PeriodElapsedCallback>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00c      	beq.n	800276c <HAL_TIM_IRQHandler+0x190>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_TIM_IRQHandler+0x190>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002764:	611a      	str	r2, [r3, #16]
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fa7f 	bl	8002c6a <HAL_TIMEx_BreakCallback>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00c      	beq.n	8002790 <HAL_TIM_IRQHandler+0x1b4>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_TIM_IRQHandler+0x1b4>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002788:	611a      	str	r2, [r3, #16]
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f8f8 	bl	8002980 <HAL_TIM_TriggerCallback>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00c      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x1d8>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x1d8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0220 	mvn.w	r2, #32
 80027ac:	611a      	str	r2, [r3, #16]
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa52 	bl	8002c58 <HAL_TIMEx_CommutCallback>
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_ConfigClockSource>:
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_TIM_ConfigClockSource+0x1c>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e0b4      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x186>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002810:	d03e      	beq.n	8002890 <HAL_TIM_ConfigClockSource+0xd4>
 8002812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002816:	f200 8087 	bhi.w	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800281e:	f000 8086 	beq.w	800292e <HAL_TIM_ConfigClockSource+0x172>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002826:	d87f      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b70      	cmp	r3, #112	@ 0x70
 800282a:	d01a      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0xa6>
 800282c:	2b70      	cmp	r3, #112	@ 0x70
 800282e:	d87b      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b60      	cmp	r3, #96	@ 0x60
 8002832:	d050      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x11a>
 8002834:	2b60      	cmp	r3, #96	@ 0x60
 8002836:	d877      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b50      	cmp	r3, #80	@ 0x50
 800283a:	d03c      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0xfa>
 800283c:	2b50      	cmp	r3, #80	@ 0x50
 800283e:	d873      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b40      	cmp	r3, #64	@ 0x40
 8002842:	d058      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x13a>
 8002844:	2b40      	cmp	r3, #64	@ 0x40
 8002846:	d86f      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b30      	cmp	r3, #48	@ 0x30
 800284a:	d064      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 800284c:	2b30      	cmp	r3, #48	@ 0x30
 800284e:	d86b      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b20      	cmp	r3, #32
 8002852:	d060      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	2b20      	cmp	r3, #32
 8002856:	d867      	bhi.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05c      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 800285c:	2b10      	cmp	r3, #16
 800285e:	d05a      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	e062      	b.n	8002928 <HAL_TIM_ConfigClockSource+0x16c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6899      	ldr	r1, [r3, #8]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f000 f974 	bl	8002b5e <TIM_ETR_SetConfig>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	e04f      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f000 f95d 	bl	8002b5e <TIM_ETR_SetConfig>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	e03c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 f8d4 	bl	8002a70 <TIM_TI1_ConfigInputStage>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2150      	movs	r1, #80	@ 0x50
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f92b 	bl	8002b2a <TIM_ITRx_SetConfig>
 80028d4:	e02c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f000 f8f2 	bl	8002acc <TIM_TI2_ConfigInputStage>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2160      	movs	r1, #96	@ 0x60
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f91b 	bl	8002b2a <TIM_ITRx_SetConfig>
 80028f4:	e01c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	461a      	mov	r2, r3
 8002904:	f000 f8b4 	bl	8002a70 <TIM_TI1_ConfigInputStage>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2140      	movs	r1, #64	@ 0x40
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f90b 	bl	8002b2a <TIM_ITRx_SetConfig>
 8002914:	e00c      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f000 f902 	bl	8002b2a <TIM_ITRx_SetConfig>
 8002926:	e003      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e000      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x174>
 800292e:	bf00      	nop
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_TIM_OC_DelayElapsedCallback>:
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_IC_CaptureCallback>:
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <HAL_TIM_PWM_PulseFinishedCallback>:
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <HAL_TIM_TriggerCallback>:
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
	...

08002994 <TIM_Base_SetConfig>:
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002a64 <TIM_Base_SetConfig+0xd0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <TIM_Base_SetConfig+0x30>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b2:	d007      	beq.n	80029c4 <TIM_Base_SetConfig+0x30>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a68 <TIM_Base_SetConfig+0xd4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0x30>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a2b      	ldr	r2, [pc, #172]	@ (8002a6c <TIM_Base_SetConfig+0xd8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d108      	bne.n	80029d6 <TIM_Base_SetConfig+0x42>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a22      	ldr	r2, [pc, #136]	@ (8002a64 <TIM_Base_SetConfig+0xd0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <TIM_Base_SetConfig+0x62>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e4:	d007      	beq.n	80029f6 <TIM_Base_SetConfig+0x62>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a68 <TIM_Base_SetConfig+0xd4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_Base_SetConfig+0x62>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a6c <TIM_Base_SetConfig+0xd8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d108      	bne.n	8002a08 <TIM_Base_SetConfig+0x74>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a64 <TIM_Base_SetConfig+0xd0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d103      	bne.n	8002a3c <TIM_Base_SetConfig+0xa8>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	615a      	str	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <TIM_Base_SetConfig+0xc6>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f023 0201 	bic.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800

08002a70 <TIM_TI1_ConfigInputStage>:
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f023 0201 	bic.w	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	621a      	str	r2, [r3, #32]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f023 030a 	bic.w	r3, r3, #10
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	619a      	str	r2, [r3, #24]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	621a      	str	r2, [r3, #32]
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <TIM_TI2_ConfigInputStage>:
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0210 	bic.w	r2, r3, #16
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	031b      	lsls	r3, r3, #12
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	619a      	str	r2, [r3, #24]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	621a      	str	r2, [r3, #32]
 8002b20:	bf00      	nop
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <TIM_ITRx_SetConfig>:
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f043 0307 	orr.w	r3, r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <TIM_ETR_SetConfig>:
 8002b5e:	b480      	push	{r7}
 8002b60:	b087      	sub	sp, #28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	021a      	lsls	r2, r3, #8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_TIMEx_MasterConfigSynchronization>:
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e046      	b.n	8002c42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a16      	ldr	r2, [pc, #88]	@ (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00e      	beq.n	8002c16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c00:	d009      	beq.n	8002c16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a12      	ldr	r2, [pc, #72]	@ (8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a10      	ldr	r2, [pc, #64]	@ (8002c54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d10c      	bne.n	8002c30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002c40:	2300      	movs	r3, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800

08002c58 <HAL_TIMEx_CommutCallback>:
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIMEx_BreakCallback>:
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <srand>:
 8002c7c:	b538      	push	{r3, r4, r5, lr}
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <srand+0x44>)
 8002c80:	4604      	mov	r4, r0
 8002c82:	681d      	ldr	r5, [r3, #0]
 8002c84:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002c86:	b9b3      	cbnz	r3, 8002cb6 <srand+0x3a>
 8002c88:	2018      	movs	r0, #24
 8002c8a:	f000 fb4f 	bl	800332c <malloc>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	6328      	str	r0, [r5, #48]	@ 0x30
 8002c92:	b920      	cbnz	r0, 8002c9e <srand+0x22>
 8002c94:	2146      	movs	r1, #70	@ 0x46
 8002c96:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <srand+0x48>)
 8002c98:	480b      	ldr	r0, [pc, #44]	@ (8002cc8 <srand+0x4c>)
 8002c9a:	f000 fae1 	bl	8003260 <__assert_func>
 8002c9e:	490b      	ldr	r1, [pc, #44]	@ (8002ccc <srand+0x50>)
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <srand+0x54>)
 8002ca2:	e9c0 1300 	strd	r1, r3, [r0]
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <srand+0x58>)
 8002ca8:	2100      	movs	r1, #0
 8002caa:	6083      	str	r3, [r0, #8]
 8002cac:	230b      	movs	r3, #11
 8002cae:	8183      	strh	r3, [r0, #12]
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002cba:	611c      	str	r4, [r3, #16]
 8002cbc:	615a      	str	r2, [r3, #20]
 8002cbe:	bd38      	pop	{r3, r4, r5, pc}
 8002cc0:	20000204 	.word	0x20000204
 8002cc4:	08003eaa 	.word	0x08003eaa
 8002cc8:	08003ec1 	.word	0x08003ec1
 8002ccc:	abcd330e 	.word	0xabcd330e
 8002cd0:	e66d1234 	.word	0xe66d1234
 8002cd4:	0005deec 	.word	0x0005deec

08002cd8 <rand>:
 8002cd8:	4b16      	ldr	r3, [pc, #88]	@ (8002d34 <rand+0x5c>)
 8002cda:	b510      	push	{r4, lr}
 8002cdc:	681c      	ldr	r4, [r3, #0]
 8002cde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002ce0:	b9b3      	cbnz	r3, 8002d10 <rand+0x38>
 8002ce2:	2018      	movs	r0, #24
 8002ce4:	f000 fb22 	bl	800332c <malloc>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6320      	str	r0, [r4, #48]	@ 0x30
 8002cec:	b920      	cbnz	r0, 8002cf8 <rand+0x20>
 8002cee:	2152      	movs	r1, #82	@ 0x52
 8002cf0:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <rand+0x60>)
 8002cf2:	4812      	ldr	r0, [pc, #72]	@ (8002d3c <rand+0x64>)
 8002cf4:	f000 fab4 	bl	8003260 <__assert_func>
 8002cf8:	4911      	ldr	r1, [pc, #68]	@ (8002d40 <rand+0x68>)
 8002cfa:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <rand+0x6c>)
 8002cfc:	e9c0 1300 	strd	r1, r3, [r0]
 8002d00:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <rand+0x70>)
 8002d02:	2100      	movs	r1, #0
 8002d04:	6083      	str	r3, [r0, #8]
 8002d06:	230b      	movs	r3, #11
 8002d08:	8183      	strh	r3, [r0, #12]
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002d10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002d12:	480e      	ldr	r0, [pc, #56]	@ (8002d4c <rand+0x74>)
 8002d14:	690b      	ldr	r3, [r1, #16]
 8002d16:	694c      	ldr	r4, [r1, #20]
 8002d18:	4358      	muls	r0, r3
 8002d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d50 <rand+0x78>)
 8002d1c:	fb02 0004 	mla	r0, r2, r4, r0
 8002d20:	fba3 3202 	umull	r3, r2, r3, r2
 8002d24:	3301      	adds	r3, #1
 8002d26:	eb40 0002 	adc.w	r0, r0, r2
 8002d2a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002d2e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002d32:	bd10      	pop	{r4, pc}
 8002d34:	20000204 	.word	0x20000204
 8002d38:	08003eaa 	.word	0x08003eaa
 8002d3c:	08003ec1 	.word	0x08003ec1
 8002d40:	abcd330e 	.word	0xabcd330e
 8002d44:	e66d1234 	.word	0xe66d1234
 8002d48:	0005deec 	.word	0x0005deec
 8002d4c:	5851f42d 	.word	0x5851f42d
 8002d50:	4c957f2d 	.word	0x4c957f2d

08002d54 <std>:
 8002d54:	2300      	movs	r3, #0
 8002d56:	b510      	push	{r4, lr}
 8002d58:	4604      	mov	r4, r0
 8002d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d62:	6083      	str	r3, [r0, #8]
 8002d64:	8181      	strh	r1, [r0, #12]
 8002d66:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d68:	81c2      	strh	r2, [r0, #14]
 8002d6a:	6183      	str	r3, [r0, #24]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	2208      	movs	r2, #8
 8002d70:	305c      	adds	r0, #92	@ 0x5c
 8002d72:	f000 f9f9 	bl	8003168 <memset>
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <std+0x58>)
 8002d78:	6224      	str	r4, [r4, #32]
 8002d7a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <std+0x5c>)
 8002d7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d80:	4b0c      	ldr	r3, [pc, #48]	@ (8002db4 <std+0x60>)
 8002d82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d84:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <std+0x64>)
 8002d86:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d88:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <std+0x68>)
 8002d8a:	429c      	cmp	r4, r3
 8002d8c:	d006      	beq.n	8002d9c <std+0x48>
 8002d8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d92:	4294      	cmp	r4, r2
 8002d94:	d002      	beq.n	8002d9c <std+0x48>
 8002d96:	33d0      	adds	r3, #208	@ 0xd0
 8002d98:	429c      	cmp	r4, r3
 8002d9a:	d105      	bne.n	8002da8 <std+0x54>
 8002d9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002da4:	f000 ba58 	b.w	8003258 <__retarget_lock_init_recursive>
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	bf00      	nop
 8002dac:	08002fb9 	.word	0x08002fb9
 8002db0:	08002fdb 	.word	0x08002fdb
 8002db4:	08003013 	.word	0x08003013
 8002db8:	08003037 	.word	0x08003037
 8002dbc:	2000046c 	.word	0x2000046c

08002dc0 <stdio_exit_handler>:
 8002dc0:	4a02      	ldr	r2, [pc, #8]	@ (8002dcc <stdio_exit_handler+0xc>)
 8002dc2:	4903      	ldr	r1, [pc, #12]	@ (8002dd0 <stdio_exit_handler+0x10>)
 8002dc4:	4803      	ldr	r0, [pc, #12]	@ (8002dd4 <stdio_exit_handler+0x14>)
 8002dc6:	f000 b869 	b.w	8002e9c <_fwalk_sglue>
 8002dca:	bf00      	nop
 8002dcc:	200001f8 	.word	0x200001f8
 8002dd0:	08003b39 	.word	0x08003b39
 8002dd4:	20000208 	.word	0x20000208

08002dd8 <cleanup_stdio>:
 8002dd8:	6841      	ldr	r1, [r0, #4]
 8002dda:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <cleanup_stdio+0x34>)
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	4299      	cmp	r1, r3
 8002de0:	4604      	mov	r4, r0
 8002de2:	d001      	beq.n	8002de8 <cleanup_stdio+0x10>
 8002de4:	f000 fea8 	bl	8003b38 <_fflush_r>
 8002de8:	68a1      	ldr	r1, [r4, #8]
 8002dea:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <cleanup_stdio+0x38>)
 8002dec:	4299      	cmp	r1, r3
 8002dee:	d002      	beq.n	8002df6 <cleanup_stdio+0x1e>
 8002df0:	4620      	mov	r0, r4
 8002df2:	f000 fea1 	bl	8003b38 <_fflush_r>
 8002df6:	68e1      	ldr	r1, [r4, #12]
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <cleanup_stdio+0x3c>)
 8002dfa:	4299      	cmp	r1, r3
 8002dfc:	d004      	beq.n	8002e08 <cleanup_stdio+0x30>
 8002dfe:	4620      	mov	r0, r4
 8002e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e04:	f000 be98 	b.w	8003b38 <_fflush_r>
 8002e08:	bd10      	pop	{r4, pc}
 8002e0a:	bf00      	nop
 8002e0c:	2000046c 	.word	0x2000046c
 8002e10:	200004d4 	.word	0x200004d4
 8002e14:	2000053c 	.word	0x2000053c

08002e18 <global_stdio_init.part.0>:
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <global_stdio_init.part.0+0x30>)
 8002e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8002e4c <global_stdio_init.part.0+0x34>)
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e50 <global_stdio_init.part.0+0x38>)
 8002e20:	4620      	mov	r0, r4
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	2104      	movs	r1, #4
 8002e26:	2200      	movs	r2, #0
 8002e28:	f7ff ff94 	bl	8002d54 <std>
 8002e2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e30:	2201      	movs	r2, #1
 8002e32:	2109      	movs	r1, #9
 8002e34:	f7ff ff8e 	bl	8002d54 <std>
 8002e38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e42:	2112      	movs	r1, #18
 8002e44:	f7ff bf86 	b.w	8002d54 <std>
 8002e48:	200005a4 	.word	0x200005a4
 8002e4c:	2000046c 	.word	0x2000046c
 8002e50:	08002dc1 	.word	0x08002dc1

08002e54 <__sfp_lock_acquire>:
 8002e54:	4801      	ldr	r0, [pc, #4]	@ (8002e5c <__sfp_lock_acquire+0x8>)
 8002e56:	f000 ba00 	b.w	800325a <__retarget_lock_acquire_recursive>
 8002e5a:	bf00      	nop
 8002e5c:	200005ad 	.word	0x200005ad

08002e60 <__sfp_lock_release>:
 8002e60:	4801      	ldr	r0, [pc, #4]	@ (8002e68 <__sfp_lock_release+0x8>)
 8002e62:	f000 b9fb 	b.w	800325c <__retarget_lock_release_recursive>
 8002e66:	bf00      	nop
 8002e68:	200005ad 	.word	0x200005ad

08002e6c <__sinit>:
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	4604      	mov	r4, r0
 8002e70:	f7ff fff0 	bl	8002e54 <__sfp_lock_acquire>
 8002e74:	6a23      	ldr	r3, [r4, #32]
 8002e76:	b11b      	cbz	r3, 8002e80 <__sinit+0x14>
 8002e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e7c:	f7ff bff0 	b.w	8002e60 <__sfp_lock_release>
 8002e80:	4b04      	ldr	r3, [pc, #16]	@ (8002e94 <__sinit+0x28>)
 8002e82:	6223      	str	r3, [r4, #32]
 8002e84:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <__sinit+0x2c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f5      	bne.n	8002e78 <__sinit+0xc>
 8002e8c:	f7ff ffc4 	bl	8002e18 <global_stdio_init.part.0>
 8002e90:	e7f2      	b.n	8002e78 <__sinit+0xc>
 8002e92:	bf00      	nop
 8002e94:	08002dd9 	.word	0x08002dd9
 8002e98:	200005a4 	.word	0x200005a4

08002e9c <_fwalk_sglue>:
 8002e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ea0:	4607      	mov	r7, r0
 8002ea2:	4688      	mov	r8, r1
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002eac:	f1b9 0901 	subs.w	r9, r9, #1
 8002eb0:	d505      	bpl.n	8002ebe <_fwalk_sglue+0x22>
 8002eb2:	6824      	ldr	r4, [r4, #0]
 8002eb4:	2c00      	cmp	r4, #0
 8002eb6:	d1f7      	bne.n	8002ea8 <_fwalk_sglue+0xc>
 8002eb8:	4630      	mov	r0, r6
 8002eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ebe:	89ab      	ldrh	r3, [r5, #12]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d907      	bls.n	8002ed4 <_fwalk_sglue+0x38>
 8002ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	d003      	beq.n	8002ed4 <_fwalk_sglue+0x38>
 8002ecc:	4629      	mov	r1, r5
 8002ece:	4638      	mov	r0, r7
 8002ed0:	47c0      	blx	r8
 8002ed2:	4306      	orrs	r6, r0
 8002ed4:	3568      	adds	r5, #104	@ 0x68
 8002ed6:	e7e9      	b.n	8002eac <_fwalk_sglue+0x10>

08002ed8 <iprintf>:
 8002ed8:	b40f      	push	{r0, r1, r2, r3}
 8002eda:	b507      	push	{r0, r1, r2, lr}
 8002edc:	4906      	ldr	r1, [pc, #24]	@ (8002ef8 <iprintf+0x20>)
 8002ede:	ab04      	add	r3, sp, #16
 8002ee0:	6808      	ldr	r0, [r1, #0]
 8002ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ee6:	6881      	ldr	r1, [r0, #8]
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	f000 fafd 	bl	80034e8 <_vfiprintf_r>
 8002eee:	b003      	add	sp, #12
 8002ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ef4:	b004      	add	sp, #16
 8002ef6:	4770      	bx	lr
 8002ef8:	20000204 	.word	0x20000204

08002efc <_puts_r>:
 8002efc:	6a03      	ldr	r3, [r0, #32]
 8002efe:	b570      	push	{r4, r5, r6, lr}
 8002f00:	4605      	mov	r5, r0
 8002f02:	460e      	mov	r6, r1
 8002f04:	6884      	ldr	r4, [r0, #8]
 8002f06:	b90b      	cbnz	r3, 8002f0c <_puts_r+0x10>
 8002f08:	f7ff ffb0 	bl	8002e6c <__sinit>
 8002f0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f0e:	07db      	lsls	r3, r3, #31
 8002f10:	d405      	bmi.n	8002f1e <_puts_r+0x22>
 8002f12:	89a3      	ldrh	r3, [r4, #12]
 8002f14:	0598      	lsls	r0, r3, #22
 8002f16:	d402      	bmi.n	8002f1e <_puts_r+0x22>
 8002f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f1a:	f000 f99e 	bl	800325a <__retarget_lock_acquire_recursive>
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	0719      	lsls	r1, r3, #28
 8002f22:	d502      	bpl.n	8002f2a <_puts_r+0x2e>
 8002f24:	6923      	ldr	r3, [r4, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d135      	bne.n	8002f96 <_puts_r+0x9a>
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	f000 f8c5 	bl	80030bc <__swsetup_r>
 8002f32:	b380      	cbz	r0, 8002f96 <_puts_r+0x9a>
 8002f34:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8002f38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f3a:	07da      	lsls	r2, r3, #31
 8002f3c:	d405      	bmi.n	8002f4a <_puts_r+0x4e>
 8002f3e:	89a3      	ldrh	r3, [r4, #12]
 8002f40:	059b      	lsls	r3, r3, #22
 8002f42:	d402      	bmi.n	8002f4a <_puts_r+0x4e>
 8002f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f46:	f000 f989 	bl	800325c <__retarget_lock_release_recursive>
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	bd70      	pop	{r4, r5, r6, pc}
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da04      	bge.n	8002f5c <_puts_r+0x60>
 8002f52:	69a2      	ldr	r2, [r4, #24]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	dc17      	bgt.n	8002f88 <_puts_r+0x8c>
 8002f58:	290a      	cmp	r1, #10
 8002f5a:	d015      	beq.n	8002f88 <_puts_r+0x8c>
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	6022      	str	r2, [r4, #0]
 8002f62:	7019      	strb	r1, [r3, #0]
 8002f64:	68a3      	ldr	r3, [r4, #8]
 8002f66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	60a3      	str	r3, [r4, #8]
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	d1ed      	bne.n	8002f4e <_puts_r+0x52>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da11      	bge.n	8002f9a <_puts_r+0x9e>
 8002f76:	4622      	mov	r2, r4
 8002f78:	210a      	movs	r1, #10
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	f000 f85f 	bl	800303e <__swbuf_r>
 8002f80:	3001      	adds	r0, #1
 8002f82:	d0d7      	beq.n	8002f34 <_puts_r+0x38>
 8002f84:	250a      	movs	r5, #10
 8002f86:	e7d7      	b.n	8002f38 <_puts_r+0x3c>
 8002f88:	4622      	mov	r2, r4
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f000 f857 	bl	800303e <__swbuf_r>
 8002f90:	3001      	adds	r0, #1
 8002f92:	d1e7      	bne.n	8002f64 <_puts_r+0x68>
 8002f94:	e7ce      	b.n	8002f34 <_puts_r+0x38>
 8002f96:	3e01      	subs	r6, #1
 8002f98:	e7e4      	b.n	8002f64 <_puts_r+0x68>
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	6022      	str	r2, [r4, #0]
 8002fa0:	220a      	movs	r2, #10
 8002fa2:	701a      	strb	r2, [r3, #0]
 8002fa4:	e7ee      	b.n	8002f84 <_puts_r+0x88>
	...

08002fa8 <puts>:
 8002fa8:	4b02      	ldr	r3, [pc, #8]	@ (8002fb4 <puts+0xc>)
 8002faa:	4601      	mov	r1, r0
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	f7ff bfa5 	b.w	8002efc <_puts_r>
 8002fb2:	bf00      	nop
 8002fb4:	20000204 	.word	0x20000204

08002fb8 <__sread>:
 8002fb8:	b510      	push	{r4, lr}
 8002fba:	460c      	mov	r4, r1
 8002fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fc0:	f000 f8fc 	bl	80031bc <_read_r>
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	bfab      	itete	ge
 8002fc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002fca:	89a3      	ldrhlt	r3, [r4, #12]
 8002fcc:	181b      	addge	r3, r3, r0
 8002fce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002fd2:	bfac      	ite	ge
 8002fd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002fd6:	81a3      	strhlt	r3, [r4, #12]
 8002fd8:	bd10      	pop	{r4, pc}

08002fda <__swrite>:
 8002fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fde:	461f      	mov	r7, r3
 8002fe0:	898b      	ldrh	r3, [r1, #12]
 8002fe2:	4605      	mov	r5, r0
 8002fe4:	05db      	lsls	r3, r3, #23
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	4616      	mov	r6, r2
 8002fea:	d505      	bpl.n	8002ff8 <__swrite+0x1e>
 8002fec:	2302      	movs	r3, #2
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ff4:	f000 f8d0 	bl	8003198 <_lseek_r>
 8002ff8:	89a3      	ldrh	r3, [r4, #12]
 8002ffa:	4632      	mov	r2, r6
 8002ffc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003000:	81a3      	strh	r3, [r4, #12]
 8003002:	4628      	mov	r0, r5
 8003004:	463b      	mov	r3, r7
 8003006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800300a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800300e:	f000 b8e7 	b.w	80031e0 <_write_r>

08003012 <__sseek>:
 8003012:	b510      	push	{r4, lr}
 8003014:	460c      	mov	r4, r1
 8003016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800301a:	f000 f8bd 	bl	8003198 <_lseek_r>
 800301e:	1c43      	adds	r3, r0, #1
 8003020:	89a3      	ldrh	r3, [r4, #12]
 8003022:	bf15      	itete	ne
 8003024:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003026:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800302a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800302e:	81a3      	strheq	r3, [r4, #12]
 8003030:	bf18      	it	ne
 8003032:	81a3      	strhne	r3, [r4, #12]
 8003034:	bd10      	pop	{r4, pc}

08003036 <__sclose>:
 8003036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800303a:	f000 b89d 	b.w	8003178 <_close_r>

0800303e <__swbuf_r>:
 800303e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003040:	460e      	mov	r6, r1
 8003042:	4614      	mov	r4, r2
 8003044:	4605      	mov	r5, r0
 8003046:	b118      	cbz	r0, 8003050 <__swbuf_r+0x12>
 8003048:	6a03      	ldr	r3, [r0, #32]
 800304a:	b90b      	cbnz	r3, 8003050 <__swbuf_r+0x12>
 800304c:	f7ff ff0e 	bl	8002e6c <__sinit>
 8003050:	69a3      	ldr	r3, [r4, #24]
 8003052:	60a3      	str	r3, [r4, #8]
 8003054:	89a3      	ldrh	r3, [r4, #12]
 8003056:	071a      	lsls	r2, r3, #28
 8003058:	d501      	bpl.n	800305e <__swbuf_r+0x20>
 800305a:	6923      	ldr	r3, [r4, #16]
 800305c:	b943      	cbnz	r3, 8003070 <__swbuf_r+0x32>
 800305e:	4621      	mov	r1, r4
 8003060:	4628      	mov	r0, r5
 8003062:	f000 f82b 	bl	80030bc <__swsetup_r>
 8003066:	b118      	cbz	r0, 8003070 <__swbuf_r+0x32>
 8003068:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800306c:	4638      	mov	r0, r7
 800306e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	6922      	ldr	r2, [r4, #16]
 8003074:	b2f6      	uxtb	r6, r6
 8003076:	1a98      	subs	r0, r3, r2
 8003078:	6963      	ldr	r3, [r4, #20]
 800307a:	4637      	mov	r7, r6
 800307c:	4283      	cmp	r3, r0
 800307e:	dc05      	bgt.n	800308c <__swbuf_r+0x4e>
 8003080:	4621      	mov	r1, r4
 8003082:	4628      	mov	r0, r5
 8003084:	f000 fd58 	bl	8003b38 <_fflush_r>
 8003088:	2800      	cmp	r0, #0
 800308a:	d1ed      	bne.n	8003068 <__swbuf_r+0x2a>
 800308c:	68a3      	ldr	r3, [r4, #8]
 800308e:	3b01      	subs	r3, #1
 8003090:	60a3      	str	r3, [r4, #8]
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	6022      	str	r2, [r4, #0]
 8003098:	701e      	strb	r6, [r3, #0]
 800309a:	6962      	ldr	r2, [r4, #20]
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	429a      	cmp	r2, r3
 80030a0:	d004      	beq.n	80030ac <__swbuf_r+0x6e>
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	07db      	lsls	r3, r3, #31
 80030a6:	d5e1      	bpl.n	800306c <__swbuf_r+0x2e>
 80030a8:	2e0a      	cmp	r6, #10
 80030aa:	d1df      	bne.n	800306c <__swbuf_r+0x2e>
 80030ac:	4621      	mov	r1, r4
 80030ae:	4628      	mov	r0, r5
 80030b0:	f000 fd42 	bl	8003b38 <_fflush_r>
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d0d9      	beq.n	800306c <__swbuf_r+0x2e>
 80030b8:	e7d6      	b.n	8003068 <__swbuf_r+0x2a>
	...

080030bc <__swsetup_r>:
 80030bc:	b538      	push	{r3, r4, r5, lr}
 80030be:	4b29      	ldr	r3, [pc, #164]	@ (8003164 <__swsetup_r+0xa8>)
 80030c0:	4605      	mov	r5, r0
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	460c      	mov	r4, r1
 80030c6:	b118      	cbz	r0, 80030d0 <__swsetup_r+0x14>
 80030c8:	6a03      	ldr	r3, [r0, #32]
 80030ca:	b90b      	cbnz	r3, 80030d0 <__swsetup_r+0x14>
 80030cc:	f7ff fece 	bl	8002e6c <__sinit>
 80030d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030d4:	0719      	lsls	r1, r3, #28
 80030d6:	d422      	bmi.n	800311e <__swsetup_r+0x62>
 80030d8:	06da      	lsls	r2, r3, #27
 80030da:	d407      	bmi.n	80030ec <__swsetup_r+0x30>
 80030dc:	2209      	movs	r2, #9
 80030de:	602a      	str	r2, [r5, #0]
 80030e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030e8:	81a3      	strh	r3, [r4, #12]
 80030ea:	e033      	b.n	8003154 <__swsetup_r+0x98>
 80030ec:	0758      	lsls	r0, r3, #29
 80030ee:	d512      	bpl.n	8003116 <__swsetup_r+0x5a>
 80030f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80030f2:	b141      	cbz	r1, 8003106 <__swsetup_r+0x4a>
 80030f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030f8:	4299      	cmp	r1, r3
 80030fa:	d002      	beq.n	8003102 <__swsetup_r+0x46>
 80030fc:	4628      	mov	r0, r5
 80030fe:	f000 f8cd 	bl	800329c <_free_r>
 8003102:	2300      	movs	r3, #0
 8003104:	6363      	str	r3, [r4, #52]	@ 0x34
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800310c:	81a3      	strh	r3, [r4, #12]
 800310e:	2300      	movs	r3, #0
 8003110:	6063      	str	r3, [r4, #4]
 8003112:	6923      	ldr	r3, [r4, #16]
 8003114:	6023      	str	r3, [r4, #0]
 8003116:	89a3      	ldrh	r3, [r4, #12]
 8003118:	f043 0308 	orr.w	r3, r3, #8
 800311c:	81a3      	strh	r3, [r4, #12]
 800311e:	6923      	ldr	r3, [r4, #16]
 8003120:	b94b      	cbnz	r3, 8003136 <__swsetup_r+0x7a>
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800312c:	d003      	beq.n	8003136 <__swsetup_r+0x7a>
 800312e:	4621      	mov	r1, r4
 8003130:	4628      	mov	r0, r5
 8003132:	f000 fd60 	bl	8003bf6 <__smakebuf_r>
 8003136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800313a:	f013 0201 	ands.w	r2, r3, #1
 800313e:	d00a      	beq.n	8003156 <__swsetup_r+0x9a>
 8003140:	2200      	movs	r2, #0
 8003142:	60a2      	str	r2, [r4, #8]
 8003144:	6962      	ldr	r2, [r4, #20]
 8003146:	4252      	negs	r2, r2
 8003148:	61a2      	str	r2, [r4, #24]
 800314a:	6922      	ldr	r2, [r4, #16]
 800314c:	b942      	cbnz	r2, 8003160 <__swsetup_r+0xa4>
 800314e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003152:	d1c5      	bne.n	80030e0 <__swsetup_r+0x24>
 8003154:	bd38      	pop	{r3, r4, r5, pc}
 8003156:	0799      	lsls	r1, r3, #30
 8003158:	bf58      	it	pl
 800315a:	6962      	ldrpl	r2, [r4, #20]
 800315c:	60a2      	str	r2, [r4, #8]
 800315e:	e7f4      	b.n	800314a <__swsetup_r+0x8e>
 8003160:	2000      	movs	r0, #0
 8003162:	e7f7      	b.n	8003154 <__swsetup_r+0x98>
 8003164:	20000204 	.word	0x20000204

08003168 <memset>:
 8003168:	4603      	mov	r3, r0
 800316a:	4402      	add	r2, r0
 800316c:	4293      	cmp	r3, r2
 800316e:	d100      	bne.n	8003172 <memset+0xa>
 8003170:	4770      	bx	lr
 8003172:	f803 1b01 	strb.w	r1, [r3], #1
 8003176:	e7f9      	b.n	800316c <memset+0x4>

08003178 <_close_r>:
 8003178:	b538      	push	{r3, r4, r5, lr}
 800317a:	2300      	movs	r3, #0
 800317c:	4d05      	ldr	r5, [pc, #20]	@ (8003194 <_close_r+0x1c>)
 800317e:	4604      	mov	r4, r0
 8003180:	4608      	mov	r0, r1
 8003182:	602b      	str	r3, [r5, #0]
 8003184:	f7fd fdd9 	bl	8000d3a <_close>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d102      	bne.n	8003192 <_close_r+0x1a>
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	b103      	cbz	r3, 8003192 <_close_r+0x1a>
 8003190:	6023      	str	r3, [r4, #0]
 8003192:	bd38      	pop	{r3, r4, r5, pc}
 8003194:	200005a8 	.word	0x200005a8

08003198 <_lseek_r>:
 8003198:	b538      	push	{r3, r4, r5, lr}
 800319a:	4604      	mov	r4, r0
 800319c:	4608      	mov	r0, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	2200      	movs	r2, #0
 80031a2:	4d05      	ldr	r5, [pc, #20]	@ (80031b8 <_lseek_r+0x20>)
 80031a4:	602a      	str	r2, [r5, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f7fd fdeb 	bl	8000d82 <_lseek>
 80031ac:	1c43      	adds	r3, r0, #1
 80031ae:	d102      	bne.n	80031b6 <_lseek_r+0x1e>
 80031b0:	682b      	ldr	r3, [r5, #0]
 80031b2:	b103      	cbz	r3, 80031b6 <_lseek_r+0x1e>
 80031b4:	6023      	str	r3, [r4, #0]
 80031b6:	bd38      	pop	{r3, r4, r5, pc}
 80031b8:	200005a8 	.word	0x200005a8

080031bc <_read_r>:
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	4604      	mov	r4, r0
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	2200      	movs	r2, #0
 80031c6:	4d05      	ldr	r5, [pc, #20]	@ (80031dc <_read_r+0x20>)
 80031c8:	602a      	str	r2, [r5, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f7fd fd7c 	bl	8000cc8 <_read>
 80031d0:	1c43      	adds	r3, r0, #1
 80031d2:	d102      	bne.n	80031da <_read_r+0x1e>
 80031d4:	682b      	ldr	r3, [r5, #0]
 80031d6:	b103      	cbz	r3, 80031da <_read_r+0x1e>
 80031d8:	6023      	str	r3, [r4, #0]
 80031da:	bd38      	pop	{r3, r4, r5, pc}
 80031dc:	200005a8 	.word	0x200005a8

080031e0 <_write_r>:
 80031e0:	b538      	push	{r3, r4, r5, lr}
 80031e2:	4604      	mov	r4, r0
 80031e4:	4608      	mov	r0, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	2200      	movs	r2, #0
 80031ea:	4d05      	ldr	r5, [pc, #20]	@ (8003200 <_write_r+0x20>)
 80031ec:	602a      	str	r2, [r5, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	f7fd fd87 	bl	8000d02 <_write>
 80031f4:	1c43      	adds	r3, r0, #1
 80031f6:	d102      	bne.n	80031fe <_write_r+0x1e>
 80031f8:	682b      	ldr	r3, [r5, #0]
 80031fa:	b103      	cbz	r3, 80031fe <_write_r+0x1e>
 80031fc:	6023      	str	r3, [r4, #0]
 80031fe:	bd38      	pop	{r3, r4, r5, pc}
 8003200:	200005a8 	.word	0x200005a8

08003204 <__errno>:
 8003204:	4b01      	ldr	r3, [pc, #4]	@ (800320c <__errno+0x8>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000204 	.word	0x20000204

08003210 <__libc_init_array>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	2600      	movs	r6, #0
 8003214:	4d0c      	ldr	r5, [pc, #48]	@ (8003248 <__libc_init_array+0x38>)
 8003216:	4c0d      	ldr	r4, [pc, #52]	@ (800324c <__libc_init_array+0x3c>)
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	42a6      	cmp	r6, r4
 800321e:	d109      	bne.n	8003234 <__libc_init_array+0x24>
 8003220:	f000 fdb2 	bl	8003d88 <_init>
 8003224:	2600      	movs	r6, #0
 8003226:	4d0a      	ldr	r5, [pc, #40]	@ (8003250 <__libc_init_array+0x40>)
 8003228:	4c0a      	ldr	r4, [pc, #40]	@ (8003254 <__libc_init_array+0x44>)
 800322a:	1b64      	subs	r4, r4, r5
 800322c:	10a4      	asrs	r4, r4, #2
 800322e:	42a6      	cmp	r6, r4
 8003230:	d105      	bne.n	800323e <__libc_init_array+0x2e>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	f855 3b04 	ldr.w	r3, [r5], #4
 8003238:	4798      	blx	r3
 800323a:	3601      	adds	r6, #1
 800323c:	e7ee      	b.n	800321c <__libc_init_array+0xc>
 800323e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003242:	4798      	blx	r3
 8003244:	3601      	adds	r6, #1
 8003246:	e7f2      	b.n	800322e <__libc_init_array+0x1e>
 8003248:	08003f88 	.word	0x08003f88
 800324c:	08003f88 	.word	0x08003f88
 8003250:	08003f88 	.word	0x08003f88
 8003254:	08003f8c 	.word	0x08003f8c

08003258 <__retarget_lock_init_recursive>:
 8003258:	4770      	bx	lr

0800325a <__retarget_lock_acquire_recursive>:
 800325a:	4770      	bx	lr

0800325c <__retarget_lock_release_recursive>:
 800325c:	4770      	bx	lr
	...

08003260 <__assert_func>:
 8003260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003262:	4614      	mov	r4, r2
 8003264:	461a      	mov	r2, r3
 8003266:	4b09      	ldr	r3, [pc, #36]	@ (800328c <__assert_func+0x2c>)
 8003268:	4605      	mov	r5, r0
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68d8      	ldr	r0, [r3, #12]
 800326e:	b14c      	cbz	r4, 8003284 <__assert_func+0x24>
 8003270:	4b07      	ldr	r3, [pc, #28]	@ (8003290 <__assert_func+0x30>)
 8003272:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003276:	9100      	str	r1, [sp, #0]
 8003278:	462b      	mov	r3, r5
 800327a:	4906      	ldr	r1, [pc, #24]	@ (8003294 <__assert_func+0x34>)
 800327c:	f000 fc84 	bl	8003b88 <fiprintf>
 8003280:	f000 fd36 	bl	8003cf0 <abort>
 8003284:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <__assert_func+0x38>)
 8003286:	461c      	mov	r4, r3
 8003288:	e7f3      	b.n	8003272 <__assert_func+0x12>
 800328a:	bf00      	nop
 800328c:	20000204 	.word	0x20000204
 8003290:	08003f19 	.word	0x08003f19
 8003294:	08003f26 	.word	0x08003f26
 8003298:	08003f54 	.word	0x08003f54

0800329c <_free_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	4605      	mov	r5, r0
 80032a0:	2900      	cmp	r1, #0
 80032a2:	d040      	beq.n	8003326 <_free_r+0x8a>
 80032a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032a8:	1f0c      	subs	r4, r1, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bfb8      	it	lt
 80032ae:	18e4      	addlt	r4, r4, r3
 80032b0:	f000 f8e6 	bl	8003480 <__malloc_lock>
 80032b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003328 <_free_r+0x8c>)
 80032b6:	6813      	ldr	r3, [r2, #0]
 80032b8:	b933      	cbnz	r3, 80032c8 <_free_r+0x2c>
 80032ba:	6063      	str	r3, [r4, #4]
 80032bc:	6014      	str	r4, [r2, #0]
 80032be:	4628      	mov	r0, r5
 80032c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032c4:	f000 b8e2 	b.w	800348c <__malloc_unlock>
 80032c8:	42a3      	cmp	r3, r4
 80032ca:	d908      	bls.n	80032de <_free_r+0x42>
 80032cc:	6820      	ldr	r0, [r4, #0]
 80032ce:	1821      	adds	r1, r4, r0
 80032d0:	428b      	cmp	r3, r1
 80032d2:	bf01      	itttt	eq
 80032d4:	6819      	ldreq	r1, [r3, #0]
 80032d6:	685b      	ldreq	r3, [r3, #4]
 80032d8:	1809      	addeq	r1, r1, r0
 80032da:	6021      	streq	r1, [r4, #0]
 80032dc:	e7ed      	b.n	80032ba <_free_r+0x1e>
 80032de:	461a      	mov	r2, r3
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	b10b      	cbz	r3, 80032e8 <_free_r+0x4c>
 80032e4:	42a3      	cmp	r3, r4
 80032e6:	d9fa      	bls.n	80032de <_free_r+0x42>
 80032e8:	6811      	ldr	r1, [r2, #0]
 80032ea:	1850      	adds	r0, r2, r1
 80032ec:	42a0      	cmp	r0, r4
 80032ee:	d10b      	bne.n	8003308 <_free_r+0x6c>
 80032f0:	6820      	ldr	r0, [r4, #0]
 80032f2:	4401      	add	r1, r0
 80032f4:	1850      	adds	r0, r2, r1
 80032f6:	4283      	cmp	r3, r0
 80032f8:	6011      	str	r1, [r2, #0]
 80032fa:	d1e0      	bne.n	80032be <_free_r+0x22>
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4408      	add	r0, r1
 8003302:	6010      	str	r0, [r2, #0]
 8003304:	6053      	str	r3, [r2, #4]
 8003306:	e7da      	b.n	80032be <_free_r+0x22>
 8003308:	d902      	bls.n	8003310 <_free_r+0x74>
 800330a:	230c      	movs	r3, #12
 800330c:	602b      	str	r3, [r5, #0]
 800330e:	e7d6      	b.n	80032be <_free_r+0x22>
 8003310:	6820      	ldr	r0, [r4, #0]
 8003312:	1821      	adds	r1, r4, r0
 8003314:	428b      	cmp	r3, r1
 8003316:	bf01      	itttt	eq
 8003318:	6819      	ldreq	r1, [r3, #0]
 800331a:	685b      	ldreq	r3, [r3, #4]
 800331c:	1809      	addeq	r1, r1, r0
 800331e:	6021      	streq	r1, [r4, #0]
 8003320:	6063      	str	r3, [r4, #4]
 8003322:	6054      	str	r4, [r2, #4]
 8003324:	e7cb      	b.n	80032be <_free_r+0x22>
 8003326:	bd38      	pop	{r3, r4, r5, pc}
 8003328:	200005b4 	.word	0x200005b4

0800332c <malloc>:
 800332c:	4b02      	ldr	r3, [pc, #8]	@ (8003338 <malloc+0xc>)
 800332e:	4601      	mov	r1, r0
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	f000 b825 	b.w	8003380 <_malloc_r>
 8003336:	bf00      	nop
 8003338:	20000204 	.word	0x20000204

0800333c <sbrk_aligned>:
 800333c:	b570      	push	{r4, r5, r6, lr}
 800333e:	4e0f      	ldr	r6, [pc, #60]	@ (800337c <sbrk_aligned+0x40>)
 8003340:	460c      	mov	r4, r1
 8003342:	6831      	ldr	r1, [r6, #0]
 8003344:	4605      	mov	r5, r0
 8003346:	b911      	cbnz	r1, 800334e <sbrk_aligned+0x12>
 8003348:	f000 fcb4 	bl	8003cb4 <_sbrk_r>
 800334c:	6030      	str	r0, [r6, #0]
 800334e:	4621      	mov	r1, r4
 8003350:	4628      	mov	r0, r5
 8003352:	f000 fcaf 	bl	8003cb4 <_sbrk_r>
 8003356:	1c43      	adds	r3, r0, #1
 8003358:	d103      	bne.n	8003362 <sbrk_aligned+0x26>
 800335a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800335e:	4620      	mov	r0, r4
 8003360:	bd70      	pop	{r4, r5, r6, pc}
 8003362:	1cc4      	adds	r4, r0, #3
 8003364:	f024 0403 	bic.w	r4, r4, #3
 8003368:	42a0      	cmp	r0, r4
 800336a:	d0f8      	beq.n	800335e <sbrk_aligned+0x22>
 800336c:	1a21      	subs	r1, r4, r0
 800336e:	4628      	mov	r0, r5
 8003370:	f000 fca0 	bl	8003cb4 <_sbrk_r>
 8003374:	3001      	adds	r0, #1
 8003376:	d1f2      	bne.n	800335e <sbrk_aligned+0x22>
 8003378:	e7ef      	b.n	800335a <sbrk_aligned+0x1e>
 800337a:	bf00      	nop
 800337c:	200005b0 	.word	0x200005b0

08003380 <_malloc_r>:
 8003380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003384:	1ccd      	adds	r5, r1, #3
 8003386:	f025 0503 	bic.w	r5, r5, #3
 800338a:	3508      	adds	r5, #8
 800338c:	2d0c      	cmp	r5, #12
 800338e:	bf38      	it	cc
 8003390:	250c      	movcc	r5, #12
 8003392:	2d00      	cmp	r5, #0
 8003394:	4606      	mov	r6, r0
 8003396:	db01      	blt.n	800339c <_malloc_r+0x1c>
 8003398:	42a9      	cmp	r1, r5
 800339a:	d904      	bls.n	80033a6 <_malloc_r+0x26>
 800339c:	230c      	movs	r3, #12
 800339e:	6033      	str	r3, [r6, #0]
 80033a0:	2000      	movs	r0, #0
 80033a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800347c <_malloc_r+0xfc>
 80033aa:	f000 f869 	bl	8003480 <__malloc_lock>
 80033ae:	f8d8 3000 	ldr.w	r3, [r8]
 80033b2:	461c      	mov	r4, r3
 80033b4:	bb44      	cbnz	r4, 8003408 <_malloc_r+0x88>
 80033b6:	4629      	mov	r1, r5
 80033b8:	4630      	mov	r0, r6
 80033ba:	f7ff ffbf 	bl	800333c <sbrk_aligned>
 80033be:	1c43      	adds	r3, r0, #1
 80033c0:	4604      	mov	r4, r0
 80033c2:	d158      	bne.n	8003476 <_malloc_r+0xf6>
 80033c4:	f8d8 4000 	ldr.w	r4, [r8]
 80033c8:	4627      	mov	r7, r4
 80033ca:	2f00      	cmp	r7, #0
 80033cc:	d143      	bne.n	8003456 <_malloc_r+0xd6>
 80033ce:	2c00      	cmp	r4, #0
 80033d0:	d04b      	beq.n	800346a <_malloc_r+0xea>
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	4639      	mov	r1, r7
 80033d6:	4630      	mov	r0, r6
 80033d8:	eb04 0903 	add.w	r9, r4, r3
 80033dc:	f000 fc6a 	bl	8003cb4 <_sbrk_r>
 80033e0:	4581      	cmp	r9, r0
 80033e2:	d142      	bne.n	800346a <_malloc_r+0xea>
 80033e4:	6821      	ldr	r1, [r4, #0]
 80033e6:	4630      	mov	r0, r6
 80033e8:	1a6d      	subs	r5, r5, r1
 80033ea:	4629      	mov	r1, r5
 80033ec:	f7ff ffa6 	bl	800333c <sbrk_aligned>
 80033f0:	3001      	adds	r0, #1
 80033f2:	d03a      	beq.n	800346a <_malloc_r+0xea>
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	442b      	add	r3, r5
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	f8d8 3000 	ldr.w	r3, [r8]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	bb62      	cbnz	r2, 800345c <_malloc_r+0xdc>
 8003402:	f8c8 7000 	str.w	r7, [r8]
 8003406:	e00f      	b.n	8003428 <_malloc_r+0xa8>
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	1b52      	subs	r2, r2, r5
 800340c:	d420      	bmi.n	8003450 <_malloc_r+0xd0>
 800340e:	2a0b      	cmp	r2, #11
 8003410:	d917      	bls.n	8003442 <_malloc_r+0xc2>
 8003412:	1961      	adds	r1, r4, r5
 8003414:	42a3      	cmp	r3, r4
 8003416:	6025      	str	r5, [r4, #0]
 8003418:	bf18      	it	ne
 800341a:	6059      	strne	r1, [r3, #4]
 800341c:	6863      	ldr	r3, [r4, #4]
 800341e:	bf08      	it	eq
 8003420:	f8c8 1000 	streq.w	r1, [r8]
 8003424:	5162      	str	r2, [r4, r5]
 8003426:	604b      	str	r3, [r1, #4]
 8003428:	4630      	mov	r0, r6
 800342a:	f000 f82f 	bl	800348c <__malloc_unlock>
 800342e:	f104 000b 	add.w	r0, r4, #11
 8003432:	1d23      	adds	r3, r4, #4
 8003434:	f020 0007 	bic.w	r0, r0, #7
 8003438:	1ac2      	subs	r2, r0, r3
 800343a:	bf1c      	itt	ne
 800343c:	1a1b      	subne	r3, r3, r0
 800343e:	50a3      	strne	r3, [r4, r2]
 8003440:	e7af      	b.n	80033a2 <_malloc_r+0x22>
 8003442:	6862      	ldr	r2, [r4, #4]
 8003444:	42a3      	cmp	r3, r4
 8003446:	bf0c      	ite	eq
 8003448:	f8c8 2000 	streq.w	r2, [r8]
 800344c:	605a      	strne	r2, [r3, #4]
 800344e:	e7eb      	b.n	8003428 <_malloc_r+0xa8>
 8003450:	4623      	mov	r3, r4
 8003452:	6864      	ldr	r4, [r4, #4]
 8003454:	e7ae      	b.n	80033b4 <_malloc_r+0x34>
 8003456:	463c      	mov	r4, r7
 8003458:	687f      	ldr	r7, [r7, #4]
 800345a:	e7b6      	b.n	80033ca <_malloc_r+0x4a>
 800345c:	461a      	mov	r2, r3
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	42a3      	cmp	r3, r4
 8003462:	d1fb      	bne.n	800345c <_malloc_r+0xdc>
 8003464:	2300      	movs	r3, #0
 8003466:	6053      	str	r3, [r2, #4]
 8003468:	e7de      	b.n	8003428 <_malloc_r+0xa8>
 800346a:	230c      	movs	r3, #12
 800346c:	4630      	mov	r0, r6
 800346e:	6033      	str	r3, [r6, #0]
 8003470:	f000 f80c 	bl	800348c <__malloc_unlock>
 8003474:	e794      	b.n	80033a0 <_malloc_r+0x20>
 8003476:	6005      	str	r5, [r0, #0]
 8003478:	e7d6      	b.n	8003428 <_malloc_r+0xa8>
 800347a:	bf00      	nop
 800347c:	200005b4 	.word	0x200005b4

08003480 <__malloc_lock>:
 8003480:	4801      	ldr	r0, [pc, #4]	@ (8003488 <__malloc_lock+0x8>)
 8003482:	f7ff beea 	b.w	800325a <__retarget_lock_acquire_recursive>
 8003486:	bf00      	nop
 8003488:	200005ac 	.word	0x200005ac

0800348c <__malloc_unlock>:
 800348c:	4801      	ldr	r0, [pc, #4]	@ (8003494 <__malloc_unlock+0x8>)
 800348e:	f7ff bee5 	b.w	800325c <__retarget_lock_release_recursive>
 8003492:	bf00      	nop
 8003494:	200005ac 	.word	0x200005ac

08003498 <__sfputc_r>:
 8003498:	6893      	ldr	r3, [r2, #8]
 800349a:	b410      	push	{r4}
 800349c:	3b01      	subs	r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	6093      	str	r3, [r2, #8]
 80034a2:	da07      	bge.n	80034b4 <__sfputc_r+0x1c>
 80034a4:	6994      	ldr	r4, [r2, #24]
 80034a6:	42a3      	cmp	r3, r4
 80034a8:	db01      	blt.n	80034ae <__sfputc_r+0x16>
 80034aa:	290a      	cmp	r1, #10
 80034ac:	d102      	bne.n	80034b4 <__sfputc_r+0x1c>
 80034ae:	bc10      	pop	{r4}
 80034b0:	f7ff bdc5 	b.w	800303e <__swbuf_r>
 80034b4:	6813      	ldr	r3, [r2, #0]
 80034b6:	1c58      	adds	r0, r3, #1
 80034b8:	6010      	str	r0, [r2, #0]
 80034ba:	7019      	strb	r1, [r3, #0]
 80034bc:	4608      	mov	r0, r1
 80034be:	bc10      	pop	{r4}
 80034c0:	4770      	bx	lr

080034c2 <__sfputs_r>:
 80034c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c4:	4606      	mov	r6, r0
 80034c6:	460f      	mov	r7, r1
 80034c8:	4614      	mov	r4, r2
 80034ca:	18d5      	adds	r5, r2, r3
 80034cc:	42ac      	cmp	r4, r5
 80034ce:	d101      	bne.n	80034d4 <__sfputs_r+0x12>
 80034d0:	2000      	movs	r0, #0
 80034d2:	e007      	b.n	80034e4 <__sfputs_r+0x22>
 80034d4:	463a      	mov	r2, r7
 80034d6:	4630      	mov	r0, r6
 80034d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034dc:	f7ff ffdc 	bl	8003498 <__sfputc_r>
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	d1f3      	bne.n	80034cc <__sfputs_r+0xa>
 80034e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034e8 <_vfiprintf_r>:
 80034e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ec:	460d      	mov	r5, r1
 80034ee:	4614      	mov	r4, r2
 80034f0:	4698      	mov	r8, r3
 80034f2:	4606      	mov	r6, r0
 80034f4:	b09d      	sub	sp, #116	@ 0x74
 80034f6:	b118      	cbz	r0, 8003500 <_vfiprintf_r+0x18>
 80034f8:	6a03      	ldr	r3, [r0, #32]
 80034fa:	b90b      	cbnz	r3, 8003500 <_vfiprintf_r+0x18>
 80034fc:	f7ff fcb6 	bl	8002e6c <__sinit>
 8003500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003502:	07d9      	lsls	r1, r3, #31
 8003504:	d405      	bmi.n	8003512 <_vfiprintf_r+0x2a>
 8003506:	89ab      	ldrh	r3, [r5, #12]
 8003508:	059a      	lsls	r2, r3, #22
 800350a:	d402      	bmi.n	8003512 <_vfiprintf_r+0x2a>
 800350c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800350e:	f7ff fea4 	bl	800325a <__retarget_lock_acquire_recursive>
 8003512:	89ab      	ldrh	r3, [r5, #12]
 8003514:	071b      	lsls	r3, r3, #28
 8003516:	d501      	bpl.n	800351c <_vfiprintf_r+0x34>
 8003518:	692b      	ldr	r3, [r5, #16]
 800351a:	b99b      	cbnz	r3, 8003544 <_vfiprintf_r+0x5c>
 800351c:	4629      	mov	r1, r5
 800351e:	4630      	mov	r0, r6
 8003520:	f7ff fdcc 	bl	80030bc <__swsetup_r>
 8003524:	b170      	cbz	r0, 8003544 <_vfiprintf_r+0x5c>
 8003526:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003528:	07dc      	lsls	r4, r3, #31
 800352a:	d504      	bpl.n	8003536 <_vfiprintf_r+0x4e>
 800352c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003530:	b01d      	add	sp, #116	@ 0x74
 8003532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003536:	89ab      	ldrh	r3, [r5, #12]
 8003538:	0598      	lsls	r0, r3, #22
 800353a:	d4f7      	bmi.n	800352c <_vfiprintf_r+0x44>
 800353c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800353e:	f7ff fe8d 	bl	800325c <__retarget_lock_release_recursive>
 8003542:	e7f3      	b.n	800352c <_vfiprintf_r+0x44>
 8003544:	2300      	movs	r3, #0
 8003546:	9309      	str	r3, [sp, #36]	@ 0x24
 8003548:	2320      	movs	r3, #32
 800354a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800354e:	2330      	movs	r3, #48	@ 0x30
 8003550:	f04f 0901 	mov.w	r9, #1
 8003554:	f8cd 800c 	str.w	r8, [sp, #12]
 8003558:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003704 <_vfiprintf_r+0x21c>
 800355c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003560:	4623      	mov	r3, r4
 8003562:	469a      	mov	sl, r3
 8003564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003568:	b10a      	cbz	r2, 800356e <_vfiprintf_r+0x86>
 800356a:	2a25      	cmp	r2, #37	@ 0x25
 800356c:	d1f9      	bne.n	8003562 <_vfiprintf_r+0x7a>
 800356e:	ebba 0b04 	subs.w	fp, sl, r4
 8003572:	d00b      	beq.n	800358c <_vfiprintf_r+0xa4>
 8003574:	465b      	mov	r3, fp
 8003576:	4622      	mov	r2, r4
 8003578:	4629      	mov	r1, r5
 800357a:	4630      	mov	r0, r6
 800357c:	f7ff ffa1 	bl	80034c2 <__sfputs_r>
 8003580:	3001      	adds	r0, #1
 8003582:	f000 80a7 	beq.w	80036d4 <_vfiprintf_r+0x1ec>
 8003586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003588:	445a      	add	r2, fp
 800358a:	9209      	str	r2, [sp, #36]	@ 0x24
 800358c:	f89a 3000 	ldrb.w	r3, [sl]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 809f 	beq.w	80036d4 <_vfiprintf_r+0x1ec>
 8003596:	2300      	movs	r3, #0
 8003598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800359c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035a0:	f10a 0a01 	add.w	sl, sl, #1
 80035a4:	9304      	str	r3, [sp, #16]
 80035a6:	9307      	str	r3, [sp, #28]
 80035a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80035ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80035ae:	4654      	mov	r4, sl
 80035b0:	2205      	movs	r2, #5
 80035b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035b6:	4853      	ldr	r0, [pc, #332]	@ (8003704 <_vfiprintf_r+0x21c>)
 80035b8:	f000 fb8c 	bl	8003cd4 <memchr>
 80035bc:	9a04      	ldr	r2, [sp, #16]
 80035be:	b9d8      	cbnz	r0, 80035f8 <_vfiprintf_r+0x110>
 80035c0:	06d1      	lsls	r1, r2, #27
 80035c2:	bf44      	itt	mi
 80035c4:	2320      	movmi	r3, #32
 80035c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035ca:	0713      	lsls	r3, r2, #28
 80035cc:	bf44      	itt	mi
 80035ce:	232b      	movmi	r3, #43	@ 0x2b
 80035d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035d4:	f89a 3000 	ldrb.w	r3, [sl]
 80035d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80035da:	d015      	beq.n	8003608 <_vfiprintf_r+0x120>
 80035dc:	4654      	mov	r4, sl
 80035de:	2000      	movs	r0, #0
 80035e0:	f04f 0c0a 	mov.w	ip, #10
 80035e4:	9a07      	ldr	r2, [sp, #28]
 80035e6:	4621      	mov	r1, r4
 80035e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035ec:	3b30      	subs	r3, #48	@ 0x30
 80035ee:	2b09      	cmp	r3, #9
 80035f0:	d94b      	bls.n	800368a <_vfiprintf_r+0x1a2>
 80035f2:	b1b0      	cbz	r0, 8003622 <_vfiprintf_r+0x13a>
 80035f4:	9207      	str	r2, [sp, #28]
 80035f6:	e014      	b.n	8003622 <_vfiprintf_r+0x13a>
 80035f8:	eba0 0308 	sub.w	r3, r0, r8
 80035fc:	fa09 f303 	lsl.w	r3, r9, r3
 8003600:	4313      	orrs	r3, r2
 8003602:	46a2      	mov	sl, r4
 8003604:	9304      	str	r3, [sp, #16]
 8003606:	e7d2      	b.n	80035ae <_vfiprintf_r+0xc6>
 8003608:	9b03      	ldr	r3, [sp, #12]
 800360a:	1d19      	adds	r1, r3, #4
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	9103      	str	r1, [sp, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	bfbb      	ittet	lt
 8003614:	425b      	neglt	r3, r3
 8003616:	f042 0202 	orrlt.w	r2, r2, #2
 800361a:	9307      	strge	r3, [sp, #28]
 800361c:	9307      	strlt	r3, [sp, #28]
 800361e:	bfb8      	it	lt
 8003620:	9204      	strlt	r2, [sp, #16]
 8003622:	7823      	ldrb	r3, [r4, #0]
 8003624:	2b2e      	cmp	r3, #46	@ 0x2e
 8003626:	d10a      	bne.n	800363e <_vfiprintf_r+0x156>
 8003628:	7863      	ldrb	r3, [r4, #1]
 800362a:	2b2a      	cmp	r3, #42	@ 0x2a
 800362c:	d132      	bne.n	8003694 <_vfiprintf_r+0x1ac>
 800362e:	9b03      	ldr	r3, [sp, #12]
 8003630:	3402      	adds	r4, #2
 8003632:	1d1a      	adds	r2, r3, #4
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	9203      	str	r2, [sp, #12]
 8003638:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800363c:	9305      	str	r3, [sp, #20]
 800363e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003708 <_vfiprintf_r+0x220>
 8003642:	2203      	movs	r2, #3
 8003644:	4650      	mov	r0, sl
 8003646:	7821      	ldrb	r1, [r4, #0]
 8003648:	f000 fb44 	bl	8003cd4 <memchr>
 800364c:	b138      	cbz	r0, 800365e <_vfiprintf_r+0x176>
 800364e:	2240      	movs	r2, #64	@ 0x40
 8003650:	9b04      	ldr	r3, [sp, #16]
 8003652:	eba0 000a 	sub.w	r0, r0, sl
 8003656:	4082      	lsls	r2, r0
 8003658:	4313      	orrs	r3, r2
 800365a:	3401      	adds	r4, #1
 800365c:	9304      	str	r3, [sp, #16]
 800365e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003662:	2206      	movs	r2, #6
 8003664:	4829      	ldr	r0, [pc, #164]	@ (800370c <_vfiprintf_r+0x224>)
 8003666:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800366a:	f000 fb33 	bl	8003cd4 <memchr>
 800366e:	2800      	cmp	r0, #0
 8003670:	d03f      	beq.n	80036f2 <_vfiprintf_r+0x20a>
 8003672:	4b27      	ldr	r3, [pc, #156]	@ (8003710 <_vfiprintf_r+0x228>)
 8003674:	bb1b      	cbnz	r3, 80036be <_vfiprintf_r+0x1d6>
 8003676:	9b03      	ldr	r3, [sp, #12]
 8003678:	3307      	adds	r3, #7
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	3308      	adds	r3, #8
 8003680:	9303      	str	r3, [sp, #12]
 8003682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003684:	443b      	add	r3, r7
 8003686:	9309      	str	r3, [sp, #36]	@ 0x24
 8003688:	e76a      	b.n	8003560 <_vfiprintf_r+0x78>
 800368a:	460c      	mov	r4, r1
 800368c:	2001      	movs	r0, #1
 800368e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003692:	e7a8      	b.n	80035e6 <_vfiprintf_r+0xfe>
 8003694:	2300      	movs	r3, #0
 8003696:	f04f 0c0a 	mov.w	ip, #10
 800369a:	4619      	mov	r1, r3
 800369c:	3401      	adds	r4, #1
 800369e:	9305      	str	r3, [sp, #20]
 80036a0:	4620      	mov	r0, r4
 80036a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036a6:	3a30      	subs	r2, #48	@ 0x30
 80036a8:	2a09      	cmp	r2, #9
 80036aa:	d903      	bls.n	80036b4 <_vfiprintf_r+0x1cc>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0c6      	beq.n	800363e <_vfiprintf_r+0x156>
 80036b0:	9105      	str	r1, [sp, #20]
 80036b2:	e7c4      	b.n	800363e <_vfiprintf_r+0x156>
 80036b4:	4604      	mov	r4, r0
 80036b6:	2301      	movs	r3, #1
 80036b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80036bc:	e7f0      	b.n	80036a0 <_vfiprintf_r+0x1b8>
 80036be:	ab03      	add	r3, sp, #12
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	462a      	mov	r2, r5
 80036c4:	4630      	mov	r0, r6
 80036c6:	4b13      	ldr	r3, [pc, #76]	@ (8003714 <_vfiprintf_r+0x22c>)
 80036c8:	a904      	add	r1, sp, #16
 80036ca:	f3af 8000 	nop.w
 80036ce:	4607      	mov	r7, r0
 80036d0:	1c78      	adds	r0, r7, #1
 80036d2:	d1d6      	bne.n	8003682 <_vfiprintf_r+0x19a>
 80036d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80036d6:	07d9      	lsls	r1, r3, #31
 80036d8:	d405      	bmi.n	80036e6 <_vfiprintf_r+0x1fe>
 80036da:	89ab      	ldrh	r3, [r5, #12]
 80036dc:	059a      	lsls	r2, r3, #22
 80036de:	d402      	bmi.n	80036e6 <_vfiprintf_r+0x1fe>
 80036e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80036e2:	f7ff fdbb 	bl	800325c <__retarget_lock_release_recursive>
 80036e6:	89ab      	ldrh	r3, [r5, #12]
 80036e8:	065b      	lsls	r3, r3, #25
 80036ea:	f53f af1f 	bmi.w	800352c <_vfiprintf_r+0x44>
 80036ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036f0:	e71e      	b.n	8003530 <_vfiprintf_r+0x48>
 80036f2:	ab03      	add	r3, sp, #12
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	462a      	mov	r2, r5
 80036f8:	4630      	mov	r0, r6
 80036fa:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <_vfiprintf_r+0x22c>)
 80036fc:	a904      	add	r1, sp, #16
 80036fe:	f000 f87d 	bl	80037fc <_printf_i>
 8003702:	e7e4      	b.n	80036ce <_vfiprintf_r+0x1e6>
 8003704:	08003f55 	.word	0x08003f55
 8003708:	08003f5b 	.word	0x08003f5b
 800370c:	08003f5f 	.word	0x08003f5f
 8003710:	00000000 	.word	0x00000000
 8003714:	080034c3 	.word	0x080034c3

08003718 <_printf_common>:
 8003718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800371c:	4616      	mov	r6, r2
 800371e:	4698      	mov	r8, r3
 8003720:	688a      	ldr	r2, [r1, #8]
 8003722:	690b      	ldr	r3, [r1, #16]
 8003724:	4607      	mov	r7, r0
 8003726:	4293      	cmp	r3, r2
 8003728:	bfb8      	it	lt
 800372a:	4613      	movlt	r3, r2
 800372c:	6033      	str	r3, [r6, #0]
 800372e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003732:	460c      	mov	r4, r1
 8003734:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003738:	b10a      	cbz	r2, 800373e <_printf_common+0x26>
 800373a:	3301      	adds	r3, #1
 800373c:	6033      	str	r3, [r6, #0]
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	0699      	lsls	r1, r3, #26
 8003742:	bf42      	ittt	mi
 8003744:	6833      	ldrmi	r3, [r6, #0]
 8003746:	3302      	addmi	r3, #2
 8003748:	6033      	strmi	r3, [r6, #0]
 800374a:	6825      	ldr	r5, [r4, #0]
 800374c:	f015 0506 	ands.w	r5, r5, #6
 8003750:	d106      	bne.n	8003760 <_printf_common+0x48>
 8003752:	f104 0a19 	add.w	sl, r4, #25
 8003756:	68e3      	ldr	r3, [r4, #12]
 8003758:	6832      	ldr	r2, [r6, #0]
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	42ab      	cmp	r3, r5
 800375e:	dc2b      	bgt.n	80037b8 <_printf_common+0xa0>
 8003760:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003764:	6822      	ldr	r2, [r4, #0]
 8003766:	3b00      	subs	r3, #0
 8003768:	bf18      	it	ne
 800376a:	2301      	movne	r3, #1
 800376c:	0692      	lsls	r2, r2, #26
 800376e:	d430      	bmi.n	80037d2 <_printf_common+0xba>
 8003770:	4641      	mov	r1, r8
 8003772:	4638      	mov	r0, r7
 8003774:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003778:	47c8      	blx	r9
 800377a:	3001      	adds	r0, #1
 800377c:	d023      	beq.n	80037c6 <_printf_common+0xae>
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	6922      	ldr	r2, [r4, #16]
 8003782:	f003 0306 	and.w	r3, r3, #6
 8003786:	2b04      	cmp	r3, #4
 8003788:	bf14      	ite	ne
 800378a:	2500      	movne	r5, #0
 800378c:	6833      	ldreq	r3, [r6, #0]
 800378e:	f04f 0600 	mov.w	r6, #0
 8003792:	bf08      	it	eq
 8003794:	68e5      	ldreq	r5, [r4, #12]
 8003796:	f104 041a 	add.w	r4, r4, #26
 800379a:	bf08      	it	eq
 800379c:	1aed      	subeq	r5, r5, r3
 800379e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80037a2:	bf08      	it	eq
 80037a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037a8:	4293      	cmp	r3, r2
 80037aa:	bfc4      	itt	gt
 80037ac:	1a9b      	subgt	r3, r3, r2
 80037ae:	18ed      	addgt	r5, r5, r3
 80037b0:	42b5      	cmp	r5, r6
 80037b2:	d11a      	bne.n	80037ea <_printf_common+0xd2>
 80037b4:	2000      	movs	r0, #0
 80037b6:	e008      	b.n	80037ca <_printf_common+0xb2>
 80037b8:	2301      	movs	r3, #1
 80037ba:	4652      	mov	r2, sl
 80037bc:	4641      	mov	r1, r8
 80037be:	4638      	mov	r0, r7
 80037c0:	47c8      	blx	r9
 80037c2:	3001      	adds	r0, #1
 80037c4:	d103      	bne.n	80037ce <_printf_common+0xb6>
 80037c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ce:	3501      	adds	r5, #1
 80037d0:	e7c1      	b.n	8003756 <_printf_common+0x3e>
 80037d2:	2030      	movs	r0, #48	@ 0x30
 80037d4:	18e1      	adds	r1, r4, r3
 80037d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80037e0:	4422      	add	r2, r4
 80037e2:	3302      	adds	r3, #2
 80037e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80037e8:	e7c2      	b.n	8003770 <_printf_common+0x58>
 80037ea:	2301      	movs	r3, #1
 80037ec:	4622      	mov	r2, r4
 80037ee:	4641      	mov	r1, r8
 80037f0:	4638      	mov	r0, r7
 80037f2:	47c8      	blx	r9
 80037f4:	3001      	adds	r0, #1
 80037f6:	d0e6      	beq.n	80037c6 <_printf_common+0xae>
 80037f8:	3601      	adds	r6, #1
 80037fa:	e7d9      	b.n	80037b0 <_printf_common+0x98>

080037fc <_printf_i>:
 80037fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003800:	7e0f      	ldrb	r7, [r1, #24]
 8003802:	4691      	mov	r9, r2
 8003804:	2f78      	cmp	r7, #120	@ 0x78
 8003806:	4680      	mov	r8, r0
 8003808:	460c      	mov	r4, r1
 800380a:	469a      	mov	sl, r3
 800380c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800380e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003812:	d807      	bhi.n	8003824 <_printf_i+0x28>
 8003814:	2f62      	cmp	r7, #98	@ 0x62
 8003816:	d80a      	bhi.n	800382e <_printf_i+0x32>
 8003818:	2f00      	cmp	r7, #0
 800381a:	f000 80d1 	beq.w	80039c0 <_printf_i+0x1c4>
 800381e:	2f58      	cmp	r7, #88	@ 0x58
 8003820:	f000 80b8 	beq.w	8003994 <_printf_i+0x198>
 8003824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003828:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800382c:	e03a      	b.n	80038a4 <_printf_i+0xa8>
 800382e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003832:	2b15      	cmp	r3, #21
 8003834:	d8f6      	bhi.n	8003824 <_printf_i+0x28>
 8003836:	a101      	add	r1, pc, #4	@ (adr r1, 800383c <_printf_i+0x40>)
 8003838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800383c:	08003895 	.word	0x08003895
 8003840:	080038a9 	.word	0x080038a9
 8003844:	08003825 	.word	0x08003825
 8003848:	08003825 	.word	0x08003825
 800384c:	08003825 	.word	0x08003825
 8003850:	08003825 	.word	0x08003825
 8003854:	080038a9 	.word	0x080038a9
 8003858:	08003825 	.word	0x08003825
 800385c:	08003825 	.word	0x08003825
 8003860:	08003825 	.word	0x08003825
 8003864:	08003825 	.word	0x08003825
 8003868:	080039a7 	.word	0x080039a7
 800386c:	080038d3 	.word	0x080038d3
 8003870:	08003961 	.word	0x08003961
 8003874:	08003825 	.word	0x08003825
 8003878:	08003825 	.word	0x08003825
 800387c:	080039c9 	.word	0x080039c9
 8003880:	08003825 	.word	0x08003825
 8003884:	080038d3 	.word	0x080038d3
 8003888:	08003825 	.word	0x08003825
 800388c:	08003825 	.word	0x08003825
 8003890:	08003969 	.word	0x08003969
 8003894:	6833      	ldr	r3, [r6, #0]
 8003896:	1d1a      	adds	r2, r3, #4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6032      	str	r2, [r6, #0]
 800389c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038a4:	2301      	movs	r3, #1
 80038a6:	e09c      	b.n	80039e2 <_printf_i+0x1e6>
 80038a8:	6833      	ldr	r3, [r6, #0]
 80038aa:	6820      	ldr	r0, [r4, #0]
 80038ac:	1d19      	adds	r1, r3, #4
 80038ae:	6031      	str	r1, [r6, #0]
 80038b0:	0606      	lsls	r6, r0, #24
 80038b2:	d501      	bpl.n	80038b8 <_printf_i+0xbc>
 80038b4:	681d      	ldr	r5, [r3, #0]
 80038b6:	e003      	b.n	80038c0 <_printf_i+0xc4>
 80038b8:	0645      	lsls	r5, r0, #25
 80038ba:	d5fb      	bpl.n	80038b4 <_printf_i+0xb8>
 80038bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80038c0:	2d00      	cmp	r5, #0
 80038c2:	da03      	bge.n	80038cc <_printf_i+0xd0>
 80038c4:	232d      	movs	r3, #45	@ 0x2d
 80038c6:	426d      	negs	r5, r5
 80038c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038cc:	230a      	movs	r3, #10
 80038ce:	4858      	ldr	r0, [pc, #352]	@ (8003a30 <_printf_i+0x234>)
 80038d0:	e011      	b.n	80038f6 <_printf_i+0xfa>
 80038d2:	6821      	ldr	r1, [r4, #0]
 80038d4:	6833      	ldr	r3, [r6, #0]
 80038d6:	0608      	lsls	r0, r1, #24
 80038d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80038dc:	d402      	bmi.n	80038e4 <_printf_i+0xe8>
 80038de:	0649      	lsls	r1, r1, #25
 80038e0:	bf48      	it	mi
 80038e2:	b2ad      	uxthmi	r5, r5
 80038e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80038e6:	6033      	str	r3, [r6, #0]
 80038e8:	bf14      	ite	ne
 80038ea:	230a      	movne	r3, #10
 80038ec:	2308      	moveq	r3, #8
 80038ee:	4850      	ldr	r0, [pc, #320]	@ (8003a30 <_printf_i+0x234>)
 80038f0:	2100      	movs	r1, #0
 80038f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038f6:	6866      	ldr	r6, [r4, #4]
 80038f8:	2e00      	cmp	r6, #0
 80038fa:	60a6      	str	r6, [r4, #8]
 80038fc:	db05      	blt.n	800390a <_printf_i+0x10e>
 80038fe:	6821      	ldr	r1, [r4, #0]
 8003900:	432e      	orrs	r6, r5
 8003902:	f021 0104 	bic.w	r1, r1, #4
 8003906:	6021      	str	r1, [r4, #0]
 8003908:	d04b      	beq.n	80039a2 <_printf_i+0x1a6>
 800390a:	4616      	mov	r6, r2
 800390c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003910:	fb03 5711 	mls	r7, r3, r1, r5
 8003914:	5dc7      	ldrb	r7, [r0, r7]
 8003916:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800391a:	462f      	mov	r7, r5
 800391c:	42bb      	cmp	r3, r7
 800391e:	460d      	mov	r5, r1
 8003920:	d9f4      	bls.n	800390c <_printf_i+0x110>
 8003922:	2b08      	cmp	r3, #8
 8003924:	d10b      	bne.n	800393e <_printf_i+0x142>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	07df      	lsls	r7, r3, #31
 800392a:	d508      	bpl.n	800393e <_printf_i+0x142>
 800392c:	6923      	ldr	r3, [r4, #16]
 800392e:	6861      	ldr	r1, [r4, #4]
 8003930:	4299      	cmp	r1, r3
 8003932:	bfde      	ittt	le
 8003934:	2330      	movle	r3, #48	@ 0x30
 8003936:	f806 3c01 	strble.w	r3, [r6, #-1]
 800393a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800393e:	1b92      	subs	r2, r2, r6
 8003940:	6122      	str	r2, [r4, #16]
 8003942:	464b      	mov	r3, r9
 8003944:	4621      	mov	r1, r4
 8003946:	4640      	mov	r0, r8
 8003948:	f8cd a000 	str.w	sl, [sp]
 800394c:	aa03      	add	r2, sp, #12
 800394e:	f7ff fee3 	bl	8003718 <_printf_common>
 8003952:	3001      	adds	r0, #1
 8003954:	d14a      	bne.n	80039ec <_printf_i+0x1f0>
 8003956:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800395a:	b004      	add	sp, #16
 800395c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	f043 0320 	orr.w	r3, r3, #32
 8003966:	6023      	str	r3, [r4, #0]
 8003968:	2778      	movs	r7, #120	@ 0x78
 800396a:	4832      	ldr	r0, [pc, #200]	@ (8003a34 <_printf_i+0x238>)
 800396c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	6831      	ldr	r1, [r6, #0]
 8003974:	061f      	lsls	r7, r3, #24
 8003976:	f851 5b04 	ldr.w	r5, [r1], #4
 800397a:	d402      	bmi.n	8003982 <_printf_i+0x186>
 800397c:	065f      	lsls	r7, r3, #25
 800397e:	bf48      	it	mi
 8003980:	b2ad      	uxthmi	r5, r5
 8003982:	6031      	str	r1, [r6, #0]
 8003984:	07d9      	lsls	r1, r3, #31
 8003986:	bf44      	itt	mi
 8003988:	f043 0320 	orrmi.w	r3, r3, #32
 800398c:	6023      	strmi	r3, [r4, #0]
 800398e:	b11d      	cbz	r5, 8003998 <_printf_i+0x19c>
 8003990:	2310      	movs	r3, #16
 8003992:	e7ad      	b.n	80038f0 <_printf_i+0xf4>
 8003994:	4826      	ldr	r0, [pc, #152]	@ (8003a30 <_printf_i+0x234>)
 8003996:	e7e9      	b.n	800396c <_printf_i+0x170>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	f023 0320 	bic.w	r3, r3, #32
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	e7f6      	b.n	8003990 <_printf_i+0x194>
 80039a2:	4616      	mov	r6, r2
 80039a4:	e7bd      	b.n	8003922 <_printf_i+0x126>
 80039a6:	6833      	ldr	r3, [r6, #0]
 80039a8:	6825      	ldr	r5, [r4, #0]
 80039aa:	1d18      	adds	r0, r3, #4
 80039ac:	6961      	ldr	r1, [r4, #20]
 80039ae:	6030      	str	r0, [r6, #0]
 80039b0:	062e      	lsls	r6, r5, #24
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	d501      	bpl.n	80039ba <_printf_i+0x1be>
 80039b6:	6019      	str	r1, [r3, #0]
 80039b8:	e002      	b.n	80039c0 <_printf_i+0x1c4>
 80039ba:	0668      	lsls	r0, r5, #25
 80039bc:	d5fb      	bpl.n	80039b6 <_printf_i+0x1ba>
 80039be:	8019      	strh	r1, [r3, #0]
 80039c0:	2300      	movs	r3, #0
 80039c2:	4616      	mov	r6, r2
 80039c4:	6123      	str	r3, [r4, #16]
 80039c6:	e7bc      	b.n	8003942 <_printf_i+0x146>
 80039c8:	6833      	ldr	r3, [r6, #0]
 80039ca:	2100      	movs	r1, #0
 80039cc:	1d1a      	adds	r2, r3, #4
 80039ce:	6032      	str	r2, [r6, #0]
 80039d0:	681e      	ldr	r6, [r3, #0]
 80039d2:	6862      	ldr	r2, [r4, #4]
 80039d4:	4630      	mov	r0, r6
 80039d6:	f000 f97d 	bl	8003cd4 <memchr>
 80039da:	b108      	cbz	r0, 80039e0 <_printf_i+0x1e4>
 80039dc:	1b80      	subs	r0, r0, r6
 80039de:	6060      	str	r0, [r4, #4]
 80039e0:	6863      	ldr	r3, [r4, #4]
 80039e2:	6123      	str	r3, [r4, #16]
 80039e4:	2300      	movs	r3, #0
 80039e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039ea:	e7aa      	b.n	8003942 <_printf_i+0x146>
 80039ec:	4632      	mov	r2, r6
 80039ee:	4649      	mov	r1, r9
 80039f0:	4640      	mov	r0, r8
 80039f2:	6923      	ldr	r3, [r4, #16]
 80039f4:	47d0      	blx	sl
 80039f6:	3001      	adds	r0, #1
 80039f8:	d0ad      	beq.n	8003956 <_printf_i+0x15a>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	079b      	lsls	r3, r3, #30
 80039fe:	d413      	bmi.n	8003a28 <_printf_i+0x22c>
 8003a00:	68e0      	ldr	r0, [r4, #12]
 8003a02:	9b03      	ldr	r3, [sp, #12]
 8003a04:	4298      	cmp	r0, r3
 8003a06:	bfb8      	it	lt
 8003a08:	4618      	movlt	r0, r3
 8003a0a:	e7a6      	b.n	800395a <_printf_i+0x15e>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	4632      	mov	r2, r6
 8003a10:	4649      	mov	r1, r9
 8003a12:	4640      	mov	r0, r8
 8003a14:	47d0      	blx	sl
 8003a16:	3001      	adds	r0, #1
 8003a18:	d09d      	beq.n	8003956 <_printf_i+0x15a>
 8003a1a:	3501      	adds	r5, #1
 8003a1c:	68e3      	ldr	r3, [r4, #12]
 8003a1e:	9903      	ldr	r1, [sp, #12]
 8003a20:	1a5b      	subs	r3, r3, r1
 8003a22:	42ab      	cmp	r3, r5
 8003a24:	dcf2      	bgt.n	8003a0c <_printf_i+0x210>
 8003a26:	e7eb      	b.n	8003a00 <_printf_i+0x204>
 8003a28:	2500      	movs	r5, #0
 8003a2a:	f104 0619 	add.w	r6, r4, #25
 8003a2e:	e7f5      	b.n	8003a1c <_printf_i+0x220>
 8003a30:	08003f66 	.word	0x08003f66
 8003a34:	08003f77 	.word	0x08003f77

08003a38 <__sflush_r>:
 8003a38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3e:	0716      	lsls	r6, r2, #28
 8003a40:	4605      	mov	r5, r0
 8003a42:	460c      	mov	r4, r1
 8003a44:	d454      	bmi.n	8003af0 <__sflush_r+0xb8>
 8003a46:	684b      	ldr	r3, [r1, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	dc02      	bgt.n	8003a52 <__sflush_r+0x1a>
 8003a4c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	dd48      	ble.n	8003ae4 <__sflush_r+0xac>
 8003a52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a54:	2e00      	cmp	r6, #0
 8003a56:	d045      	beq.n	8003ae4 <__sflush_r+0xac>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a5e:	682f      	ldr	r7, [r5, #0]
 8003a60:	6a21      	ldr	r1, [r4, #32]
 8003a62:	602b      	str	r3, [r5, #0]
 8003a64:	d030      	beq.n	8003ac8 <__sflush_r+0x90>
 8003a66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a68:	89a3      	ldrh	r3, [r4, #12]
 8003a6a:	0759      	lsls	r1, r3, #29
 8003a6c:	d505      	bpl.n	8003a7a <__sflush_r+0x42>
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	1ad2      	subs	r2, r2, r3
 8003a72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a74:	b10b      	cbz	r3, 8003a7a <__sflush_r+0x42>
 8003a76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a78:	1ad2      	subs	r2, r2, r3
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a80:	6a21      	ldr	r1, [r4, #32]
 8003a82:	47b0      	blx	r6
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	89a3      	ldrh	r3, [r4, #12]
 8003a88:	d106      	bne.n	8003a98 <__sflush_r+0x60>
 8003a8a:	6829      	ldr	r1, [r5, #0]
 8003a8c:	291d      	cmp	r1, #29
 8003a8e:	d82b      	bhi.n	8003ae8 <__sflush_r+0xb0>
 8003a90:	4a28      	ldr	r2, [pc, #160]	@ (8003b34 <__sflush_r+0xfc>)
 8003a92:	40ca      	lsrs	r2, r1
 8003a94:	07d6      	lsls	r6, r2, #31
 8003a96:	d527      	bpl.n	8003ae8 <__sflush_r+0xb0>
 8003a98:	2200      	movs	r2, #0
 8003a9a:	6062      	str	r2, [r4, #4]
 8003a9c:	6922      	ldr	r2, [r4, #16]
 8003a9e:	04d9      	lsls	r1, r3, #19
 8003aa0:	6022      	str	r2, [r4, #0]
 8003aa2:	d504      	bpl.n	8003aae <__sflush_r+0x76>
 8003aa4:	1c42      	adds	r2, r0, #1
 8003aa6:	d101      	bne.n	8003aac <__sflush_r+0x74>
 8003aa8:	682b      	ldr	r3, [r5, #0]
 8003aaa:	b903      	cbnz	r3, 8003aae <__sflush_r+0x76>
 8003aac:	6560      	str	r0, [r4, #84]	@ 0x54
 8003aae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ab0:	602f      	str	r7, [r5, #0]
 8003ab2:	b1b9      	cbz	r1, 8003ae4 <__sflush_r+0xac>
 8003ab4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ab8:	4299      	cmp	r1, r3
 8003aba:	d002      	beq.n	8003ac2 <__sflush_r+0x8a>
 8003abc:	4628      	mov	r0, r5
 8003abe:	f7ff fbed 	bl	800329c <_free_r>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ac6:	e00d      	b.n	8003ae4 <__sflush_r+0xac>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	4628      	mov	r0, r5
 8003acc:	47b0      	blx	r6
 8003ace:	4602      	mov	r2, r0
 8003ad0:	1c50      	adds	r0, r2, #1
 8003ad2:	d1c9      	bne.n	8003a68 <__sflush_r+0x30>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0c6      	beq.n	8003a68 <__sflush_r+0x30>
 8003ada:	2b1d      	cmp	r3, #29
 8003adc:	d001      	beq.n	8003ae2 <__sflush_r+0xaa>
 8003ade:	2b16      	cmp	r3, #22
 8003ae0:	d11d      	bne.n	8003b1e <__sflush_r+0xe6>
 8003ae2:	602f      	str	r7, [r5, #0]
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	e021      	b.n	8003b2c <__sflush_r+0xf4>
 8003ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aec:	b21b      	sxth	r3, r3
 8003aee:	e01a      	b.n	8003b26 <__sflush_r+0xee>
 8003af0:	690f      	ldr	r7, [r1, #16]
 8003af2:	2f00      	cmp	r7, #0
 8003af4:	d0f6      	beq.n	8003ae4 <__sflush_r+0xac>
 8003af6:	0793      	lsls	r3, r2, #30
 8003af8:	bf18      	it	ne
 8003afa:	2300      	movne	r3, #0
 8003afc:	680e      	ldr	r6, [r1, #0]
 8003afe:	bf08      	it	eq
 8003b00:	694b      	ldreq	r3, [r1, #20]
 8003b02:	1bf6      	subs	r6, r6, r7
 8003b04:	600f      	str	r7, [r1, #0]
 8003b06:	608b      	str	r3, [r1, #8]
 8003b08:	2e00      	cmp	r6, #0
 8003b0a:	ddeb      	ble.n	8003ae4 <__sflush_r+0xac>
 8003b0c:	4633      	mov	r3, r6
 8003b0e:	463a      	mov	r2, r7
 8003b10:	4628      	mov	r0, r5
 8003b12:	6a21      	ldr	r1, [r4, #32]
 8003b14:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003b18:	47e0      	blx	ip
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	dc07      	bgt.n	8003b2e <__sflush_r+0xf6>
 8003b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b2a:	81a3      	strh	r3, [r4, #12]
 8003b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b2e:	4407      	add	r7, r0
 8003b30:	1a36      	subs	r6, r6, r0
 8003b32:	e7e9      	b.n	8003b08 <__sflush_r+0xd0>
 8003b34:	20400001 	.word	0x20400001

08003b38 <_fflush_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	690b      	ldr	r3, [r1, #16]
 8003b3c:	4605      	mov	r5, r0
 8003b3e:	460c      	mov	r4, r1
 8003b40:	b913      	cbnz	r3, 8003b48 <_fflush_r+0x10>
 8003b42:	2500      	movs	r5, #0
 8003b44:	4628      	mov	r0, r5
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
 8003b48:	b118      	cbz	r0, 8003b52 <_fflush_r+0x1a>
 8003b4a:	6a03      	ldr	r3, [r0, #32]
 8003b4c:	b90b      	cbnz	r3, 8003b52 <_fflush_r+0x1a>
 8003b4e:	f7ff f98d 	bl	8002e6c <__sinit>
 8003b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f3      	beq.n	8003b42 <_fflush_r+0xa>
 8003b5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b5c:	07d0      	lsls	r0, r2, #31
 8003b5e:	d404      	bmi.n	8003b6a <_fflush_r+0x32>
 8003b60:	0599      	lsls	r1, r3, #22
 8003b62:	d402      	bmi.n	8003b6a <_fflush_r+0x32>
 8003b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b66:	f7ff fb78 	bl	800325a <__retarget_lock_acquire_recursive>
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	f7ff ff63 	bl	8003a38 <__sflush_r>
 8003b72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b74:	4605      	mov	r5, r0
 8003b76:	07da      	lsls	r2, r3, #31
 8003b78:	d4e4      	bmi.n	8003b44 <_fflush_r+0xc>
 8003b7a:	89a3      	ldrh	r3, [r4, #12]
 8003b7c:	059b      	lsls	r3, r3, #22
 8003b7e:	d4e1      	bmi.n	8003b44 <_fflush_r+0xc>
 8003b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b82:	f7ff fb6b 	bl	800325c <__retarget_lock_release_recursive>
 8003b86:	e7dd      	b.n	8003b44 <_fflush_r+0xc>

08003b88 <fiprintf>:
 8003b88:	b40e      	push	{r1, r2, r3}
 8003b8a:	b503      	push	{r0, r1, lr}
 8003b8c:	4601      	mov	r1, r0
 8003b8e:	ab03      	add	r3, sp, #12
 8003b90:	4805      	ldr	r0, [pc, #20]	@ (8003ba8 <fiprintf+0x20>)
 8003b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b96:	6800      	ldr	r0, [r0, #0]
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	f7ff fca5 	bl	80034e8 <_vfiprintf_r>
 8003b9e:	b002      	add	sp, #8
 8003ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ba4:	b003      	add	sp, #12
 8003ba6:	4770      	bx	lr
 8003ba8:	20000204 	.word	0x20000204

08003bac <__swhatbuf_r>:
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	460c      	mov	r4, r1
 8003bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb4:	4615      	mov	r5, r2
 8003bb6:	2900      	cmp	r1, #0
 8003bb8:	461e      	mov	r6, r3
 8003bba:	b096      	sub	sp, #88	@ 0x58
 8003bbc:	da0c      	bge.n	8003bd8 <__swhatbuf_r+0x2c>
 8003bbe:	89a3      	ldrh	r3, [r4, #12]
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003bc6:	bf14      	ite	ne
 8003bc8:	2340      	movne	r3, #64	@ 0x40
 8003bca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003bce:	2000      	movs	r0, #0
 8003bd0:	6031      	str	r1, [r6, #0]
 8003bd2:	602b      	str	r3, [r5, #0]
 8003bd4:	b016      	add	sp, #88	@ 0x58
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	466a      	mov	r2, sp
 8003bda:	f000 f849 	bl	8003c70 <_fstat_r>
 8003bde:	2800      	cmp	r0, #0
 8003be0:	dbed      	blt.n	8003bbe <__swhatbuf_r+0x12>
 8003be2:	9901      	ldr	r1, [sp, #4]
 8003be4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003be8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003bec:	4259      	negs	r1, r3
 8003bee:	4159      	adcs	r1, r3
 8003bf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bf4:	e7eb      	b.n	8003bce <__swhatbuf_r+0x22>

08003bf6 <__smakebuf_r>:
 8003bf6:	898b      	ldrh	r3, [r1, #12]
 8003bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bfa:	079d      	lsls	r5, r3, #30
 8003bfc:	4606      	mov	r6, r0
 8003bfe:	460c      	mov	r4, r1
 8003c00:	d507      	bpl.n	8003c12 <__smakebuf_r+0x1c>
 8003c02:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003c06:	6023      	str	r3, [r4, #0]
 8003c08:	6123      	str	r3, [r4, #16]
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	6163      	str	r3, [r4, #20]
 8003c0e:	b003      	add	sp, #12
 8003c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c12:	466a      	mov	r2, sp
 8003c14:	ab01      	add	r3, sp, #4
 8003c16:	f7ff ffc9 	bl	8003bac <__swhatbuf_r>
 8003c1a:	9f00      	ldr	r7, [sp, #0]
 8003c1c:	4605      	mov	r5, r0
 8003c1e:	4639      	mov	r1, r7
 8003c20:	4630      	mov	r0, r6
 8003c22:	f7ff fbad 	bl	8003380 <_malloc_r>
 8003c26:	b948      	cbnz	r0, 8003c3c <__smakebuf_r+0x46>
 8003c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c2c:	059a      	lsls	r2, r3, #22
 8003c2e:	d4ee      	bmi.n	8003c0e <__smakebuf_r+0x18>
 8003c30:	f023 0303 	bic.w	r3, r3, #3
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	81a3      	strh	r3, [r4, #12]
 8003c3a:	e7e2      	b.n	8003c02 <__smakebuf_r+0xc>
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c46:	81a3      	strh	r3, [r4, #12]
 8003c48:	9b01      	ldr	r3, [sp, #4]
 8003c4a:	6020      	str	r0, [r4, #0]
 8003c4c:	b15b      	cbz	r3, 8003c66 <__smakebuf_r+0x70>
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c54:	f000 f81e 	bl	8003c94 <_isatty_r>
 8003c58:	b128      	cbz	r0, 8003c66 <__smakebuf_r+0x70>
 8003c5a:	89a3      	ldrh	r3, [r4, #12]
 8003c5c:	f023 0303 	bic.w	r3, r3, #3
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	81a3      	strh	r3, [r4, #12]
 8003c66:	89a3      	ldrh	r3, [r4, #12]
 8003c68:	431d      	orrs	r5, r3
 8003c6a:	81a5      	strh	r5, [r4, #12]
 8003c6c:	e7cf      	b.n	8003c0e <__smakebuf_r+0x18>
	...

08003c70 <_fstat_r>:
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	2300      	movs	r3, #0
 8003c74:	4d06      	ldr	r5, [pc, #24]	@ (8003c90 <_fstat_r+0x20>)
 8003c76:	4604      	mov	r4, r0
 8003c78:	4608      	mov	r0, r1
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	602b      	str	r3, [r5, #0]
 8003c7e:	f7fd f867 	bl	8000d50 <_fstat>
 8003c82:	1c43      	adds	r3, r0, #1
 8003c84:	d102      	bne.n	8003c8c <_fstat_r+0x1c>
 8003c86:	682b      	ldr	r3, [r5, #0]
 8003c88:	b103      	cbz	r3, 8003c8c <_fstat_r+0x1c>
 8003c8a:	6023      	str	r3, [r4, #0]
 8003c8c:	bd38      	pop	{r3, r4, r5, pc}
 8003c8e:	bf00      	nop
 8003c90:	200005a8 	.word	0x200005a8

08003c94 <_isatty_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	2300      	movs	r3, #0
 8003c98:	4d05      	ldr	r5, [pc, #20]	@ (8003cb0 <_isatty_r+0x1c>)
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	602b      	str	r3, [r5, #0]
 8003ca0:	f7fd f865 	bl	8000d6e <_isatty>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d102      	bne.n	8003cae <_isatty_r+0x1a>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	b103      	cbz	r3, 8003cae <_isatty_r+0x1a>
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	200005a8 	.word	0x200005a8

08003cb4 <_sbrk_r>:
 8003cb4:	b538      	push	{r3, r4, r5, lr}
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	4d05      	ldr	r5, [pc, #20]	@ (8003cd0 <_sbrk_r+0x1c>)
 8003cba:	4604      	mov	r4, r0
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	602b      	str	r3, [r5, #0]
 8003cc0:	f7fd f86c 	bl	8000d9c <_sbrk>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	d102      	bne.n	8003cce <_sbrk_r+0x1a>
 8003cc8:	682b      	ldr	r3, [r5, #0]
 8003cca:	b103      	cbz	r3, 8003cce <_sbrk_r+0x1a>
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	bd38      	pop	{r3, r4, r5, pc}
 8003cd0:	200005a8 	.word	0x200005a8

08003cd4 <memchr>:
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	b510      	push	{r4, lr}
 8003cd8:	b2c9      	uxtb	r1, r1
 8003cda:	4402      	add	r2, r0
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	d101      	bne.n	8003ce6 <memchr+0x12>
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	e003      	b.n	8003cee <memchr+0x1a>
 8003ce6:	7804      	ldrb	r4, [r0, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	428c      	cmp	r4, r1
 8003cec:	d1f6      	bne.n	8003cdc <memchr+0x8>
 8003cee:	bd10      	pop	{r4, pc}

08003cf0 <abort>:
 8003cf0:	2006      	movs	r0, #6
 8003cf2:	b508      	push	{r3, lr}
 8003cf4:	f000 f82c 	bl	8003d50 <raise>
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f7fc ffda 	bl	8000cb2 <_exit>

08003cfe <_raise_r>:
 8003cfe:	291f      	cmp	r1, #31
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4605      	mov	r5, r0
 8003d04:	460c      	mov	r4, r1
 8003d06:	d904      	bls.n	8003d12 <_raise_r+0x14>
 8003d08:	2316      	movs	r3, #22
 8003d0a:	6003      	str	r3, [r0, #0]
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d10:	bd38      	pop	{r3, r4, r5, pc}
 8003d12:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003d14:	b112      	cbz	r2, 8003d1c <_raise_r+0x1e>
 8003d16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d1a:	b94b      	cbnz	r3, 8003d30 <_raise_r+0x32>
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	f000 f831 	bl	8003d84 <_getpid_r>
 8003d22:	4622      	mov	r2, r4
 8003d24:	4601      	mov	r1, r0
 8003d26:	4628      	mov	r0, r5
 8003d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d2c:	f000 b818 	b.w	8003d60 <_kill_r>
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d00a      	beq.n	8003d4a <_raise_r+0x4c>
 8003d34:	1c59      	adds	r1, r3, #1
 8003d36:	d103      	bne.n	8003d40 <_raise_r+0x42>
 8003d38:	2316      	movs	r3, #22
 8003d3a:	6003      	str	r3, [r0, #0]
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	e7e7      	b.n	8003d10 <_raise_r+0x12>
 8003d40:	2100      	movs	r1, #0
 8003d42:	4620      	mov	r0, r4
 8003d44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003d48:	4798      	blx	r3
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	e7e0      	b.n	8003d10 <_raise_r+0x12>
	...

08003d50 <raise>:
 8003d50:	4b02      	ldr	r3, [pc, #8]	@ (8003d5c <raise+0xc>)
 8003d52:	4601      	mov	r1, r0
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	f7ff bfd2 	b.w	8003cfe <_raise_r>
 8003d5a:	bf00      	nop
 8003d5c:	20000204 	.word	0x20000204

08003d60 <_kill_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	2300      	movs	r3, #0
 8003d64:	4d06      	ldr	r5, [pc, #24]	@ (8003d80 <_kill_r+0x20>)
 8003d66:	4604      	mov	r4, r0
 8003d68:	4608      	mov	r0, r1
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	602b      	str	r3, [r5, #0]
 8003d6e:	f7fc ff90 	bl	8000c92 <_kill>
 8003d72:	1c43      	adds	r3, r0, #1
 8003d74:	d102      	bne.n	8003d7c <_kill_r+0x1c>
 8003d76:	682b      	ldr	r3, [r5, #0]
 8003d78:	b103      	cbz	r3, 8003d7c <_kill_r+0x1c>
 8003d7a:	6023      	str	r3, [r4, #0]
 8003d7c:	bd38      	pop	{r3, r4, r5, pc}
 8003d7e:	bf00      	nop
 8003d80:	200005a8 	.word	0x200005a8

08003d84 <_getpid_r>:
 8003d84:	f7fc bf7e 	b.w	8000c84 <_getpid>

08003d88 <_init>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr

08003d94 <_fini>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr
